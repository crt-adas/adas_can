
// this file were genereted by coderdbc.com web service
// any questions - mailto:coderdbc@gmail.com

#pragma once


#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>

// def @AT1DPFSSC CAN Message (9764606)
#define AT1DPFSSC_IDE (1U)
#define AT1DPFSSC_DLC (8U)
#define AT1DPFSSC_CANID (0x94FEFEU)
// -- Aftertreatment 1 Diesel Particulate Filter Soot Sensor Calibration  The purpose of this PGN is to group the Aftertreatment 1 DPF soot measurement calibration parameters. These values include soot sensor signal mean and standard deviation calibration ...
// signal: @MeanCalOffset
#define MeanCalOffset_CovFactor 0.0025
#define MeanCalOffset_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @StdDeviationCalOffset
#define StdDeviationCalOffset_CovFactor 0.0025
#define StdDeviationCalOffset_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // Calibration offset for the soot Mean for Aftertreatment 1 Diesel Particulate Filter soot sensor.
  uint16_t MeanCalOffset;                //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Calibration offset for the soot standard deviation for Aftertreatment 1 Diesel Particulate Filter soot sensor.
  uint16_t StdDeviationCalOffset;        //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} AT1DPFSSC_t;

// def @AT2DPFSSC CAN Message (9830142)
#define AT2DPFSSC_IDE (1U)
#define AT2DPFSSC_DLC (8U)
#define AT2DPFSSC_CANID (0x95FEFEU)
// -- Aftertreatment 2 Diesel Particulate Filter Soot Sensor Calibration  The purpose of this PGN is to group the Aftertreatment 2 DPF soot measurement calibration parameters. These values include soot sensor signal mean and standard deviation calibration ...
// signal: @MeanCalOffset
#define MeanCalOffset_CovFactor 0.0025
#define MeanCalOffset_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @StdDeviationCalOffset
#define StdDeviationCalOffset_CovFactor 0.0025
#define StdDeviationCalOffset_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // Calibration offset for the soot Mean for Aftertreatment 2 Diesel Particulate Filter soot sensor.
  uint16_t MeanCalOffset;                //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Calibration offset for the soot standard deviation for Aftertreatment 2 Diesel Particulate Filter soot sensor.
  uint16_t StdDeviationCalOffset;        //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} AT2DPFSSC_t;

// def @CN CAN Message (15739902)
#define CN_IDE (1U)
#define CN_DLC (8U)
#define CN_CANID (0xF02BFEU)
#define CN_CYC (20U)
// -- Crash Notification  This message is transmitted in case of a crash event.  The message contains information about the Crash Type, a Crash Counter and a Checksum. The function of the Crash Counter is to prevent other ECU's from reacting to a faulty ...
typedef struct
{

  // Type of crash event.     00001 = frontal crash  00010 = rear crash  00100 = side crash (left)  01000 = side crash (right)  10000 = rollover    It is possible to combine different Crash Types. (e.g. frontal and side crash (left) = 00101)
  // 16 - "rollover" 
  // 8 - "side crash, right)" 
  // 4 - "side crash, left)" 
  // 2 - "rear crash" 
  // 1 - "frontal crash" 

  uint8_t CrashType;                     //      Bits=05.  [ 0     , 0      ]  Unit:''     

  uint8_t CrashCounter;                  //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The Crash Checksum is used to verify the signal path from the airbag ECU to other devices in case of a crash.  The 4 bit checksum is the sum of the high nibble and the low nibble of the sum of the identifier, the first 7 data bytes and the 4 bit ...
  uint8_t CrashChecksum;                 //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} CN_t;

// def @A2SCRSI1 CAN Message (16594942)
#define A2SCRSI1_IDE (1U)
#define A2SCRSI1_DLC (8U)
#define A2SCRSI1_CANID (0xFD37FEU)
// -- Aftertreatment 2 SCR Service Information 1  This message contains SCR service information for aftertreatment system 2 (or bank 2).
// signal: @DEFAvgConsumption
#define DEFAvgConsumption_CovFactor 0.05
#define DEFAvgConsumption_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @CommandedDEFConsumption
#define CommandedDEFConsumption_CovFactor 0.05
#define CommandedDEFConsumption_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @ConversionEfficiency
#define ConversionEfficiency_CovFactor 0.4
#define ConversionEfficiency_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Measured use of diesel exhaust fluid by a Selective Catalytic Reduction system for exhaust emission control, averaged over the previous 15 hours of engine operation.  Used to determine whether the SCR system is using an appropriate amount of diesel ...
  uint16_t DEFAvgConsumption;            //      Bits=16.  [ 0     , 3212.75 ]  Unit:'L/h'   Factor= 0.05  

  // This parameter transmits the amount of diesel exhaust fluid that the emissions control system has requested to be used, averaged over the past 15 hours of engine operation.  Used to determine whether the SCR system is using an appropriate amount of ...
  uint16_t CommandedDEFConsumption;      //      Bits=16.  [ 0     , 3212.75 ]  Unit:'L/h'   Factor= 0.05  

  // The SCR conversion efficiency percentage.  Calculated as 100 times the catalyst intake NOx minus the catalyst outlet NOx divided by the catalyst intake NOx.  The catalyst conversion efficiency number in itself does not imply emissions compliance or ...
  uint8_t ConversionEfficiency;          //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} A2SCRSI1_t;

// def @A2SCRDSR2 CAN Message (16595710)
#define A2SCRDSR2_IDE (1U)
#define A2SCRDSR2_DLC (8U)
#define A2SCRDSR2_CANID (0xFD3AFEU)
#define A2SCRDSR2_CYC (500U)
// -- Aftertreatment 2 SCR Dosing System Requests 2  This message contains SCR dosing system request information for aftertreatment system 2 (or bank 2).
// signal: @DEFTankHtrCmd
#define DEFTankHtrCmd_CovFactor 0.4
#define DEFTankHtrCmd_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DEFQuickThawHtrCmd
#define DEFQuickThawHtrCmd_CovFactor 0.4
#define DEFQuickThawHtrCmd_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Used if external devices can warn of conditions that require suppression of potential faults in the doser due to environmental conditions.    00    Error suppression off  01    Error suppression on  10    Reserved  11    Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Error suppression on" 
  // 0 - "Error suppression off" 

  uint8_t DEFDoserFaultSuppressionReq;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used if multiple heater modes are available in the Doser.    000   Heater off  001   Heater economy mode  010   Heater automatic mode  011   Heater on  100 - 110    Reserved  111   Not available
  // 7 - "Not available" 
  // 3 - "Heater on" 
  // 2 - "Heater automatic mode" 
  // 1 - "Heater economy mode" 
  // 0 - "Heater off" 

  uint8_t DEFDoserHeatingModeReq;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The diesel exhaust fluid line heater 1 request for aftertreatment system 2 (exhaust bank 2).     00 request for heater to be inactive   01 request for heater to be active   10 reserved for future assignment by SAE   11 not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE " 
  // 1 - "request for heater to be active " 
  // 0 - "request for heater to be inactive " 

  uint8_t DEFLineHtr1;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 2 request for aftertreatment system 2 (exhaust bank 2).     00 request for heater to be inactive   01 request for heater to be active   10 reserved for future assignment by SAE   11 not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE " 
  // 1 - "request for heater to be active " 
  // 0 - "request for heater to be inactive " 

  uint8_t DEFLineHtr2;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 3 request for aftertreatment system 2 (exhaust bank 2).     00 request for heater to be inactive   01 request for heater to be active   10 reserved for future assignment by SAE   11 not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE " 
  // 1 - "request for heater to be active " 
  // 0 - "request for heater to be inactive " 

  uint8_t DEFLineHtr3;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 4 request for aftertreatment system 2 (exhaust bank 2).      00 request for heater to be inactive   01 request for heater to be active   10 reserved for future assignment by SAE   11 not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE " 
  // 1 - "request for heater to be active " 
  // 0 - "request for heater to be inactive " 

  uint8_t DEFLineHtr4;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command for the Aftertreatment 2 Diesel Exhaust Fluid Tank Heater.  A value of 0% means no heating applied, a value of 100% means full heating applied.  See SPN 4431 for the measured value of the Aftertreatment 2 Diesel Exhaust Fluid Tank Heater.
  uint8_t DEFTankHtrCmd;                 //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The command for the heater of the diesel exhaust fluid quick thaw tank for aftertreatment system 2 (exhaust bank 2).  See SPN 4438 for the measured heater percentage for the heater of this same tank.
  uint8_t DEFQuickThawHtrCmd;            //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The aftertreatment system 2 diesel exhaust fluid line heater relay 1 is used to energize one or more DEF line heaters.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t DEFLineHtrRelay1;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The aftertreatment system 2 diesel exhaust fluid line heater relay 2 is used to energize one or more DEF line heaters.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t DEFLineHtrRelay2;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The aftertreatment system 2 diesel exhaust fluid line heater relay 3 is used to energize one or more DEF line heaters.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t DEFLineHtrRelay3;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the diesel exhaust fluid line heater 5 request for aftertreatment system 2 (exhaust bank 2).    00 request for heater to be inactive   01 request for heater to be active   10 reserved for future assignment by SAE   11 not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE " 
  // 1 - "request for heater to be active " 
  // 0 - "request for heater to be inactive " 

  uint8_t DEFLineHtr5;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 6 request for aftertreatment system 2 (exhaust bank 2).    00 = request for heater to be inactive  01 = request for heater to be active  10 = reserved for future assignment by SAE  11 = not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE" 
  // 1 - "request for heater to be active" 
  // 0 - "request for heater to be inactive" 

  uint8_t DEFLineHtr6;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 7 request for aftertreatment system 2 (exhaust bank 2).    00 = request for heater to be inactive  01 = request for heater to be active  10 = reserved for future assignment by SAE  11 = not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE" 
  // 1 - "request for heater to be active" 
  // 0 - "request for heater to be inactive" 

  uint8_t DEFLineHtr7;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 8 request for aftertreatment system 2 (exhaust bank 2).    00 = request for heater to be inactive  01 = request for heater to be active  10 = reserved for future assignment by SAE  11 = not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE" 
  // 1 - "request for heater to be active" 
  // 0 - "request for heater to be inactive" 

  uint8_t DEFLineHtr8;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 9 request for aftertreatment system 2 (exhaust bank 2).    00 = request for heater to be inactive  01 = request for heater to be active  10 = reserved for future assignment by SAE  11 = not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE" 
  // 1 - "request for heater to be active" 
  // 0 - "request for heater to be inactive" 

  uint8_t DEFLineHtr9;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 10 request for aftertreatment system 2 (exhaust bank 2).    00 = request for heater to be inactive  01 = request for heater to be active  10 = reserved for future assignment by SAE  11 = not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE" 
  // 1 - "request for heater to be active" 
  // 0 - "request for heater to be inactive" 

  uint8_t DEFLineHtr10;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} A2SCRDSR2_t;

// def @WAND CAN Message (82850302)
#define WAND_IDE (1U)
#define WAND_DLC (8U)
#define WAND_CANID (0x4F031FEU)
#define WAND_CYC (20U)
// -- Wand Sensor  The wand sensor is an electromechanical sensor that detects the angle of deflection of a wand.
// signal: @WandAngle
#define WandAngle_CovFactor 0.002
#define WandAngle_CovS(x) ((int32_t)((x / 0.002) + 32000))
typedef struct
{

  // A wand sensor measures the angle of deflection of a wand from its null position. This parameter reports the measured angle of a wand sensor.
  int32_t WandAngle;                     //      Bits=16.  [ -64   , 64.51  ]  Unit:'deg'   Offset= -64       Factor= 0.002 

  // Figure of Merit sensor status for a wand sensor.    00    Sensor fully functional  01    Sensor degraded  10    Sensor failed  11    Sensor not available
  // 3 - "Sensor not available" 
  // 2 - "Sensor failed" 
  // 1 - "Sensor degraded" 
  // 0 - "Sensor fully functional" 

  uint8_t WandSensorFigureOfMerit;       //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} WAND_t;

// def @LDISP CAN Message (82850558)
#define LDISP_IDE (1U)
#define LDISP_DLC (8U)
#define LDISP_CANID (0x4F032FEU)
#define LDISP_CYC (20U)
// -- Linear Displacement Sensor  The Linear Displacement Sensor is an electromechanical sensor that detects the distance of an object from the body of the sensor.
// signal: @MeasuredLinearDisplacement
#define MeasuredLinearDisplacement_CovFactor 0.1
#define MeasuredLinearDisplacement_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Distance to target as measured by the Linear Displacement Sensor.
  uint16_t MeasuredLinearDisplacement;        //      Bits=16.  [ 0     , 6425.5 ]  Unit:'mm'    Factor= 0.1   

  // Figure of Merit sensor status of Linear Displacement Sensor.    00    Sensor fully functional  01    Sensor degraded  10    Sensor failed  11    Sensor not available
  // 3 - "Sensor not available" 
  // 2 - "Sensor failed" 
  // 1 - "Sensor degraded" 
  // 0 - "Sensor fully functional" 

  uint8_t LnrDsplcmntSnsrSnsrFigureOfMerit;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} LDISP_t;

// def @MSI2 CAN Message (149957886)
#define MSI2_IDE (1U)
#define MSI2_DLC (8U)
#define MSI2_CANID (0x8F02CFEU)
#define MSI2_CYC (50U)
// -- Magnet Status Information 2  This message carries data related to the status of the magnetic material handling system, possibly including the generator that provides power to the magnet.
typedef struct
{

  // The forward current being supplied by the generator to the electric magnet to create a magnet field to lift material.
  uint16_t MagnetForwardCurrent;              //      Bits=16.  [ 0     , 64255  ]  Unit:'A'    

  // A reverse current being supplied to the electric magnet to reduce the forward current generated magnet field as quick as possible so that the magnet can release material as fast as possible.
  uint8_t MagnetReverseCurrent;               //      Bits=08.  [ 0     , 250    ]  Unit:'A'    

  // This is a switch that can be used to enable the lift functionality of the Material Handler machine. When it is activated, the magnet is energized to pick up material.    00 = Don't Lift  01 = Lift  10 = Error  11 = Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Lift" 
  // 0 - "Don't Lift" 

  uint8_t MaterialLiftSwitch;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This is a switch that can be used to enable the drop functionality of the Material Handler machine.    00 = Don't Drop  01 = Drop  10 = Error  11 = Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Drop" 
  // 0 - "Don't Drop" 

  uint8_t MaterialDropSwitch;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t GneratorCurrentBoostActiveStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The status of Material Lift Relay. When it is on, the generator generates forward direction current so that the material handler machine can pick up material.    00 = Off  01 = On  10 = Error  11 = Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t MaterialLiftActiveStatus;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The status of Material Drop Relay. When it is on, the generator generates reverse direction current so that the material handler machine can release material.    00 = Off  01 = On  10 = Error  11 = Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t MaterialDropActiveStatus;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to Engage and Disengage the Lift Relay controlling a Steady-State Magnet.    00 = Off, Disable Lift Relay Request   01 = On, Enable Lift Relay Request  10 = Reserved  11 = Take No Action
  // 3 - "Take No Action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t LiftRelayCtrl;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to Engage and Disengage the Drop Relay controlling a Steady-State Magnet.    00 = Off, Disable Drop Relay Request  01 = On, Enable Drop Relay Request  10 = Reserved  11 = Take No Action
  // 3 - "Take No Action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t DropRelayCtrl;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to Enable and Disable the Generator controlling a Magnet.    00  Off, Disable Generator  01  On, Enable Generator  10  Reserved  11  Take No Action
  // 3 - "Take No Action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t MagnetGeneratorCtrl;                //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} MSI2_t;

// def @ACCS CAN Message (149958142)
#define ACCS_IDE (1U)
#define ACCS_DLC (8U)
#define ACCS_CANID (0x8F02DFEU)
#define ACCS_CYC (10U)
// -- Acceleration Sensor  The acceleration sensor message shall provide a measurement of the vehicle's acceleration in the lateral, longitudinal, and vertical axes.  The vehicle dynamics measurements in this message shall be according to a Z-Up axis ...
// signal: @LateralAccelerationExRange
#define LateralAccelerationExRange_CovFactor 0.01
#define LateralAccelerationExRange_CovS(x) ((int32_t)((x / 0.01) + 32000))
// signal: @LongitudinalAccelerationExRange
#define LongitudinalAccelerationExRange_CovFactor 0.01
#define LongitudinalAccelerationExRange_CovS(x) ((int32_t)((x / 0.01) + 32000))
// signal: @VerticalAccelerationExRange
#define VerticalAccelerationExRange_CovFactor 0.01
#define VerticalAccelerationExRange_CovS(x) ((int32_t)((x / 0.01) + 32000))
typedef struct
{

  // Indicates lateral acceleration of the vehicle (the component of vehicle acceleration vector along the Y-axis).  A positive lateral acceleration signal results when the vehicle is accelerated to the left.  This parameter is defined according to a ...
  int32_t LateralAccelerationExRange;         //      Bits=16.  [ -320  , 322.55 ]  Unit:'m/s?'  Offset= -320      Factor= 0.01  

  // Indicates longitudinal acceleration of the vehicle (the component of vehicle acceleration vector along the X-axis).  A positive longitudinal acceleration signal results when the vehicle speed increases in the forward direction.  Longitudinal ...
  int32_t LongitudinalAccelerationExRange;    //      Bits=16.  [ -320  , 322.55 ]  Unit:'m/s?'  Offset= -320      Factor= 0.01  

  // Indicates vertical acceleration of the vehicle and the effect of gravity (the component of vehicle acceleration vector along the Z-axis).  A positive vertical acceleration signal of 1 gravity results when the vehicle is stationary on a horizontal ...
  int32_t VerticalAccelerationExRange;        //      Bits=16.  [ -320  , 322.55 ]  Unit:'m/s?'  Offset= -320      Factor= 0.01  

  // Figure of merit for lateral acceleration measurement.  00 = lateral acceleration is fully functional.  Data is within sensor specification  01 = lateral acceleration is degraded.  Data is suspect due to enviromental conditions  10 = error  11 = not ...
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "lateral acceleration is degraded" 
  // 0 - "lateral acceleration is fully functional" 

  uint8_t LtrlAcclrtonExRangeFigureOfMerit;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Figure of merit for longitudinal acceleration measurement.  00 = longitudinal acceleration is fully functional.  Data is within sensor specification  01 = longitudinal acceleration is degraded.  Data is suspect due to enviromental conditions  10 = ...
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "longitudinal acceleration is degraded" 
  // 0 - "longitudinal acceleration is fully functional" 

  uint8_t LngtdnlAcclrtnExRngFigureOfMerit;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Figure of merit for vertical acceleration measurement.  00 = vertical acceleration is fully functional.  Data is within sensor specification  01 = verticalacceleration is degraded.  Data is suspect due to enviromental conditions  10 = error  11 = ...
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "verticalacceleration is degraded" 
  // 0 - "vertical acceleration is fully functional" 

  uint8_t VrtclAcclrtnExRangeFigureOfMerit;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates which acceleration transmission rate are supported by the ECU in addition to the required 10 ms transmission rate.  00 - Reserve for SAE assignment  01 - Reserved for SAE assignment  10 - 20 ms rate supported  11 - ECU only supports ...
  // 3 - "ECU only supports standard transmission rate of 10 ms" 
  // 2 - "20 ms rate supported" 
  // 1 - "Reserved for SAE assignment" 
  // 0 - "Reserve for SAE assignment" 

  uint8_t SpprtVrblTrnsRpttnRtFrAcclrtnSns;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} ACCS_t;

// def @ETC12 CAN Message (149971710)
#define ETC12_IDE (1U)
#define ETC12_DLC (8U)
#define ETC12_CANID (0x8F062FEU)
#define ETC12_CYC (10U)
// -- Electronic Transmission Controller #12  Electronic Transmission Controller #12
// signal: @TransDirectionalOutputShaftSpeed
#define TransDirectionalOutputShaftSpeed_CovFactor 1
#define TransDirectionalOutputShaftSpeed_CovS(x) ((int32_t)(x + 32127))
typedef struct
{

  // Oil pressure in the transmission hydrostatic loop #1 between the pump and motor.
  uint16_t TransHydrostaticLoop1Press;        //      Bits=16.  [ 0     , 64255  ]  Unit:'kPa'  

  // Oil pressure in the transmission hydrostatic loop #2 between the pump and motor.
  uint16_t TransHydrostaticLoop2Press;        //      Bits=16.  [ 0     , 64255  ]  Unit:'kPa'  

  // The rotational velocity and direction of the output shaft. Positive values are used for forward vehicle motion, negative values for reverse vehicle motion.    SPN 191 should be used when direction is not used.
  int32_t TransDirectionalOutputShaftSpeed;   //      Bits=16.  [ -32127, 32128  ]  Unit:'rpm'   Offset= -32127   
  uint32_t framecnt;
} ETC12_t;

// def @HRW CAN Message (150892286)
#define HRW_IDE (1U)
#define HRW_DLC (8U)
#define HRW_CANID (0x8FE6EFEU)
#define HRW_CYC (20U)
// -- High Resolution Wheel Speed
// signal: @FrontAxleLeftWheelSpeed
#define FrontAxleLeftWheelSpeed_CovFactor 0.00390625
#define FrontAxleLeftWheelSpeed_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @FrontAxleRightWheelSpeed
#define FrontAxleRightWheelSpeed_CovFactor 0.00390625
#define FrontAxleRightWheelSpeed_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @RearAxleLeftWheelSpeed
#define RearAxleLeftWheelSpeed_CovFactor 0.00390625
#define RearAxleLeftWheelSpeed_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @RearAxleRightWheelSpeed
#define RearAxleRightWheelSpeed_CovFactor 0.00390625
#define RearAxleRightWheelSpeed_CovS(x) ((uint16_t)((x / 0.00390625)))
typedef struct
{

  // High resolution measurement of the speed of the left wheel on the front axle.
  uint16_t FrontAxleLeftWheelSpeed;      //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/h'  Factor= 0.00390625

  // High resolution measurement of the speed of the right wheel on the front axle.
  uint16_t FrontAxleRightWheelSpeed;     //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/h'  Factor= 0.00390625

  // High resolution measurement of the speed of the left wheel on the rear axle.
  uint16_t RearAxleLeftWheelSpeed;       //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/h'  Factor= 0.00390625

  // High resolution measurement of the speed of the right wheel on the rear axle.
  uint16_t RearAxleRightWheelSpeed;      //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/h'  Factor= 0.00390625
  uint32_t framecnt;
} HRW_t;

// def @TSC1 CAN Message (201391870)
#define TSC1_IDE (1U)
#define TSC1_DLC (8U)
#define TSC1_CANID (0xC00FEFEU)
#define TSC1_CYC (10U)
// -- Torque/Speed Control 1  NOTE - Retarder may be disabled by commanding a torque limit of 0%.  Use of the limit mode allows the use of the retarder only up to the limit specified in the request.  This can be used to permit retarding of up to 50%, for ...
// signal: @EngRequestedSpeed_SpeedLimit
#define EngRequestedSpeed_SpeedLimit_CovFactor 0.125
#define EngRequestedSpeed_SpeedLimit_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @EngRequestedTorque_TorqueLimit
#define EngRequestedTorque_TorqueLimit_CovFactor 1
#define EngRequestedTorque_TorqueLimit_CovS(x) ((int16_t)(x + 125))
// signal: @EngRequestedTorqueHighResolution
#define EngRequestedTorqueHighResolution_CovFactor 0.125
#define EngRequestedTorqueHighResolution_CovS(x) ((uint8_t)((x / 0.125)))
typedef struct
{

  // The override control mode defines which sort of command is used:  00 Override disabled - Disable any existing control commanded by the source of this command.  01 Speed control - Govern speed to the included ?desired speed? value.  10 Torque control ...
  // 3 - "Speed/torque limit control" 
  // 2 - "Torque control" 
  // 1 - "Speed control" 
  // 0 - "Override disabled" 

  uint8_t EngOverrideCtrlMode;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This mode tells the engine control system the governor characteristics that are desired during speed control.  The four characteristics defined are:  00 Transient Optimized for driveline disengaged and non-lockup conditions  01 Stability Optimized ...
  // 3 - "Stability Optimized for driveline engaged and/or in lockup condition 2" 
  // 2 - "Stability Optimized for driveline engaged and/or in lockup condition 1" 
  // 1 - "Stability Optimized for driveline disengaged and non-lockup conditions" 
  // 0 - "Transient Optimized for driveline disengaged and non-lockup conditions" 

  uint8_t EngRequestedSpeedCtrlConditions;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This field is used as an input to the engine or retarder to determine the priority of the Override Control Mode received in the Torque/Speed Control message (see PGN 0).  The default is 11 (Low priority).  It is not required to use the same priority ...
  // 3 - "Low priority" 
  // 2 - "Medium priority" 
  // 1 - "High priority" 
  // 0 - "Highest priority" 

  uint8_t OverrideCtrlModePriority;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Parameter provided to the engine from external sources in the torque/speed control message.  This is the engine speed which the engine is expected to operate at if the speed control mode is active or the engine speed which the engine is not expected ...
  uint16_t EngRequestedSpeed_SpeedLimit;      //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // Parameter provided to the engine or retarder in the torque/speed control message for controlling or limiting the output torque.  Requested torque to the engine is measured in indicated torque as a percentage of reference engine torque (see the ...
  int16_t EngRequestedTorque_TorqueLimit;     //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the transmission rate at which the sending device will transmit the TSC1 message.  The engine shall adjust its timeout for TSC1 messages accordingly. Variable TSC1 transmission rates shall only apply to messages sent to the ...
  // 4 - "100 ms transmission rate" 
  // 3 - "250 ms transmission rate" 
  // 2 - "500 ms transmission rate" 
  // 1 - "750 ms transmission rate" 
  // 0 - "1000 ms transmission rate" 
  // 7 - "Use standard TSC1 transmission rates of 10 ms to engine" 
  // 6 - "20 ms transmission rate" 
  // 5 - "50 ms transmission rate" 

  uint8_t TSC1TransRate;                      //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // State signal which indicates which control mode the sending device is using to generate the TSC1 command.  Note that the modes are not in prioritized order. Not all modes may be relevant for a given device. Some devices may not implement all ...
  // 31 - "P32 = Temporary Power Train Control" 
  // 4 - "P5 = Engine Protection" 
  // 3 - "P4 = Road Speed Governor" 
  // 2 - "P3 = PTO Governor" 
  // 1 - "P2 = Cruise Control" 
  // 0 - "P1 = Accelerator Pedal/Operator Selection" 

  uint8_t TSC1CtrlPurpose;                    //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // This parameter displays an additional torque in percent of the reference engine torque.  When the MSB is set to 1, this parameter is not available.  When the MSB is set to 0, bits 1 to 3 indicate the desired torque with resolution of 0.125%/bit  ...
  // 7 - "+0.875%" 
  // 1 - "+0.125%" 
  // 0 - "+0.000%" 

  uint8_t EngRequestedTorqueHighResolution;   //      Bits=04.  [ 0     , 0.875  ]  Unit:'%'     Factor= 0.125 

  // The message counter is used to detect situations where the transmitting ECU malfunction repeats the same frame all the time.  The receiver of the information may use the counter parameter to detect this situation.  The transmitting device will ...
  uint8_t MessageCounter;                     //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The message checksum is used to verify the signal path from the transmitting device to the receiving device.  The message checksum is calculated using the first 7 data bytes, the message counter and the bytes of the message identifier. It is ...
  uint8_t MessageChecksum;                    //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} TSC1_t;

// def @TC1 CAN Message (201457406)
#define TC1_IDE (1U)
#define TC1_DLC (8U)
#define TC1_CANID (0xC01FEFEU)
#define TC1_CYC (50U)
// -- Transmission Control 1
// signal: @RequestedPercentClutchSlip
#define RequestedPercentClutchSlip_CovFactor 0.4
#define RequestedPercentClutchSlip_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransRequestedGear
#define TransRequestedGear_CovFactor 1
#define TransRequestedGear_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // Command signal to inhibit gear shifts.    00 Gear shifts are allowed  (disable function)  01 Gear shifts are inhibited  (enable function)  10 Reserved  11 Take no action  (leave function as is)
  // 3 - "Take no action " 
  // 2 - "Reserved" 
  // 1 - "Gear shifts are inhibited " 
  // 0 - "Gear shifts are allowed " 

  uint8_t TransGearShiftInhibitRq;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to prevent torque converter lockup, which may cause problems in certain circumstances for ASR.    00 Allow torque converter lockup  01 Disable torque converter lockup  10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Disable torque converter lockup" 
  // 0 - "Allow torque converter lockup" 

  uint8_t TrnsTrqeConverterLockupDisableRq;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to simply disengage the driveline, e.g., to prevent engine drag torque from causing high wheel slip on slippery surfaces.  00 Allow driveline engagement  01 Disengage driveline  10 Reserved  11 Take no action  Note:  If this ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Disengage driveline" 
  // 0 - "Allow driveline engagement" 

  uint8_t DisengageDrivelineRq;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Allows devices external to the normal transmission shift selector system to request the transmission to inhibit shifts into any Reverse gear and force the transmission into Neutral if it is currently in Reverse or attempting to shift to Reverse ...
  // 3 - "Take no action" 
  // 2 - "Reserved " 
  // 1 - "Inhibit shifts into Reverse gear" 
  // 0 - "Allow shifts into Reverse gear" 

  uint8_t TransReverseGearShiftInhibitRq;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Parameter which represents the percent clutch slip requested by a device.
  uint8_t RequestedPercentClutchSlip;         //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Gear requested by the operator, ABS, or engine.  Negative values are reverse gears, positive values are forward gears, zero is neutral, parameter specific indicators are listed below.  Parameter specific values for this parameter are as follows:   ...
  // 223 - "Reverse Selector Position" 
  // 224 - "Position unknown and/or no buttons pressed" 
  // 225 - "Press of momentary button to reselect current position" 
  // 226 - "Between ?Reverse? and ?Park? shift selector positions" 
  // 227 - "Between ?Neutral? and ?Reverse? shift selector positions" 
  // 228 - "Between ?Drive? and ?Neutral? shift selector positions" 
  // 229 - "Between D-1 and ?Drive? shift selector positions" 
  // 230 - "Between D-2 and D-1 shift selector positions" 
  // 231 - "Between D-3 and D-2 shift selector positions" 
  // 232 - "Between D-4 and D-3 shift selector positions" 
  // 233 - "Between D-5 and D-4 shift selector positions" 
  // 234 - "Between D-6 and D-5 shift selector positions" 
  // 235 - "Between D-7 and D-6 shift selector positions" 
  // 236 - "Between two forward shift selector positions" 
  // 237 - "Between two reverse shift selector positions" 
  // 238 - "Between two shift selector positions" 
  // 239 - "D-7: 7th forward selector position referenced from ?Drive?" 
  // 240 - "D-6: 6th forward selector position referenced from ?Drive?" 
  // 241 - "D-5: 5th forward selector position referenced from ?Drive?" 
  // 242 - "D-4: 4th forward selector position referenced from ?Drive?" 
  // 243 - "D-3: 3rd forward selector position referenced from ?Drive?" 
  // 244 - "D-2: 2nd forward selector position referenced from ?Drive?" 
  // 245 - "D-1: 1st forward selector position referenced from ?Drive?" 
  // 246 - "Downshift 2 gears from current position" 
  // 247 - "Downshift 1 gear from current position" 
  // 248 - "Upshift 2 gears from current position" 
  // 249 - "Upshift 1 gear from current position" 
  // 250 - "Forward ?Low? position" 
  // 251 - "?Park? position" 
  // 252 - "Forward Drive Position" 
  // 253 - "Hold current gear" 

  int16_t TransRequestedGear;                 //      Bits=08.  [ -64   , 64     ]  Unit:''      Offset= -125     

  // Command signal used to disengage the various differential locks, e.g., to allow an undistributed individual wheel control by ABS.  The differential locks are located as defined in Figure SPN564_A.  00 Engage differential lock  01 Disengage ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Disengage differential lock" 
  // 0 - "Engage differential lock" 

  uint8_t DisengageDiffLockRqFrontAxle1;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to disengage the various differential locks, e.g., to allow an undistributed individual wheel control by ABS.  The differential locks are located as defined in Figure SPN564_A.  00 Engage differential lock  01 Disengage ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Disengage differential lock" 
  // 0 - "Engage differential lock" 

  uint8_t DisengageDiffLockRqFrontAxle2;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to disengage the various differential locks, e.g., to allow an undistributed individual wheel control by ABS.  The differential locks are located as defined in Figure SPN564_A.  00 Engage differential lock  01 Disengage ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Disengage differential lock" 
  // 0 - "Engage differential lock" 

  uint8_t DisengageDiffLockRqRearAxle1;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to disengage the various differential locks, e.g., to allow an undistributed individual wheel control by ABS.  The differential locks are located as defined in Figure SPN564_A.  00 Engage differential lock  01 Disengage ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Disengage differential lock" 
  // 0 - "Engage differential lock" 

  uint8_t DisengageDiffLockRqRearAxle2;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to disengage the various differential locks, e.g., to allow an undistributed individual wheel control by ABS.  The differential locks are located as defined in Figure SPN564_A.  00 Engage differential lock  01 Disengage ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Disengage differential lock" 
  // 0 - "Engage differential lock" 

  uint8_t DisengageDiffLockRqCentral;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to disengage the various differential locks, e.g., to allow an undistributed individual wheel control by ABS.  The differential locks are located as defined in Figure SPN564_A.  00 Engage differential lock  01 Disengage ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Disengage differential lock" 
  // 0 - "Engage differential lock" 

  uint8_t DisengageDiffLockRqCentralFront;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to disengage the various differential locks, e.g., to allow an undistributed individual wheel control by ABS.  The differential locks are located as defined in Figure SPN564_A.  00 Engage differential lock  01 Disengage ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Disengage differential lock" 
  // 0 - "Engage differential lock" 

  uint8_t DisengageDiffLockRqCentralRear;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request signal to the transmission to inhibit activation of load reduction functions.  Automatic transmissions may incorporate functions designed to reduce engine load during certain operating conditions (vehicle standstill at bus stop, traffic ...
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Inhibit or abort transmission load reduction functions" 
  // 0 - "Allow or resume transmission load reduction functions" 

  uint8_t TransLoadReductionInhibitRq;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether transmission mode 1 is enabled.  Modes are manufacturer specific and are not necessarily mutually exclusive.  See also SPN 2536.    00 Disable  01 Enable  10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Enable" 
  // 0 - "Disable" 

  uint8_t TransMode1;                         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether transmission mode 2 is enabled.  Modes are manufacturer specific and are not necessarily mutually exclusive.  See also SPN 2537.    00 Disable  01 Enable  10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Enable" 
  // 0 - "Disable" 

  uint8_t TransMode2;                         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether transmission mode 3 is enabled.  Modes are manufacturer specific and are not necessarily mutually exclusive.  See also SPN 2538.    00 Disable  01 Enable  10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Enable" 
  // 0 - "Disable" 

  uint8_t TransMode3;                         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether transmission mode 4 is enabled.  Modes are manufacturer specific and are not necessarily mutually exclusive.  See also SPN 2539.    00 Disable  01 Enable  10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Enable" 
  // 0 - "Disable" 

  uint8_t TransMode4;                         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter conveys a vehicle system desire to override the operator?s current shift selector request (e.g. Drive, Reverse) and shift the transmission into Neutral. ?Manual Return? indicates this parameter has the ability to initiate a ...
  // 3 - "Don?t Care / Take No Action" 
  // 2 - "Reserved" 
  // 1 - "Request to shift to Auto-Neutral state" 
  // 0 - "No request to shift to Auto-Neutral state" 

  uint8_t AutoNeutralReq;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Initial gear for the transmission to start out in when the vehicle is launched from a standing stop, as specified by the vehicle operator or vehicle system.  Automatic transmissions typically default to starting out in 1st gear.  However, in ...
  // 10 - "Launch the vehicle in Reverse 2" 
  // 9 - "Launch the vehicle in Reverse 1" 
  // 8 - "Launch the vehicle in 8th gear" 
  // 7 - "Launch the vehicle in 7th gear" 
  // 6 - "Launch the vehicle in 6th gear" 
  // 5 - "Launch the vehicle in 5th gear" 
  // 4 - "Launch the vehicle in 4th gear" 
  // 3 - "Launch the vehicle in 3rd gear" 
  // 2 - "Launch the vehicle in 2nd gear" 
  // 1 - "Launch the vehicle in 1st gear" 
  // 0 - "No specific launch gear requested" 
  // 15 - "Not Available" 
  // 14 - "Error" 
  // 13 - "Allow transmission to select the optimum launch gear" 
  // 12 - "Launch the vehicle in Reverse 4 " 
  // 11 - "Launch the vehicle in Reverse 3" 

  uint8_t TransRequestedLaunchGear;           //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Status of the operator?s switch used to ?toggle? through multiple display modes of a shift selector display.  When a shift selector display is capable of displaying more than just range information, this switch is toggled by the operator to move ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TrnsShftSlectorDisplayModeSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether transmission mode 5 is enabled. Modes are manufacturer specific and are not necessarily mutually exclusive. See also SPN 4250.    00  Disable  01  Enable  10  Reserved  11  Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Enable" 
  // 0 - "Disable" 

  uint8_t TransMode5;                         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether transmission mode 6 is enabled. Modes are manufacturer specific and are not necessarily mutually exclusive. See also SPN 4251.    00  Disable  01  Enable  10  Reserved  11  Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Enable" 
  // 0 - "Disable" 

  uint8_t TransMode6;                         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether transmission mode 7 is enabled. Modes are manufacturer specific and are not necessarily mutually exclusive. See also SPN 4252.    00  Disable  01  Enable  10  Reserved  11  Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Enable" 
  // 0 - "Disable" 

  uint8_t TransMode7;                         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether transmission mode 8 is enabled. Modes are manufacturer specific and are not necessarily mutually exclusive. See also SPN 4253.    00  Disable  01  Enable  10  Reserved  11  Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Enable" 
  // 0 - "Disable" 

  uint8_t TransMode8;                         //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} TC1_t;

// def @XBR CAN Message (201654014)
#define XBR_IDE (1U)
#define XBR_DLC (8U)
#define XBR_CANID (0xC04FEFEU)
#define XBR_CYC (20U)
// -- External Brake Request  Used for brake control by an external device. The receiver is the brake system controlling the axle and/or wheel brakes. This system has to process the demanded acceleration.  Note: This PGN shall not be used for external ...
// signal: @ExtlAccelerationDemand
#define ExtlAccelerationDemand_CovFactor 0.00048828125
#define ExtlAccelerationDemand_CovS(x) ((int32_t)((x / 0.00048828125) + 32126))
// signal: @XBRUrgency
#define XBRUrgency_CovFactor 0.4
#define XBRUrgency_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Parameter provided to the brake system from external sources. This is the acceleration which the brake system is expected to realize. It is specified as an absolute acceleration in reference to the road.  Positive values lead to increasing vehicle ...
  int32_t ExtlAccelerationDemand;        //      Bits=16.  [ -10   , 10     ]  Unit:'m/s?'  Offset= -15.687   Factor= 0.00048828125

  // The XBR EBI (Endurance Brake Integration) Mode is used as an input for the brake system to prescribe the use of endurance brakes like retarders or engine brakes.  00 - No Endurance Brake Integration allowed  The demanded acceleration must be ...
  // 3 - "Not defined" 
  // 2 - "Endurance Brake Integration allowed" 
  // 1 - "Only Endurance Brakes allowed" 
  // 0 - "No Endurance Brake Integration allowed" 

  uint8_t XBREBIMode;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The XBR Priority is used as an input to the brake system to manage the priority of overlapping external and internal requests.  00 - Highest priority - used for emergency situations, e.g. for future Collision Avoidance System.  This mode overrides ...
  // 3 - "Low priority" 
  // 2 - "Medium priority" 
  // 1 - "High priority" 
  // 0 - "Highest priority" 

  uint8_t XBRPriority;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The XBR Control Mode is used as an input to the brake system and defines how the external acceleration demand has to be realized.  00 - Override disabled - Disable any existing control commanded by the source of this command.  01 - Acceleration ...
  // 3 - "Not defined" 
  // 2 - "Acceleration control with maximum mode" 
  // 1 - "Acceleration control with addition mode" 
  // 0 - "Override disabled" 

  uint8_t XBRCtrlMode;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The idea of the urgency value is to adjust the endurance brake integration behavior in the EBS system according to the traffic situation.  On low urgency values (0%, e.g. downhill cruise control or preceding vehicle far ahead) the brake system shall ...
  uint8_t XBRUrgency;                    //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The XBR message counter is to verify the signal path from the demanding device to the brake controller on electronic brake systems..  The support of this parameter is mandatory.  Note:  The initial value of the 4 bit message counter for the first ...
  uint8_t XBRMessageCounter;             //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The XBR message checksum is used to verify the signal path from the demanding device to the brake controller on electronic brake systems.  The support of this parameter is mandatory if PGN 1024 is supported as there is no means to indicate ?not ...
  uint8_t XBRMessageChecksum;            //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} XBR_t;

// def @AUXIO5 CAN Message (201916158)
#define AUXIO5_IDE (1U)
#define AUXIO5_DLC (8U)
#define AUXIO5_CANID (0xC08FEFEU)
// -- Auxiliary Input/Output Status 5  Notes:  Implementers are encouraged to use specific functional SPNs whenever possible.  AUXIO PGNs are intended for two categories of use in which fixed mapping to functions is not possible:  1)  Generic I/O devices   ...
typedef struct
{

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint16_t AuxI_OChannel6;               //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint16_t AuxI_OChannel5;               //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint16_t AuxI_OChannel4;               //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint16_t AuxI_OChannel3;               //      Bits=16.  [ 0     , 64255  ]  Unit:''     
  uint32_t framecnt;
} AUXIO5_t;

// def @SRASI CAN Message (201981694)
#define SRASI_IDE (1U)
#define SRASI_DLC (8U)
#define SRASI_CANID (0xC09FEFEU)
#define SRASI_CYC (100U)
// -- Static Roll Angle Sensor Information  Contains Static Roll Angle Data and Status of the Static Roll Angle Sensor
// signal: @StaticRollAngle
#define StaticRollAngle_CovFactor 1
#define StaticRollAngle_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // The measured static roll angle between the vehicle y-axis and the ground plane about the X-axis.  The sign of the roll angle is determined in accordance to the right-hand rule about the X-axis, as specified in SAE J670.  Roll angle is the same for ...
  int16_t StaticRollAngle;               //      Bits=08.  [ -90   , 90     ]  Unit:'deg'   Offset= -125     

  // Status of the transmitted roll angle data.    000 = Sensor Busy  001 = Sensor OK  010 = Sensor Defect  011 = Sensor Reboots  100 = Angle Data Invalid  101 = Reserved  110 = Error  111 = Not available
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Reserved" 
  // 4 - "Angle Data Invalid" 
  // 3 - "Sensor Reboots" 
  // 2 - "Sensor Defect" 
  // 1 - "Sensor OK" 
  // 0 - "Sensor Busy" 

  uint8_t StaticRollAngleStatus;         //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} SRASI_t;

// def @CCVS2 CAN Message (202047230)
#define CCVS2_IDE (1U)
#define CCVS2_DLC (8U)
#define CCVS2_CANID (0xC0AFEFEU)
#define CCVS2_CYC (100U)
// -- Cruise Control / Vehicle Speed 2  Cruise Control / Vehicle Speed 2
typedef struct
{

  // This parameter is used to disable cruise control from a source other than the driver controlled switch if cruise control is active.  It is also used to inhibit cruise control from becoming active if it is not currently active.  If this parameter is ...
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Cruise Control is not allowed" 
  // 0 - "Cruise Control is allowed" 

  uint8_t CruiseCtrlDisableCmd;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to request the cruise control to resume operation from a source other than the driver controlled switch.  Implementers may wish to restrict the conditions in which cruise control will be resumed due to this parameter ...
  // 3 - "Don't Care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Cruise Control Resume Requested" 
  // 0 - "Cruise Control Resume not Requested" 

  uint8_t CruiseCtrlResumeCmd;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to temporarily disable cruise control from a source other than the driver controlled switch if cruise control is active.  If this parameter is used to disable cruise control, then cruise control will not need to be ...
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Cruise Control is not allowed" 
  // 0 - "Cruise Control is allowed" 

  uint8_t CruiseCtrlPauseCmd;            //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} CCVS2_t;

// def @AEBS2 CAN Message (202112766)
#define AEBS2_IDE (1U)
#define AEBS2_DLC (8U)
#define AEBS2_CANID (0xC0BFEFEU)
#define AEBS2_CYC (50U)
// -- Advanced Emergency Braking System 2  Advanced Emergency Braking System message 2.
typedef struct
{

  // According to the Vienna world convention on road traffic the driver must be provided with means to deactivate an Advanced Emergency Braking System. This command is to be transmitted from the respective HMI unit to the AEBS unit.  00 - the driver ...
  // 3 - "don?t' care / take no action" 
  // 2 - "reserved" 
  // 1 - "the driver wants the Advanced Emergency Braking System to warn or intervene if necessary" 
  // 0 - "the driver does not want the Advanced Emergency Braking System to warn or intervene at any time" 

  uint8_t DrvrActvtnDmndFrAdvncdEmrgncyBrk;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The message counter is increased with every transmitted AEBS2 message.  After reaching a value of 0xF the next value will be 0.
  uint8_t AEBS2MessageCounter;                //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Used to check the message checksum of the transmitting (HMI) unit within the AEBS2 system.  Checksum = (Byte1 + Byte2 + Byte3 + Byte4 + Byte5 + Byte6 + Byte7 + (message counter & 0x0F) + message ID low byte + message ID mid low byte + message ID mid ...
  uint8_t AEBS2MessageChecksum;               //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} AEBS2_t;

// def @TC2 CAN Message (202243838)
#define TC2_IDE (1U)
#define TC2_DLC (8U)
#define TC2_CANID (0xC0DFEFEU)
#define TC2_CYC (50U)
// -- Transmission Control 2  Used to communicate transmission control information
typedef struct
{

  // Indicates whether transmission mode 9 is enabled. Modes are manufacturer specific and are not necessarily mutually exclusive. See also SPN 6567.     00 Disable  01 Enable  10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Enable" 
  // 0 - "Disable" 

  uint8_t TransMode9;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether transmission mode 10 is enabled. Modes are manufacturer specific and are not necessarily mutually exclusive. See also SPN 6568.     00 Disable  01 Enable  10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Enable" 
  // 0 - "Disable" 

  uint8_t TransMode10;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} TC2_t;

// def @TC3 CAN Message (203226878)
#define TC3_IDE (1U)
#define TC3_DLC (8U)
#define TC3_CANID (0xC1CFEFEU)
#define TC3_CYC (100U)
// -- Transmission Control 3  This message is used to control the output speed and/or torque of a transmission.  For example, this message could be directed toward a continuously variable transmission (CVT) where output speed and torque are not directly ...
// signal: @TransRequestedOutputShaftSpeed
#define TransRequestedOutputShaftSpeed_CovFactor 0.25
#define TransRequestedOutputShaftSpeed_CovS(x) ((int32_t)((x / 0.25) + 32127))
// signal: @TransRequestedTorque_TorqueLimit
#define TransRequestedTorque_TorqueLimit_CovFactor 1
#define TransRequestedTorque_TorqueLimit_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // The override control mode defines the type of control mode used to control transmission operation.  00 = Override disabled - Disable any existing control commanded by the source of this command.  01 = Speed control - Control speed to the included ...
  // 3 - "Speed/torque limit control" 
  // 2 - "Torque control" 
  // 1 - "Speed control" 
  // 0 - "Override disabled" 

  uint8_t TransOverrideCtrlMode;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This field is used as an input to the transmission to determine the priority of the Override Control Mode received in the Torque/Speed Control message.  The default is 11 (Low priority).  It is not required to use the same priority during the entire ...
  // 3 - "Low priority" 
  // 2 - "Medium priority" 
  // 1 - "High priority" 
  // 0 - "Highest priority" 

  uint8_t TransOverrideCtrlModePriority;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The message counter is used to detect situations where the transmitting ECU malfunction repeats the same frame all the time.  The receiver of the information may use the counter parameter to detect this situation.  Note:  The initial value of the 4 ...
  uint8_t MessageCounter;                     //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Used to request output shaft speed of the transmission which has a output through a driveline to the wheels of a machine/vehicle.
  int32_t TransRequestedOutputShaftSpeed;     //      Bits=16.  [ -8031.375, 8031.375 ]  Unit:'rpm'   Offset= -8031.75  Factor= 0.25  

  // Parameter provided to the transmission in the torque/speed control message for controlling or limiting the output torque.  Note:  0% to 125% for (positive) powered torque requests, -125% to 0% for (negative) retarding torque requests.  Does not ...
  int16_t TransRequestedTorque_TorqueLimit;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // The message checksum is used to verify the signal path from the transmitting device to the receiving device.  The message checksum is calculated using the first 7 data bytes, the message counter and the bytes of the message identifier. It is ...
  uint8_t MessageChecksum;                    //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} TC3_t;

// def @EIC CAN Message (203292414)
#define EIC_IDE (1U)
#define EIC_DLC (8U)
#define EIC_CANID (0xC1DFEFEU)
// -- Engine Ignition Controller  Commanded engine ignition timing advance
// signal: @EngTimingAdvance
#define EngTimingAdvance_CovFactor 0.0078125
#define EngTimingAdvance_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
typedef struct
{

  // Ignition timing as a command to the ignition control module.  Positive values command an increasingly advanced timing from TDC. The same timing applies to all cylinders. Use SPN 7356 - SPN 7379 for cylinder specific timing offsets from this timing.
  int32_t EngTimingAdvance;              //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125
  uint32_t framecnt;
} EIC_t;

// def @ALTC CAN Message (203357950)
#define ALTC_IDE (1U)
#define ALTC_DLC (8U)
#define ALTC_CANID (0xC1EFEFEU)
#define ALTC_CYC (200U)
// -- Alternator Control  Parameters to control the alternator.
// signal: @SetpointVoltageCmd
#define SetpointVoltageCmd_CovFactor 0.001
#define SetpointVoltageCmd_CovS(x) ((uint16_t)((x / 0.001)))
// signal: @ExcitationMaxCurrentLmt
#define ExcitationMaxCurrentLmt_CovFactor 0.25
#define ExcitationMaxCurrentLmt_CovS(x) ((uint8_t)((x / 0.25)))
// signal: @TrqRampTimeCmd
#define TrqRampTimeCmd_CovFactor 0.1
#define TrqRampTimeCmd_CovS(x) ((uint8_t)((x / 0.1)))
// signal: @TrqRampMaxSpdCmd
#define TrqRampMaxSpdCmd_CovFactor 32
#define TrqRampMaxSpdCmd_CovS(x) ((uint8_t)((x / 32)))
typedef struct
{

  // Setpoint voltage command to alternator. The setpoint voltage is the point that is regulated by the alternator. This may or may not be the output of the alternator.
  uint16_t SetpointVoltageCmd;           //      Bits=16.  [ 0     , 64.255 ]  Unit:'V'     Factor= 0.001 

  // Command sent to alternator to set the maximum excitation current of the alternator.
  uint8_t ExcitationMaxCurrentLmt;       //      Bits=08.  [ 0     , 62.5   ]  Unit:'A'     Factor= 0.25  

  // Sets the torque ramp rate in which the alternator can respond to a change in electrical load. 100% represents the reference engine torque (SPN 544).  This value will be applied if the alternator speed is less than Alternator Torque Ramp Maximum ...
  uint8_t TrqRampTimeCmd;                //      Bits=08.  [ 0.1   , 25     ]  Unit:'s'     Factor= 0.1   

  // The Alternator Torque Ramp Time Command (SPN 7591) is applied if the alternator speed is less than Alternator Torque Ramp Maximum Speed Command (SPN 7592). If the alternator speed is greater than Alternator Torque Ramp Maximum Speed Command, then ...
  uint8_t TrqRampMaxSpdCmd;              //      Bits=08.  [ 0     , 8000   ]  Unit:'rpm'   Factor= 32    
  uint32_t framecnt;
} ALTC_t;

// def @NM CAN Message (211025662)
#define NM_IDE (1U)
#define NM_DLC (8U)
#define NM_CANID (0xC93FEFEU)
// -- A message to change fields of the NAME of a CA
typedef struct
{

  uint8_t NameChecksum;                       //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // 0 - "Security not satisfied" 
  // 1 - "Item(s) not allowed to change" 
  // 2 - "Item conflict" 
  // 3 - "Checksum does not match" 
  // 4 - "Pending Name not set" 
  // 255 - "Not Available" 
  // 5 - "Other" 

  uint8_t ErrorCode;                          //      Bits=08.  [ 0     , 0      ]  Unit:''     

  uint8_t ManufacturerCodeQualifierFlag;      //      Bits=01.  [ 0     , 1      ]  Unit:''     

  uint8_t ECUInstanceQualifierFlag;           //      Bits=01.  [ 0     , 1      ]  Unit:''     

  uint8_t FunctionInstanceQualifierFlag;      //      Bits=01.  [ 0     , 1      ]  Unit:''     

  uint8_t FunctionQualifierFlag;              //      Bits=01.  [ 0     , 1      ]  Unit:''     

  uint8_t VehicleSystemQualifierFlag;         //      Bits=01.  [ 0     , 1      ]  Unit:''     

  uint8_t VehicleSystemInstanceQualifierFl;   //      Bits=01.  [ 0     , 1      ]  Unit:''     

  uint8_t IndustryGroupQualifierFlag;         //      Bits=01.  [ 0     , 1      ]  Unit:''     

  uint8_t ArbitraryAddressCapableQualifier;   //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 0 - "SetPendingName" 
  // 1 - "PendingName" 
  // 2 - "CurrentName" 
  // 3 - "NameACK" 
  // 4 - "NameNACK" 
  // 5 - "ReqPendingName" 
  // 6 - "ReqCurrentName" 
  // 7 - "AdoptPendingName" 
  // 8 - "ReqNameAddressClaim" 

  uint8_t NMControlModeIndicator;             //      Bits=04.  [ 0     , 15     ]  Unit:''     

  uint16_t CommandManufacturerCode;           //      Bits=11.  [ 0     , 2047   ]  Unit:''     

  uint8_t CommandECUInstance;                 //      Bits=03.  [ 0     , 7      ]  Unit:''     

  uint8_t CommandFunctionInstance;            //      Bits=05.  [ 0     , 31     ]  Unit:''     

  uint8_t CommandFunction;                    //      Bits=08.  [ 0     , 255    ]  Unit:''     

  uint8_t CommandVehicleSystem;               //      Bits=07.  [ 0     , 127    ]  Unit:''     

  uint8_t CommandVehicleSystemInstance;       //      Bits=04.  [ 0     , 15     ]  Unit:''     

  uint8_t CommandIndustryGroup;               //      Bits=03.  [ 0     , 7      ]  Unit:''     

  uint8_t CommandArbitraryAddressCapable;     //      Bits=01.  [ 0     , 1      ]  Unit:''     
  uint32_t framecnt;
} NM_t;

// def @JLCM CAN Message (211418878)
#define JLCM_IDE (1U)
#define JLCM_DLC (8U)
#define JLCM_CANID (0xC99FEFEU)
#define JLCM_CYC (100U)
// -- Joystick Lamp Command Message  Used to transfer joystick lamp command informations which are used to switch on/off/blinking joystick 1...3 lamps 1...10.
typedef struct
{

  // Tells joystick 1 to switch on/off/blinking lamp 1.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp1Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 1 to switch on/off/blinking lamp 2.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp2Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 1 to switch on/off/blinking lamp 3.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp3Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 1 to switch on/off/blinking lamp 4.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp4Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 1 to switch on/off/blinking lamp 5.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp5Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 1 to switch on/off/blinking lamp 6.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp6Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 1 to switch on/off/blinking lamp 7.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp7Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 1 to switch on/off/blinking lamp 8.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp8Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 1 to switch on/off/blinking lamp 9.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp9Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 1 to switch on/off/blinking lamp 10.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp10Cmd;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 2 to switch on/off/blinking lamp 1.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp1Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 2 to switch on/off/blinking lamp 2.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp2Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 2 to switch on/off/blinking lamp 3.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp3Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 2 to switch on/off/blinking lamp 4.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 0 - "Off" 
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 

  uint8_t Joystick2Lamp4Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 2 to switch on/off/blinking lamp 5.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp5Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 2 to switch on/off/blinking lamp 6.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp6Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 2 to switch on/off/blinking lamp 7.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp7Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 2 to switch on/off/blinking lamp 8.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp8Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 2 to switch on/off/blinking lamp 9.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp9Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 2 to switch on/off/blinking lamp 10.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp10Cmd;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 3 to switch on/off/blinking lamp 1.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp1Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 3 to switch on/off/blinking lamp 2.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp2Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 3 to switch on/off/blinking lamp 3.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp3Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 3 to switch on/off/blinking lamp 4.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp4Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 3 to switch on/off/blinking lamp 5.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp5Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 3 to switch on/off/blinking lamp 6.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp6Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 3 to switch on/off/blinking lamp 7.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp7Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 3 to switch on/off/blinking lamp 8.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp8Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 3 to switch on/off/blinking lamp 9.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp9Cmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Tells joystick 3 to switch on/off/blinking lamp 10.    00 - Off  01 - On  10 - Blinking  11 - Don't care / Take no action
  // 3 - "Don't care / Take no action" 
  // 2 - "Blinking" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp10Cmd;            //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} JLCM_t;

// def @ASC6 CAN Message (215088894)
#define ASC6_IDE (1U)
#define ASC6_DLC (8U)
#define ASC6_CANID (0xCD1FEFEU)
#define ASC6_CYC (100U)
// -- Air Suspension Control 6  Used for suspension control
// signal: @LevelPresetFrontAxleLeft
#define LevelPresetFrontAxleLeft_CovFactor 0.1
#define LevelPresetFrontAxleLeft_CovS(x) ((int32_t)((x / 0.1) + 32000))
// signal: @LevelPresetFrontAxleRight
#define LevelPresetFrontAxleRight_CovFactor 0.1
#define LevelPresetFrontAxleRight_CovS(x) ((int32_t)((x / 0.1) + 32000))
// signal: @LevelPresetRearAxleLeft
#define LevelPresetRearAxleLeft_CovFactor 0.1
#define LevelPresetRearAxleLeft_CovS(x) ((int32_t)((x / 0.1) + 32000))
// signal: @LevelPresetRearAxleRight
#define LevelPresetRearAxleRight_CovFactor 0.1
#define LevelPresetRearAxleRight_CovS(x) ((int32_t)((x / 0.1) + 32000))
typedef struct
{

  // Set value for nominal level 'preset level' at the left side of the front axle. This value is referred to 'Normal level 1'.  For explanations of normal level 1 see parameter SPN 1734 - Nominal Level Front Axle.
  int32_t LevelPresetFrontAxleLeft;      //      Bits=16.  [ -3200 , 3225.5 ]  Unit:'mm'    Offset= -3200     Factor= 0.1   

  // Set value for nominal level 'preset level' at the right side of the front axle. This value is referred to 'Normal level 1'.  For explanations of normal level 1 see SPN 1734 - Nominal Level Front Axle.
  int32_t LevelPresetFrontAxleRight;     //      Bits=16.  [ -3200 , 3225.5 ]  Unit:'mm'    Offset= -3200     Factor= 0.1   

  // Set value for nominal level 'preset level' at the left side of the rear axle. This value is referred to 'Normal level 1'.  For explanations of normal level 1 see SPN 1734 - Nominal Level Front Axle.
  int32_t LevelPresetRearAxleLeft;       //      Bits=16.  [ -3200 , 3225.5 ]  Unit:'mm'    Offset= -3200     Factor= 0.1   

  // Set value for nominal level 'preset level' at the right side of the rear axle. This value is referred to 'Normal level 1'.  For explanations of normal level 1 see SPN 1734 - Nominal Level Front Axle.
  int32_t LevelPresetRearAxleRight;      //      Bits=16.  [ -3200 , 3225.5 ]  Unit:'mm'    Offset= -3200     Factor= 0.1   
  uint32_t framecnt;
} ASC6_t;

// def @ASC2 CAN Message (215154430)
#define ASC2_IDE (1U)
#define ASC2_DLC (8U)
#define ASC2_CANID (0xCD2FEFEU)
#define ASC2_CYC (100U)
// -- Air Suspension Control 2  Used for suspension control
// signal: @DamperStiffnessRqFrontAxle
#define DamperStiffnessRqFrontAxle_CovFactor 0.4
#define DamperStiffnessRqFrontAxle_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DamperStiffnessRqRearAxle
#define DamperStiffnessRqRearAxle_CovFactor 0.4
#define DamperStiffnessRqRearAxle_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DamperStiffnessRqLift_TagAxle
#define DamperStiffnessRqLift_TagAxle_CovFactor 0.4
#define DamperStiffnessRqLift_TagAxle_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // This signal enables the traction help (load transfer) in case of an active ASR function    00   Disable automatic traction help   01   Enable automatic traction help   10   Reserved  11   Don't care
  // 3 - "Don't care" 
  // 2 - "Reserved" 
  // 1 - "Enable automatic traction help " 
  // 0 - "Disable automatic traction help " 

  uint8_t AutomaticTractionHelp;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to activate the kneeling functionality on the left side of the vehicle    00 No kneeling request  01 Kneeling request  10 Reserved  11 Don't care/take no action
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Kneeling request" 
  // 0 - "No kneeling request" 

  uint8_t KneelingRqLeftSide;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to activate the kneeling functionality on the right side of the vehicle    00 No kneeling request  01 Kneeling request  10 Reserved  11 Don't care/take no action
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Kneeling request" 
  // 0 - "No kneeling request" 

  uint8_t KneelingRqRightSide;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to select the kneeling functionality    00 Automatically actuated  01 Manually actuated  10 Reserved  11 Don't care/take no action
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Manually actuated" 
  // 0 - "Automatically actuated" 

  uint8_t KneelingCtrlModeRq;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to activate a level of the front axle programmed and/or memorized in the ECU   For explanations of nominal level see SPN 1734 - Nominal Level Front Axle.  0000 No level request  0001 Normal Level 1,(i.e. the level prescribed for ...
  // 15 - "Don't care/take no action" 
  // 14 - "Reserved" 
  // 10 - "Lower Request" 
  // 9 - "Raise Request" 
  // 8 - "Stop level change" 
  // 7 - "Lower Level" 
  // 6 - "Upper Level" 
  // 5 - "Customer Level" 
  // 4 - "Preset Level" 
  // 3 - "Normal Level 3" 
  // 2 - "Normal Level 2" 
  // 1 - "Normal Level 1" 
  // 0 - "No level request" 

  uint8_t NominalLevelRqFrontAxle;            //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Command signal to activate a level of the rear axle programmed and/or memorized in the ECU.  For explanations of nominal level see SPN 1734 - Nominal Level Front Axle.  0000 No level request  0001 Normal Level 1,(i.e. the level prescribed for normal ...
  // 15 - "Don't care/take no action" 
  // 14 - "Reserved" 
  // 10 - "Lower Request" 
  // 9 - "Raise Request" 
  // 8 - "Stop level change" 
  // 7 - "Lower Level" 
  // 6 - "Upper Level" 
  // 5 - "Customer Level" 
  // 4 - "Preset Level" 
  // 3 - "Normal Level 3" 
  // 2 - "Normal Level 2" 
  // 1 - "Normal Level 1" 
  // 0 - "No level request" 

  uint8_t NominalLevelRqRearAxle;             //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Command signal to activate a level control mode  0000    Normal operation; i.e. the system performs a \
  // 14 - "Reserved" 
  // 9 - "Force to bumper level" 
  // 8 - "Exhaust bellows" 
  // 7 - "Traction help, load reduce" 
  // 6 - "Optimum traction 2" 
  // 5 - "Optimum traction 1" 
  // 4 - "Pressure ratio 2" 
  // 3 - "Pressure ratio 1" 
  // 2 - "Load fixing" 
  // 1 - "Traction help, load transfer)" 
  // 0 - "Normal operation" 
  // 15 - "Don't care/take no action" 

  uint8_t LevelCtrlModeRq;                    //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Signal to command the position/load condition of lift/tag axle #1.  Numbering of lift/tag axles starts at front axle.  00 Lift axle position down / tag axle laden  01 Lift axle position up / tag axle unladen  10 Reserved  11 Don't care/take no ...
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Lift axle position up / tag axle unladen" 
  // 0 - "Lift axle position down / tag axle laden" 

  uint8_t LiftAxle1PosCmd;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal to command the position / load condition of lift / tag axle #2.  Numbering of lift/tag axles starts at front axle.  00 Lift axle position down / tag axle laden  01 Lift axle position up / tag axle unladen  10 Reserved  11 Don't care/take no ...
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Lift axle position up / tag axle unladen" 
  // 0 - "Lift axle position down / tag axle laden" 

  uint8_t LiftAxle2PosCmd;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Demand value for the shock absorber control at the front axle.
  uint8_t DamperStiffnessRqFrontAxle;         //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Demand value for the shock absorber control at the rear  axle.
  uint8_t DamperStiffnessRqRearAxle;          //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Demand value for the shock absorber control at the lift or tag axle
  uint8_t DamperStiffnessRqLift_TagAxle;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Command signal to activate the kneeling functionality at the front axle of the vehicle    00 Deactivate kneeling  01 Activate kneeling  10 Reserved  11 Don't care/take no action
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Activate kneeling" 
  // 0 - "Deactivate kneeling" 

  uint8_t KneelingCmdFrontAxle;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to activate the kneeling functionality at the rear axle of the vehicle.    00 Deactivate kneeling  01 Activate kneeling  10 Reserved  11 Don't care/take no action
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Activate kneeling" 
  // 0 - "Deactivate kneeling" 

  uint8_t KneelingCmdRearAxle;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is an external request to the air suspension control system to prohibit all air suspension control.  If the request is accepted,  response intended to be sent in  ASC1 (additional status requested in ASC1), there will be no control ...
  // 3 - "Not available" 
  // 2 - "Error indicator " 
  // 1 - "Request prohibit air suspension control " 
  // 0 - "No request " 

  uint8_t ProhibitAirSuspensionCtrl;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter overides the inhibit of level control during braking.    00 = Disallow level control during braking (normal operation)  01 = Allow level control during braking  10 = Reserved  11 = Don?t' care/take no action
  // 3 - "Don?t' care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Allow level control during braking" 
  // 0 - "Disallow level control during braking" 

  uint8_t AllowLevelCtrlDuringBrakingCmd;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter activates speed dependent level control in suspension system.    00 = Deactivate  01 = Activate  10 = Reserved  11 = Don?t care/take no action
  // 3 - "Don?t care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "Deactivate" 

  uint8_t SpeedDependentLevelCtrlRq;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is an internal request to the air suspension control system to prohibit automatic air suspension control.  If the request is accepted,  response intended to be sent in  ASC1 (additional status requested in ASC1), there will be no ...
  // 3 - "Not available" 
  // 2 - "Error indicator " 
  // 1 - "Request prohibit automatic air suspension control " 
  // 0 - "No request " 

  uint8_t PrhbitAutomaticAirSuspensionCtrl;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates that the air suspension control requests a memory level or a memory level shall be stored.  The storage of  the current memory level is requested by  \
  // 15 - "Don't care" 
  // 14 - "Reserved" 
  // 13 - "Store Memory level  5" 
  // 12 - "Store Memory level  4" 
  // 11 - "Store Memory level  3" 
  // 10 - "Store Memory level  2" 
  // 9 - "Store Memory level  1" 
  // 8 - "reserved" 
  // 7 - "reserved" 
  // 6 - "reserved" 
  // 5 - "Memory level 5 request" 
  // 4 - "Memory level 4 request" 
  // 3 - "Memory level 3 request" 
  // 2 - "Memory level 2 request" 
  // 1 - "Memory level 1 request" 
  // 0 - "No memory level request" 

  uint8_t MemoryLevelRq;                      //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} ASC2_t;

// def @ETC1 CAN Message (217055998)
#define ETC1_IDE (1U)
#define ETC1_DLC (8U)
#define ETC1_CANID (0xCF002FEU)
#define ETC1_CYC (10U)
// -- Electronic Transmission Controller 1  Electronic Transmission Controller #1  Note:  Single input shaft transmissions should use SPN 161 (Transmission Input Shaft Speed).  Multiple input shaft transmissions should use SPN 5960 and 5961 (DCT Input ...
// signal: @TransOutputShaftSpeed
#define TransOutputShaftSpeed_CovFactor 0.125
#define TransOutputShaftSpeed_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @PercentClutchSlip
#define PercentClutchSlip_CovFactor 0.4
#define PercentClutchSlip_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransInputShaftSpeed
#define TransInputShaftSpeed_CovFactor 0.125
#define TransInputShaftSpeed_CovS(x) ((uint16_t)((x / 0.125)))
typedef struct
{

  // Driveline engaged indicates the transmission controlled portion of the driveline is engaged sufficiently to allow a transfer of torque through the transmission.  Driveline engaged is ACTIVE whenever the transmission is in gear and the clutch (if ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Driveline engaged" 
  // 0 - "Driveline disengaged" 

  uint8_t TransDrivelineEngaged;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates whether the torque converter lockup is engaged.    00 Torque converter lockup disengaged  01 Torque converter lockup engaged  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Torque converter lockup engaged" 
  // 0 - "Torque converter lockup disengaged" 

  uint8_t TrnsTorqueConverterLockupEngaged;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the transmission is in process of shifting from the current gear to the selected gear. This state is generally ACTIVE during the entire time that the transmission controls the vehicle during a shift. This includes any transmission ...
  // 3 - "-  Not available" 
  // 2 - "-  Error" 
  // 1 - "-  Shift in process" 
  // 0 - "-  Shift is not in process " 

  uint8_t TransShiftInProcess;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal indicating whether or not the transmission torque converter lock up clutch is transitioning between being applied and being released.  The broadcast value should be set to 01 as soon as an apply or release of the lockup clutch is ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Transition is in process" 
  // 0 - "Transition is not in process" 

  uint8_t TrnsTrqCnvrtrLckpTrnstnInProcess;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Calculated speed of the transmission output shaft.
  uint16_t TransOutputShaftSpeed;             //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // Parameter which represents the ratio of input shaft speed to current engine speed (in percent).    Percent Clutch Slip = ((Engine rpm - Input shaft rpm)/(Engine rpm)) x 100
  uint8_t PercentClutchSlip;                  //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Command signal used to indicate that the engine speed may be boosted up to the maximum engine overspeed value to accommodate transmission downshifts.  The maximum time for overspeed is limited by the time defined in the engine configuration message ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Momentary engine overspeed is enabled" 
  // 0 - "Momentary engine overspeed is disabled" 

  uint8_t EngMomentaryOverspeedEnable;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to indicate that progressive shifting by the engine should be disallowed.    00 Progressive shift is not disabled  01 Progressive shift is disabled  10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Progressive shift is disabled" 
  // 0 - "Progressive shift is not disabled" 

  uint8_t ProgressiveShiftDisable;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Momentarily Requesting highest torque map from the engine control    00 not requesting maximum power available  01 momentarily requesting maximum power available  10 fault  11 not available
  // 3 - "not available" 
  // 2 - "fault" 
  // 1 - "momentarily requesting maximum power available" 
  // 0 - "not requesting maximum power available" 

  uint8_t MomentaryEngMaxPowerEnable;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Rotational velocity of the primary shaft transferring power into the transmission.  When a torque converter is present, it is the output of the torque converter.  Note:  Single input shaft transmissions should use SPN 161 (Transmission Input Shaft ...
  uint16_t TransInputShaftSpeed;              //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // The source address of the SAE J1939 device currently controlling the transmission. Its value may be the source address of the ECU transmitting the message (which means that no external SAE J1939 message is providing the active command) or the source ...
  uint8_t SrcAddrssOfCntrllngDvcFrTrnsCtrl;   //      Bits=08.  [ 0     , 253    ]  Unit:''     
  uint32_t framecnt;
} ETC1_t;

// def @EEC2 CAN Message (217056254)
#define EEC2_IDE (1U)
#define EEC2_DLC (8U)
#define EEC2_CANID (0xCF003FEU)
#define EEC2_CYC (50U)
// -- Electronic Engine Controller 2  Identifies electronic engine control related parameters.
// signal: @AccelPedalPos1
#define AccelPedalPos1_CovFactor 0.4
#define AccelPedalPos1_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @RemoteAccelPedalPos
#define RemoteAccelPedalPos_CovFactor 0.4
#define RemoteAccelPedalPos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @AccelPedalPos2
#define AccelPedalPos2_CovFactor 0.4
#define AccelPedalPos2_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @ActlMaxAvailableEngPercentTorque
#define ActlMaxAvailableEngPercentTorque_CovFactor 0.4
#define ActlMaxAvailableEngPercentTorque_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EstPumpingPercentTorque
#define EstPumpingPercentTorque_CovFactor 1
#define EstPumpingPercentTorque_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // Switch signal which indicates the state of the accelerator pedal 1 low idle switch.  The low idle switch is defined in SAE Recommended Practice J1843.  00 - Accelerator pedal 1 not in low idle condition  01 - Accelerator pedal 1 in low idle ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Accelerator pedal 1 in low idle condition" 
  // 0 - "Accelerator pedal 1 not in low idle condition" 

  uint8_t AccelPedal1LowIdleSwitch;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates whether the accelerator pedal kickdown switch is opened or closed.  The kickdown switch is defined in SAE J1843.    00 - Kickdown passive  01 - Kickdown active  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Kickdown active" 
  // 0 - "Kickdown passive" 

  uint8_t AccelPedalKickdownSwitch;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status (active or not active) of the system used to limit maximum vehicle velocity.  00 - Active  01 - Not Active  10 - Error  11 - Not available  NOTE - While somewhat inconsistent with other J1939 status parameters, the states defining 00 = active ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Not Active" 
  // 0 - "Active" 

  uint8_t RoadSpeedLimitStatus;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates the state of the accelerator pedal 2 low idle switch.  The low idle switch is defined in SAE J1843.  00    Accelerator pedal 2 not in low idle condition  01    Accelerator pedal 2 in low idle condition  10    Error  11 ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Accelerator pedal 2 in low idle condition" 
  // 0 - "Accelerator pedal 2 not in low idle condition" 

  uint8_t AccelPedal2LowIdleSwitch;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The ratio of actual position of the analog engine speed/torque request input device (such as an accelerator pedal or throttle lever) to the maximum position of the input device.  This parameter is intended for the primary accelerator control in an ...
  uint8_t AccelPedalPos1;                     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The ratio of actual engine percent torque (indicated) to maximum indicated torque available at the current engine speed, clipped to zero torque during engine braking.
  uint8_t EngPercentLoadAtCurrentSpeed;       //      Bits=08.  [ 0     , 125    ]  Unit:'%'    

  // The ratio of actual position of the remote analog engine speed/torque request input device (such as an accelerator pedal or throttle lever) to the maximum position of the input device.  For example, in on-highway vehicles this could be an ...
  uint8_t RemoteAccelPedalPos;                //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The ratio of actual position of the second analog engine speed/torque request input device (such as an accelerator pedal or throttle lever) to the maximum position of the input device.  This parameter is intended for secondary accelerator control in ...
  uint8_t AccelPedalPos2;                     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Status (active or not active) of the system used to limit maximum forward vehicle acceleration.  00     Limit not active  01     Limit active  10     Reserved  11     Not available  NOTE:  The effects of emission control limits, such as engine ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Limit active" 
  // 0 - "Limit not active" 

  uint8_t VhcleAccelerationRateLimitStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Momentarily requesting Engine Maximum Power Enable - feature support feedback    00 disabled  01 supported   10 reserved  11 don't care
  // 3 - "don't care" 
  // 2 - "reserved" 
  // 1 - "supported " 
  // 0 - "disabled" 

  uint8_t MmntaryEngMaxPowerEnableFeedback;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the exhaust temperatures have been elevated for regeneration of the diesel particulate filter aftertreatment system or in preparation of regeneration of the diesel particulate aftertreatment system.  00 - DPF Thermal Management is not ...
  // 3 - "Don't care" 
  // 2 - "Reserved" 
  // 1 - "DPF Thermal Management is active" 
  // 0 - "DPF Thermal Management is not active" 

  uint8_t DPFThermalManagementActive;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the exhaust temperatures have been elevated for regeneration of the SCR aftertreatment system or in preparation of regeneration of the SCR aftertreatment system.  00 - SCR Thermal Management is not active  01 - SCR Thermal Management ...
  // 3 - "Don't care" 
  // 2 - "Reserved" 
  // 1 - "SCR Thermal Management is active" 
  // 0 - "SCR Thermal Management is not active" 

  uint8_t SCRThermalManagementActive;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This is the maximum amount of torque that the engine can immediately deliver as a percentage of the reference engine torque (SPN 544).  The Actual Maximum Available Engine - Percent Torque shall take into consideration all engine torque derates ...
  uint8_t ActlMaxAvailableEngPercentTorque;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The calculated torque that indicates the estimated amount of torque loss due to the engine air handling system. The value transmitted in this parameter is included in SPN 514 (Nominal Friction - Percent Torque).  The data is transmitted as a percent ...
  int16_t EstPumpingPercentTorque;            //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     
  uint32_t framecnt;
} EEC2_t;

// def @EEC1 CAN Message (217056510)
#define EEC1_IDE (1U)
#define EEC1_DLC (8U)
#define EEC1_CANID (0xCF004FEU)
// -- Electronic Engine Controller 1  Engine related parameters
// signal: @ActlEngPrcntTorqueHighResolution
#define ActlEngPrcntTorqueHighResolution_CovFactor 0.125
#define ActlEngPrcntTorqueHighResolution_CovS(x) ((uint8_t)((x / 0.125)))
// signal: @DriversDemandEngPercentTorque
#define DriversDemandEngPercentTorque_CovFactor 1
#define DriversDemandEngPercentTorque_CovS(x) ((int16_t)(x + 125))
// signal: @ActualEngPercentTorque
#define ActualEngPercentTorque_CovFactor 1
#define ActualEngPercentTorque_CovS(x) ((int16_t)(x + 125))
// signal: @EngSpeed
#define EngSpeed_CovFactor 0.125
#define EngSpeed_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @EngDemandPercentTorque
#define EngDemandPercentTorque_CovFactor 1
#define EngDemandPercentTorque_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // State signal which indicates which engine torque mode is currently generating, limiting, or controlling the torque.  Note that the modes are not in prioritized order. Not all modes may be relevant for a given device.  Some devices may not implement ...
  uint8_t EngTorqueMode;                      //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // This parameter displays an additional torque in percent of the reference engine torque.  When the MSB is set to 1, this parameter is not available.  When the MSB is set to 0, bits 1 to 3 indicate the desired torque with resolution of 0.125%/bit  ...
  // 7 - "+0.875%" 
  // 1 - "+0.125%" 
  // 0 - "+0.000%" 

  uint8_t ActlEngPrcntTorqueHighResolution;   //      Bits=04.  [ 0     , 0.875  ]  Unit:'%'     Factor= 0.125 

  // The requested torque output of the engine by the driver. It is based on input from the following requestors external to the powertrain: operator (via the accelerator pedal), cruise control and/or road speed limit governor. Dynamic commands from ...
  int16_t DriversDemandEngPercentTorque;      //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Offset= -125     

  // The calculated output torque of the engine.  The data is transmitted in indicated torque as a percent of reference engine torque (see the engine configuration message, PGN 65251).  The engine percent torque value will not be less than zero and it ...
  int16_t ActualEngPercentTorque;             //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Offset= -125     

  // Actual engine speed which is calculated over a minimum crankshaft angle of 720 degrees divided by the number of cylinders.
  uint16_t EngSpeed;                          //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // The source address of the SAE J1939 device currently controlling the engine.  It is used to expand the torque mode parameter (see SPN 899) in cases where control is in response to an ECU that is not listed in Table SPN899_A.  Its value may be the ...
  uint8_t SrcAddrssOfCntrllngDvcForEngCtrl;   //      Bits=08.  [ 0     , 253    ]  Unit:''     

  // There are several phases in a starting action and different reasons why a start cannot take place.  0000 start not requested  0001 starter active, gear not engaged  0010 starter active, gear engaged  0011 start finished; starter not active after ...
  // 8 - "starter inhibited due to starter over-temp" 
  // 7 - "starter inhibited due to active immobilizer" 
  // 6 - "starter inhibited due to driveline engaged or other transmission inhibit" 
  // 5 - "starter inhibited due to engine not ready for start" 
  // 4 - "starter inhibited due to engine already running" 
  // 3 - "start finished" 
  // 2 - "starter active,  gear engaged" 
  // 1 - "starter active,  gear not engaged" 
  // 0 - "start not requested" 
  // 15 - "not available" 
  // 14 - "error" 
  // 13 - "error, legacy implementation only" 
  // 12 - "starter inhibited" 
  // 11 - "Reserved" 
  // 10 - "starter inhibited due to active SCR inducement" 
  // 9 - "starter inhibited due to intake air shutoff valve being active" 

  uint8_t EngStarterMode;                     //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The requested torque output of the engine by all dynamic internal inputs, including smoke control, noise control and low and high speed governing.
  int16_t EngDemandPercentTorque;             //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     
  uint32_t framecnt;
} EEC1_t;

// def @EGF1 CAN Message (217058046)
#define EGF1_IDE (1U)
#define EGF1_DLC (8U)
#define EGF1_CANID (0xCF00AFEU)
#define EGF1_CYC (50U)
// -- Engine Gas Flow Rate  Flow rates of Air and mixed gasses into the engine cylinders.
// signal: @EngExhstGsRcrcltion1MassFlowRate
#define EngExhstGsRcrcltion1MassFlowRate_CovFactor 0.05
#define EngExhstGsRcrcltion1MassFlowRate_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @EngIntakeAirMassFlowRate
#define EngIntakeAirMassFlowRate_CovFactor 0.05
#define EngIntakeAirMassFlowRate_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @EngExhstGsRcrcltion2MassFlowRate
#define EngExhstGsRcrcltion2MassFlowRate_CovFactor 0.05
#define EngExhstGsRcrcltion2MassFlowRate_CovS(x) ((uint16_t)((x / 0.05)))
typedef struct
{

  // Flow rate of gas through the EGR system. Flow rate of the exhaust gas being recirculated into the combustion air.
  uint16_t EngExhstGsRcrcltion1MassFlowRate;  //      Bits=16.  [ 0     , 3212.75 ]  Unit:'kg/h'  Factor= 0.05  

  // Mass flow rate of fresh air entering the engine air intake, before any EGR mixer, if used.  Flow rate of fresh air conducted to the engine cylinders to support combustion.
  uint16_t EngIntakeAirMassFlowRate;          //      Bits=16.  [ 0     , 3212.75 ]  Unit:'kg/h'  Factor= 0.05  

  // Flow rate of gas through the second EGR system. Flow rate of the exhaust gas being recirculated from the 2nd EGR system into combustion air.
  uint16_t EngExhstGsRcrcltion2MassFlowRate;  //      Bits=16.  [ 0     , 3212.75 ]  Unit:'kg/h'  Factor= 0.05  
  uint32_t framecnt;
} EGF1_t;

// def @ETC8 CAN Message (217058558)
#define ETC8_IDE (1U)
#define ETC8_DLC (8U)
#define ETC8_CANID (0xCF00CFEU)
#define ETC8_CYC (20U)
// -- Electronic Transmission Controller #8  Electronic Transmission Controller #8
// signal: @TransTorqueConverterRatio
#define TransTorqueConverterRatio_CovFactor 0.001
#define TransTorqueConverterRatio_CovS(x) ((uint16_t)((x / 0.001)))
// signal: @TransClutch_ConverterInputSpeed
#define TransClutch_ConverterInputSpeed_CovFactor 0.125
#define TransClutch_ConverterInputSpeed_CovS(x) ((uint16_t)((x / 0.125)))
typedef struct
{

  // Ratio of the transmissions torque converter output torque to torque converter input torque at current speed.  The ratio of 1.000 ( 03 E8 hex ) indicates torque converter lockup.  If the ratio is less than 1 and the ratio can not be properly ...
  uint16_t TransTorqueConverterRatio;        //      Bits=16.  [ 0     , 64.255 ]  Unit:''      Factor= 0.001 

  // Rotational velocity of the input to a transmission's master clutch or torque converter. In most cases the rotational velocity will be the same as engine flywheel speed unless there is an intermediate device, such as a power divider, between the ...
  uint16_t TransClutch_ConverterInputSpeed;  //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 
  uint32_t framecnt;
} ETC8_t;

// def @LOI CAN Message (217058814)
#define LOI_IDE (1U)
#define LOI_DLC (8U)
#define LOI_CANID (0xCF00DFEU)
#define LOI_CYC (100U)
// -- Land Leveling System Operational Information  Group of operational parameters associated with the Land Leveling System, such as switch states.    This is provided to the device controlling the blade, and is usually directed at the primary land ...
typedef struct
{

  // Indicates the blade control mode switch state the user has set for the land leveling system.  The switch value directly correlates to the current switch state, regardless of the switch being used.  This parameter is intended for use in systems using ...
  // 15 - "Not Installed" 
  // 14 - "Error Indicator" 
  // 3 - "Automatic button pressed" 
  // 2 - "Manual button pressed" 
  // 1 - "Mode button pressed" 
  // 0 - "No button pressed" 

  uint8_t BladeCtrlModeSwitch;                //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Indicates the grade offset switch state the user has set for the land leveling system.  The desired grade offset value is the vertical offset measured from a given elevation reference point to the bottom edge of the blade.  This parameter is ...
  // 15 - "Not installed" 
  // 14 - "Error Indicator" 
  // 2 - "Decrement button pressed" 
  // 1 - "Increment button pressed" 
  // 0 - "No button pressed" 

  uint8_t DesiredGradeOffsetSwitch;           //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Allows other controllers to command to the primary control system what they think is the appropriate auto control mode to be engaged in, based on the information they have available to them.  When in automatic mode, the blade automatically adjusts ...
  // 15 - "Not Supported" 
  // 14 - "Error Indicator" 
  // 4 - "Auto Not Allowed" 
  // 3 - "Service Mode" 
  // 2 - "Suspend Auto" 
  // 1 - "Activity Allows Auto" 
  // 0 - "Auto Allowed" 

  uint8_t BladeAutoModeCmd;                   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // This parameter indicates the left blade control mode operator control state the user has set for the land leveling system.  The operator control value directly relates to the current operator control state correlating to the left edge of the blade ...
  // 15 - "Not Installed" 
  // 14 - "Error Indicator" 
  // 3 - "Automatic Operator Control Request" 
  // 2 - "Manual Operator Control Request" 
  // 1 - "Momentary Operator Control Request" 
  // 0 - "No Change" 

  uint8_t LeftBladeCtrlModeOperatorCtrl;      //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // This parameter indicates the right blade control mode operator control state the user has set for the land leveling system.  The operator control value directly relates to the current operator control state correlating to the left edge of the blade ...
  // 15 - "Not Installed" 
  // 14 - "Error Indicator" 
  // 3 - "Automatic Operator Control Request" 
  // 2 - "Manual Operator Control Request" 
  // 1 - "Momentary Operator Control Request" 
  // 0 - "No Change" 

  uint8_t RightBladeCtrlModeOperatorCtrl;     //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // This parameter indicates the left blade offset operator control state the user has set for the land leveling system.  The left desired blade offset value is the offset measured from a given reference point to the bottom left edge of the blade. This ...
  // 15 - "Not installed" 
  // 14 - "Error Indicator" 
  // 2 - "Decrement Operator Control Request" 
  // 1 - "Increment Operator Control Request" 
  // 0 - "No Operator Control Request" 

  uint8_t LftDsiredBladeOffsetOperatorCtrl;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // This parameter indicates the right blade offset operator control state the user has set for the land leveling system.  The right desired blade offset value is the offset measured from a given reference point to the bottom right edge of the blade ...
  // 15 - "Not installed" 
  // 14 - "Error Indicator" 
  // 2 - "Decrement Operator Control Request" 
  // 1 - "Increment Operator Control Request" 
  // 0 - "No Operator Control Request" 

  uint8_t RghtDsredBladeOffsetOperatorCtrl;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // This parameter indicates the side-shift offset operator control state the user has set for the land leveling system. When an implement moves in a side-shift direction, it moves from side to side, usually along its longitudinal axis. The desired ...
  // 15 - "Not installed" 
  // 14 - "Error Indicator" 
  // 2 - "Decrement Operator Control Request" 
  // 1 - "Increment Operator Control Request" 
  // 0 - "No Operator Control Request" 

  uint8_t SdshiftBladeCtrlModeOperatorCtrl;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // This parameter indicates the side-shift blade control mode operator control state the user has set for the land leveling system.  When an implement moves in a side-shift direction, it moves from side to side, usually along its longitudinal axis.   ...
  // 15 - "Not Installed" 
  // 14 - "Error Indicator" 
  // 3 - "Automatic Operator Control Request" 
  // 2 - "Manual Operator Control Request" 
  // 1 - "Momentary Operator Control Request" 
  // 0 - "No Operator Control Request" 

  uint8_t SdshftDsrdBldeOffsetOperatorCtrl;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Command from a display or other external device (i.e. remote switch) to the land leveling system controller instructing the controller to set the reference elvation based on data received from the corresponding land leveling sensor.  00 = Do not Set ...
  // 3 - "Don't Care / Take No Action" 
  // 2 - "Reserved" 
  // 1 - "Set Reference Elevation" 
  // 0 - "Do not Set Reference Elevation" 

  uint8_t StElvtnSensor1ReferenceElevation;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command from a display or other external device (i.e. remote switch) to the land leveling system controller instructing the controller to set the reference elvation based on data received from the corresponding land leveling sensor.  00 = Do not Set ...
  // 3 - "Don't Care / Take No Action" 
  // 2 - "Reserved" 
  // 1 - "Set Reference Elevation" 
  // 0 - "Do not Set Reference Elevation" 

  uint8_t StElvtnSensor2ReferenceElevation;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} LOI_t;

// def @SSI CAN Message (217060350)
#define SSI_IDE (1U)
#define SSI_DLC (8U)
#define SSI_CANID (0xCF013FEU)
#define SSI_CYC (10U)
// -- Slope Sensor Information  The Slope Sensor Information message shall provide a measurement of the vehicles pitch angle, a measurement of the vehicles roll angle, and a measurement of the vehicles pitch rate.  The vehicle dynamics measurements in ...
// signal: @PitchAngle
#define PitchAngle_CovFactor 0.002
#define PitchAngle_CovS(x) ((int32_t)((x / 0.002) + 32000))
// signal: @RollAngle
#define RollAngle_CovFactor 0.002
#define RollAngle_CovS(x) ((int32_t)((x / 0.002) + 32000))
// signal: @PitchRate
#define PitchRate_CovFactor 0.002
#define PitchRate_CovS(x) ((int32_t)((x / 0.002) + 32000))
// signal: @RollAndPitchMeasurementLatency
#define RollAndPitchMeasurementLatency_CovFactor 0.5
#define RollAndPitchMeasurementLatency_CovS(x) ((uint8_t)((x / 0.5)))
typedef struct
{

  // The angle between the vehicle x-axis and the ground plane (i.e. rotation about the vehicle Y-axis).  The pitch angle for an angle of ascent is reported with a positive value. This parameter is defined according to a Z-Down axis system and the sign ...
  int32_t PitchAngle;                       //      Bits=16.  [ -64   , 64.51  ]  Unit:'deg'   Offset= -64       Factor= 0.002 

  // The angle between the vehicle y-axis and the ground plane (i.e. rotation about the X-axis).  The roll angle for a roll to the right is reported with a positive value. Roll angle is the same for both Z-Down and Z-Up axis systems, since both systems ...
  int32_t RollAngle;                        //      Bits=16.  [ -64   , 64.51  ]  Unit:'deg'   Offset= -64       Factor= 0.002 

  // Pitch rate is the rate-of-change of the pitch angle over time, where the pitch angle vector is in the direction of travel of the vehicle. The pitch rate for increasing ascent over time is reported with a positive value. This parameter is defined ...
  int32_t PitchRate;                        //      Bits=16.  [ -64   , 64.51  ]  Unit:'deg/s' Offset= -64       Factor= 0.002 

  // Figure of merit for pitch angle measurement.    00 - Pitch angle fully functional.  Data is within sensor specification.   01 - Pitch angle degraded.  Data is suspect due to environmental conditions.  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Pitch angle degraded" 
  // 0 - "Pitch angle fully functional" 

  uint8_t PitchAngleFigureOfMerit;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Figure of merit for roll angle measurement.    00 - Roll angle fully functional.  Data is within sensor specification.     01 - Roll angle degraded.  Data is suspect due to environmental conditions.  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Roll angle degraded" 
  // 0 - "Roll angle fully functional" 

  uint8_t RollAngleFigureOfMerit;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Figure of merit for the pitch rate measurement.    00 - Pitch rate fully functional.  Data is within sensor specification.     01 - Pitch rate degraded.  Data is suspect due to environmental conditions.  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Pitch rate degraded" 
  // 0 - "Pitch rate fully functional" 

  uint8_t PitchRateFigureOfMerit;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Compensated mode for the pitch and roll measurements.  Compensation is the use of multiple sensors together to enhance the output of pitch and roll measurements.    00 - Compensation Off  01 - Compensation On  10 - Error  11 - Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Compensation On" 
  // 0 - "Compensation Off" 

  uint8_t PitchAndRollCompensated;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The estimated measurement latency of the measurement.  NOTE: This is only the sensor latency and does not include any additional latencies that might exist because of the CAN Bus or overall system implementation.  Latency is the time from sensor ...
  uint8_t RollAndPitchMeasurementLatency;   //      Bits=08.  [ 0     , 125    ]  Unit:'ms'    Factor= 0.5   
  uint32_t framecnt;
} SSI_t;

// def @BI CAN Message (217060606)
#define BI_IDE (1U)
#define BI_DLC (8U)
#define BI_CANID (0xCF014FEU)
#define BI_CYC (50U)
// -- Blade Information  A measurement of the machine's relative blade height and a rotational angle measurement of the machine blade yaw angle around the machine z-axis.  The vehicle dynamics measurements in this message shall be according to a Z-Down ...
// signal: @RelativeBladeHeight
#define RelativeBladeHeight_CovFactor 0.1
#define RelativeBladeHeight_CovS(x) ((int32_t)((x / 0.1) + 32000))
// signal: @BladeRotationAngle
#define BladeRotationAngle_CovFactor 0.0078125
#define BladeRotationAngle_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @RltvBldHghtAndBldRttnAnglMsrmntL
#define RltvBldHghtAndBldRttnAnglMsrmntL_CovFactor 0.5
#define RltvBldHghtAndBldRttnAnglMsrmntL_CovS(x) ((uint8_t)((x / 0.5)))
typedef struct
{

  // The measured vertical distance from a fixed location on the machine blade to a ground-based reference (i.e. relative height).  Examples of a ground based reference include a curb, a stringline or the ground itself.  The measurement may be positive ...
  int32_t RelativeBladeHeight;                //      Bits=16.  [ -3200 , 3225.5 ]  Unit:'mm'    Offset= -3200     Factor= 0.1   

  // The blade rotation angle measurement around the yaw (z-axis).  The Blade Rotation Angle is defined to be the angle from the null position on the machine.  The null position is orthogonal from the z-axis along the x-axis.  A positive blade angle ...
  int32_t BladeRotationAngle;                 //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The estimated measurement latency of the measurement.  NOTE: This is only the sensor latency and does not include any additional latencies that might exist because of the CAN Bus or overall system implementation.  For example, if the technique used ...
  uint8_t RltvBldHghtAndBldRttnAnglMsrmntL;   //      Bits=08.  [ 0     , 125    ]  Unit:'ms'    Factor= 0.5   

  // Figure of merit for blade height measurement.  Bits  00  Relative Blade Height fully functional.  Data is within sensor specification.  01  Relative Blade Height degraded.  Data is suspect due to environmental conditions.  10  Relative Blade Height ...
  // 3 - "Relative Blade Height not available" 
  // 2 - "Relative Blade Height failed" 
  // 1 - "Relative Blade Height degraded" 
  // 0 - "Relative Blade Height fully functional" 

  uint8_t RelativeBladeHeightFigureOfMerit;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Figure of merit for blade rotation measurement.  Bits  00  Blade Rotation Angle fully functional.  Data is within sensor specification.  01  Blade Rotation Angle  degraded.  Data is suspect due to environmental conditions.  10  Blade Rotation Angle ...
  // 3 - "Blade Rotation Angle not available" 
  // 2 - "Blade Rotation Angle failed" 
  // 1 - "Blade Rotation Angle  degraded" 
  // 0 - "Blade Rotation Angle fully functional" 

  uint8_t BladeRotationAngleFigureOfMerit;    //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} BI_t;

// def @RGTACRP CAN Message (217060862)
#define RGTACRP_IDE (1U)
#define RGTACRP_DLC (8U)
#define RGTACRP_CANID (0xCF015FEU)
#define RGTACRP_CYC (100U)
// -- Requested Generator Total AC Reactive Power  Contains requested reactive and power factor control values
// signal: @RqGeneratorTotalACReactivePower
#define RqGeneratorTotalACReactivePower_CovFactor 1
#define RqGeneratorTotalACReactivePower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @RqGeneratorOverallPowerFactor
#define RqGeneratorOverallPowerFactor_CovFactor 6.103515625E-05
#define RqGeneratorOverallPowerFactor_CovS(x) ((int32_t)((x / 6.103515625E-05) + 16384))
typedef struct
{

  // The total reactive power requested to be delivered by the generator
  int64_t RqGeneratorTotalACReactivePower;   //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'VA'    Offset= -2000000000

  // The requested average power factor of the generator.
  int32_t RqGeneratorOverallPowerFactor;     //      Bits=16.  [ -1    , 1      ]  Unit:''      Offset= -1        Factor= 6.103515625E-05

  // The requested lead/lag status for the generator average AC power factor    00 - Leading  01 - Lagging  10 - Reserved  11 - Not available or Not installed
  // 3 - "Not available or Not installed" 
  // 2 - "Reserved" 
  // 1 - "Lagging" 
  // 0 - "Leading" 

  uint8_t RqGenOverallPowerFactorLagging;    //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} RGTACRP_t;

// def @CCS CAN Message (217061118)
#define CCS_IDE (1U)
#define CCS_DLC (8U)
#define CCS_CANID (0xCF016FEU)
#define CCS_CYC (5000U)
// -- Cylinder Combustion Status  Used to send the SPNs containing information relating to the state of combustion for 24 cylinders. When there is no combustion detected on any one cylinder, this PGN needs to be sent every crank revolution (engine speed ...
typedef struct
{

  // This parameter is used to indicate state of combustion in engine cylinder #1    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl1CombustionStatus;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #2    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl2CombustionStatus;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #3    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl3CombustionStatus;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #4    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl4CombustionStatus;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #5    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl5CombustionStatus;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #6    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl6CombustionStatus;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #7    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl7CombustionStatus;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #8    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl8CombustionStatus;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #9    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl9CombustionStatus;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #10    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl10CombustionStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #11    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl11CombustionStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #12    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl12CombustionStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #13    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl13CombustionStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #14  00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl14CombustionStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #15    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl15CombustionStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #16    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl16CombustionStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #17    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl17CombustionStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #18    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl18CombustionStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #19    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl19CombustionStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #20    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl20CombustionStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #21    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl21CombustionStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #22    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl22CombustionStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #23    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl23CombustionStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate state of combustion in engine cylinder #24    00        No combustion  01        Combustion exists  10        Error  11        Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Combustion exists" 
  // 0 - "No combustion" 

  uint8_t EngCyl24CombustionStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} CCS_t;

// def @KL1 CAN Message (217061374)
#define KL1_IDE (1U)
#define KL1_DLC (8U)
#define KL1_CANID (0xCF017FEU)
#define KL1_CYC (5000U)
// -- Engine Knock Level #1  Used to send the SPNs containing information relating to the level of knock for 8 cylinders. When knock is detected on any one cylinder, this PGN needs to be sent every crank revolution (engine speed dependant). If there is no ...
typedef struct
{

  // Used to indicate the level of knock for engine cylinder 1. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl1KnockLevel;             //      Bits=08.  [ 0     , 100    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 2. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl2KnockLevel;             //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 3. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl3KnockLevel;             //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 4. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl4KnockLevel;             //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 5. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl5KnockLevel;             //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 6. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl6KnockLevel;             //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 7. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl7KnockLevel;             //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 8. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl8KnockLevel;             //      Bits=08.  [ 0     , 250    ]  Unit:'%'    
  uint32_t framecnt;
} KL1_t;

// def @KL2 CAN Message (217061630)
#define KL2_IDE (1U)
#define KL2_DLC (8U)
#define KL2_CANID (0xCF018FEU)
#define KL2_CYC (5000U)
// -- Engine Knock Level #2  Used to send the SPNs containing information relating to the level of knock for 8 cylinders. When knock is detected on any one cylinder, this PGN needs to be sent every crank revolution (engine speed dependant). If there is no ...
typedef struct
{

  // Used to indicate the level of knock for engine cylinder 9. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl9KnockLevel;             //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 10. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl10KnockLevel;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 11. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl11KnockLevel;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 12. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl12KnockLevel;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 13. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl13KnockLevel;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 14. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl14KnockLevel;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 15. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl15KnockLevel;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 16. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl16KnockLevel;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    
  uint32_t framecnt;
} KL2_t;

// def @KL3 CAN Message (217061886)
#define KL3_IDE (1U)
#define KL3_DLC (8U)
#define KL3_CANID (0xCF019FEU)
#define KL3_CYC (5000U)
// -- Engine Knock Level #3  Used to send the SPNs containing information relating to the level of knock for 8 cylinders. When knock is detected on any one cylinder, this PGN needs to be sent every crank revolution (engine speed dependant). If there is no ...
typedef struct
{

  // Used to indicate the level of knock for engine cylinder 17. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl17KnockLevel;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 18. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl18KnockLevel;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 19. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl19KnockLevel;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 20. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl20KnockLevel;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 21. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl21KnockLevel;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 22. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl22KnockLevel;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 23. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl23KnockLevel;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to indicate the level of knock for engine cylinder 24. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl24KnockLevel;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    
  uint32_t framecnt;
} KL3_t;

// def @RGAAC CAN Message (217062654)
#define RGAAC_IDE (1U)
#define RGAAC_DLC (8U)
#define RGAAC_CANID (0xCF01CFEU)
#define RGAAC_CYC (100U)
// -- Requested Generator Average Basic AC Quantities  Contains Requested Generator Average Basic AC Quantities
// signal: @RqdGnrtrAvrgLneLineACRMSVoltage
#define RqdGnrtrAvrgLneLineACRMSVoltage_CovFactor 0.0078125
#define RqdGnrtrAvrgLneLineACRMSVoltage_CovS(x) ((uint32_t)((x / 0.0078125)))
typedef struct
{

  // The requested average AC RMS voltage to be delivered by the generator.
  uint32_t RqdGnrtrAvrgLneLineACRMSVoltage;  //      Bits=32.  [ 0     , 32899071 ]  Unit:'V'     Factor= 0.0078125
  uint32_t framecnt;
} RGAAC_t;

// def @GC2 CAN Message (217063166)
#define GC2_IDE (1U)
#define GC2_DLC (8U)
#define GC2_CANID (0xCF01EFEU)
#define GC2_CYC (20U)
// -- Generator Control 2  Contains parameters that allow the generator control system to control the engine and to provide information about the generator control system
// signal: @GeneratorGoverningBias
#define GeneratorGoverningBias_CovFactor 0.004
#define GeneratorGoverningBias_CovS(x) ((int32_t)((x / 0.004) + 31250))
typedef struct
{

  // Control signal used to govern the genset's speed or load (depending on isochronous or utility parallel operation, respectively)  NOTE:  If this method of engine control is used, the PGN 0 (TSC1) is not expected to be received by the engine ...
  int32_t GeneratorGoverningBias;        //      Bits=16.  [ -125  , 125    ]  Unit:'%'     Offset= -125      Factor= 0.004 
  uint32_t framecnt;
} GC2_t;

// def @A1SCRDSI1 CAN Message (217064446)
#define A1SCRDSI1_IDE (1U)
#define A1SCRDSI1_DLC (8U)
#define A1SCRDSI1_CANID (0xCF023FEU)
#define A1SCRDSI1_CYC (50U)
// -- Aftertreatment 1 SCR Dosing System Information 1  This message contains SCR dosing system information for aftertreatment system 1 (or bank 1).  See PGN 64833 for more information.
// signal: @DEFActualDosingQuantity
#define DEFActualDosingQuantity_CovFactor 0.3
#define DEFActualDosingQuantity_CovS(x) ((uint16_t)((x / 0.3)))
// signal: @DEFActualQuantityOfIntegrator
#define DEFActualQuantityOfIntegrator_CovFactor 0.1
#define DEFActualQuantityOfIntegrator_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @DEFDoser1AbsPress
#define DEFDoser1AbsPress_CovFactor 8
#define DEFDoser1AbsPress_CovS(x) ((uint8_t)((x / 8)))
// signal: @DEFActualDosingQuantity6595
#define DEFActualDosingQuantity6595_CovFactor 0.05
#define DEFActualDosingQuantity6595_CovS(x) ((uint16_t)((x / 0.05)))
typedef struct
{

  // Actual reducing agent quantity of SCR-system
  uint16_t DEFActualDosingQuantity;        //      Bits=16.  [ 0     , 19276.5 ]  Unit:'g/h'   Factor= 0.3   

  // Actual state of SCR system  0000    Dormant (sleep mode)  0001    Preparing dosing readiness (wake up; prepare to operate; wait for start)  0010    Normal dosing operation  0011    System error pending  0100    Purging (SCR dosing system is removing ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 11 - "Ok to Power Down" 
  // 10 - "Service test mode,  dosing not allowed" 
  // 9 - "Service test mode,  dosing allowed " 
  // 8 - "Diagnosis" 
  // 7 - "Shutoff " 
  // 6 - "Protect mode against cold " 
  // 5 - "Protect mode against heat " 
  // 4 - "Purging" 
  // 3 - "System error pending" 
  // 2 - "Normal dosing operation" 
  // 1 - "Preparing dosing readiness" 
  // 0 - "Dormant" 

  uint8_t Sys1St;                          //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Actual state of SCR system 2  0000 = Dormant (sleep mode)  0001 = Preparing dosing readiness (wake up; prepare to operate; wait for start)  0010 = Normal dosing operation  0011 = System error pending  0100 = Purging (SCR dosing system is removing ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 11 - "Ok to Power Down" 
  // 10 - "Service test mode,  dosing not allowed" 
  // 9 - "Service test mode,  dosing allowed" 
  // 8 - "Diagnosis" 
  // 7 - "Shutoff" 
  // 6 - "Protect mode against cold" 
  // 5 - "Protect mode against heat" 
  // 4 - "Purging" 
  // 3 - "System error pending" 
  // 2 - "Normal dosing operation" 
  // 1 - "Preparing dosing readiness" 
  // 0 - "Dormant" 

  uint8_t Sys2St;                          //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The SCR requested diesel exhaust fluid integrator total quantity for aftertreatment system 1 (exhaust bank 1).
  uint16_t DEFActualQuantityOfIntegrator;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'g'     Factor= 0.1   

  // The absolute pressure (measured closest to dosing valve) of the first or only DEF dosing unit for aftertreatment system 1 (exhaust bank 1).
  uint8_t DEFDoser1AbsPress;               //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // Actual dosing quantity of diesel exhaust fluid. See SPN 4331 if high range measurement is not needed.
  uint16_t DEFActualDosingQuantity6595;    //      Bits=16.  [ 0     , 3212.75 ]  Unit:'g/min' Factor= 0.05  
  uint32_t framecnt;
} A1SCRDSI1_t;

// def @A1SCRDSR1 CAN Message (217064702)
#define A1SCRDSR1_IDE (1U)
#define A1SCRDSR1_DLC (8U)
#define A1SCRDSR1_CANID (0xCF024FEU)
#define A1SCRDSR1_CYC (50U)
// -- Aftertreatment 1 SCR Dosing System Requests 1  This message contains SCR dosing system request information for aftertreatment system 1 (or bank 1).  See PGN 64832 for more information.
// signal: @DEFDosingReqQuantity
#define DEFDosingReqQuantity_CovFactor 0.3
#define DEFDosingReqQuantity_CovS(x) ((uint16_t)((x / 0.3)))
// signal: @DEFReqQuantityOfIntegrator
#define DEFReqQuantityOfIntegrator_CovFactor 0.1
#define DEFReqQuantityOfIntegrator_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @DEFDosingReqQuantity6593
#define DEFDosingReqQuantity6593_CovFactor 0.05
#define DEFDosingReqQuantity6593_CovS(x) ((uint16_t)((x / 0.05)))
typedef struct
{

  // Actual requested dosing quantity of diesel exhaust fluid.
  uint16_t DEFDosingReqQuantity;            //      Bits=16.  [ 0     , 19276.5 ]  Unit:'g/h'   Factor= 0.3   

  // Requested state of SCR system for aftertreatment system 1 (exhaust bank 1).  0000 Dormant (sleep mode)  0001 Preparing dosing readiness (wake up; prepare to operate; wait for start)  0010 Normal dosing operation  0011 System error pending  0100 ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 10 - "Service test mode,  dosing not allowed" 
  // 9 - "Service test mode,  dosing allowed " 
  // 8 - "Diagnosis" 
  // 7 - "Shutoff" 
  // 6 - "Protect mode against cold" 
  // 5 - "Protect mode against heat" 
  // 4 - "Reserved for future assignment by SAE " 
  // 3 - "System error pending " 
  // 2 - "Normal dosing operation " 
  // 1 - "Preparing dosing readiness" 
  // 0 - "Dormant" 

  uint8_t SysReqSt;                         //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // After a request to permit the DEF hydraulic stiffness check has been indicated, this permission status is expected by the DEF control unit for aftertreatment system 1.  00 = not allowed  01 = DEF hydraulic stiffness check allowed  10 = error  11 = ...
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "DEF hydraulic stiffness check allowed" 
  // 0 - "not allowed" 

  uint8_t DEFHydStiffnessCheckPermStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // After a request to permit the DEF dosing test injection has been indicated, this permission status is expected by the DEF control unit for aftertreatment system 1.  00 = not allowed  01 = DEF dosing test injection allowed  10 = error  11 = not ...
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "DEF dosing test injection allowed" 
  // 0 - "not allowed" 

  uint8_t DEFDosingTestInjPermStatus;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Represents the command for the diesel exhaust fluid quantity integrator in the dosing control unit
  uint16_t DEFReqQuantityOfIntegrator;      //      Bits=16.  [ 0     , 6425.5 ]  Unit:'g'     Factor= 0.1   

  // Requested dosing quantity of diesel exhaust fluid. This SPN is a high range measurement. See SPN 4348 if high range is not needed.
  uint16_t DEFDosingReqQuantity6593;        //      Bits=16.  [ 0     , 3212.75 ]  Unit:'g/min' Factor= 0.05  
  uint32_t framecnt;
} A1SCRDSR1_t;

// def @A1SCRAI CAN Message (217064958)
#define A1SCRAI_IDE (1U)
#define A1SCRAI_DLC (8U)
#define A1SCRAI_CANID (0xCF025FEU)
#define A1SCRAI_CYC (50U)
// -- Aftertreatment 1 SCR Ammonia Information  This message contains aftertreatment outlet ammonia information for aftertreatment system 1 (or bank 1).
// signal: @OutNH3
#define OutNH3_CovFactor 0.05
#define OutNH3_CovS(x) ((int32_t)((x / 0.05) + 4000))
typedef struct
{

  // The amount of NH3 in the exhaust exiting the aftertreatment system measured by a NH3 sensor at the aftertreatment outlet, represented in NH3 molecule parts per million non-NH3 molecules in exhaust bank 1.
  int32_t OutNH3;                           //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment outlet NH3 sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe ...
  uint8_t OutNH3SnsrPreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates that the NH3 reading of the aftertreatment outlet NH3 sensor is stable as determined by the manufacturer?s control software in exhaust bank 1.    00 - Reading is not stable  01 - Reading is stable  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Reading is stable" 
  // 0 - "Reading is not stable" 

  uint8_t OutNH3ReadingStable;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the power supplied to the aftertreatment outlet NH3 gas sensor is within the manufacturer?s specification in exhaust bank 1.    00 - Power is not in range  01 - Power is in range  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Power is in range" 
  // 0 - "Power is not in range" 

  uint8_t OutNH3GasSnsrPwrInRange;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the heater element of the aftertreatment outlet NH3 gas sensor is within the manufacturer?s specified range for accurate measurements in exhaust bank 1.  00 - Heater element is not in range  01 - Heater element is in range  10 - Error   ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Heater element is in range" 
  // 0 - "Heater element is not in range" 

  uint8_t OutNH3GasSnsrAtTemp;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the heater of the outlet NH3 exhaust gas sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures the ...
  uint8_t OutNH3GasSnsrHtrPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the heater status in the warm-up process. Upon receiving a power-up command, the NH3 gas sensor ramps up according to a manufacturer defined profile. The Preheat 1, Preheat 2, and Automatic messages are regions within this profile in ...
  // 3 - "Heater off or not available" 
  // 2 - "Preheat 1 " 
  // 1 - "Preheat 2 " 
  // 0 - "Automatic " 

  uint8_t OutNH3GasSnsrHtrCtrl;             //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} A1SCRAI_t;

// def @A2SCRDSI1 CAN Message (217065214)
#define A2SCRDSI1_IDE (1U)
#define A2SCRDSI1_DLC (8U)
#define A2SCRDSI1_CANID (0xCF026FEU)
#define A2SCRDSI1_CYC (50U)
// -- Aftertreatment 2 SCR Dosing System Information 1  This message contains SCR dosing system information for aftertreatment system 2 (or bank 2).  See PGN 64827 for more information.
// signal: @DEFActualDosingQuantity
#define DEFActualDosingQuantity_CovFactor 0.3
#define DEFActualDosingQuantity_CovS(x) ((uint16_t)((x / 0.3)))
// signal: @DEFActualQuantityOfIntegrator
#define DEFActualQuantityOfIntegrator_CovFactor 0.1
#define DEFActualQuantityOfIntegrator_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @DEFDoser1AbsPress
#define DEFDoser1AbsPress_CovFactor 8
#define DEFDoser1AbsPress_CovS(x) ((uint8_t)((x / 8)))
// signal: @DEFActualDosingQuantity6596
#define DEFActualDosingQuantity6596_CovFactor 0.05
#define DEFActualDosingQuantity6596_CovS(x) ((uint16_t)((x / 0.05)))
typedef struct
{

  // Actual reducing agent quantity of SCR system.
  uint16_t DEFActualDosingQuantity;        //      Bits=16.  [ 0     , 19276.5 ]  Unit:'g/h'   Factor= 0.3   

  // Actual state of SCR system 1.  0000    Dormant (sleep mode)  0001    Preparing dosing readiness (wake up; prepare to operate; wait for start)  0010    Normal dosing operation  0011    System error pending  0100    Purging (SCR dosing system is ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 11 - "Ok to Power Down" 
  // 10 - "Service test mode,  dosing not allowed" 
  // 9 - "Service test mode,  dosing allowed " 
  // 8 - "Diagnosis" 
  // 7 - "Shutoff" 
  // 6 - "Protect mode against cold" 
  // 5 - "Protect mode against heat" 
  // 4 - "Purging" 
  // 3 - "System error pending" 
  // 2 - "Normal dosing operation" 
  // 1 - "Preparing dosing readiness" 
  // 0 - "Dormant" 

  uint8_t Sys1St;                          //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Actual state of SCR system 2  0000 = Dormant (sleep mode)  0001 = Preparing dosing readiness (wake up; prepare to operate; wait for start)  0010 = Normal dosing operation  0011 = System error pending  0100 = Purging (SCR dosing system is removing ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 11 - "Ok to Power Down" 
  // 10 - "Service test mode,  dosing not allowed" 
  // 9 - "Service test mode,  dosing allowed" 
  // 8 - "Diagnosis" 
  // 7 - "Shutoff" 
  // 6 - "Protect mode against cold" 
  // 5 - "Protect mode against heat" 
  // 4 - "Purging" 
  // 3 - "System error pending" 
  // 2 - "Normal dosing operation" 
  // 1 - "Preparing dosing readiness" 
  // 0 - "Dormant" 

  uint8_t Sys2St;                          //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The SCR requested diesel exhaust fluid integrator total quantity for aftertreatment system 2 (exhaust bank 2).
  uint16_t DEFActualQuantityOfIntegrator;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'g'     Factor= 0.1   

  // The absolute pressure (measured closest to dosing valve) of the first or only DEF doser for aftertreatment system 2 (exhaust bank 2).
  uint8_t DEFDoser1AbsPress;               //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // Actual dosing quantity of diesel exhaust fluid. See SPN 4384 if high range measurement is not needed.
  uint16_t DEFActualDosingQuantity6596;    //      Bits=16.  [ 0     , 3212.75 ]  Unit:'g/min' Factor= 0.05  
  uint32_t framecnt;
} A2SCRDSI1_t;

// def @A2SCRDSR1 CAN Message (217065470)
#define A2SCRDSR1_IDE (1U)
#define A2SCRDSR1_DLC (8U)
#define A2SCRDSR1_CANID (0xCF027FEU)
#define A2SCRDSR1_CYC (50U)
// -- Aftertreatment 2 SCR Dosing System Requests 1  This message contains SCR dosing system request information for aftertreatment system 2 (or bank 2).
// signal: @DEFDosingReqQuantity
#define DEFDosingReqQuantity_CovFactor 0.3
#define DEFDosingReqQuantity_CovS(x) ((uint16_t)((x / 0.3)))
// signal: @DEFReqQuantityOfIntegrator
#define DEFReqQuantityOfIntegrator_CovFactor 0.1
#define DEFReqQuantityOfIntegrator_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @DEFDosingReqQuantity6594
#define DEFDosingReqQuantity6594_CovFactor 0.05
#define DEFDosingReqQuantity6594_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @DEFPumpHtrCmd
#define DEFPumpHtrCmd_CovFactor 0.4
#define DEFPumpHtrCmd_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Actual requested dosing quantity of diesel exhaust fluid.
  uint16_t DEFDosingReqQuantity;            //      Bits=16.  [ 0     , 19276.5 ]  Unit:'g/h'   Factor= 0.3   

  // Requested state of SCR system for aftertreatment system 2 (exhaust bank 2).  0000 Dormant (sleep mode)  0001 Preparing dosing readiness (wake up; prepare to operate; wait for start)  0010 Normal dosing operation  0011 System error pending  0100 ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 10 - "Service test mode,  dosing not allowed" 
  // 9 - "Service test mode,  dosing allowed " 
  // 8 - "Diagnosis" 
  // 7 - "Shutoff" 
  // 6 - "Protect mode against cold" 
  // 5 - "Protect mode against heat" 
  // 4 - "Reserved for future assignment by SAE " 
  // 3 - "System error pending " 
  // 2 - "Normal dosing operation " 
  // 1 - "Preparing dosing readiness" 
  // 0 - "Dormant" 

  uint8_t SysReqSt;                         //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // After a request to permit the DEF hydraulic stiffness check has been indicated, this permission status is expected by the DEF control unit for aftertreatment system 2.  00 = not allowed  01 = DEF hydraulic stiffness check allowed  10 = error  11 = ...
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "DEF hydraulic stiffness check allowed" 
  // 0 - "not allowed" 

  uint8_t DEFHydStiffnessCheckPermStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // After a request to permit the DEF dosing test injection has been indicated, this permission status is expected by the DEF control unit for aftertreatment system 2.  00 = not allowed  01 = DEF dosing test injection allowed  10 = error  11 = not ...
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "DEF dosing test injection allowed" 
  // 0 - "not allowed" 

  uint8_t DEFDosingTestInjPermStatus;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Represents the command for the diesel exhaust fluid quantity integrator in the dosing control unit
  uint16_t DEFReqQuantityOfIntegrator;      //      Bits=16.  [ 0     , 6425.5 ]  Unit:'g'     Factor= 0.1   

  // Requested dosing quantity of diesel exhaust fluid. This SPN is a high range measurement. See SPN 4401 if high range is not needed.
  uint16_t DEFDosingReqQuantity6594;        //      Bits=16.  [ 0     , 3212.75 ]  Unit:'g/min' Factor= 0.05  

  // Command for the Aftertreatment 2 Diesel Exhaust Fluid Pump Heater.  A value of 0% means no heating commanded, a value of 100% means full heating commanded.
  uint8_t DEFPumpHtrCmd;                    //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} A2SCRDSR1_t;

// def @A2SCRAI CAN Message (217065726)
#define A2SCRAI_IDE (1U)
#define A2SCRAI_DLC (8U)
#define A2SCRAI_CANID (0xCF028FEU)
#define A2SCRAI_CYC (50U)
// -- Aftertreatment 2 SCR Ammonia Information  This message contains outlet ammonia information for aftertreatment system 2 (or bank 2).
// signal: @OutNH3
#define OutNH3_CovFactor 0.05
#define OutNH3_CovS(x) ((int32_t)((x / 0.05) + 4000))
typedef struct
{

  // The amount of NH3 in the exhaust exiting the aftertreatment system measured by a NH3 sensor at the aftertreatment outlet, represented in NH3 molecule parts per million non-NH3 molecules in exhaust bank 2.
  int32_t OutNH3;                           //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment outlet NH3 sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe ...
  uint8_t OutNH3SnsrPreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates that the NH3 reading of the aftertreatment outlet NH3 sensor is stable as determined by the manufacturer?s control software in exhaust bank 2.    00 - Reading is not stable  01 - Reading is stable  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Reading is stable" 
  // 0 - "Reading is not stable" 

  uint8_t OutNH3ReadingStable;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the power supplied to the aftertreatment outlet NH3 gas sensor is within the manufacturer?s specification in exhaust bank 2.    00 - Heater element is not in range  01 - Heater element is in range  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Heater element is in range" 
  // 0 - "Heater element is not in range" 

  uint8_t OutNH3GasSnsrPwrInRange;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the heater element of the aftertreatment outlet NH3 gas sensor is within the manufacturer?s specified range for accurate measurements in exhaust bank 2.  00 - Heater element is not in range  01 - Heater element is in range  10 - Error   ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Heater element is in range" 
  // 0 - "Heater element is not in range" 

  uint8_t OutNH3GasSnsrAtTemp;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the heater of the outlet NH3 exhaust gas sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple failures the ...
  uint8_t OutNH3GasSnsrHtrPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the heater status in the warm-up process. Upon receiving a power-up command, the NH3 gas sensor ramps up according to a manufacturer defined profile. The Preheat 1, Preheat 2, and Automatic messages are regions within this profile in ...
  // 3 - "Heater off or Not available" 
  // 2 - "Preheat 1 " 
  // 1 - "Preheat 2 " 
  // 0 - "Automatic " 

  uint8_t OutNH3GasSnsrHtrCtrl;             //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} A2SCRAI_t;

// def @SSI2 CAN Message (217065982)
#define SSI2_IDE (1U)
#define SSI2_DLC (8U)
#define SSI2_CANID (0xCF029FEU)
#define SSI2_CYC (10U)
// -- Slope Sensor Information 2  The Slope Sensor Information 2 message shall provide a measurement of the vehicle's extended pitch angle and a measurement of the vehicle's extended roll angle.  The vehicle dynamics measurements in this message shall be ...
// signal: @PitchAngleExRange
#define PitchAngleExRange_CovFactor 3.0517578125E-05
#define PitchAngleExRange_CovS(x) ((int32_t)((x / 3.0517578125E-05) + 8192000))
// signal: @RollAngleExRange
#define RollAngleExRange_CovFactor 3.0517578125E-05
#define RollAngleExRange_CovS(x) ((int32_t)((x / 3.0517578125E-05) + 8192000))
// signal: @RllAndPtchExRngMasurementLatency
#define RllAndPtchExRngMasurementLatency_CovFactor 0.5
#define RllAndPtchExRngMasurementLatency_CovS(x) ((uint8_t)((x / 0.5)))
typedef struct
{

  // The angle between the vehicle x-axis and the ground plane (i.e. rotation about the vehicle Y-axis).  The pitch angle for an angle of ascent is reported with a positive value. This parameter is defined according to a Z-Down axis system and the sign ...
  int32_t PitchAngleExRange;                  //      Bits=24.  [ -250  , 250.9999 ]  Unit:'deg'   Offset= -250      Factor= 3.0517578125E-05

  // The angle between the vehicle y-axis and the ground plane (i.e. rotation about the X-axis).  The roll angle for a roll to the right is reported with a positive value. Roll angle is the same for both Z-Down and Z-Up axis systems, since both systems ...
  int32_t RollAngleExRange;                   //      Bits=24.  [ -250  , 250.9999 ]  Unit:'deg'   Offset= -250      Factor= 3.0517578125E-05

  // Compensated mode for the pitch measurement.  Compensation is the use of multiple sensors together to enhance the output of the pitch measurement.    00 = On  01 = Off  10 = Error  11 = Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Off" 
  // 0 - "On" 

  uint8_t PitchAngleExRangeCompensation;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Figure of merit for pitch angle measurement.    00 = Pitch angle fully functional. Data is within sensor specification.  01 = Pitch angle degraded. Data is suspect due to environmental conditions.  10 = Error  11 = Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Pitch angle degraded" 
  // 0 - "Pitch angle fully functional" 

  uint8_t PitchAngleExRangeFigureOfMerit;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Compensated mode for the roll angle measurement.  Compensation is the use of multiple sensors together to enhance the output of the roll angle measurement.    00 = On  01 = Off  10 = Error  11 = Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Off" 
  // 0 - "On" 

  uint8_t RollAngleExRangeCompensation;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Figure of merit for roll angle measurement.    00 = Roll angle fully functional. Data is within sensor specification.  01 = Roll angle degraded. Data is suspect due to environmental conditions.  10 = Error  11 = Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Roll angle degraded" 
  // 0 - "Roll angle fully functional" 

  uint8_t RollAngleExRangeFigureOfMerit;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Time between start of sensor processing and CAN transmission
  uint8_t RllAndPtchExRngMasurementLatency;   //      Bits=08.  [ 0     , 125    ]  Unit:'ms'    Factor= 0.5   
  uint32_t framecnt;
} SSI2_t;

// def @ARI CAN Message (217066238)
#define ARI_IDE (1U)
#define ARI_DLC (8U)
#define ARI_CANID (0xCF02AFEU)
#define ARI_CYC (10U)
// -- Angular Rate Information  The Angular Rate Information message shall provide a measurement of the vehicle's pitch rate, roll rate, and yaw rate measurements.  The vehicle dynamics measurements in this message shall be according to a Z-Down axis ...
// signal: @PitchRateExRange
#define PitchRateExRange_CovFactor 0.0078125
#define PitchRateExRange_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @RollRateExRange
#define RollRateExRange_CovFactor 0.0078125
#define RollRateExRange_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @YawRateExRange
#define YawRateExRange_CovFactor 0.0078125
#define YawRateExRange_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @AngularRateMeasurementLatency
#define AngularRateMeasurementLatency_CovFactor 0.5
#define AngularRateMeasurementLatency_CovS(x) ((uint8_t)((x / 0.5)))
typedef struct
{

  // Pitch rate is the rate-of-change of the pitch angle over time, where the pitch angle vector is in the direction of travel of the vehicle. The pitch rate for increasing ascent over time is reported with a positive value. This parameter is defined ...
  int32_t PitchRateExRange;                //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg/s' Offset= -250      Factor= 0.0078125

  // Roll rate is the rate-of-change of the roll angle over time.  The roll rate for increasing roll to the right is reported with a positive value. Roll angle is the same for both Z-Down and Z-Up axis systems, since both systems have positive X axis ...
  int32_t RollRateExRange;                 //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg/s' Offset= -250      Factor= 0.0078125

  // Yaw rate is the rate-of-change of the yaw angle over time.  A positive yaw rate signal results when the object turns clockwise.  This parameter is defined according to a Z-Down axis system and the sign of the value is in accordance to the right-hand ...
  int32_t YawRateExRange;                  //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg/s' Offset= -250      Factor= 0.0078125

  // Figure of merit for pitch rate measurement.    00 = Pitch rate fully functional. Data is within sensor specification.  01 = Pitch rate degraded. Data is suspect due to environmental conditions.  10 = Error  11 = Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Pitch rate degraded" 
  // 0 - "Pitch rate fully functional" 

  uint8_t PitchRateExRangeFigureOfMerit;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Figure of merit for roll rate measurement.    00 = Roll rate fully functional. Data is within sensor specification.  01 = Roll rate degraded. Data is suspect due to environmental conditions.  10 = Error  11 = Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Roll rate degraded" 
  // 0 - "Roll rate fully functional" 

  uint8_t RollRateExRangeFigureOfMerit;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Figure of merit for yaw angle measurement.    00 = Yaw rate fully functional. Data is within sensor specification.  01 = Yaw rate degraded. Data is suspect due to environmental conditions.  10 = Error  11 = Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Yaw rate degraded" 
  // 0 - "Yaw rate fully functional" 

  uint8_t YawRateExRangeFigureOfMerit;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The estimated measurement latency of the measurement.  NOTE: This is only the sensor latency and does not include any additional latencies that might exist because of the CAN Bus or overall system implementation. Latency is the time from sensor ...
  uint8_t AngularRateMeasurementLatency;   //      Bits=08.  [ 0     , 125    ]  Unit:'ms'    Factor= 0.5   
  uint32_t framecnt;
} ARI_t;

// def @AEBS1 CAN Message (217067518)
#define AEBS1_IDE (1U)
#define AEBS1_DLC (8U)
#define AEBS1_CANID (0xCF02FFEU)
#define AEBS1_CYC (50U)
// -- Advanced Emergency Braking System 1  Advanced Emergency Braking System message 1.
// signal: @TmeToCollisionWithRelevantObject
#define TmeToCollisionWithRelevantObject_CovFactor 0.05
#define TmeToCollisionWithRelevantObject_CovS(x) ((uint8_t)((x / 0.05)))
typedef struct
{

  // Current operational state of advanced emergency braking system  0000 - system is not ready (initialization not finished)  0001 - system is temporarily not available (e.g. due to boundary conditions necessary for operation)  0010 - system is ...
  // 14 - "error indication" 
  // 8 - "system performance and/or sensitivity limited" 
  // 7 - "emergency braking active" 
  // 6 - "collision warning with braking" 
  // 5 - "collision warning active" 
  // 4 - "driver overrides system" 
  // 3 - "system is ready and activated" 
  // 2 - "system is deactivated by driver" 
  // 1 - "system is temporarily not available" 
  // 0 - "system is not ready" 
  // 15 - "not available / not installed" 

  uint8_t AdvncdEmrgencyBrakingSystemState;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // To implement different HMI (human machine interface) concepts, e.g. visual only, visual/audible, different warning tones etc., the AEBS provides different levels of collision warning.  0000 - no warning  0001 - warning level 1 - lowest  0010 - ...
  // 15 - "don?t care / take no action" 
  // 7 - "warning level 7" 
  // 6 - "warning level 6" 
  // 5 - "warning level 5" 
  // 4 - "warning level 4" 
  // 3 - "warning level 3" 
  // 2 - "warning level 2" 
  // 1 - "warning level 1" 
  // 0 - "no warning" 

  uint8_t CollisionWarningLevel;              //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Indication if the advanced emergency braking system (AEBS) is monitoring a relevant object  000 - no relevant object monitored  001 - relevant object is being monitored  010 - relevant object is not being detected reliably  011..101 - reserved  110 ...
  // 7 - "signal not available / not installed" 
  // 6 - "error indication" 
  // 2 - "relevant object is not being detected reliably" 
  // 1 - "relevant object is being monitored" 
  // 0 - "no relevant object monitored" 

  uint8_t RlvntObjctDtctdFrAdvncdEmrgncyBr;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Probabilty if monitored relevant object might start a turning maneuver, which could clear the travelling path of the host vehicle.  000 - no indication for a bend off maneuver of the relevant object  001 - low probability for a bend off maneuver of ...
  // 7 - "signal not available / not installed" 
  // 6 - "error indication" 
  // 5 - "relevant object is already in a turning maneuver" 
  // 4 - "highest probability for a bend off maneuver of the relevant object" 
  // 3 - "high probability for a bend off maneuver of the relevant object" 
  // 2 - "medium probability for a bend off maneuver of the relevant object" 
  // 1 - "low probability for a bend off maneuver of the relevant object" 
  // 0 - "no indication for a bend off maneuver of the relevant object" 

  uint8_t BndOffPrbabilityOfRelevantObject;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The time to collision is the duration after which the predicted travelling paths of host vehicle and relevant object lead to a distance of 0m between both.  Note:  It is up to the system manufacturer to choose a suitable calculation method to ...
  uint8_t TmeToCollisionWithRelevantObject;   //      Bits=08.  [ 0     , 12.5   ]  Unit:'s'     Factor= 0.05  
  uint32_t framecnt;
} AEBS1_t;

// def @WS CAN Message (217067774)
#define WS_IDE (1U)
#define WS_DLC (8U)
#define WS_CANID (0xCF030FEU)
#define WS_CYC (50U)
// -- Wireless Status  Carries commands received by the wireless transceiver from an off-board transmitter and conveys  the status of the on-board wireless transceiver. The message originates from the on-board wireless  transceiver and is directed to an ...
// signal: @WirelessSignalStrength1
#define WirelessSignalStrength1_CovFactor 0.5
#define WirelessSignalStrength1_CovS(x) ((int16_t)((x / 0.5) + 250))
typedef struct
{

  // A counter incremented with each instance of the Wireless Status message. The counter shall increment from 0 to 64255, rolling over to 0 on the next increment after 64255. The enables recipients of the Wireless Status message to detect problems with ...
  uint16_t WirelessRollingMessageCounter;  //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // The command contained in the signal received by the wireless transceiver from an off-board transmitter.  0000b - Stop  0001b - Clear  0010b - Field Test  0011b - Transmitter Test  0100b - Standby  0101b to 1101b - Reserved  1110b - Error  1111b - ...
  // 15 - "Don't Care" 
  // 14 - "Error" 
  // 4 - "Standby" 
  // 3 - "Transmitter Test" 
  // 2 - "Field Test" 
  // 1 - "Clear" 
  // 0 - "Stop" 

  uint8_t TransmitterCmdState;             //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The ID of the off-board transmitter that sent the incoming message received by the wireless transceiver.
  uint32_t TransmitterID1;                 //      Bits=24.  [ 0     , 16449635 ]  Unit:''     

  // The absolute received signal strength of the signal received from the off-board transmitter. The signal strength is reported as a Received Signal Strength Indicator (RSSI) value calculated in dBm.
  int16_t WirelessSignalStrength1;         //      Bits=08.  [ -125  , 0      ]  Unit:'dBm'   Offset= -125      Factor= 0.5   
  uint32_t framecnt;
} WS_t;

// def @ETBA1 CAN Message (217069566)
#define ETBA1_IDE (1U)
#define ETBA1_DLC (8U)
#define ETBA1_CANID (0xCF037FEU)
#define ETBA1_CYC (100U)
// -- Engine Turbocharger Blowoff Actuator 1  Used to transmit Engine Turbocharger Blowoff Actuator parameters
// signal: @EngTrbCmprssrBlwoffActuator1Temp
#define EngTrbCmprssrBlwoffActuator1Temp_CovFactor 1
#define EngTrbCmprssrBlwoffActuator1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngTrbCmprssrBlwffActtr1DsredPos
#define EngTrbCmprssrBlwffActtr1DsredPos_CovFactor 0.4
#define EngTrbCmprssrBlwffActtr1DsredPos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngTrbCmprssrBlowoffActuator1Pos
#define EngTrbCmprssrBlowoffActuator1Pos_CovFactor 0.4
#define EngTrbCmprssrBlowoffActuator1Pos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Used to identify the applicable J1939-73 FMI detected in the Engine Turbocharger Blowoff Actuator 1 by the manufacturer's software. When there is no failure FMI 31 is transmitted. When there are multiple failures, the most severe is transmitted.
  uint8_t EngTrbCmprssrBlwffActtr1PrlmnryF;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the status of the Engine Turbocharger Compresssor Blowoff Actuator 1 drive circuitry temperature. Temperature excursions may affect the torque output.  000 - High Most severe  001 - High Least severe  010 - In Range  011 - Low Least ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Not Defined" 
  // 4 - "Low Most severe" 
  // 3 - "Low Least severe" 
  // 2 - "In Range" 
  // 1 - "High Least severe" 
  // 0 - "High Most severe" 

  uint8_t EngTrbCmprssrBlwffActtr1TmpSttus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Temperature of the Engine Turbocharger Compressor Bypass Actuator 1 drive circuitry. Temperature excursions may affect the torque output.
  int16_t EngTrbCmprssrBlwoffActuator1Temp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The requested position of the Engine Turbocharger Compressor Blowoff actuator by the engine ECU, where 0% represents bypass fully closed and 100% represents fully open.  This is the position that the device is attempting to achieve.
  uint8_t EngTrbCmprssrBlwffActtr1DsredPos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Actual position of the turbocharger compressor blowoff actuator, where 0% represents fully closed and 100% represents fully open.
  uint8_t EngTrbCmprssrBlowoffActuator1Pos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Used to identify the status of Engine Turbocharger Compressor Blowoff Actuator 1.  0000 - Normal  0001 - Alarm (fully operational but needs service)  0010 - Alarm High Severity (functional but transient performance may be reduced)  0011 - Derate ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 6 - "Calibration in Progress" 
  // 5 - "Uncontrolled Shutdown Active" 
  // 4 - "Controlled Shutdown Active" 
  // 3 - "Derate Active" 
  // 2 - "Alarm High Severity" 
  // 1 - "Alarm" 
  // 0 - "Normal" 

  uint8_t EngTrbCmprssrBlwffActtr1OprtnStt;   //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} ETBA1_t;

// def @ETFR CAN Message (217069822)
#define ETFR_IDE (1U)
#define ETFR_DLC (8U)
#define ETFR_CANID (0xCF038FEU)
#define ETFR_CYC (20U)
// -- Engine Torque / Fuel Request  Used to transmit requested information for engine torque and fuel rate.
// signal: @EngGasFuelPercentageCmd
#define EngGasFuelPercentageCmd_CovFactor 0.5
#define EngGasFuelPercentageCmd_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @EngCylGasMassFlowRateCmd
#define EngCylGasMassFlowRateCmd_CovFactor 6.103515625E-05
#define EngCylGasMassFlowRateCmd_CovS(x) ((uint16_t)((x / 6.103515625E-05)))
// signal: @EngCylDieselMassFlowRateCmd
#define EngCylDieselMassFlowRateCmd_CovFactor 6.103515625E-05
#define EngCylDieselMassFlowRateCmd_CovS(x) ((uint16_t)((x / 6.103515625E-05)))
typedef struct
{

  // Percentage of Gaseous fuel used, in terms of % mass of fuel. 0% means no Gaseous fuel used and 100 % means completely gaseous fuel is used.  Gas substitution is the process for a dual fuel engine system of substituting gas, e.g. natural gas, for ...
  uint8_t EngGasFuelPercentageCmd;       //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.5   

  // Commanded Mass Flow rate of gaseous fuel delivered to the engine normalized per cylinder.
  uint16_t EngCylGasMassFlowRateCmd;     //      Bits=16.  [ 0     , 3.921813965 ]  Unit:'kg/s'  Factor= 6.103515625E-05

  // Commanded Mass Flow rate of diesel fuel delivered to the engine normalized per cylinder.
  uint16_t EngCylDieselMassFlowRateCmd;  //      Bits=16.  [ 0     , 3.921813965 ]  Unit:'kg/s'  Factor= 6.103515625E-05

  // Calculated engine torque output per cylinder.
  uint16_t EngCylTorque;                 //      Bits=16.  [ 0     , 64255  ]  Unit:'Nm'   

  // Request to enable dual fuel mode.    00 = De-activate dual fuel mode  01 = Activate dual fuel mode  10 = Reserved  11 = Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Activate dual fuel mode" 
  // 0 - "De-activate dual fuel mode" 

  uint8_t EngDualFuelModeCmd;            //      Bits=02.  [ 0     , 100    ]  Unit:''     
  uint32_t framecnt;
} ETFR_t;

// def @EASI CAN Message (217070078)
#define EASI_IDE (1U)
#define EASI_DLC (8U)
#define EASI_CANID (0xCF039FEU)
#define EASI_CYC (20U)
// -- Engine Air System Information  Used to transmit parameters related to air systems.
// signal: @EngDesiredAirFuelRatio
#define EngDesiredAirFuelRatio_CovFactor 0.001
#define EngDesiredAirFuelRatio_CovS(x) ((uint16_t)((x / 0.001)))
// signal: @EngTotalIntakeMassAirFlowRate
#define EngTotalIntakeMassAirFlowRate_CovFactor 0.0009765625
#define EngTotalIntakeMassAirFlowRate_CovS(x) ((uint16_t)((x / 0.0009765625)))
typedef struct
{

  // Reports the desired Air Fuel ratio for the engine.    Air Fuel Ratio specifies the amount of air required to completely burn one unit of fuel in the engine to meet the required engine performance and emission standards.
  uint16_t EngDesiredAirFuelRatio;         //      Bits=16.  [ 0     , 64.255 ]  Unit:''      Factor= 0.001 

  // Mass Flow rate of air entering the engine. This also includes the amount of exhaust gas recirculated, if any.
  uint16_t EngTotalIntakeMassAirFlowRate;  //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'kg/s'  Factor= 0.0009765625
  uint32_t framecnt;
} EASI_t;

// def @ECCI1 CAN Message (217070334)
#define ECCI1_IDE (1U)
#define ECCI1_DLC (8U)
#define ECCI1_CANID (0xCF03AFEU)
// -- Engine Cylinder 1 Combustion Information  Used to communicate combustion information of Engine Cylinder 1. The PGN is transmitted at the end of every combustion in Cylinder 1.
// signal: @EngCyl1HeatRelease
#define EngCyl1HeatRelease_CovFactor 0.0001220703125
#define EngCyl1HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl1PeakPress
#define EngCyl1PeakPress_CovFactor 0.0009765625
#define EngCyl1PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in Engine cylinder 1. The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl1HeatRelease;                 //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 1 in combustion cycle.
  uint16_t EngCyl1PeakPress;                  //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 1. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl1SynchronousKnockLevel;       //      Bits=08.  [ 0     , 100    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 1 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl1PressSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 1. This knock occurs at frequencies below the typical knock level reported on SPNs 1352 & 6398. The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 1 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI1_t;

// def @ECCI2 CAN Message (217070590)
#define ECCI2_IDE (1U)
#define ECCI2_DLC (8U)
#define ECCI2_CANID (0xCF03BFEU)
// -- Engine Cylinder 2 Combustion Information  Used to communicate combustion information of Engine Cylinder 2. The PGN is transmitted at the end of every combustion in Cylinder 2.
// signal: @EngCyl2HeatRelease
#define EngCyl2HeatRelease_CovFactor 0.0001220703125
#define EngCyl2HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl2PeakPress
#define EngCyl2PeakPress_CovFactor 0.0009765625
#define EngCyl2PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 2.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl2HeatRelease;                 //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 2 in combustion cycle.
  uint16_t EngCyl2PeakPress;                  //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 2. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl2SynchronousKnockLevel;       //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 2 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl2PressSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 2. This knock occurs at frequencies below the typical knock level reported on SPNs 1353 & 6402.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 2 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI2_t;

// def @ECCI3 CAN Message (217070846)
#define ECCI3_IDE (1U)
#define ECCI3_DLC (8U)
#define ECCI3_CANID (0xCF03CFEU)
// -- Engine Cylinder 3 Combustion Information  Used to communicate combustion information of Engine Cylinder 3. The PGN is transmitted at the end of every combustion in Cylinder 3.
// signal: @EngCyl3HeatRelease
#define EngCyl3HeatRelease_CovFactor 0.0001220703125
#define EngCyl3HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl3PeakPress
#define EngCyl3PeakPress_CovFactor 0.0009765625
#define EngCyl3PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 3.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl3HeatRelease;                 //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 3 in combustion cycle.
  uint16_t EngCyl3PeakPress;                  //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 3. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl3SynchronousKnockLevel;       //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 3 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl3PressSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 3. This knock occurs at frequencies below the typical knock level reported on SPNs 1354 & 6406.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 3 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI3_t;

// def @ECCI4 CAN Message (217071102)
#define ECCI4_IDE (1U)
#define ECCI4_DLC (8U)
#define ECCI4_CANID (0xCF03DFEU)
// -- Engine Cylinder 4 Combustion Information  Used to communicate combustion information of Engine Cylinder 4. The PGN is transmitted at the end of every combustion in Cylinder 4.
// signal: @EngCyl4HeatRelease
#define EngCyl4HeatRelease_CovFactor 0.0001220703125
#define EngCyl4HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl4PeakPress
#define EngCyl4PeakPress_CovFactor 0.0009765625
#define EngCyl4PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 4.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl4HeatRelease;                 //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 4 in combustion cycle.
  uint16_t EngCyl4PeakPress;                  //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 4. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl4SynchronousKnockLevel;       //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 4 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl4PressSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 4. This knock occurs at frequencies below the typical knock level reported on SPNs 1355 & 6410.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 4 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI4_t;

// def @ECCI5 CAN Message (217071358)
#define ECCI5_IDE (1U)
#define ECCI5_DLC (8U)
#define ECCI5_CANID (0xCF03EFEU)
// -- Engine Cylinder 5 Combustion Information  Used to communicate combustion information of Engine Cylinder 5. The PGN is transmitted at the end of every combustion in Cylinder 5.
// signal: @EngCyl5HeatRelease
#define EngCyl5HeatRelease_CovFactor 0.0001220703125
#define EngCyl5HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl5PeakPress
#define EngCyl5PeakPress_CovFactor 0.0009765625
#define EngCyl5PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 5.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl5HeatRelease;                 //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 5 in combustion cycle.
  uint16_t EngCyl5PeakPress;                  //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 6. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl5SynchronousKnockLevel;       //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 5 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl5PressSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 5. This knock occurs at frequencies below the typical knock level reported on SPNs 1356 & 6414.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 5 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI5_t;

// def @ECCI6 CAN Message (217071614)
#define ECCI6_IDE (1U)
#define ECCI6_DLC (8U)
#define ECCI6_CANID (0xCF03FFEU)
// -- Engine Cylinder 6 Combustion Information  Used to communicate combustion information of Engine Cylinder 6. The PGN is transmitted at the end of every combustion in Cylinder 6.
// signal: @EngCyl6HeatRelease
#define EngCyl6HeatRelease_CovFactor 0.0001220703125
#define EngCyl6HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl6PeakPress
#define EngCyl6PeakPress_CovFactor 0.0009765625
#define EngCyl6PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 6.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl6HeatRelease;                 //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 6 in combustion cycle.
  uint16_t EngCyl6PeakPress;                  //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 6. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl6SynchronousKnockLevel;       //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 6 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl6PressSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 6. This knock occurs at frequencies below the typical knock level reported on SPNs 1357 & 6418.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 6 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI6_t;

// def @ECCI7 CAN Message (217071870)
#define ECCI7_IDE (1U)
#define ECCI7_DLC (8U)
#define ECCI7_CANID (0xCF040FEU)
// -- Engine Cylinder 7 Combustion Information  Used to communicate combustion information of Engine Cylinder 7. The PGN is transmitted at the end of every combustion in Cylinder 7.
// signal: @EngCyl7HeatRelease
#define EngCyl7HeatRelease_CovFactor 0.0001220703125
#define EngCyl7HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl7PeakPress
#define EngCyl7PeakPress_CovFactor 0.0009765625
#define EngCyl7PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 7.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl7HeatRelease;                 //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 7 in combustion cycle.
  uint16_t EngCyl7PeakPress;                  //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 7. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl7SynchronousKnockLevel;       //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 7 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl7PressSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 7. This knock occurs at frequencies below the typical knock level reported on SPNs 1358 & 6422.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 7 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI7_t;

// def @ECCI8 CAN Message (217072126)
#define ECCI8_IDE (1U)
#define ECCI8_DLC (8U)
#define ECCI8_CANID (0xCF041FEU)
// -- Engine Cylinder 8 Combustion Information  Used to communicate combustion information of Engine Cylinder 8. The PGN is transmitted at the end of every combustion in Cylinder 8.
// signal: @EngCyl8HeatRelease
#define EngCyl8HeatRelease_CovFactor 0.0001220703125
#define EngCyl8HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl8PeakPress
#define EngCyl8PeakPress_CovFactor 0.0009765625
#define EngCyl8PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 8.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl8HeatRelease;                 //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 8 in combustion cycle.
  uint16_t EngCyl8PeakPress;                  //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 8. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl8SynchronousKnockLevel;       //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 8 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl8PressSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 8. This knock occurs at frequencies below the typical knock level reported on SPNs 1359 & 6426.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 8 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI8_t;

// def @ECCI9 CAN Message (217072382)
#define ECCI9_IDE (1U)
#define ECCI9_DLC (8U)
#define ECCI9_CANID (0xCF042FEU)
// -- Engine Cylinder 9 Combustion Information  Used to communicate combustion information of Engine Cylinder 9. The PGN is transmitted at the end of every combustion in Cylinder 9.
// signal: @EngCyl9HeatRelease
#define EngCyl9HeatRelease_CovFactor 0.0001220703125
#define EngCyl9HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl9PeakPress
#define EngCyl9PeakPress_CovFactor 0.0009765625
#define EngCyl9PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 9.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl9HeatRelease;                 //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 9 in combustion cycle.
  uint16_t EngCyl9PeakPress;                  //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 9. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl9SynchronousKnockLevel;       //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 9 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl9PressSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 9. This knock occurs at frequencies below the typical knock level reported on SPNs 1360 & 6430.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 9 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI9_t;

// def @ECCI10 CAN Message (217072638)
#define ECCI10_IDE (1U)
#define ECCI10_DLC (8U)
#define ECCI10_CANID (0xCF043FEU)
// -- Engine Cylinder 10 Combustion Information  Used to communicate combustion information of Engine Cylinder 10. The PGN is transmitted at the end of every combustion in Cylinder 10.
// signal: @EngCyl10HeatRelease
#define EngCyl10HeatRelease_CovFactor 0.0001220703125
#define EngCyl10HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl10PeakPress
#define EngCyl10PeakPress_CovFactor 0.0009765625
#define EngCyl10PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 10.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl10HeatRelease;                //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 10 in combustion cycle.
  uint16_t EngCyl10PeakPress;                 //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 10. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl10SynchronousKnockLevel;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 10 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl10PrssSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 10. This knock occurs at frequencies below the typical knock level reported on SPNs 1361 & 6434.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 10 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI10_t;

// def @ECCI11 CAN Message (217072894)
#define ECCI11_IDE (1U)
#define ECCI11_DLC (8U)
#define ECCI11_CANID (0xCF044FEU)
// -- Engine Cylinder 11 Combustion Information  Used to communicate combustion information of Engine Cylinder 11. The PGN is transmitted at the end of every combustion in Cylinder 11.
// signal: @EngCyl11HeatRelease
#define EngCyl11HeatRelease_CovFactor 0.0001220703125
#define EngCyl11HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl11PeakPress
#define EngCyl11PeakPress_CovFactor 0.0009765625
#define EngCyl11PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 11.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl11HeatRelease;                //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 11 in combustion cycle.
  uint16_t EngCyl11PeakPress;                 //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 11. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl11SynchronousKnockLevel;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 11 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl11PrssSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 11. This knock occurs at frequencies below the typical knock level reported on SPNs 1362 & 6438.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 11 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI11_t;

// def @ECCI12 CAN Message (217073150)
#define ECCI12_IDE (1U)
#define ECCI12_DLC (8U)
#define ECCI12_CANID (0xCF045FEU)
// -- Engine Cylinder 12 Combustion Information  Used to communicate combustion information of Engine Cylinder 12. The PGN is transmitted at the end of every combustion in Cylinder 12.
// signal: @EngCyl12HeatRelease
#define EngCyl12HeatRelease_CovFactor 0.0001220703125
#define EngCyl12HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl12PeakPress
#define EngCyl12PeakPress_CovFactor 0.0009765625
#define EngCyl12PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 12.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl12HeatRelease;                //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 12 in combustion cycle.
  uint16_t EngCyl12PeakPress;                 //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 12. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl12SynchronousKnockLevel;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 12 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl12PrssSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 12. This knock occurs at frequencies below the typical knock level reported on SPNs 1363 & 6442.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 12 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI12_t;

// def @ECCI13 CAN Message (217073406)
#define ECCI13_IDE (1U)
#define ECCI13_DLC (8U)
#define ECCI13_CANID (0xCF046FEU)
// -- Engine Cylinder 13 Combustion Information  Used to communicate combustion information of Engine Cylinder 13. The PGN is transmitted at the end of every combustion in Cylinder 13.
// signal: @EngCyl13HeatRelease
#define EngCyl13HeatRelease_CovFactor 0.0001220703125
#define EngCyl13HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl13PeakPress
#define EngCyl13PeakPress_CovFactor 0.0009765625
#define EngCyl13PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 13.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl13HeatRelease;                //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 13 in combustion cycle.
  uint16_t EngCyl13PeakPress;                 //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 13. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl13SynchronousKnockLevel;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 13 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl13PrssSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 13. This knock occurs at frequencies below the typical knock level reported on SPNs 1364 & 6446.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 13 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI13_t;

// def @ECCI14 CAN Message (217073662)
#define ECCI14_IDE (1U)
#define ECCI14_DLC (8U)
#define ECCI14_CANID (0xCF047FEU)
// -- Engine Cylinder 14 Combustion Information  Used to communicate combustion information of Engine Cylinder 14. The PGN is transmitted at the end of every combustion in Cylinder 14.
// signal: @EngCyl14HeatRelease
#define EngCyl14HeatRelease_CovFactor 0.0001220703125
#define EngCyl14HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl14PeakPress
#define EngCyl14PeakPress_CovFactor 0.0009765625
#define EngCyl14PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 14.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl14HeatRelease;                //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 14 in combustion cycle.
  uint16_t EngCyl14PeakPress;                 //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 14. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl14SynchronousKnockLevel;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 14 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl14PrssSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 14. This knock occurs at frequencies below the typical knock level reported on SPNs 1365 & 6450.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 14 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI14_t;

// def @ECCI15 CAN Message (217073918)
#define ECCI15_IDE (1U)
#define ECCI15_DLC (8U)
#define ECCI15_CANID (0xCF048FEU)
// -- Engine Cylinder 15 Combustion Information  Used to communicate combustion information of Engine Cylinder 15. The PGN is transmitted at the end of every combustion in Cylinder 15.
// signal: @EngCyl15HeatRelease
#define EngCyl15HeatRelease_CovFactor 0.0001220703125
#define EngCyl15HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl15PeakPress
#define EngCyl15PeakPress_CovFactor 0.0009765625
#define EngCyl15PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 15.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl15HeatRelease;                //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 15 in combustion cycle.
  uint16_t EngCyl15PeakPress;                 //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 15. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl15SynchronousKnockLevel;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 15 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl15PrssSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 15. This knock occurs at frequencies below the typical knock level reported on SPNs 1366 & 6454.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 15 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI15_t;

// def @ECCI16 CAN Message (217074174)
#define ECCI16_IDE (1U)
#define ECCI16_DLC (8U)
#define ECCI16_CANID (0xCF049FEU)
// -- Engine Cylinder 16 Combustion Information  Used to communicate combustion information of Engine Cylinder 16. The PGN is transmitted at the end of every combustion in Cylinder 16.
// signal: @EngCyl16HeatRelease
#define EngCyl16HeatRelease_CovFactor 0.0001220703125
#define EngCyl16HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl16PeakPress
#define EngCyl16PeakPress_CovFactor 0.0009765625
#define EngCyl16PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 16.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl16HeatRelease;                //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 16 in combustion cycle.
  uint16_t EngCyl16PeakPress;                 //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 16. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl16SynchronousKnockLevel;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 16 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl16PrssSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 16. This knock occurs at frequencies below the typical knock level reported on SPNs 1367 & 6458.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 16 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI16_t;

// def @ECCI17 CAN Message (217074430)
#define ECCI17_IDE (1U)
#define ECCI17_DLC (8U)
#define ECCI17_CANID (0xCF04AFEU)
// -- Engine Cylinder 17 Combustion Information  Used to communicate combustion information of Engine Cylinder 17. The PGN is transmitted at the end of every combustion in Cylinder 17.
// signal: @EngCyl17HeatRelease
#define EngCyl17HeatRelease_CovFactor 0.0001220703125
#define EngCyl17HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl17PeakPress
#define EngCyl17PeakPress_CovFactor 0.0009765625
#define EngCyl17PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 17.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl17HeatRelease;                //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 17 in combustion cycle.
  uint16_t EngCyl17PeakPress;                 //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 17. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl17SynchronousKnockLevel;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 17 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl17PrssSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 17. This knock occurs at frequencies below the typical knock level reported on SPNs 1368 & 6462.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 17 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI17_t;

// def @ECCI18 CAN Message (217074686)
#define ECCI18_IDE (1U)
#define ECCI18_DLC (8U)
#define ECCI18_CANID (0xCF04BFEU)
// -- Engine Cylinder 18 Combustion Information  Used to communicate combustion information of Engine Cylinder 18. The PGN is transmitted at the end of every combustion in Cylinder 18.
// signal: @EngCyl18HeatRelease
#define EngCyl18HeatRelease_CovFactor 0.0001220703125
#define EngCyl18HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl18PeakPress
#define EngCyl18PeakPress_CovFactor 0.0009765625
#define EngCyl18PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 18.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl18HeatRelease;                //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 18 in combustion cycle.
  uint16_t EngCyl18PeakPress;                 //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 18. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl18SynchronousKnockLevel;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 18 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl18PrssSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 18. This knock occurs at frequencies below the typical knock level reported on SPNs 1369 & 6466.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 18 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI18_t;

// def @ECCI19 CAN Message (217074942)
#define ECCI19_IDE (1U)
#define ECCI19_DLC (8U)
#define ECCI19_CANID (0xCF04CFEU)
// -- Engine Cylinder 19 Combustion Information  Used to communicate combustion information of Engine Cylinder 19. The PGN is transmitted at the end of every combustion in Cylinder 19.
// signal: @EngCyl19HeatRelease
#define EngCyl19HeatRelease_CovFactor 0.0001220703125
#define EngCyl19HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl19PeakPress
#define EngCyl19PeakPress_CovFactor 0.0009765625
#define EngCyl19PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 19.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl19HeatRelease;                //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 19 in combustion cycle.
  uint16_t EngCyl19PeakPress;                 //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 19. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl19SynchronousKnockLevel;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 19 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl19PrssSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 19. This knock occurs at frequencies below the typical knock level reported on SPNs 1370 & 6470.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 19 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI19_t;

// def @ECCI20 CAN Message (217075198)
#define ECCI20_IDE (1U)
#define ECCI20_DLC (8U)
#define ECCI20_CANID (0xCF04DFEU)
// -- Engine Cylinder 20 Combustion Information  Used to communicate combustion information of Engine Cylinder 20. The PGN is transmitted at the end of every combustion in Cylinder 20.
// signal: @EngCyl20HeatRelease
#define EngCyl20HeatRelease_CovFactor 0.0001220703125
#define EngCyl20HeatRelease_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl20PeakPress
#define EngCyl20PeakPress_CovFactor 0.0009765625
#define EngCyl20PeakPress_CovS(x) ((uint16_t)((x / 0.0009765625)))
// signal: @MaxPressIncreaseRate
#define MaxPressIncreaseRate_CovFactor 16
#define MaxPressIncreaseRate_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // The amount of heat produced during combustion in engine cylinder 20.  The negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl20HeatRelease;                //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'kJ/l'  Offset= -1        Factor= 0.0001220703125

  // Peak pressure in engine cylinder 20 in combustion cycle.
  uint16_t EngCyl20PeakPress;                 //      Bits=16.  [ 0     , 62.74902344 ]  Unit:'MPa'   Factor= 0.0009765625

  // Used to indicate the level of knock for engine cylinder 20. The level of knock is reported using a relative scale where 0% is least level of knock, and increasing levels indicate more knock until 100% indicates the most severe level of knock allowed ...
  uint8_t EngCyl20SynchronousKnockLevel;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to identify the applicable J1939-73 FMI detected in the engine cylinder 20 pressure sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCyl20PrssSensorPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the level of low frequency knock for engine cylinder 20. This knock occurs at frequencies below the typical knock level reported on SPNs 1371 & 6474.  The level of low frequency knock is reported using a relative scale where 0% is least ...
  uint8_t LowFreqKnockLvl;                    //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The maximum slope, in degrees of crank angle, of the pressure increase in engine cylinder 20 during the combustion cycle.
  uint8_t MaxPressIncreaseRate;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa/deg crank angle' Factor= 16    
  uint32_t framecnt;
} ECCI20_t;

// def @GFI5 CAN Message (217080830)
#define GFI5_IDE (1U)
#define GFI5_DLC (8U)
#define GFI5_CANID (0xCF063FEU)
// -- Fuel Information 5 (Gaseous)  Used to transmit the gaseous fuel valve command information.
// signal: @EngGsFuelValveNominalDurationCmd
#define EngGsFuelValveNominalDurationCmd_CovFactor 2
#define EngGsFuelValveNominalDurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGsFlVlvNmnlStrtOfActuationCmd
#define EngGsFlVlvNmnlStrtOfActuationCmd_CovFactor 0.0078125
#define EngGsFlVlvNmnlStrtOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
typedef struct
{

  // Amount of time the gaseous fuel valves are activated.  It's a nominal value used for all the gaseous fuel valves in the engine.    Note: Please see SPNs 6658 - 6677 for duration command for each gaseous fuel valves
  uint16_t EngGsFuelValveNominalDurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // The angle, relative to the TDC of each cylinder, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valves are activated to open.  It's a nominal value used for all the gaseous fuel valves in the engine.  Timings after ...
  int32_t EngGsFlVlvNmnlStrtOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125
  uint32_t framecnt;
} GFI5_t;

// def @EGFVDC1 CAN Message (217081086)
#define EGFVDC1_IDE (1U)
#define EGFVDC1_DLC (8U)
#define EGFVDC1_CANID (0xCF064FEU)
// -- Engine Gaseous Fuel Valve Duration Command 1  Used to transmit the gaseous fuel valve duration command information for valve 1 to valve 4.
// signal: @EngGasFuelValve1DurationCmd
#define EngGasFuelValve1DurationCmd_CovFactor 2
#define EngGasFuelValve1DurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGasFuelValve2DurationCmd
#define EngGasFuelValve2DurationCmd_CovFactor 2
#define EngGasFuelValve2DurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGasFuelValve3DurationCmd
#define EngGasFuelValve3DurationCmd_CovFactor 2
#define EngGasFuelValve3DurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGasFuelValve4DurationCmd
#define EngGasFuelValve4DurationCmd_CovFactor 2
#define EngGasFuelValve4DurationCmd_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // Amount of time the gaseous fuel valve 1 is activated.
  uint16_t EngGasFuelValve1DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // Amount of time the gaseous fuel valve 2 is activated.
  uint16_t EngGasFuelValve2DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // Amount of time the gaseous fuel valve 3 is activated.
  uint16_t EngGasFuelValve3DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // Amount of time the gaseous fuel valve 4 is activated.
  uint16_t EngGasFuelValve4DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     
  uint32_t framecnt;
} EGFVDC1_t;

// def @EGFVDC2 CAN Message (217081342)
#define EGFVDC2_IDE (1U)
#define EGFVDC2_DLC (8U)
#define EGFVDC2_CANID (0xCF065FEU)
// -- Engine Gaseous Fuel Valve Duration Command 2  Used to transmit the gaseous fuel valve duration command information for valve 5 to valve 8.
// signal: @EngGasFuelValve5DurationCmd
#define EngGasFuelValve5DurationCmd_CovFactor 2
#define EngGasFuelValve5DurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGasFuelValve6DurationCmd
#define EngGasFuelValve6DurationCmd_CovFactor 2
#define EngGasFuelValve6DurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGasFuelValve7DurationCmd
#define EngGasFuelValve7DurationCmd_CovFactor 2
#define EngGasFuelValve7DurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGasFuelValve8DurationCmd
#define EngGasFuelValve8DurationCmd_CovFactor 2
#define EngGasFuelValve8DurationCmd_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // Amount of time the gaseous fuel valve 5 is activated.
  uint16_t EngGasFuelValve5DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // Amount of time the gaseous fuel valve 6 is activated.
  uint16_t EngGasFuelValve6DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // Amount of time the gaseous fuel valve 7 is activated.
  uint16_t EngGasFuelValve7DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // Amount of time the gaseous fuel valve 8 is activated.
  uint16_t EngGasFuelValve8DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     
  uint32_t framecnt;
} EGFVDC2_t;

// def @EGFVDC3 CAN Message (217081598)
#define EGFVDC3_IDE (1U)
#define EGFVDC3_DLC (8U)
#define EGFVDC3_CANID (0xCF066FEU)
// -- Engine Gaseous Fuel Valve Duration Command 3  Used to transmit the gaseous fuel valve duration command information for valve 9 to valve 12.
// signal: @EngGasFuelValve9DurationCmd
#define EngGasFuelValve9DurationCmd_CovFactor 2
#define EngGasFuelValve9DurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGasFuelValve10DurationCmd
#define EngGasFuelValve10DurationCmd_CovFactor 2
#define EngGasFuelValve10DurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGasFuelValve11DurationCmd
#define EngGasFuelValve11DurationCmd_CovFactor 2
#define EngGasFuelValve11DurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGasFuelValve12DurationCmd
#define EngGasFuelValve12DurationCmd_CovFactor 2
#define EngGasFuelValve12DurationCmd_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // Amount of time the gaseous fuel valve 9 is activated.
  uint16_t EngGasFuelValve9DurationCmd;   //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // Amount of time the gaseous fuel valve 10 is activated.
  uint16_t EngGasFuelValve10DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // Amount of time the gaseous fuel valve 11 is activated.
  uint16_t EngGasFuelValve11DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // Amount of time the gaseous fuel valve 12 is activated.
  uint16_t EngGasFuelValve12DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     
  uint32_t framecnt;
} EGFVDC3_t;

// def @EGFVDC4 CAN Message (217081854)
#define EGFVDC4_IDE (1U)
#define EGFVDC4_DLC (8U)
#define EGFVDC4_CANID (0xCF067FEU)
// -- Engine Gaseous Fuel Valve Duration Command 4  Used to transmit the gaseous fuel valve duration command information for valve 13 to valve 16.
// signal: @EngGasFuelValve13DurationCmd
#define EngGasFuelValve13DurationCmd_CovFactor 2
#define EngGasFuelValve13DurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGasFuelValve14DurationCmd
#define EngGasFuelValve14DurationCmd_CovFactor 2
#define EngGasFuelValve14DurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGasFuelValve15DurationCmd
#define EngGasFuelValve15DurationCmd_CovFactor 2
#define EngGasFuelValve15DurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGasFuelValve16DurationCmd
#define EngGasFuelValve16DurationCmd_CovFactor 2
#define EngGasFuelValve16DurationCmd_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // Amount of time the gaseous fuel valve 13 is activated.
  uint16_t EngGasFuelValve13DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // Amount of time the gaseous fuel valve 14 is activated.
  uint16_t EngGasFuelValve14DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // Amount of time the gaseous fuel valve 15 is activated.
  uint16_t EngGasFuelValve15DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // Amount of time the gaseous fuel valve 16 is activated.
  uint16_t EngGasFuelValve16DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     
  uint32_t framecnt;
} EGFVDC4_t;

// def @EGFVDC5 CAN Message (217082110)
#define EGFVDC5_IDE (1U)
#define EGFVDC5_DLC (8U)
#define EGFVDC5_CANID (0xCF068FEU)
// -- Engine Gaseous Fuel Valve Duration Command 5  Used to transmit the gaseous fuel valve duration command information for valve 17 to valve 20.
// signal: @EngGasFuelValve17DurationCmd
#define EngGasFuelValve17DurationCmd_CovFactor 2
#define EngGasFuelValve17DurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGasFuelValve18DurationCmd
#define EngGasFuelValve18DurationCmd_CovFactor 2
#define EngGasFuelValve18DurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGasFuelValve19DurationCmd
#define EngGasFuelValve19DurationCmd_CovFactor 2
#define EngGasFuelValve19DurationCmd_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngGasFuelValve20DurationCmd
#define EngGasFuelValve20DurationCmd_CovFactor 2
#define EngGasFuelValve20DurationCmd_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // Amount of time the gaseous fuel valve 17 is activated.
  uint16_t EngGasFuelValve17DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // Amount of time the gaseous fuel valve 18 is activated.
  uint16_t EngGasFuelValve18DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // Amount of time the gaseous fuel valve 19 is activated.
  uint16_t EngGasFuelValve19DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     

  // Amount of time the gaseous fuel valve 20 is activated.
  uint16_t EngGasFuelValve20DurationCmd;  //      Bits=16.  [ 0     , 128510 ]  Unit:'?s'    Factor= 2     
  uint32_t framecnt;
} EGFVDC5_t;

// def @EGFVSOAC1 CAN Message (217082366)
#define EGFVSOAC1_IDE (1U)
#define EGFVSOAC1_DLC (8U)
#define EGFVSOAC1_CANID (0xCF069FEU)
// -- Engine Gaseous Fuel Valve Start of Actuation Command 1  Used to transmit the gaseous fuel valve start of activation command information for valve 1 to valve 4.
// signal: @EngGsFlValve1StartOfActuationCmd
#define EngGsFlValve1StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlValve1StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
// signal: @EngGsFlValve2StartOfActuationCmd
#define EngGsFlValve2StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlValve2StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
// signal: @EngGsFlValve3StartOfActuationCmd
#define EngGsFlValve3StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlValve3StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
// signal: @EngGsFlValve4StartOfActuationCmd
#define EngGsFlValve4StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlValve4StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
typedef struct
{

  // The angle, relative to the TDC of cylinder 1, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 1 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlValve1StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125

  // The angle, relative to the TDC of cylinder 2, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 2 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlValve2StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125

  // The angle, relative to the TDC of cylinder 3, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 3 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlValve3StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125

  // The angle, relative to the TDC of cylinder 4, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 4 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlValve4StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125
  uint32_t framecnt;
} EGFVSOAC1_t;

// def @EGFVSOAC2 CAN Message (217082622)
#define EGFVSOAC2_IDE (1U)
#define EGFVSOAC2_DLC (8U)
#define EGFVSOAC2_CANID (0xCF06AFEU)
// -- Engine Gaseous Fuel Valve Start of Actuation Command 2  Used to transmit the gaseous fuel valve start of activation command information for valve 5 to valve 8.
// signal: @EngGsFlValve5StartOfActuationCmd
#define EngGsFlValve5StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlValve5StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
// signal: @EngGsFlValve6StartOfActuationCmd
#define EngGsFlValve6StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlValve6StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
// signal: @EngGsFlValve7StartOfActuationCmd
#define EngGsFlValve7StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlValve7StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
// signal: @EngGsFlValve8StartOfActuationCmd
#define EngGsFlValve8StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlValve8StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
typedef struct
{

  // The angle, relative to the TDC of cylinder 5, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 5 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlValve5StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125

  // The angle, relative to the TDC of cylinder 6, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 6 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlValve6StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125

  // The angle, relative to the TDC of cylinder 7, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 7 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlValve7StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125

  // The angle, relative to the TDC of cylinder 8, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 8 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlValve8StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125
  uint32_t framecnt;
} EGFVSOAC2_t;

// def @EGFVSOAC3 CAN Message (217082878)
#define EGFVSOAC3_IDE (1U)
#define EGFVSOAC3_DLC (8U)
#define EGFVSOAC3_CANID (0xCF06BFEU)
// -- Engine Gaseous Fuel Valve Start of Actuation Command 3  Used to transmit the gaseous fuel valve start of activation command information for valve 9 to valve 12.
// signal: @EngGsFlValve9StartOfActuationCmd
#define EngGsFlValve9StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlValve9StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
// signal: @EngGsFlVlve10StartOfActuationCmd
#define EngGsFlVlve10StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlVlve10StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
// signal: @EngGsFlVlve11StartOfActuationCmd
#define EngGsFlVlve11StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlVlve11StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
// signal: @EngGsFlVlve12StartOfActuationCmd
#define EngGsFlVlve12StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlVlve12StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
typedef struct
{

  // The angle, relative to the TDC of cylinder 9, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 9 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlValve9StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125

  // The angle, relative to the TDC of cylinder 10, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 10 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlVlve10StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125

  // The angle, relative to the TDC of cylinder 11, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 11 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlVlve11StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125

  // The angle, relative to the TDC of cylinder 12, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 12 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlVlve12StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125
  uint32_t framecnt;
} EGFVSOAC3_t;

// def @EGFVSOAC4 CAN Message (217083134)
#define EGFVSOAC4_IDE (1U)
#define EGFVSOAC4_DLC (8U)
#define EGFVSOAC4_CANID (0xCF06CFEU)
// -- Engine Gaseous Fuel Valve Start of Actuation Command 4  Used to transmit the gaseous fuel valve start of activation command information for valve 13 to valve 16.
// signal: @EngGsFlVlve13StartOfActuationCmd
#define EngGsFlVlve13StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlVlve13StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
// signal: @EngGsFlVlve14StartOfActuationCmd
#define EngGsFlVlve14StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlVlve14StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
// signal: @EngGsFlVlve15StartOfActuationCmd
#define EngGsFlVlve15StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlVlve15StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
// signal: @EngGsFlVlve16StartOfActuationCmd
#define EngGsFlVlve16StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlVlve16StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
typedef struct
{

  // The angle, relative to the TDC of cylinder 13, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 13 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlVlve13StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125

  // The angle, relative to the TDC of cylinder 14, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 14 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlVlve14StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125

  // The angle, relative to the TDC of cylinder 15, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 15 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlVlve15StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125

  // The angle, relative to the TDC of cylinder 16, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 16 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlVlve16StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125
  uint32_t framecnt;
} EGFVSOAC4_t;

// def @EGFVSOAC5 CAN Message (217083390)
#define EGFVSOAC5_IDE (1U)
#define EGFVSOAC5_DLC (8U)
#define EGFVSOAC5_CANID (0xCF06DFEU)
// -- Engine Gaseous Fuel Valve Start of Actuation Command 5  Used to transmit the gaseous fuel valve start of activation command information for valve 17 to valve 20.
// signal: @EngGsFlVlve17StartOfActuationCmd
#define EngGsFlVlve17StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlVlve17StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
// signal: @EngGsFlVlve18StartOfActuationCmd
#define EngGsFlVlve18StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlVlve18StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
// signal: @EngGsFlVlve19StartOfActuationCmd
#define EngGsFlVlve19StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlVlve19StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
// signal: @EngGsFlVlve20StartOfActuationCmd
#define EngGsFlVlve20StartOfActuationCmd_CovFactor 0.0078125
#define EngGsFlVlve20StartOfActuationCmd_CovS(x) ((int32_t)((x / 0.0078125) + 51200))
typedef struct
{

  // The angle, relative to the TDC of cylinder 17, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 17 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlVlve17StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125

  // The angle, relative to the TDC of cylinder 18, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 18 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlVlve18StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125

  // The angle, relative to the TDC of cylinder 19, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 19 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlVlve19StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125

  // The angle, relative to the TDC of cylinder 20, with 0 being the TDC before the power stroke commences, at the which gaseous fuel valve 20 is activated to open.  Timings after TDC are referred with positive values and timings before TDC are referred ...
  int32_t EngGsFlVlve20StartOfActuationCmd;   //      Bits=16.  [ -400  , 101.99 ]  Unit:'deg'   Offset= -400      Factor= 0.0078125
  uint32_t framecnt;
} EGFVSOAC5_t;

// def @FPAC CAN Message (217083646)
#define FPAC_IDE (1U)
#define FPAC_DLC (8U)
#define FPAC_CANID (0xCF06EFEU)
#define FPAC_CYC (50U)
// -- Fuel Pump Actuator Control Command  Used to transmit the commanded % position for the Fuel Pump control valve.
// signal: @EngFlInjctnPump1FuelCtrlValveCmd
#define EngFlInjctnPump1FuelCtrlValveCmd_CovFactor 0.0025
#define EngFlInjctnPump1FuelCtrlValveCmd_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngFlInjctnPump2FuelCtrlValveCmd
#define EngFlInjctnPump2FuelCtrlValveCmd_CovFactor 0.0025
#define EngFlInjctnPump2FuelCtrlValveCmd_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // The control command to fuel control valve in fuel pump 1, normalized to percent, where 0% represents fully closed and 100% represents fully open.
  uint16_t EngFlInjctnPump1FuelCtrlValveCmd;  //      Bits=16.  [ 0     , 100    ]  Unit:'%'     Factor= 0.0025

  // The control command to fuel control valve in fuel pump 2, normalized to percent, where 0% represents fully closed and 100% represents fully open.
  uint16_t EngFlInjctnPump2FuelCtrlValveCmd;  //      Bits=16.  [ 0     , 100    ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} FPAC_t;

// def @ECCR CAN Message (217108734)
#define ECCR_IDE (1U)
#define ECCR_DLC (8U)
#define ECCR_CANID (0xCF0D0FEU)
#define ECCR_CYC (1000U)
// -- Engine Cylinder Combustion Request  Transmits combustion related requests
typedef struct
{

  // Request to the engine ECU for the number of cylinders to exclude from combustion (cut-out or skip) for a given instance in time.  The engine ECU can decide on the cylinders to exclude from combustion.  One of the use cases would be sending this ...
  uint8_t NmbrOfEngCylndrsTExcldFrmCmbston;   //      Bits=08.  [ 0     , 24     ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 1 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl1ExcludeFromCombustionRq;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 2 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl2ExcludeFromCombustionRq;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 3 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl3ExcludeFromCombustionRq;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 4 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl4ExcludeFromCombustionRq;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 5 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl5ExcludeFromCombustionRq;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 6 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl6ExcludeFromCombustionRq;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 7 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl7ExcludeFromCombustionRq;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 8 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl8ExcludeFromCombustionRq;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 9 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl9ExcludeFromCombustionRq;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 10 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl10ExcludeFromCombustionRq;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 11 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl11ExcludeFromCombustionRq;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 12 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl12ExcludeFromCombustionRq;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 13 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl13ExcludeFromCombustionRq;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 14 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl14ExcludeFromCombustionRq;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 15 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl15ExcludeFromCombustionRq;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 16 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl16ExcludeFromCombustionRq;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 17 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl17ExcludeFromCombustionRq;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 18 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl18ExcludeFromCombustionRq;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 19 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl19ExcludeFromCombustionRq;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 20 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl20ExcludeFromCombustionRq;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 21 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl21ExcludeFromCombustionRq;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 22 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl22ExcludeFromCombustionRq;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 23 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 

  uint8_t EngCyl23ExcludeFromCombustionRq;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to the engine ECU to exclude (skip or cut-out) cylinder 24 from combustion.    00 Exclude from Combustion  01 Include for Combustion  10 Reserved  11 Not available/Do not care
  // 1 - "Include for Combustion" 
  // 0 - "Exclude from Combustion" 
  // 3 - "Not available/Do not care" 
  // 2 - "Reserved" 

  uint8_t EngCyl24ExcludeFromCombustionRq;    //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} ECCR_t;

// def @ECBA1 CAN Message (217108990)
#define ECBA1_IDE (1U)
#define ECBA1_DLC (8U)
#define ECBA1_CANID (0xCF0D1FEU)
#define ECBA1_CYC (100U)
// -- Engine Cylinder Head Bypass Actuator 1  Transmits information about Engine Cylinder Head Bypass Actuator. The cylinder head bypass  valve is used to release the air at the high pressure compressor outlet into turbocharger turbine inlet  when intake ...
// signal: @EngCylHeadBypassActuator1Temp
#define EngCylHeadBypassActuator1Temp_CovFactor 1
#define EngCylHeadBypassActuator1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngCylHdBypssActuator1DesiredPos
#define EngCylHdBypssActuator1DesiredPos_CovFactor 0.4
#define EngCylHdBypssActuator1DesiredPos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngCylHeadBypassActuator1Pos
#define EngCylHeadBypassActuator1Pos_CovFactor 0.4
#define EngCylHeadBypassActuator1Pos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Identifies the applicable J1939-73 FMI detected in Engine Cylinder Head Bypass Actuator 1 by the manufacturer's software. When there is no failure FMI 31 is transmitted. When there are multiple failures, the most severe is transmitted.  Cylinder ...
  uint8_t EngCylHdBypssActtr1PrliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Identifies the status of the Engine Cylinder Head Bypass Blowoff Actuator 1 drive circuitry temperature. Temperature excursions may affect the torque output.  Cylinder Head bypass valve is used to release the air at the high pressure compressor ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Not Defined" 
  // 4 - "Low Most severe" 
  // 3 - "Low Least severe" 
  // 2 - "In Range" 
  // 1 - "High Least severe" 
  // 0 - "High Most severe" 

  uint8_t EngCylHdBypssActuator1TempStatus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Temperature of the Engine Cylinder Head Bypass Actuator 1 drive circuitry. Temperature excursions may affect the torque output.  Cylinder Head bypass valve is used to release the air at the high pressure compressor outlet into turbocharger turbine ...
  int16_t EngCylHeadBypassActuator1Temp;      //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Requested position of Engine Cylinder Head Bypass actuator by engine ECM, where 0% represents bypass fully closed and 100% represents fully open. This is the position that the device is attempting to achieve.  Cylinder Head bypass valve is used to ...
  uint8_t EngCylHdBypssActuator1DesiredPos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Actual position of Engine Cylinder Head Bypass actuator, where 0% represents fully closed and 100% represents fully open.  Cylinder Head bypass valve is used to release the air at the high pressure compressor outlet into turbocharger turbine inlet ...
  uint8_t EngCylHeadBypassActuator1Pos;       //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Identifies the status of Engine Cylinder Head Bypass Actuator 1.  Cylinder head bypass valve is used to release the air at the high pressure compressor outlet into turbocharger turbine inlet when intake pressure exceeds exhaust pressure at lower ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 6 - "Calibration in Progress" 
  // 5 - "Uncontrolled Shutdown Active" 
  // 4 - "Controlled Shutdown Active" 
  // 3 - "Derate Active" 
  // 2 - "Alarm High Severity" 
  // 1 - "Alarm" 
  // 0 - "Normal" 

  uint8_t EngCylHdBypssActtr1OprtionStatus;   //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} ECBA1_t;

// def @EEC18 CAN Message (217109246)
#define EEC18_IDE (1U)
#define EEC18_DLC (8U)
#define EEC18_CANID (0xCF0D2FEU)
#define EEC18_CYC (100U)
// -- Engine Electronic Controller 18  Transmits command information for the actuators associated with engine.
// signal: @EngCylHeadBypassActuator1Cmd
#define EngCylHeadBypassActuator1Cmd_CovFactor 0.0025
#define EngCylHeadBypassActuator1Cmd_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // Command to cylinder head bypass actuator 1, normalized to percent, where 0% nominally represents fully closed (No Flow) and 100% represents fully open (Max Flow). The purpose of the cylinder bypass valve is to release the air at the high pressure ...
  uint16_t EngCylHeadBypassActuator1Cmd;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Status of the actuator/valve in the airbox used to source engine intake air from either the engine compartment or external to the vehicle.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t InAirSourceVlv;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EEC18_t;

// def @PCC1 CAN Message (217109502)
#define PCC1_IDE (1U)
#define PCC1_DLC (8U)
#define PCC1_CANID (0xCF0D3FEU)
#define PCC1_CYC (100U)
// -- Predictive Cruise Control 1  Contains parameters related to predictive cruise control. Predictive cruise control is the process of varying the set point used by the cruise control algorithm based on external factors (e.g., anticipated road grade).
// signal: @PrdctiveCruiseCtrlSetSpeedOffset
#define PrdctiveCruiseCtrlSetSpeedOffset_CovFactor 0.00390625
#define PrdctiveCruiseCtrlSetSpeedOffset_CovS(x) ((int32_t)((x / 0.00390625) + 32000))
// signal: @PredictiveCruiseCtrlPresentGrade
#define PredictiveCruiseCtrlPresentGrade_CovFactor 0.125
#define PredictiveCruiseCtrlPresentGrade_CovS(x) ((int16_t)((x / 0.125) + 128))
// signal: @PredictiveCruiseCtrlNextGrade
#define PredictiveCruiseCtrlNextGrade_CovFactor 0.125
#define PredictiveCruiseCtrlNextGrade_CovS(x) ((int16_t)((x / 0.125) + 128))
typedef struct
{

  // The amount by which the actual set point used by the cruise control algorithm should be changed as determined by external factors (e.g., anticipated road grade).  If SPN 7317 indicates Enabled (0001b) and if the cruise control algorithm determines ...
  int32_t PrdctiveCruiseCtrlSetSpeedOffset;   //      Bits=16.  [ -125  , 125.996 ]  Unit:'km/h'  Offset= -125      Factor= 0.00390625

  // Indicates the state of the PCC controller.  If this parameter is 0001, the cruise control set point may be modified by the Predictive Cruise Control Set Speed Offset (SPN 7316) . For states other than 0001, the value in Predictive Cruise Control Set ...
  // 15 - "Not Available" 
  // 14 - "Error" 
  // 8 - "Enabled,  but not functional due to self test" 
  // 7 - "Enabled,  but not functional due to inhibited by driver" 
  // 6 - "Enabled,  but not functional due to vehicle speed below speed threshold" 
  // 5 - "Enabled,  but not functional due to predicted path not available" 
  // 4 - "Enabled,  but not functional due to road grade info not available" 
  // 3 - "Enabled,  but not functional due to map position not available" 
  // 2 - "Enabled,  but not functional due to vehicle position not available" 
  // 1 - "Enabled" 
  // 0 - "Disabled" 

  uint8_t PredictiveCruiseCtrlState;          //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Speed control override requested. Indicates that the minimum restriction of speed is desired, for instance when travelling downhill towards an impending uphill grade. This is not a request to inhibit engine brakes (or other speed limiting device) ...
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Speed control override requested" 
  // 0 - "No speed control override requested" 

  uint8_t VehicleSpeedCtrlOverrideRq;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that an event, such as a grade, is detected within the range of the predictive cruise control (PCC) look-ahead distance.  00 - No PCC event in range  01 - PCC event in range  10 - Error  11 - Not available  Note:  Intended to be sent ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "PCC event in range" 
  // 0 - "No PCC event in range" 

  uint8_t PredictiveCruiseCtrlEventInRange;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Road grade at present vehicle position. Positive numbers indicate uphill grade, negative are downhill for present vehicle direction of travel. For grades beyond the limits of the parameter, the limit value shall be reported.
  int16_t PredictiveCruiseCtrlPresentGrade;   //      Bits=08.  [ -16   , 15.25  ]  Unit:'%'     Offset= -16       Factor= 0.125 

  // Road grade at next predictive cruise control (PCC) event. Positive numbers indicate uphill grade, negative are downhill for vehicle direction of travel. For grades beyond the limits of the parameter, the limit value shall be reported.
  int16_t PredictiveCruiseCtrlNextGrade;      //      Bits=08.  [ -16   , 15.25  ]  Unit:'%'     Offset= -16       Factor= 0.125 

  // Indicates to the operator that a predictive cruise control (PCC) speed event is active. Typically, this will correspond to a Predictive Cruise Control Set Speed Offset (SPN 7316) request to increase or decrease vehicle speed from the nominal cruise ...
  // 3 - "Not available" 
  // 2 - "Decreased speed event is active" 
  // 1 - "Increased speed event is active" 
  // 0 - "No speed event is active" 

  uint8_t PrdctvCrsCtrlSpeedEventIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Speed Control event is active" 
  // 0 - "Speed Control event is not active" 

  uint8_t VhclSpdCtrlOvrrideEventIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to temporarily inhibit a fuel saving feature that would normally open the driveline. Under certain conditions and with knowledge of the terrain, inhibiting this feature may improve fuel economy.  SPN 683 Disengage Driveline Request has ...
  // 2 - "Reserved" 
  // 1 - "Driveline Disengage Inhibit Request" 
  // 0 - "No Inhibit Request" 
  // 3 - "Don't care/take no action" 

  uint8_t PrdctvCrsCtrlDrvlnDsnggInhibitRq;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} PCC1_t;

// def @ITO1 CAN Message (217114110)
#define ITO1_IDE (1U)
#define ITO1_DLC (8U)
#define ITO1_CANID (0xCF0E5FEU)
// -- Engine Ignition Timing Offset 1  This PGN contains timing offsets for cylinders 1-8.    These timing offsets are relative to the commanded engine timing advance (SPN 7355).
// signal: @EngCyl1TimingOffset
#define EngCyl1TimingOffset_CovFactor 0.1
#define EngCyl1TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl2TimingOffset
#define EngCyl2TimingOffset_CovFactor 0.1
#define EngCyl2TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl3TimingOffset
#define EngCyl3TimingOffset_CovFactor 0.1
#define EngCyl3TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl4TimingOffset
#define EngCyl4TimingOffset_CovFactor 0.1
#define EngCyl4TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl5TimingOffset
#define EngCyl5TimingOffset_CovFactor 0.1
#define EngCyl5TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl6TimingOffset
#define EngCyl6TimingOffset_CovFactor 0.1
#define EngCyl6TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl7TimingOffset
#define EngCyl7TimingOffset_CovFactor 0.1
#define EngCyl7TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl8TimingOffset
#define EngCyl8TimingOffset_CovFactor 0.1
#define EngCyl8TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
typedef struct
{

  // The ignition timing offset for Cylinder 1 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl1TimingOffset;           //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 2 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl2TimingOffset;           //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 3 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl3TimingOffset;           //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 4 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl4TimingOffset;           //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 5 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl5TimingOffset;           //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 6 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl6TimingOffset;           //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 7 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl7TimingOffset;           //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 8 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl8TimingOffset;           //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   
  uint32_t framecnt;
} ITO1_t;

// def @ITO2 CAN Message (217114366)
#define ITO2_IDE (1U)
#define ITO2_DLC (8U)
#define ITO2_CANID (0xCF0E6FEU)
// -- Engine Ignition Timing Offset 2  This PGN contains timing offsets for cylinders 9-16.    These timing offsets are relative to the commanded engine timing advance (SPN 7355).
// signal: @EngCyl9TimingOffset
#define EngCyl9TimingOffset_CovFactor 0.1
#define EngCyl9TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl10TimingOffset
#define EngCyl10TimingOffset_CovFactor 0.1
#define EngCyl10TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl11TimingOffset
#define EngCyl11TimingOffset_CovFactor 0.1
#define EngCyl11TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl12TimingOffset
#define EngCyl12TimingOffset_CovFactor 0.1
#define EngCyl12TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl13TimingOffset
#define EngCyl13TimingOffset_CovFactor 0.1
#define EngCyl13TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl14TimingOffset
#define EngCyl14TimingOffset_CovFactor 0.1
#define EngCyl14TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl15TimingOffset
#define EngCyl15TimingOffset_CovFactor 0.1
#define EngCyl15TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl16TimingOffset
#define EngCyl16TimingOffset_CovFactor 0.1
#define EngCyl16TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
typedef struct
{

  // The ignition timing offset for Cylinder 9 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl9TimingOffset;           //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 10 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl10TimingOffset;          //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 11 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl11TimingOffset;          //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 12 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl12TimingOffset;          //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 13 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl13TimingOffset;          //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 14 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl14TimingOffset;          //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 15 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl15TimingOffset;          //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 16 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl16TimingOffset;          //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   
  uint32_t framecnt;
} ITO2_t;

// def @ITO3 CAN Message (217114622)
#define ITO3_IDE (1U)
#define ITO3_DLC (8U)
#define ITO3_CANID (0xCF0E7FEU)
// -- Engine Ignition Timing Offset 3  This PGN contains timing offsets for cylinders 17-24.    These timing offsets are relative to the commanded engine timing advance (SPN 7355).
// signal: @EngCyl17TimingOffset
#define EngCyl17TimingOffset_CovFactor 0.1
#define EngCyl17TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl18TimingOffset
#define EngCyl18TimingOffset_CovFactor 0.1
#define EngCyl18TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl19TimingOffset
#define EngCyl19TimingOffset_CovFactor 0.1
#define EngCyl19TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl20TimingOffset
#define EngCyl20TimingOffset_CovFactor 0.1
#define EngCyl20TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl21TimingOffset
#define EngCyl21TimingOffset_CovFactor 0.1
#define EngCyl21TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl22TimingOffset
#define EngCyl22TimingOffset_CovFactor 0.1
#define EngCyl22TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl23TimingOffset
#define EngCyl23TimingOffset_CovFactor 0.1
#define EngCyl23TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @EngCyl24TimingOffset
#define EngCyl24TimingOffset_CovFactor 0.1
#define EngCyl24TimingOffset_CovS(x) ((int16_t)((x / 0.1) + 125))
typedef struct
{

  // The ignition timing offset for Cylinder 17 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl17TimingOffset;          //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 18 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl18TimingOffset;          //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 19 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl19TimingOffset;          //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 20 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl20TimingOffset;          //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 21 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl21TimingOffset;          //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 22 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl22TimingOffset;          //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 23 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl23TimingOffset;          //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The ignition timing offset for Cylinder 24 from the engine timing advance (SPN 7355) as a command to the ignition control module. Positive values command an increasingly advanced timing.
  int16_t EngCyl24TimingOffset;          //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   
  uint32_t framecnt;
} ITO3_t;

// def @TFAC2 CAN Message (217114878)
#define TFAC2_IDE (1U)
#define TFAC2_DLC (8U)
#define TFAC2_CANID (0xCF0E8FEU)
#define TFAC2_CYC (50U)
// -- Engine Throttle / Fuel Actuator Control Command 2  Used to control networked electronic throttle control actuator and/or fuel control actuator valves.  Otherwise, this PGN can be used to monitor commanded % positioning to electronic throttle control ...
// signal: @FuelAct3CtrlCmd
#define FuelAct3CtrlCmd_CovFactor 0.0025
#define FuelAct3CtrlCmd_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @FuelAct4CtrlCmd
#define FuelAct4CtrlCmd_CovFactor 0.0025
#define FuelAct4CtrlCmd_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // The control command to fuel actuator 3, normalized to percent, where 0% represents fully closed and 100% represents fully open.  Typically, this fuel actuator is used to regulate low pressure natural gas flow rate, mixing into the air flow, which ...
  uint16_t FuelAct3CtrlCmd;              //      Bits=16.  [ 0     , 100    ]  Unit:'%'     Factor= 0.0025

  // The control command to fuel actuator 4, normalized to percent, where 0% represents fully closed and 100% represents fully open.  Typically, this fuel actuator is used to regulate low pressure natural gas flow rate, mixing into the air flow, which ...
  uint16_t FuelAct4CtrlCmd;              //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} TFAC2_t;

// def @ASC7 CAN Message (217862654)
#define ASC7_IDE (1U)
#define ASC7_DLC (8U)
#define ASC7_CANID (0xCFC51FEU)
#define ASC7_CYC (100U)
// -- Air Suspension Control 7  Used for suspension control information
typedef struct
{

  // Indicates the status of a tag axle 1.  Numbering of lift/tag axles starts at front axle.  SPN 1743 may be used if less detail is acceptable.  000 - Down (tag axle is laden)  001 - Unloading (load is being transferred from the tag axle)  010 - ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Loading" 
  // 4 - "Lowering" 
  // 3 - "Up" 
  // 2 - "Lifting" 
  // 1 - "Unloading" 
  // 0 - "Down" 

  uint8_t LiftAxle1Status;               //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Indicates the status of a tag axle 2.  Numbering of lift/tag axles starts at front axle.  SPN 1822 may be used if less detail is acceptable.  000 - Down (tag axle is laden)  001 - Unloading (load is being transferred from the tag axle)  010 - ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Loading" 
  // 4 - "Lowering" 
  // 3 - "Up" 
  // 2 - "Lifting" 
  // 1 - "Unloading" 
  // 0 - "Down" 

  uint8_t LiftAxle2Status;               //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} ASC7_t;

// def @ELS CAN Message (217864702)
#define ELS_IDE (1U)
#define ELS_DLC (8U)
#define ELS_CANID (0xCFC59FEU)
#define ELS_CYC (500U)
// -- Engine Load Sharing Information  This PGN contains information relating to integrated engine load sharing status values.
typedef struct
{

  // This signal indicates the status of an external request to unload the engine, such as the external unload request switch.    00 - Not Requested  01 - Requested  10 - Error  11 - Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Requested" 
  // 0 - "Not Requested" 

  uint8_t EngUnloadStatus;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates that the status of an engine load sharing feature.    0000 - Offline  0001 - Master  0010 - Slave  0011 - Loading  0100 - Unloading  0101 -1101 - Reserved  1110 - Error  1111 - Unavailable
  // 15 - "Unavailable" 
  // 14 - "Error" 
  // 4 - "Unloading" 
  // 3 - "Loading" 
  // 2 - "Slave" 
  // 1 - "Master" 
  // 0 - "Offline" 

  uint8_t EngLoadShareStatus;            //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} ELS_t;

// def @ECPMSI CAN Message (217880062)
#define ECPMSI_IDE (1U)
#define ECPMSI_DLC (8U)
#define ECPMSI_CANID (0xCFC95FEU)
#define ECPMSI_CYC (100U)
// -- Engine Cylinder Pressure Monitor Status Information  Used to trasmit the status information of Cylinder Pressure Monitor Unit.
typedef struct
{

  // Used to identify the applicable J1939-73 FMI detected in the Engine Cylinder Pressure Monitor 1.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCylPrssMonitor1PreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the Engine Cylinder Pressure Monitor 2.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t EngCylPrssMonitor2PreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} ECPMSI_t;

// def @ETC9 CAN Message (217890558)
#define ETC9_IDE (1U)
#define ETC9_DLC (8U)
#define ETC9_CANID (0xCFCBEFEU)
#define ETC9_CYC (20U)
// -- Electronic Transmission Controller #9  Electronic Transmission Controller #9  Note:  Single input shaft transmissions should use SPN 161 (Transmission Input Shaft Speed).  Multiple input shaft transmissions should use SPN 5960 and 5961 (DCT Input ...
// signal: @DualClutchTransInputShaft1Speed
#define DualClutchTransInputShaft1Speed_CovFactor 0.125
#define DualClutchTransInputShaft1Speed_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @DualClutchTransInputShaft2Speed
#define DualClutchTransInputShaft2Speed_CovFactor 0.125
#define DualClutchTransInputShaft2Speed_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @DlCltchTrnsSlctdPreselectionGear
#define DlCltchTrnsSlctdPreselectionGear_CovFactor 1
#define DlCltchTrnsSlctdPreselectionGear_CovS(x) ((int16_t)(x + 125))
// signal: @DlCltchTrnsCrrntPreselectionGear
#define DlCltchTrnsCrrntPreselectionGear_CovFactor 1
#define DlCltchTrnsCrrntPreselectionGear_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // Rotational velocity of the primary shaft transferring power through clutch 1 into the dual clutch transmission (DCT).
  uint16_t DualClutchTransInputShaft1Speed;   //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // Rotational velocity of the primary shaft transferring power through clutch 2 into the dual clutch transmission (DCT).
  uint16_t DualClutchTransInputShaft2Speed;   //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // The gear that the transmission will attempt to achieve during the current pre-selection event (shifting to a new gear on the non-engaged clutch of a dual clutch transmission (DCT)).
  int16_t DlCltchTrnsSlctdPreselectionGear;   //      Bits=08.  [ -125  , 125    ]  Unit:''      Offset= -125     

  // The gear currently engaged on the non-engaged clutch of a dual clutch transmission (DCT) or the last gear engaged on the non-engaged clutch while the transmission is in the process of pre-selecting to the new or selected pre-selection gear on the ...
  int16_t DlCltchTrnsCrrntPreselectionGear;   //      Bits=08.  [ -125  , 125    ]  Unit:''      Offset= -125     
  uint32_t framecnt;
} ETC9_t;

// def @AT2OGC2 CAN Message (217910014)
#define AT2OGC2_IDE (1U)
#define AT2OGC2_DLC (8U)
#define AT2OGC2_CANID (0xCFD0AFEU)
// -- Aftertreatment 2 Outlet Gas NOx Sensor Correction Data 2
// signal: @NOxSnsrO2PressCorrection
#define NOxSnsrO2PressCorrection_CovFactor 0.5
#define NOxSnsrO2PressCorrection_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @NOxSnsrNOxPressCorrection
#define NOxSnsrNOxPressCorrection_CovFactor 0.5
#define NOxSnsrNOxPressCorrection_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @NOxSnsrNO2Correction
#define NOxSnsrNO2Correction_CovFactor 0.5
#define NOxSnsrNO2Correction_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @NOxSnsrNH3Correction
#define NOxSnsrNH3Correction_CovFactor 0.5
#define NOxSnsrNH3Correction_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @CorrectedNOx
#define CorrectedNOx_CovFactor 0.05
#define CorrectedNOx_CovS(x) ((int32_t)((x / 0.05) + 4000))
typedef struct
{

  // Correction of pressure Lambda-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrO2PressCorrection;      //      Bits=08.  [ 0     , 125    ]  Unit:'%/bar' Factor= 0.5   

  // Correction of pressure NOx-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrNOxPressCorrection;     //      Bits=08.  [ 0     , 125    ]  Unit:'%/bar' Factor= 0.5   

  // Correction of NO2 at the NOx-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrNO2Correction;          //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Factor= 0.5   

  // Correction of NH3 at the NOx-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrNH3Correction;          //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Factor= 0.5   

  // Self-diagnosis result for NOx sensor ATO2 (Aftertreatment Outlet Bank 2) as a ratio of detected value to reference value defined by supplier.  This result is used to determine if the signal resulting from the self-diagnosis test (as represented as a ...
  uint8_t NOxSnsrSelfDiagFinalResult;    //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // The corrected outlet NOx value  for aftertreatment 2 shall include all learned adaptions and offsets that are used to adjust the raw signal.  2016 MY and later engines with NOx sensors may be required to output a ?corrected? NOx sensor signal in ...
  int32_t CorrectedNOx;                  //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  
  uint32_t framecnt;
} AT2OGC2_t;

// def @AT2OGC1 CAN Message (217910270)
#define AT2OGC1_IDE (1U)
#define AT2OGC1_DLC (8U)
#define AT2OGC1_CANID (0xCFD0BFEU)
#define AT2OGC1_CYC (1000U)
// -- Aftertreatment 2 Outlet Gas NOx Sensor Correction Data 1
// signal: @NOxSnsrHtrRatio
#define NOxSnsrHtrRatio_CovFactor 0.001
#define NOxSnsrHtrRatio_CovS(x) ((uint16_t)((x / 0.001)))
// signal: @NOxSnsrNewPartDeviationNOxGain
#define NOxSnsrNewPartDeviationNOxGain_CovFactor 0.1
#define NOxSnsrNewPartDeviationNOxGain_CovS(x) ((int32_t)((x / 0.1) + 1000))
// signal: @NOxSnsrNewPartDeviationNOxOffset
#define NOxSnsrNewPartDeviationNOxOffset_CovFactor 1
#define NOxSnsrNewPartDeviationNOxOffset_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // Heater ratio to determine temperature at sensor tip.
  uint16_t NOxSnsrHtrRatio;                   //      Bits=16.  [ 0     , 64.255 ]  Unit:''      Factor= 0.001 

  // New part deviation NOx_Gain to correct (recalculate) sensor signal on the Engine ECU side.
  int32_t NOxSnsrNewPartDeviationNOxGain;     //      Bits=16.  [ -100  , 100    ]  Unit:'%'     Offset= -100      Factor= 0.1   

  // New part deviation NOx_Offset to correct (recalculate) sensor signal on the Engine ECU side.
  int16_t NOxSnsrNewPartDeviationNOxOffset;   //      Bits=08.  [ -125  , 125    ]  Unit:'ppm'   Offset= -125     

  uint16_t NOxSnsrOpHours;                    //      Bits=16.  [ 0     , 64255  ]  Unit:'h'    
  uint32_t framecnt;
} AT2OGC1_t;

// def @AT2IGC2 CAN Message (217910526)
#define AT2IGC2_IDE (1U)
#define AT2IGC2_DLC (8U)
#define AT2IGC2_CANID (0xCFD0CFEU)
// -- Aftertreatment 2 Intake Gas NOx Sensor Correction Data 2
// signal: @NOxSnsrO2PressCorrection
#define NOxSnsrO2PressCorrection_CovFactor 0.5
#define NOxSnsrO2PressCorrection_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @NOxSnsrNOxPressCorrection
#define NOxSnsrNOxPressCorrection_CovFactor 0.5
#define NOxSnsrNOxPressCorrection_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @NOxSnsrNO2Correction
#define NOxSnsrNO2Correction_CovFactor 0.5
#define NOxSnsrNO2Correction_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @NOxSnsrNH3Correction
#define NOxSnsrNH3Correction_CovFactor 0.5
#define NOxSnsrNH3Correction_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @SCRInCorrectedNOx
#define SCRInCorrectedNOx_CovFactor 0.05
#define SCRInCorrectedNOx_CovS(x) ((int32_t)((x / 0.05) + 4000))
typedef struct
{

  // Correction of pressure Lambda-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrO2PressCorrection;      //      Bits=08.  [ 0     , 125    ]  Unit:'%/bar' Factor= 0.5   

  // Correction of pressure NOx-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrNOxPressCorrection;     //      Bits=08.  [ 0     , 125    ]  Unit:'%/bar' Factor= 0.5   

  // Correction of NO2 at the NOx-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrNO2Correction;          //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Factor= 0.5   

  // Correction of NH3 at the NOx-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrNH3Correction;          //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Factor= 0.5   

  // Self-diagnosis result for NOx sensor ATI2 (Aftertreatment Intake Bank 2) as a ratio of detected value to reference value defined by supplier.  This result is used to determine if the signal resulting from the self-diagnosis test (as represented as a ...
  uint8_t NOxSnsrSelfDiagFinalResult;    //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // The corrected intake Selective Catalytic Reduction NOx value for aftertreatment 2 shall include all learned adaptions and offsets that are used to adjust the raw signal.  2016 MY and later engines with NOx sensors may be required to output a ...
  int32_t SCRInCorrectedNOx;             //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  
  uint32_t framecnt;
} AT2IGC2_t;

// def @AT2IGC1 CAN Message (217910782)
#define AT2IGC1_IDE (1U)
#define AT2IGC1_DLC (8U)
#define AT2IGC1_CANID (0xCFD0DFEU)
#define AT2IGC1_CYC (1000U)
// -- Aftertreatment 2 Intake Gas NOx Sensor Correction Data 1
// signal: @NOxSnsrHtrRatio
#define NOxSnsrHtrRatio_CovFactor 0.001
#define NOxSnsrHtrRatio_CovS(x) ((uint16_t)((x / 0.001)))
// signal: @NOxSnsrNewPartDeviationNOxGain
#define NOxSnsrNewPartDeviationNOxGain_CovFactor 0.1
#define NOxSnsrNewPartDeviationNOxGain_CovS(x) ((int32_t)((x / 0.1) + 1000))
// signal: @NOxSnsrNewPartDeviationNOxOffset
#define NOxSnsrNewPartDeviationNOxOffset_CovFactor 1
#define NOxSnsrNewPartDeviationNOxOffset_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // Heater ratio to determine temperature at sensor tip.
  uint16_t NOxSnsrHtrRatio;                   //      Bits=16.  [ 0     , 64.255 ]  Unit:''      Factor= 0.001 

  // New part deviation NOx_Gain to correct (recalculate) sensor signal on the Engine ECU side.
  int32_t NOxSnsrNewPartDeviationNOxGain;     //      Bits=16.  [ -100  , 100    ]  Unit:'%'     Offset= -100      Factor= 0.1   

  // New part deviation NOx_Offset to correct (recalculate) sensor signal on the Engine ECU side.
  int16_t NOxSnsrNewPartDeviationNOxOffset;   //      Bits=08.  [ -125  , 125    ]  Unit:'ppm'   Offset= -125     

  uint16_t NOxSnsrOpHours;                    //      Bits=16.  [ 0     , 64255  ]  Unit:'h'    
  uint32_t framecnt;
} AT2IGC1_t;

// def @AT1OGC2 CAN Message (217911038)
#define AT1OGC2_IDE (1U)
#define AT1OGC2_DLC (8U)
#define AT1OGC2_CANID (0xCFD0EFEU)
// -- Aftertreatment 1 Outlet Gas NOx Sensor Correction Data 2
// signal: @NOxSnsrO2PressCorrection
#define NOxSnsrO2PressCorrection_CovFactor 0.5
#define NOxSnsrO2PressCorrection_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @NOxSnsrNOxPressCorrection
#define NOxSnsrNOxPressCorrection_CovFactor 0.5
#define NOxSnsrNOxPressCorrection_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @NOxSnsrNO2Correction
#define NOxSnsrNO2Correction_CovFactor 0.5
#define NOxSnsrNO2Correction_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @NOxSnsrNH3Correction
#define NOxSnsrNH3Correction_CovFactor 0.5
#define NOxSnsrNH3Correction_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @CorrectedNOx
#define CorrectedNOx_CovFactor 0.05
#define CorrectedNOx_CovS(x) ((int32_t)((x / 0.05) + 4000))
typedef struct
{

  // Correction of pressure Lambda-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrO2PressCorrection;      //      Bits=08.  [ 0     , 125    ]  Unit:'%/bar' Factor= 0.5   

  // Correction of pressure NOx-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrNOxPressCorrection;     //      Bits=08.  [ 0     , 125    ]  Unit:'%/bar' Factor= 0.5   

  // Correction of NO2 at the NOx-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrNO2Correction;          //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Factor= 0.5   

  // Correction of NH3 at the NOx-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrNH3Correction;          //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Factor= 0.5   

  // Self-diagnosis result for NOx sensor ATO1 (Aftertreatment Outlet Bank 1) as a ratio of detected value to reference value defined by supplier.  This result is used to determine if the signal resulting from the self-diagnosis test (as represented as a ...
  uint8_t NOxSnsrSelfDiagFinalResult;    //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // The corrected outlet NOx value for aftertreatment 1 shall include all learned adaptions and offsets that are used to adjust the raw signal.  2016 MY and later engines with NOx sensors may be required to output a ?corrected? NOx sensor signal in ...
  int32_t CorrectedNOx;                  //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  
  uint32_t framecnt;
} AT1OGC2_t;

// def @AT1OGC1 CAN Message (217911294)
#define AT1OGC1_IDE (1U)
#define AT1OGC1_DLC (8U)
#define AT1OGC1_CANID (0xCFD0FFEU)
#define AT1OGC1_CYC (1000U)
// -- Aftertreatment 1 Outlet Gas NOx Sensor Correction Data 1
// signal: @NOxSnsrHtrRatio
#define NOxSnsrHtrRatio_CovFactor 0.001
#define NOxSnsrHtrRatio_CovS(x) ((uint16_t)((x / 0.001)))
// signal: @NOxSnsrNewPartDeviationNOxGain
#define NOxSnsrNewPartDeviationNOxGain_CovFactor 0.1
#define NOxSnsrNewPartDeviationNOxGain_CovS(x) ((int32_t)((x / 0.1) + 1000))
// signal: @NOxSnsrNewPartDeviationNOxOffset
#define NOxSnsrNewPartDeviationNOxOffset_CovFactor 1
#define NOxSnsrNewPartDeviationNOxOffset_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // Heater ratio to determine temperature at sensor tip.
  uint16_t NOxSnsrHtrRatio;                   //      Bits=16.  [ 0     , 64.255 ]  Unit:''      Factor= 0.001 

  // New part deviation NOx_Gain to correct (recalculate) sensor signal on the Engine ECU side.
  int32_t NOxSnsrNewPartDeviationNOxGain;     //      Bits=16.  [ -100  , 100    ]  Unit:'%'     Offset= -100      Factor= 0.1   

  // New part deviation NOx_Offset to correct (recalculate) sensor signal on the Engine ECU side.
  int16_t NOxSnsrNewPartDeviationNOxOffset;   //      Bits=08.  [ -125  , 125    ]  Unit:'ppm'   Offset= -125     

  uint16_t NOxSnsrOpHours;                    //      Bits=16.  [ 0     , 64255  ]  Unit:'h'    
  uint32_t framecnt;
} AT1OGC1_t;

// def @AT1IGC2 CAN Message (217911550)
#define AT1IGC2_IDE (1U)
#define AT1IGC2_DLC (8U)
#define AT1IGC2_CANID (0xCFD10FEU)
// -- Aftertreatment 1 Intake Gas NOx Sensor Correction Data 2
// signal: @NOxSnsrO2PressCorrection
#define NOxSnsrO2PressCorrection_CovFactor 0.5
#define NOxSnsrO2PressCorrection_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @NOxSnsrNOxPressCorrection
#define NOxSnsrNOxPressCorrection_CovFactor 0.5
#define NOxSnsrNOxPressCorrection_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @NOxSnsrNO2Correction
#define NOxSnsrNO2Correction_CovFactor 0.5
#define NOxSnsrNO2Correction_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @NOxSnsrNH3Correction
#define NOxSnsrNH3Correction_CovFactor 0.5
#define NOxSnsrNH3Correction_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @SCRInCorrectedNOx
#define SCRInCorrectedNOx_CovFactor 0.05
#define SCRInCorrectedNOx_CovS(x) ((int32_t)((x / 0.05) + 4000))
typedef struct
{

  // Correction of pressure Lambda-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrO2PressCorrection;      //      Bits=08.  [ 0     , 125    ]  Unit:'%/bar' Factor= 0.5   

  // Correction of pressure NOx-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrNOxPressCorrection;     //      Bits=08.  [ 0     , 125    ]  Unit:'%/bar' Factor= 0.5   

  // Correction of NO2 at the NOx-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrNO2Correction;          //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Factor= 0.5   

  // Correction of NH3 at the NOx-signal to correct (recalculate) sensor signal on the Engine ECU side.
  uint8_t NOxSnsrNH3Correction;          //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Factor= 0.5   

  // Self-diagnosis result for NOx sensor ATI1 (Aftertreatment Intake Bank 1) as a ratio of detected value to reference value defined by supplier.  This result is used to determine if the signal resulting from the self-diagnosis test (as represented as a ...
  uint8_t NOxSnsrSelfDiagFinalResult;    //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // The corrected intake Selective Catalytic Reduction NOx value for aftertreatment 1 shall include all learned adaptions and offsets that are used to adjust the raw signal.  2016 MY and later engines with NOx sensors may be required to output a ...
  int32_t SCRInCorrectedNOx;             //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  
  uint32_t framecnt;
} AT1IGC2_t;

// def @AT1IGC1 CAN Message (217911806)
#define AT1IGC1_IDE (1U)
#define AT1IGC1_DLC (8U)
#define AT1IGC1_CANID (0xCFD11FEU)
#define AT1IGC1_CYC (1000U)
// -- Aftertreatment 1 Intake Gas NOx Sensor Correction Data 1
// signal: @NOxSnsrHtrRatio
#define NOxSnsrHtrRatio_CovFactor 0.001
#define NOxSnsrHtrRatio_CovS(x) ((uint16_t)((x / 0.001)))
// signal: @NOxSnsrNewPartDeviationNOxGain
#define NOxSnsrNewPartDeviationNOxGain_CovFactor 0.1
#define NOxSnsrNewPartDeviationNOxGain_CovS(x) ((int32_t)((x / 0.1) + 1000))
// signal: @NOxSnsrNewPartDeviationNOxOffset
#define NOxSnsrNewPartDeviationNOxOffset_CovFactor 1
#define NOxSnsrNewPartDeviationNOxOffset_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // Heater ratio to determine temperature at sensor tip.
  uint16_t NOxSnsrHtrRatio;                   //      Bits=16.  [ 0     , 64.255 ]  Unit:''      Factor= 0.001 

  // New part deviation NOx_Gain to correct (recalculate) sensor signal on the Engine ECU side.
  int32_t NOxSnsrNewPartDeviationNOxGain;     //      Bits=16.  [ -100  , 100    ]  Unit:'%'     Offset= -100      Factor= 0.1   

  // New part deviation NOx_Offset to correct (recalculate) sensor signal on the Engine ECU side.
  int16_t NOxSnsrNewPartDeviationNOxOffset;   //      Bits=08.  [ -125  , 125    ]  Unit:'ppm'   Offset= -125     

  uint16_t NOxSnsrOpHours;                    //      Bits=16.  [ 0     , 64255  ]  Unit:'h'    
  uint32_t framecnt;
} AT1IGC1_t;

// def @EJM10 CAN Message (217916414)
#define EJM10_IDE (1U)
#define EJM10_DLC (8U)
#define EJM10_CANID (0xCFD23FEU)
#define EJM10_CYC (100U)
// -- Extended Joystick Message 10  Used to transfer information about the measured status of three additional axes of a joystick and switches of the joystick grip or handle.  The joystick axial motion information is available in the Basic Joystick ...
// signal: @Joystick10GripXAxisPos
#define Joystick10GripXAxisPos_CovFactor 0.1
#define Joystick10GripXAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick10GripYAxisPos
#define Joystick10GripYAxisPos_CovFactor 0.1
#define Joystick10GripYAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick10ThetaAxisPos
#define Joystick10ThetaAxisPos_CovFactor 0.1
#define Joystick10ThetaAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck10GrpXAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck10GrpXAxsLvrLftNgtvPsSttus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck10GrpXAxsLvrRghtPstvPsStts;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick10GripXAxisPos;            //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck10GrpYAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck10GrpYAxsLvrBckNgtvPsSttus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck10GrpYAxsLvrFrwrdPstvPsStt;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick10GripYAxisPos;            //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck10ThtaAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck10ThtAxsCntrClckwsNgtvPsSt;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck10ThtAxsClckwsPstvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick10ThetaAxisPos;            //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystck10ThetaAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystck10GripYAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystck10GripXAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button16PressedStatus;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button15PressedStatus;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button14PressedStatus;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button13PressedStatus;    //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EJM10_t;

// def @BJM10 CAN Message (217916670)
#define BJM10_IDE (1U)
#define BJM10_DLC (8U)
#define BJM10_CANID (0xCFD24FEU)
#define BJM10_CYC (100U)
// -- Basic Joystick Message 10  Used to transfer information about the measured status of the 1st 2 axes and up to 12 buttons of a joystick.  Additional handle information is available in the Expanded Joystick Message.  10-bit position parameters are ...
// signal: @Joystick10XAxisPos
#define Joystick10XAxisPos_CovFactor 0.1
#define Joystick10XAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick10YAxisPos
#define Joystick10YAxisPos_CovFactor 0.1
#define Joystick10YAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick10XAxisNeutralPosStatus;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck10XAxsLvrLftNgtvePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck10XAxsLvrRghtPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick10XAxisPos;                //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick10YAxisNeutralPosStatus;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck10YAxsLvrBckNgtvePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck10YAxsLvrFrwrdPstvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick10YAxisPos;                //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick10YAxisDetentPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick10XAxisDetentPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button4PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button3PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button2PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button1PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button8PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button7PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button6PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button5PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button12PressedStatus;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button11PressedStatus;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button10PressedStatus;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick10Button9PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} BJM10_t;

// def @EJM9 CAN Message (217916926)
#define EJM9_IDE (1U)
#define EJM9_DLC (8U)
#define EJM9_CANID (0xCFD25FEU)
#define EJM9_CYC (100U)
// -- Extended Joystick Message 9  Used to transfer information about the measured status of three additional axes of a joystick and switches of the joystick grip or handle.  The joystick axial motion information is available in the Basic Joystick ...
// signal: @Joystick9GripXAxisPos
#define Joystick9GripXAxisPos_CovFactor 0.1
#define Joystick9GripXAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick9GripYAxisPos
#define Joystick9GripYAxisPos_CovFactor 0.1
#define Joystick9GripYAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick9ThetaAxisPos
#define Joystick9ThetaAxisPos_CovFactor 0.1
#define Joystick9ThetaAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck9GripXAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck9GrpXAxsLvrLftNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck9GrpXAxsLvrRghtPstvPsSttus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick9GripXAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck9GripYAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck9GrpYAxsLvrBckNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck9GrpYAxsLvrFrwrdPstvPsStts;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick9GripYAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck9ThetaAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck9ThtAxsCntrClckwsNgtvPsStt;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck9ThtAxsClckwsPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick9ThetaAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick9ThetaAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick9GripYAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick9GripXAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button16PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button15PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button14PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button13PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EJM9_t;

// def @BJM9 CAN Message (217917182)
#define BJM9_IDE (1U)
#define BJM9_DLC (8U)
#define BJM9_CANID (0xCFD26FEU)
#define BJM9_CYC (100U)
// -- Basic Joystick Message 9  Used to transfer information about the measured status of the 1st 2 axes and up to 12 buttons of a joystick.  Additional handle information is available in the Expanded Joystick Message.  10-bit position parameters are ...
// signal: @Joystick9XAxisPos
#define Joystick9XAxisPos_CovFactor 0.1
#define Joystick9XAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick9YAxisPos
#define Joystick9YAxisPos_CovFactor 0.1
#define Joystick9YAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick9XAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck9XAxsLvrLftNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck9XAxsLvrRghtPstvePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick9XAxisPos;                 //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick9YAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck9YAxsLvrBckNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck9YAxsLvrFrwrdPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick9YAxisPos;                 //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick9YAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick9XAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button4PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button3PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button2PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button1PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button8PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button7PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button6PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button5PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button12PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button11PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button10PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick9Button9PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} BJM9_t;

// def @EJM8 CAN Message (217917438)
#define EJM8_IDE (1U)
#define EJM8_DLC (8U)
#define EJM8_CANID (0xCFD27FEU)
#define EJM8_CYC (100U)
// -- Extended Joystick Message 8  Used to transfer information about the measured status of three additional axes of a joystick and switches of the joystick grip or handle.  The joystick axial motion information is available in the Basic Joystick ...
// signal: @Joystick8GripXAxisPos
#define Joystick8GripXAxisPos_CovFactor 0.1
#define Joystick8GripXAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick8GripYAxisPos
#define Joystick8GripYAxisPos_CovFactor 0.1
#define Joystick8GripYAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick8ThetaAxisPos
#define Joystick8ThetaAxisPos_CovFactor 0.1
#define Joystick8ThetaAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck8GripXAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck8GrpXAxsLvrLftNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck8GrpXAxsLvrRghtPstvPsSttus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick8GripXAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck8GripYAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck8GrpYAxsLvrBckNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck8GrpYAxsLvrFrwrdPstvPsStts;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick8GripYAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck8ThetaAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck8ThtAxsCntrClckwsNgtvPsStt;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck8ThtAxsClckwsPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick8ThetaAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick8ThetaAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick8GripYAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick8GripXAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button16PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button15PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button14PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button13PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EJM8_t;

// def @BJM8 CAN Message (217917694)
#define BJM8_IDE (1U)
#define BJM8_DLC (8U)
#define BJM8_CANID (0xCFD28FEU)
#define BJM8_CYC (100U)
// -- Basic Joystick Message 8  Used to transfer information about the measured status of the 1st 2 axes and up to 12 buttons of a joystick.  Additional handle information is available in the Expanded Joystick Message.  10-bit position parameters are ...
// signal: @Joystick8XAxisPos
#define Joystick8XAxisPos_CovFactor 0.1
#define Joystick8XAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick8YAxisPos
#define Joystick8YAxisPos_CovFactor 0.1
#define Joystick8YAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick8XAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck8XAxsLvrLftNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck8XAxsLvrRghtPstvePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick8XAxisPos;                 //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick8YAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck8YAxsLvrBckNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck8YAxsLvrFrwrdPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick8YAxisPos;                 //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick8YAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick8XAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button4PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button3PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button2PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button1PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button8PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button7PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button6PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button5PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button12PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button11PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button10PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick8Button9PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} BJM8_t;

// def @EJM7 CAN Message (217917950)
#define EJM7_IDE (1U)
#define EJM7_DLC (8U)
#define EJM7_CANID (0xCFD29FEU)
#define EJM7_CYC (100U)
// -- Extended Joystick Message 7  Used to transfer information about the measured status of three additional axes of a joystick and switches of the joystick grip or handle.  The joystick axial motion information is available in the Basic Joystick ...
// signal: @Joystick7GripXAxisPos
#define Joystick7GripXAxisPos_CovFactor 0.1
#define Joystick7GripXAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick7GripYAxisPos
#define Joystick7GripYAxisPos_CovFactor 0.1
#define Joystick7GripYAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick7ThetaAxisPos
#define Joystick7ThetaAxisPos_CovFactor 0.1
#define Joystick7ThetaAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck7GripXAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck7GrpXAxsLvrLftNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck7GrpXAxsLvrRghtPstvPsSttus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick7GripXAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck7GripYAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck7GrpYAxsLvrBckNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck7GrpYAxsLvrFrwrdPstvPsStts;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick7GripYAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck7ThetaAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck7ThtAxsCntrClckwsNgtvPsStt;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck7ThtAxsClckwsPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick7ThetaAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick7ThetaAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick7GripYAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick7GripXAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button16PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button15PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button14PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button13PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EJM7_t;

// def @BJM7 CAN Message (217918206)
#define BJM7_IDE (1U)
#define BJM7_DLC (8U)
#define BJM7_CANID (0xCFD2AFEU)
#define BJM7_CYC (100U)
// -- Basic Joystick Message 7  Used to transfer information about the measured status of the 1st 2 axes and up to 12 buttons of a joystick.  Additional handle information is available in the Expanded Joystick Message.  10-bit position parameters are ...
// signal: @Joystick7XAxisPos
#define Joystick7XAxisPos_CovFactor 0.1
#define Joystick7XAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick7YAxisPos
#define Joystick7YAxisPos_CovFactor 0.1
#define Joystick7YAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick7XAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck7XAxsLvrLftNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck7XAxsLvrRghtPstvePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick7XAxisPos;                 //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick7YAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck7YAxsLvrBckNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck7YAxsLvrFrwrdPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick7YAxisPos;                 //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick7YAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick7XAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button4PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button3PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button2PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button1PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button8PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button7PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button6PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button5PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button12PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button11PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button10PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick7Button9PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} BJM7_t;

// def @EJM6 CAN Message (217918462)
#define EJM6_IDE (1U)
#define EJM6_DLC (8U)
#define EJM6_CANID (0xCFD2BFEU)
#define EJM6_CYC (100U)
// -- Extended Joystick Message 6  Used to transfer information about the measured status of three additional axes of a joystick and switches of the joystick grip or handle.  The joystick axial motion information is available in the Basic Joystick ...
// signal: @Joystick6GripXAxisPos
#define Joystick6GripXAxisPos_CovFactor 0.1
#define Joystick6GripXAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick6GripYAxisPos
#define Joystick6GripYAxisPos_CovFactor 0.1
#define Joystick6GripYAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick6ThetaAxisPos
#define Joystick6ThetaAxisPos_CovFactor 0.1
#define Joystick6ThetaAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck6GripXAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck6GrpXAxsLvrLftNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck6GrpXAxsLvrRghtPstvPsSttus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick6GripXAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck6GripYAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck6GrpYAxsLvrBckNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck6GrpYAxsLvrFrwrdPstvPsStts;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick6GripYAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck6ThetaAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck6ThtAxsCntrClckwsNgtvPsStt;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck6ThtAxsClckwsPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick6ThetaAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick6ThetaAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick6GripYAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick6GripXAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button16PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button15PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button14PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button13PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EJM6_t;

// def @BJM6 CAN Message (217918718)
#define BJM6_IDE (1U)
#define BJM6_DLC (8U)
#define BJM6_CANID (0xCFD2CFEU)
#define BJM6_CYC (100U)
// -- Basic Joystick Message 6  Used to transfer information about the measured status of the 1st 2 axes and up to 12 buttons of a joystick.  Additional handle information is available in the Expanded Joystick Message.  10-bit position parameters are ...
// signal: @Joystick6XAxisPos
#define Joystick6XAxisPos_CovFactor 0.1
#define Joystick6XAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick6YAxisPos
#define Joystick6YAxisPos_CovFactor 0.1
#define Joystick6YAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick6XAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck6XAxsLvrLftNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck6XAxsLvrRghtPstvePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick6XAxisPos;                 //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick6YAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck6YAxsLvrBckNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck6YAxsLvrFrwrdPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick6YAxisPos;                 //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick6YAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick6XAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button4PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button3PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button2PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button1PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button8PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button7PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button6PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button5PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button12PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button11PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button10PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick6Button9PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} BJM6_t;

// def @EJM5 CAN Message (217918974)
#define EJM5_IDE (1U)
#define EJM5_DLC (8U)
#define EJM5_CANID (0xCFD2DFEU)
#define EJM5_CYC (100U)
// -- Extended Joystick Message 5  Used to transfer information about the measured status of three additional axes of a joystick and switches of the joystick grip or handle.  The joystick axial motion information is available in the Basic Joystick ...
// signal: @Joystick5GripXAxisPos
#define Joystick5GripXAxisPos_CovFactor 0.1
#define Joystick5GripXAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick5GripYAxisPos
#define Joystick5GripYAxisPos_CovFactor 0.1
#define Joystick5GripYAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick5ThetaAxisPos
#define Joystick5ThetaAxisPos_CovFactor 0.1
#define Joystick5ThetaAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck5GripXAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck5GrpXAxsLvrLftNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck5GrpXAxsLvrRghtPstvPsSttus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick5GripXAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck5GripYAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck5GrpYAxsLvrBckNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck5GrpYAxsLvrFrwrdPstvPsStts;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick5GripYAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck5ThetaAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck5ThtAxsCntrClckwsNgtvPsStt;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck5ThtAxsClckwsPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick5ThetaAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick5ThetaAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick5GripYAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick5GripXAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button16PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button15PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button14PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button13PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EJM5_t;

// def @BJM5 CAN Message (217919230)
#define BJM5_IDE (1U)
#define BJM5_DLC (8U)
#define BJM5_CANID (0xCFD2EFEU)
#define BJM5_CYC (100U)
// -- Basic Joystick Message 5  Used to transfer information about the measured status of the 1st 2 axes and up to 12 buttons of a joystick.  Additional handle information is available in the Expanded Joystick Message.  10-bit position parameters are ...
// signal: @Joystick5XAxisPos
#define Joystick5XAxisPos_CovFactor 0.1
#define Joystick5XAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick5YAxisPos
#define Joystick5YAxisPos_CovFactor 0.1
#define Joystick5YAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick5XAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck5XAxsLvrLftNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck5XAxsLvrRghtPstvePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick5XAxisPos;                 //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick5YAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck5YAxsLvrBckNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck5YAxsLvrFrwrdPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick5YAxisPos;                 //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick5YAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick5XAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button4PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button3PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button2PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button1PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button8PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button7PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button6PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button5PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button12PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button11PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button10PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick5Button9PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} BJM5_t;

// def @EJM4 CAN Message (217919486)
#define EJM4_IDE (1U)
#define EJM4_DLC (8U)
#define EJM4_CANID (0xCFD2FFEU)
#define EJM4_CYC (100U)
// -- Extended Joystick Message 4  Used to transfer information about the measured status of three additional axes of a joystick and switches of the joystick grip or handle.  The joystick axial motion information is available in the Basic Joystick ...
// signal: @Joystick4GripXAxisPos
#define Joystick4GripXAxisPos_CovFactor 0.1
#define Joystick4GripXAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick4GripYAxisPos
#define Joystick4GripYAxisPos_CovFactor 0.1
#define Joystick4GripYAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick4ThetaAxisPos
#define Joystick4ThetaAxisPos_CovFactor 0.1
#define Joystick4ThetaAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck4GripXAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck4GrpXAxsLvrLftNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck4GrpXAxsLvrRghtPstvPsSttus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick4GripXAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck4GripYAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck4GrpYAxsLvrBckNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck4GrpYAxsLvrFrwrdPstvPsStts;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick4GripYAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck4ThetaAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck4ThtAxsCntrClckwsNgtvPsStt;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck4ThtAxsClckwsPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick4ThetaAxisPos;             //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick4ThetaAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick4GripYAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick4GripXAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick4Button16PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick4Button15PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick4Button14PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick4Button13PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EJM4_t;

// def @BJM4 CAN Message (217919742)
#define BJM4_IDE (1U)
#define BJM4_DLC (8U)
#define BJM4_CANID (0xCFD30FEU)
#define BJM4_CYC (100U)
// -- Basic Joystick Message 4  Used to transfer information about the measured status of the 1st 2 axes and up to 12 buttons of a joystick.  Additional handle information is available in the Expanded Joystick Message.  10-bit position parameters are ...
// signal: @Joystick4XAxisPos
#define Joystick4XAxisPos_CovFactor 0.1
#define Joystick4XAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick4YAxisPos
#define Joystick4YAxisPos_CovFactor 0.1
#define Joystick4YAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick4XAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck4XAxsLvrLftNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck4XAxsLvrRghtPstvePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick4XAxisPos;                 //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick4YAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck4YAxsLvrBckNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck4YAxsLvrFrwrdPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick4YAxisPos;                 //      Bits=10.  [ 0     , 102    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick4YAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick4XAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick4Button4PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick4Button3PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick4Button2PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick4Button1PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick4Button8PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick4Button7PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick4Button6PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick4Button5PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick4Button12PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick4Button11PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 

  uint8_t Joystick4Button10PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick4Button9PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} BJM4_t;

// def @EOI CAN Message (217944830)
#define EOI_IDE (1U)
#define EOI_DLC (8U)
#define EOI_CANID (0xCFD92FEU)
#define EOI_CYC (250U)
// -- Engine Operating Information  Contains engine parameters related to operation.
// signal: @EngDesiredTorqueRq
#define EngDesiredTorqueRq_CovFactor 1
#define EngDesiredTorqueRq_CovS(x) ((int16_t)(x + 125))
// signal: @EngDerateRq
#define EngDerateRq_CovFactor 0.4
#define EngDerateRq_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // This parameter is used to indicate the current state, or mode, of operation by the engine.  This is a status parameter.  Bit state 0000 = Engine Stopped  Bit state 0001 = Pre-Start  Bit state 0010 = Starting  Bit state 0011 = Warm-Up  Bit state 0100 ...
  uint8_t EngOperatingState;                  //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Parameter used to activate or deactivate a priming system on the fuel transfer system. The fuel priming system is a system that purges air in the fuel lines and may assist fuel delivery to a second pump at lower speeds.  00 = Deactivate  01 = ...
  // 3 - "Unavailable" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "Deactivate" 

  uint8_t FuelPumpPrimerCtrl;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to energize or de-energize the engine starter motor relay.    00 Off  01 On  10 Reserved for SAE assignment  11 Don't care/take no action
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved for SAE assignment" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngStarterMotorRelayCtrl;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  uint16_t TimeRemainingInEngOperatingState;  //      Bits=16.  [ 0     , 64255  ]  Unit:'s'    

  // Control setting for a fuel shutoff vent.  Typically, for a dual fuel shutoff system, the vent line is located between them and is plumbed to vent outside to atmosphere.  The vent control typically always actuates opposite to that of the fuel ...
  // 3 - "Don't care / take no action" 
  // 2 - "Reserved" 
  // 1 - "Open" 
  // 0 - "Closed" 

  uint8_t EngFuelShutoffVentCtrl;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Control setting for fuel shutoff 1.  The second instance is SPN 2807.  For a single fuel shutoff system, this represents its commanded position.  For a dual fuel shutoff system, this SPN is representative of the upstream fuel shutoff commanded ...
  // 3 - "Don't care / take no action" 
  // 2 - "Reserved" 
  // 1 - "Closed" 
  // 0 - "Open" 

  uint8_t EngFuelShutoff1Ctrl;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Control setting for fuel shutoff 2.  First instance is SPN 632.  For a dual fuel shutoff system, this SPN is representative of the downstream fuel shutoff commanded position.  When fuel (gas) is desired at the engine, the fuel shutoff is opened ...
  // 3 - "Don't care / take no action" 
  // 2 - "Reserved" 
  // 1 - "Closed" 
  // 0 - "Open" 

  uint8_t EngFuelShutoff2Ctrl;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Control setting for fuel shutoff valve proving system test.  Typically, this type of system can only be used with a dual fuel shutoff system.  The test consists of a small pump to pressurize the chamber between the dual fuel shutoffs when they are ...
  // 3 - "Don't care / take no action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngFuelShutoffValveLeakTestCtrl;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This control is used to activate a pump that lubricates the engine, particularly prior to initial engine startup.    00 = Off  01 = On  10 = Reserved  11 = unavailable
  // 3 - "unavailable" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngOilPrimingPumpCtrl;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Control setting for an electrically actuated oil pre-heating device.  00 = Off  01 = On  10 = Reserved  11 = Don't care / take no action  In addition to communicating desired action of the electrically actuated oil pre-heater and its driver status, ...
  // 3 - "Don't care / take no action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngOilPreheaterCtrl;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Control setting for cutting power to various devices when the engine is not in use.  Useful if it is desired to keep the engine in standby, with main control ECU still powered on and communictaing with outside world, but actuators and certain other ...
  // 3 - "Unavailable" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngElctrclSystmPwrCnsrvationCtrl;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Control setting for an electrically actuated engine block or coolant pre-heating device.    00 - Off   01 - On  10 - Reserved  11 - Unavailable
  // 3 - "Unavailable" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off " 

  uint8_t EngBlock_CoolantPreheaterCtrl;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Control setting for an electrically actuated engine coolant circulating pump.     00 = Off  01 = On  10 = Reserved  11 = Don't care / take no action  .
  // 3 - "Don't care / take no action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngCoolantCirculatingPumpCtrl;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // A signal issued by the engine control system to a user or external system requesting for a controlled shutdown.  This request is made when engine protection diagnostics determine a condition warrants a shutdown soon, but it is not severe enough to ...
  // 3 - "Don't care / take no action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngControlledShutdownRq;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // A signal issued by the engine control system to a user or external system indicating that it is immediately shutting the engine down.  This indication is made when engine protection diagnostics determine a condition necessitates an immediate ...
  // 3 - "Don't care / take no action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngEmergencyShutdownIndication;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the engine is elevating the idle speed due to cold strategies.    00 No Idle Elevation Active - standard idle speed  01 Idle Elevation Active  10 Reserved for SAE assignment  11 Unavailable
  // 3 - "Unavailable" 
  // 2 - "Reserved for SAE assignment" 
  // 1 - "Idle Elevation Active" 
  // 0 - "No Idle Elevation Active" 

  uint8_t EngColdAmbientElevatedIdleStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This is the torque that the ECM desires to provide. It is a request made from the ECM to an external system. A valid value within the operating range indicates the engine is requesting an external controller to change the operation of the system so ...
  int16_t EngDesiredTorqueRq;                 //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Offset= -125     

  // This parameter is a derate request made from the engine control system to an external system, where the engine is requesting an external device to reduce the load being applied.  A zero value indicates that there is no derate being requested and ...
  uint8_t EngDerateRq;                        //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} EOI_t;

// def @GC1 CAN Message (217945086)
#define GC1_IDE (1U)
#define GC1_DLC (8U)
#define GC1_CANID (0xCFD93FEU)
#define GC1_CYC (100U)
// -- Generator Control 1  Message for the generator set control to change or report the status of the generator system.
// signal: @GenAlternatorEfficiency
#define GenAlternatorEfficiency_CovFactor 0.0025
#define GenAlternatorEfficiency_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngSpeedGovernorGainAdjust
#define EngSpeedGovernorGainAdjust_CovFactor 1
#define EngSpeedGovernorGainAdjust_CovS(x) ((int32_t)(x + 32128))
// signal: @EngSpeedGovernorDroop
#define EngSpeedGovernorDroop_CovFactor 0.04
#define EngSpeedGovernorDroop_CovS(x) ((uint8_t)((x / 0.04)))
typedef struct
{

  // This parameter is used to request a change to the engine control mode.  This is a status parameter.  Bit state 0000 = Normal Engine Shutdown  Bit state 0001 = Rapid Engine Shutdown  Bit state 0010 = Emergency Engine Shutdown  Bit state 0011 = Normal ...
  uint8_t RequestedEngineControlMode;    //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // This parameter indicates whether or not the generator set is in a condition to automatically start up and provide power. If not, this status parameter is in the ACTIVE state.  00 = inactive (ready to start automatically)  01 = active (not ready to ...
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "active" 
  // 0 - "inactive" 

  uint8_t GenCtrlNotInAutoStartState;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter indicates whether or not all systems required to start the engine and close to the bus are prepared to operate automatically. If not, the generator is not ready to automatically parallel, and the status parameter is in the ACTIVE ...
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "active" 
  // 0 - "inactive" 

  uint8_t GenNotReadyToAutoParaState;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Measured, calculated, and/or estimated operating efficiency of the generator alternator.  Percentage reflects ratio of power output divided by power input, multiplied by 100.
  uint16_t GenAlternatorEfficiency;      //      Bits=16.  [ 0     , 100    ]  Unit:'%'     Factor= 0.0025

  // Command from user and/or generator control system for the genset (engine) to govern to low idle or rated base speed setpoints.  If this method of engine control is used, then the PGN 0 (TSC1) is not expected to be received by the engine controller ...
  // 3 - "Don't care / take no action" 
  // 2 - "Reserved" 
  // 1 - "Low Idle Speed" 
  // 0 - "Rated Speed" 

  uint8_t GenGoverningSpeedCommand;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command from user and/or generator control system for the genset (engine) to target operations for 50 Hz, 60 Hz, or 400 Hz.    0000 = 50 Hz  0001 = 60 Hz  0010 = 400 Hz  0011 - 1101 = SAE Reserved  1110 = Unknown  1111= Don't care /take no action
  // 14 - "Unknown" 
  // 2 - "400 Hz" 
  // 1 - "60 Hz" 
  // 0 - "50 Hz" 

  uint8_t GenFrequencySelection;         //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // This parameter is used to adjust multiple gains at same time to attain engine stability across a broader range of applications.      -32128 is least responsive  0 is normal  +32127 is most responsive
  int32_t EngSpeedGovernorGainAdjust;    //      Bits=16.  [ -32128, 32127  ]  Unit:''      Offset= -32128   

  // This is the percent speed droop adjustment relative to rated speed setpoint. The Engine Speed Droop is equal to the following equation:  100*[(Engine Speed at no load - Engine Speed at full rated load)/ (Engine Speed at full rated load)].  The ...
  uint8_t EngSpeedGovernorDroop;         //      Bits=08.  [ 0     , 10     ]  Unit:'%'     Factor= 0.04  
  uint32_t framecnt;
} GC1_t;

// def @VREP CAN Message (217949950)
#define VREP_IDE (1U)
#define VREP_DLC (8U)
#define VREP_CANID (0xCFDA6FEU)
#define VREP_CYC (100U)
// signal: @GeneratorExcitationFieldVoltage
#define GeneratorExcitationFieldVoltage_CovFactor 0.05
#define GeneratorExcitationFieldVoltage_CovS(x) ((int32_t)((x / 0.05) + 32120))
// signal: @GeneratorExcitationFieldCurrent
#define GeneratorExcitationFieldCurrent_CovFactor 0.05
#define GeneratorExcitationFieldCurrent_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @GnrtrOtputVoltageBiasPercentage
#define GnrtrOtputVoltageBiasPercentage_CovFactor 0.1
#define GnrtrOtputVoltageBiasPercentage_CovS(x) ((int32_t)((x / 0.1) + 1000))
typedef struct
{

  int32_t GeneratorExcitationFieldVoltage;   //      Bits=16.  [ -1606 , 1606.75 ]  Unit:'V'     Offset= -1606     Factor= 0.05  

  uint16_t GeneratorExcitationFieldCurrent;  //      Bits=16.  [ 0     , 3212.75 ]  Unit:'A'     Factor= 0.05  

  int32_t GnrtrOtputVoltageBiasPercentage;   //      Bits=16.  [ -100  , 100    ]  Unit:'%'     Offset= -100      Factor= 0.1   
  uint32_t framecnt;
} VREP_t;

// def @OEL CAN Message (217959678)
#define OEL_IDE (1U)
#define OEL_DLC (8U)
#define OEL_CANID (0xCFDCCFEU)
#define OEL_CYC (1000U)
// -- Operators External Light Controls Message  The message containing the information about the position of the operator's external light control switch(s).  Including switches for the Headlights, turn signals, hazard light, clearance lights, marker ...
// signal: @OperatorsDesiredBacklight
#define OperatorsDesiredBacklight_CovFactor 0.4
#define OperatorsDesiredBacklight_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // A 4 bit parameter to indicate the selected position of the operator's work light switch. In Ag applications the work lights are often refereed to as field lights.  In on-highway applications the work lights are often referred to as clearance lights ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 4 - "Work Light Combination #4 On" 
  // 3 - "Work Light Combination #3 On" 
  // 2 - "Work Light Combination #2 On" 
  // 1 - "Work Light Combination #1 On" 
  // 0 - "Off" 

  uint8_t WorkLightSwitch;                    //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // A 4 bit parameter to indicate the selected position of the operator's main light switch.  0000 Off - The position by which the operator selects that none of the lamps are to be on.  0001 Park On - The position by which the operator selects that the ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 8 - "Delayed Off" 
  // 3 - "Headlight and Park On" 
  // 2 - "Headlight On" 
  // 1 - "Park On" 
  // 0 - "Off" 

  uint8_t MainLightSwitch;                    //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // A 4 bit parameter to indicate the selected position of the operator's turn signal switch.  0000   No Turn being signaled  0001   Left Turn to be Flashing  0010   Right turn to be Flashing  0011 - 1101   Reserved  1110   Error (to include both left ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 2 - "Right turn to be Flashing" 
  // 1 - "Left Turn to be Flashing" 
  // 0 - "No Turn being signaled" 

  uint8_t TurnSignalSwitch;                   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // A 2 bit parameter to indicate the selected position of the operator's hazard light switch.    00   Hazard Lamps to be Off  01   Hazard Lamps to be Flashing  10   Error  11   Not available (do not change)
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Hazard Lamps to be Flashing" 
  // 0 - "Hazard Lamps to be Off" 

  uint8_t HazardLightSwitch;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // A 2 bit parameter to indicate the selected position of the operator's high/low beam select switch.    00  Low Beam Selected  01  High Beam Selected  10  Error  11  Not available (do not change)
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "High Beam Selected" 
  // 0 - "Low Beam Selected" 

  uint8_t HighLowBeamSwitch;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // A 8 bit parameter to indicate the level of back lighting the operator has selected for displays.  This is to be differentiated from the Illumination Brightness Percent (SPN:1487 PGN:53248 Cab Illumination Message) which is sent to the displays to ...
  uint8_t OperatorsDesiredBacklight;          //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // A 16 bit parameter to be associated with Delayed Off position (1000 binary) of the Main Light Switch.  This parameter indicates the time the operator wishes to have elapse following the Main Light switch being placed in Delayed Off position before ...
  uint16_t OprtorsDesiredDelayedLampOffTime;  //      Bits=16.  [ 0     , 64255  ]  Unit:'s'    
  uint32_t framecnt;
} OEL_t;

// def @BJM1 CAN Message (217962238)
#define BJM1_IDE (1U)
#define BJM1_DLC (8U)
#define BJM1_CANID (0xCFDD6FEU)
#define BJM1_CYC (100U)
// -- Basic Joystick Message 1  Used to transfer information about the measured status of the 1st 2 axes and up to 12 buttons of a joystick.  Additional handle information is available in the Expanded Joystick Message.  10-bit position parameters are ...
// signal: @Joystick1XAxisPos
#define Joystick1XAxisPos_CovFactor 0.1
#define Joystick1XAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick1YAxisPos
#define Joystick1YAxisPos_CovFactor 0.1
#define Joystick1YAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick1XAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck1XAxsLvrLftNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck1XAxsLvrRghtPstvePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick1XAxisPos;                 //      Bits=10.  [ 0     , 100    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick1YAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck1YAxsLvrBckNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck1YAxsLvrFrwrdPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick1YAxisPos;                 //      Bits=10.  [ 0     , 100    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick1YAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick1XAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button4PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button3PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button2PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button1PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button8PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button7PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button6PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button5PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button12PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button11PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button10PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button9PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} BJM1_t;

// def @EJM1 CAN Message (217962494)
#define EJM1_IDE (1U)
#define EJM1_DLC (8U)
#define EJM1_CANID (0xCFDD7FEU)
#define EJM1_CYC (100U)
// -- Extended Joystick Message 1  Used to transfer information about the measured status of three additional axes of a joystick and switches of the joystick grip or handle.  The joystick axial motion information is available in the Basic Joystick ...
// signal: @Joystick1GripXAxisPos
#define Joystick1GripXAxisPos_CovFactor 0.1
#define Joystick1GripXAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick1GripYAxisPos
#define Joystick1GripYAxisPos_CovFactor 0.1
#define Joystick1GripYAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick1ThetaAxisPos
#define Joystick1ThetaAxisPos_CovFactor 0.1
#define Joystick1ThetaAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck1GripXAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck1GrpXAxsLvrLftNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck1GrpXAxsLvrRghtPstvPsSttus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick1GripXAxisPos;             //      Bits=10.  [ 0     , 100    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Aftrtrtmnt1DslExhstFldPrprtsPrlm;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck1GrpYAxsLvrBckNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck1GrpYAxsLvrFrwrdPstvPsStts;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick1GripYAxisPos;             //      Bits=10.  [ 0     , 100    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck1ThetaAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck1ThtAxsCntrClckwsNgtvPsStt;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck1ThtAxsClckwsPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick1ThetaAxisPos;             //      Bits=10.  [ 0     , 100    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick1ThetaAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick1GripYAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick1GripXAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button16PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button15PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button14PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick1Button13PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EJM1_t;

// def @BJM2 CAN Message (217962750)
#define BJM2_IDE (1U)
#define BJM2_DLC (8U)
#define BJM2_CANID (0xCFDD8FEU)
#define BJM2_CYC (100U)
// -- Basic Joystick Message 2  Used to transfer information about the measured status of the 1st 2 axes and up to 12 buttons of a joystick.  Additional handle information is available in the Expanded Joystick Message.  10-bit position parameters are ...
// signal: @Joystick2XAxisPos
#define Joystick2XAxisPos_CovFactor 0.1
#define Joystick2XAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick2YAxisPos
#define Joystick2YAxisPos_CovFactor 0.1
#define Joystick2YAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick2XAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck2XAxsLvrLftNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck2XAxsLvrRghtPstvePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick2XAxisPos;                 //      Bits=10.  [ 0     , 100    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick2YAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck2YAxsLvrBckNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck2YAxsLvrFrwrdPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick2YAxisPos;                 //      Bits=10.  [ 0     , 100    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick2YAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick2XAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button4PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button3PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button2PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button1PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button8PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button7PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button6PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button5PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button12PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button11PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button10PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button9PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} BJM2_t;

// def @EJM2 CAN Message (217963006)
#define EJM2_IDE (1U)
#define EJM2_DLC (8U)
#define EJM2_CANID (0xCFDD9FEU)
#define EJM2_CYC (100U)
// -- Extended Joystick Message 2  Used to transfer information about the measured status of three additional axes of a joystick and switches of the joystick grip or handle.  The joystick axial motion information is available in the Basic Joystick ...
// signal: @Joystick2GripXAxisPos
#define Joystick2GripXAxisPos_CovFactor 0.1
#define Joystick2GripXAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick2GripYAxisPos
#define Joystick2GripYAxisPos_CovFactor 0.1
#define Joystick2GripYAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick2ThetaAxisPos
#define Joystick2ThetaAxisPos_CovFactor 0.1
#define Joystick2ThetaAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not on negative side of ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck2GripXAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck2GrpXAxsLvrLftNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck2GrpXAxsLvrRghtPstvPsSttus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick2GripXAxisPos;             //      Bits=10.  [ 0     , 100    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck2GripYAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck2GrpYAxsLvrBckNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck2GrpYAxsLvrFrwrdPstvPsStts;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick2GripYAxisPos;             //      Bits=10.  [ 0     , 100    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck2ThetaAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck2ThtAxsCntrClckwsNgtvPsStt;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck2ThtAxsClckwsPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick2ThetaAxisPos;             //      Bits=10.  [ 0     , 100    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick2ThetaAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick2GripYAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick2GripXAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button16PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button15PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button14PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick2Button13PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EJM2_t;

// def @BJM3 CAN Message (217963262)
#define BJM3_IDE (1U)
#define BJM3_DLC (8U)
#define BJM3_CANID (0xCFDDAFEU)
#define BJM3_CYC (100U)
// -- Basic Joystick Message 3  Used to transfer information about the measured status of the 1st 2 axes and up to 12 buttons of a joystick.  Additional handle information is available in the Expanded Joystick Message.  10-bit position parameters are ...
// signal: @Joystick3XAxisPos
#define Joystick3XAxisPos_CovFactor 0.1
#define Joystick3XAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick3YAxisPos
#define Joystick3YAxisPos_CovFactor 0.1
#define Joystick3YAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick3XAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck3XAxsLvrLftNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck3XAxsLvrRghtPstvePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick3XAxisPos;                 //      Bits=10.  [ 0     , 100    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Joystick3YAxisNeutralPosStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck3YAxsLvrBckNgtivePosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck3YAxsLvrFrwrdPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick3YAxisPos;                 //      Bits=10.  [ 0     , 100    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick3YAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Joystick3XAxisDetentPosStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button4PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button3PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button2PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button1PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button8PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button7PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button6PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button5PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button12PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button11PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button10PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button9PressedStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} BJM3_t;

// def @EJM3 CAN Message (217963518)
#define EJM3_IDE (1U)
#define EJM3_DLC (8U)
#define EJM3_CANID (0xCFDDBFEU)
#define EJM3_CYC (100U)
// -- Extended Joystick Message 3  Used to transfer information about the measured status of three additional axes of a joystick and switches of the joystick grip or handle.  The joystick axial motion information is available in the Basic Joystick ...
// signal: @Joystick3GripXAxisPos
#define Joystick3GripXAxisPos_CovFactor 0.1
#define Joystick3GripXAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick3GripYAxisPos
#define Joystick3GripYAxisPos_CovFactor 0.1
#define Joystick3GripYAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Joystick3ThetaAxisPos
#define Joystick3ThetaAxisPos_CovFactor 0.1
#define Joystick3ThetaAxisPos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not on negative side of ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck3GripXAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck3GrpXAxsLvrLftNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck3GrpXAxsLvrRghtPstvPsSttus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick3GripXAxisPos;             //      Bits=10.  [ 0     , 100    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick grip position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck3GripYAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck3GrpYAxsLvrBckNgtvPsStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck3GrpYAxsLvrFrwrdPstvPsStts;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick grip in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick3GripYAxisPos;             //      Bits=10.  [ 0     , 100    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the neutral position for that axis of travel.  The neutral position measurement must be determined from some mechanism other than the axis position measurement device.  00 Not in Neutral Position  01 ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In Neutral Position" 
  // 0 - "Not in Neutral Position" 

  uint8_t Jystck3ThetaAxisNeutralPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the negative travel side (back, left, counterclockwise, down) relative to the neutral position for that axis of travel.  00 Not on negative side of Neutral  01 On negative side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On negative side of Neutral" 
  // 0 - "Not on negative side of Neutral" 

  uint8_t Jystck3ThtAxsCntrClckwsNgtvPsStt;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick position is on the positive travel side (forward, right, clockwise, up) relative to the neutral position for that axis of travel.  00 Not on Positive side of Neutral  01 On positive side of Neutral  10 Error ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "On positive side of Neutral" 
  // 0 - "Not on Positive side of Neutral" 

  uint8_t Jystck3ThtAxsClckwsPstvPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the joystick in the relative motion of travel from the neutral position.  Position value of 0 is Neutral and position value 1000 (100%) is the end of linear zone.  Value of 1022 indicates an error has occurred.
  uint16_t Joystick3ThetaAxisPos;             //      Bits=10.  [ 0     , 100    ]  Unit:'%'     Factor= 0.1   

  // Reports when the current joystick position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick3ThetaAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick3GripYAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the current joystick grip position is in the detent position for that axis of travel.    00 Not in the Detent Position  01 In the Detent Position  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "In the Detent Position" 
  // 0 - "Not in the Detent Position" 

  uint8_t Jystick3GripXAxisDetentPosStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button16PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button15PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button14PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports when the joystick button has been pressed.    00 Button not pressed  01 Button pressed  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Button pressed" 
  // 0 - "Button not pressed" 

  uint8_t Joystick3Button13PressedStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EJM3_t;

// def @HBS CAN Message (217966334)
#define HBS_IDE (1U)
#define HBS_DLC (8U)
#define HBS_CANID (0xCFDE6FEU)
#define HBS_CYC (100U)
// -- Hydraulic Braking System  Used for information on a hydraulic brake system  As an example: this PGN may be used for a two circuit hydraulic brake system with separate circuits for front and rear axle. The hydraulic energy is supplied via two ...
// signal: @HydBrakePressCircuit1
#define HydBrakePressCircuit1_CovFactor 100
#define HydBrakePressCircuit1_CovS(x) ((uint8_t)((x / 100)))
// signal: @HydBrakePressCircuit2
#define HydBrakePressCircuit2_CovFactor 100
#define HydBrakePressCircuit2_CovS(x) ((uint8_t)((x / 100)))
typedef struct
{

  // Gage hydraulic pressure in circuit 1 of the hydraulic brake system
  uint8_t HydBrakePressCircuit1;              //      Bits=08.  [ 0     , 25000  ]  Unit:'kPa'   Factor= 100   

  // Gage hydraulic pressure in circuit 2 of the hydraulic brake system
  uint8_t HydBrakePressCircuit2;              //      Bits=08.  [ 0     , 25000  ]  Unit:'kPa'   Factor= 100   

  // Signal which indicates whether the hydraulic brake pressure of circuit 1 is below the warning level    00 Pressure level sufficient  01 Pressure level below warning level  10 Error indicator  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indicator" 
  // 1 - "Pressure level below warning level" 
  // 0 - "Pressure level sufficient" 

  uint8_t HydBrkePressWarningStateCircuit1;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates whether the hydraulic brake pressure of circuit 2 is below the warning level    00 Pressure level sufficient  01 Pressure level below warning level  10 Error indicator  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indicator" 
  // 1 - "Pressure level below warning level" 
  // 0 - "Pressure level sufficient" 

  uint8_t HydBrkePressWarningStateCircuit2;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates whether the hydraulic brake pressure supply of circuit 1 is reliable; that is, able to support continued braking.    00 Supply is not reliable  01 Supply is reliable  10 Error indicator  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indicator" 
  // 1 - "Supply is reliable" 
  // 0 - "Supply is not reliable" 

  uint8_t HydBrakePressSupplyStateCircuit1;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates whether the hydraulic brake pressure supply of circuit 2 is reliable; that is, able to support continued braking.    00 Supply is not reliable  01 Supply is reliable  10 Error indicator  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indicator" 
  // 1 - "Supply is reliable" 
  // 0 - "Supply is not reliable" 

  uint8_t HydBrakePressSupplyStateCircuit2;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which commands an audible warning by the hydraulic braking system.    00       Audible warning off  01       Audible warning on  10       Reserved  11       Don't care
  // 3 - "Don't care" 
  // 2 - "Reserved" 
  // 1 - "Audible warning on" 
  // 0 - "Audible warning off" 

  uint8_t HydBrakeSystemAudibleWarningCmd;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates whether the hydraulic fluid level in the reservoir(s) is sufficient.    00      Fluid level is not sufficient  01      Fluid level is sufficient  10      Error indicator  11      Not available
  // 3 - "Not available" 
  // 2 - "Error indicator" 
  // 1 - "Fluid level is sufficient" 
  // 0 - "Fluid level is not sufficient" 

  uint8_t HydBrakeFluidLevelSwitch;           //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} HBS_t;

// def @BUSC CAN Message (217966590)
#define BUSC_IDE (1U)
#define BUSC_DLC (8U)
#define BUSC_CANID (0xCFDE7FEU)
#define BUSC_CYC (100U)
// -- Bus #1/Utility Sync Check Status
// signal: @Bus1_UtilityACPhaseDifference
#define Bus1_UtilityACPhaseDifference_CovFactor 0.0078125
#define Bus1_UtilityACPhaseDifference_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
typedef struct
{

  // Indicator of whether Bus #1 is considered dead for closing to the utility. This indicator will be based on parameters such as Bus #1 Voltage and dead bus threshold values.  00 Bus is not dead  01 Bus is dead  10 Error  11 Not Available or Not ...
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Bus is dead" 
  // 0 - "Bus is not dead" 

  uint8_t Bus1_UtilityDeadBus;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicator of whether phase difference between Bus #1 and Utility is adequate for paralleling. This indicator will be based on the measured AC phase difference qualified using parameters such as Phase Tolerance and Dwell Time.  00 Phases do not match   ...
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Phases match" 
  // 0 - "Phases do not match" 

  uint8_t Bus1_UtilityPhaseMatch;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicator of whether frequency difference between Bus #1 and Utility is adequate for paralleling. This indicator will be based on the measured AC frequencies qualified using parameters such as Frequency Tolerance, Phase Tolerance, and Dwell Time.   ...
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Frequencies match" 
  // 0 - "Frequencies do not match" 

  uint8_t Bus1_UtilityFrequencyMatch;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicator of whether voltage difference between Bus #1 and Utility is adequate for paralleling. This indicator will be based on the measured AC voltages qualified using parameters such as Voltage Tolerance.  00 Voltages do not match  01 Voltages ...
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Voltages match" 
  // 0 - "Voltages do not match" 

  uint8_t Bus1_UtilityVoltageMatch;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicator of whether Bus #1 and Utility are properly synchronized for paralleling. This indicator will be based on parameters such as Voltage Match, Frequency Match, and Phase Match.  00 Not synchronized  01 Synchronized  10 Error  11 Not Available ...
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Synchronized" 
  // 0 - "Not synchronized" 

  uint8_t Bus1_UtilityInSync;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The phase difference between the Bus #1 voltage and Utility voltage.
  int32_t Bus1_UtilityACPhaseDifference;   //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125
  uint32_t framecnt;
} BUSC_t;

// def @BGSC CAN Message (217966846)
#define BGSC_IDE (1U)
#define BGSC_DLC (8U)
#define BGSC_CANID (0xCFDE8FEU)
#define BGSC_CYC (100U)
// -- Bus #1/Generator Sync Check Status
// signal: @Bus1_GeneratorACPhaseDifference
#define Bus1_GeneratorACPhaseDifference_CovFactor 0.0078125
#define Bus1_GeneratorACPhaseDifference_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
typedef struct
{

  // Indicator of whether Bus #1 is considered dead for closing to the generator. This indicator will be based on parameters such as Bus #1 Voltage and dead bus threshold values.  00 Bus is not dead  01 Bus is dead  10 Error  11 Not Available or Not ...
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Bus is dead" 
  // 0 - "Bus is not dead" 

  uint8_t Bus1_GeneratorDeadBus;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicator of whether phase difference between Bus #1 and Generator is adequate for paralleling. This indicator will be based on the measured AC phase difference qualified using parameters such as Phase Tolerance and Dwell Time.  00 Phases do not ...
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Phases match" 
  // 0 - "Phases do not match" 

  uint8_t Bus1_GeneratorPhaseMatch;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicator of whether frequency difference between Bus #1 and Generator is adequate for paralleling. This indicator will be based on the measured AC frequencies qualified using parameters such as Frequency Tolerance, Phase Tolerance, and Dwell Time.   ...
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Frequencies match" 
  // 0 - "Frequencies do not match" 

  uint8_t Bus1_GeneratorFrequencyMatch;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicator of whether voltage difference between Bus #1 and Generator is adequate for paralleling. This indicator will be based on the measured AC voltages qualified using parameters such as Voltage Tolerance.  00 Voltages do not match  01 Voltages ...
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Voltages match" 
  // 0 - "Voltages do not match" 

  uint8_t Bus1_GeneratorVoltageMatch;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicator of whether Bus #1 and Generator are properly synchronized for paralleling. This indicator will be based on parameters such as Voltage Match, Frequency Match, and Phase Match.  00 Not synchronized  01 Synchronized  10 Error  11 Not ...
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Synchronized" 
  // 0 - "Not synchronized" 

  uint8_t Bus1_GeneratorInSync;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The phase difference between the Bus #1 voltage and Generator voltage.
  int32_t Bus1_GeneratorACPhaseDifference;   //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125
  uint32_t framecnt;
} BGSC_t;

// def @BPCAC CAN Message (217967102)
#define BPCAC_IDE (1U)
#define BPCAC_DLC (8U)
#define BPCAC_CANID (0xCFDE9FEU)
#define BPCAC_CYC (100U)
// -- Bus #1 Phase C  Basic AC Quantities
// signal: @Bus1PhaseCACFrequency
#define Bus1PhaseCACFrequency_CovFactor 0.0078125
#define Bus1PhaseCACFrequency_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Line to Line RMS voltage measured at bus #1 phase CA.
  uint16_t Bus1PhaseCALineLineACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // Line to Neutral RMS voltage measured at bus #1 phase C.
  uint16_t Bs1PhseCLineNeutralACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // AC frequency measured at bus #1 phase C.
  uint16_t Bus1PhaseCACFrequency;            //      Bits=16.  [ 0     , 501.9921875 ]  Unit:'Hz'    Factor= 0.0078125
  uint32_t framecnt;
} BPCAC_t;

// def @BPBAC CAN Message (217967358)
#define BPBAC_IDE (1U)
#define BPBAC_DLC (8U)
#define BPBAC_CANID (0xCFDEAFEU)
#define BPBAC_CYC (100U)
// -- Bus #1 Phase B  Basic AC Quantities
// signal: @Bus1PhaseBACFrequency
#define Bus1PhaseBACFrequency_CovFactor 0.0078125
#define Bus1PhaseBACFrequency_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Line to Line RMS voltage measured at bus #1 phase BC.
  uint16_t Bus1PhaseBCLineLineACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // Line to Neutral RMS voltage measured at bus #1 phase B.
  uint16_t Bs1PhseBLineNeutralACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // AC frequency measured at bus #1 phase B.
  uint16_t Bus1PhaseBACFrequency;            //      Bits=16.  [ 0     , 501.9921875 ]  Unit:'Hz'    Factor= 0.0078125
  uint32_t framecnt;
} BPBAC_t;

// def @BPAAC CAN Message (217967614)
#define BPAAC_IDE (1U)
#define BPAAC_DLC (8U)
#define BPAAC_CANID (0xCFDEBFEU)
#define BPAAC_CYC (100U)
// -- Bus #1 Phase A  Basic AC Quantities
// signal: @Bus1PhaseAACFrequency
#define Bus1PhaseAACFrequency_CovFactor 0.0078125
#define Bus1PhaseAACFrequency_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Line to Line RMS voltage measured at bus #1 phase AB.
  uint16_t Bus1PhaseABLineLineACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // Line to Neutral RMS voltage measured at bus #1 phase A.
  uint16_t Bs1PhseALineNeutralACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // AC frequency measured at bus #1 phase A.
  uint16_t Bus1PhaseAACFrequency;            //      Bits=16.  [ 0     , 501.9921875 ]  Unit:'Hz'    Factor= 0.0078125
  uint32_t framecnt;
} BPAAC_t;

// def @BAAC CAN Message (217967870)
#define BAAC_IDE (1U)
#define BAAC_DLC (8U)
#define BAAC_CANID (0xCFDECFEU)
#define BAAC_CYC (100U)
// -- Bus #1 Average Basic AC Quantities
// signal: @Bus1AverageACFrequency
#define Bus1AverageACFrequency_CovFactor 0.0078125
#define Bus1AverageACFrequency_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average Line to Line RMS voltage measured at bus #1 .
  uint16_t Bus1AverageLineLineACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The average Line to Neutral AC RMS voltage measured at bus #1 .
  uint16_t Bs1AvrgeLineNeutralACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // Average AC frequency measured at bus #1.
  uint16_t Bus1AverageACFrequency;           //      Bits=16.  [ 0     , 501.9921875 ]  Unit:'Hz'    Factor= 0.0078125
  uint32_t framecnt;
} BAAC_t;

// def @UTACE CAN Message (217968126)
#define UTACE_IDE (1U)
#define UTACE_DLC (8U)
#define UTACE_CANID (0xCFDEDFEU)
#define UTACE_CYC (100U)
// -- Utility Total AC Energy
typedef struct
{

  // The total kilowatt-hours that have been exported by the utility incomer.
  uint32_t UtilityTotalKWHoursExport;    //      Bits=32.  [ 0     , 4211081215 ]  Unit:'kWh'  

  // The total kilowatt-hours that have been imported by the utility incomer.
  uint32_t UtilityTotalKWHoursImport;    //      Bits=32.  [ 0     , 4211081215 ]  Unit:'kWh'  
  uint32_t framecnt;
} UTACE_t;

// def @UPCACR CAN Message (217968382)
#define UPCACR_IDE (1U)
#define UPCACR_DLC (8U)
#define UPCACR_CANID (0xCFDEEFEU)
#define UPCACR_CYC (100U)
// -- Utility Phase C AC Reactive Power
// signal: @UtilityPhaseCReactivePower
#define UtilityPhaseCReactivePower_CovFactor 1
#define UtilityPhaseCReactivePower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @UtilityPhaseCPowerFactor
#define UtilityPhaseCPowerFactor_CovFactor 6.103515625E-05
#define UtilityPhaseCPowerFactor_CovS(x) ((int32_t)((x / 6.103515625E-05) + 16384))
typedef struct
{

  // The reactive power delivered by phase C of the utility incomer
  int64_t UtilityPhaseCReactivePower;        //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'Var'   Offset= -2000000000

  // The power factor of phases C of the utility incomer.
  int32_t UtilityPhaseCPowerFactor;          //      Bits=16.  [ -1    , 2.921814 ]  Unit:''      Offset= -1        Factor= 6.103515625E-05

  // Lead/lag status for utility incomer phase C power factor.    00 Leading  01 Lagging  10 Error  11 Not Available or Not Installed
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Lagging" 
  // 0 - "Leading" 

  uint8_t UtilityPhaseCPowerFactorLagging;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} UPCACR_t;

// def @UPCACP CAN Message (217968638)
#define UPCACP_IDE (1U)
#define UPCACP_DLC (8U)
#define UPCACP_CANID (0xCFDEFFEU)
#define UPCACP_CYC (100U)
// -- Utility Phase C AC Power
// signal: @UtilityPhaseCRealPower
#define UtilityPhaseCRealPower_CovFactor 1
#define UtilityPhaseCRealPower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @UtilityPhaseCApparentPower
#define UtilityPhaseCApparentPower_CovFactor 1
#define UtilityPhaseCApparentPower_CovS(x) ((int64_t)(x + 2000000000))
typedef struct
{

  // The real power delivered by phase C of the utility incomer.
  int64_t UtilityPhaseCRealPower;        //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'W'     Offset= -2000000000

  // The apparent power delivered by phase C of the utility incomer.
  int64_t UtilityPhaseCApparentPower;    //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'VA'    Offset= -2000000000
  uint32_t framecnt;
} UPCACP_t;

// def @UPCAC CAN Message (217968894)
#define UPCAC_IDE (1U)
#define UPCAC_DLC (8U)
#define UPCAC_CANID (0xCFDF0FEU)
#define UPCAC_CYC (100U)
// -- Utility Phase C AC Basic Quantities
// signal: @UtilityPhaseCACFrequency
#define UtilityPhaseCACFrequency_CovFactor 0.0078125
#define UtilityPhaseCACFrequency_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Line to Line RMS voltage measured at the utility incomer phase CA.
  uint16_t UtltyPhseCALineLineACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // Line to Neutral RMS voltage measured at the utility incomer phase C.
  uint16_t UtltyPhsCLneNeutralACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // AC frequency measured at the utility incomer phase C.
  uint16_t UtilityPhaseCACFrequency;         //      Bits=16.  [ 0     , 501.9921875 ]  Unit:'Hz'    Factor= 0.0078125

  // RMS current measured at the utility incomer phase C.
  uint16_t UtilityPhaseCACRMSCurrent;        //      Bits=16.  [ 0     , 64255  ]  Unit:'A'    
  uint32_t framecnt;
} UPCAC_t;

// def @UPBACR CAN Message (217969150)
#define UPBACR_IDE (1U)
#define UPBACR_DLC (8U)
#define UPBACR_CANID (0xCFDF1FEU)
#define UPBACR_CYC (100U)
// -- Utility Phase B AC Reactive Power
// signal: @UtilityPhaseBReactivePower
#define UtilityPhaseBReactivePower_CovFactor 1
#define UtilityPhaseBReactivePower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @UtilityPhaseBPowerFactor
#define UtilityPhaseBPowerFactor_CovFactor 6.103515625E-05
#define UtilityPhaseBPowerFactor_CovS(x) ((int32_t)((x / 6.103515625E-05) + 16384))
typedef struct
{

  // The reactive power delivered by phase B of the utility incomer
  int64_t UtilityPhaseBReactivePower;        //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'Var'   Offset= -2000000000

  // The power factor of phases B of the utility incomer.
  int32_t UtilityPhaseBPowerFactor;          //      Bits=16.  [ -1    , 2.921814 ]  Unit:''      Offset= -1        Factor= 6.103515625E-05

  // Lead/lag status for utility incomer phase B power factor.    00 Leading  01 Lagging  10 Error  11 Not Available or Not Installed
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Lagging" 
  // 0 - "Leading" 

  uint8_t UtilityPhaseBPowerFactorLagging;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} UPBACR_t;

// def @UPBACP CAN Message (217969406)
#define UPBACP_IDE (1U)
#define UPBACP_DLC (8U)
#define UPBACP_CANID (0xCFDF2FEU)
#define UPBACP_CYC (100U)
// -- Utility Phase B AC Power
// signal: @UtilityPhaseBRealPower
#define UtilityPhaseBRealPower_CovFactor 1
#define UtilityPhaseBRealPower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @UtilityPhaseBApparentPower
#define UtilityPhaseBApparentPower_CovFactor 1
#define UtilityPhaseBApparentPower_CovS(x) ((int64_t)(x + 2000000000))
typedef struct
{

  // The real power delivered by phase B of the utility incomer.
  int64_t UtilityPhaseBRealPower;        //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'W'     Offset= -2000000000

  // The apparent power delivered by phase B of the utility incomer.
  int64_t UtilityPhaseBApparentPower;    //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'VA'    Offset= -2000000000
  uint32_t framecnt;
} UPBACP_t;

// def @UPBAC CAN Message (217969662)
#define UPBAC_IDE (1U)
#define UPBAC_DLC (8U)
#define UPBAC_CANID (0xCFDF3FEU)
#define UPBAC_CYC (100U)
// -- Utility Phase B AC Basic Quantities
// signal: @UtilityPhaseBACFrequency
#define UtilityPhaseBACFrequency_CovFactor 0.0078125
#define UtilityPhaseBACFrequency_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Line to Line RMS voltage measured at the utility incomer phase BC.
  uint16_t UtltyPhseBCLineLineACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // Line to Neutral RMS voltage measured at the utility incomer phase B.
  uint16_t UtltyPhsBLneNeutralACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // AC frequency measured at the utility incomer phase B.
  uint16_t UtilityPhaseBACFrequency;         //      Bits=16.  [ 0     , 501.9921875 ]  Unit:'Hz'    Factor= 0.0078125

  // RMS current measured at the utility incomer phase B.
  uint16_t UtilityPhaseBACRMSCurrent;        //      Bits=16.  [ 0     , 64255  ]  Unit:'A'    
  uint32_t framecnt;
} UPBAC_t;

// def @UPACCR CAN Message (217969918)
#define UPACCR_IDE (1U)
#define UPACCR_DLC (8U)
#define UPACCR_CANID (0xCFDF4FEU)
#define UPACCR_CYC (100U)
// -- Utility Phase A AC Reactive Power
// signal: @UtilityPhaseAReactivePower
#define UtilityPhaseAReactivePower_CovFactor 1
#define UtilityPhaseAReactivePower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @UtilityPhaseAPowerFactor
#define UtilityPhaseAPowerFactor_CovFactor 6.103515625E-05
#define UtilityPhaseAPowerFactor_CovS(x) ((int32_t)((x / 6.103515625E-05) + 16384))
typedef struct
{

  // The reactive power delivered by phase A of the utility incomer
  int64_t UtilityPhaseAReactivePower;        //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'Var'   Offset= -2000000000

  // The power factor of phase A of the utility incomer.
  int32_t UtilityPhaseAPowerFactor;          //      Bits=16.  [ -1    , 2.921814 ]  Unit:''      Offset= -1        Factor= 6.103515625E-05

  // Lead/lag status for utility incomer phase A power factor.    00 Leading  01 Lagging  10 Error  11 Not Available or Not Installed
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Lagging" 
  // 0 - "Leading" 

  uint8_t UtilityPhaseAPowerFactorLagging;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} UPACCR_t;

// def @UPAACP CAN Message (217970174)
#define UPAACP_IDE (1U)
#define UPAACP_DLC (8U)
#define UPAACP_CANID (0xCFDF5FEU)
#define UPAACP_CYC (100U)
// -- Utility Phase A AC Power
// signal: @UtilityPhaseARealPower
#define UtilityPhaseARealPower_CovFactor 1
#define UtilityPhaseARealPower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @UtilityPhaseAApparentPower
#define UtilityPhaseAApparentPower_CovFactor 1
#define UtilityPhaseAApparentPower_CovS(x) ((int64_t)(x + 2000000000))
typedef struct
{

  // The real power delivered by phase A of the utility incomer.
  int64_t UtilityPhaseARealPower;        //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'W'     Offset= -2000000000

  // The apparent power delivered by phase A of the utility incomer.
  int64_t UtilityPhaseAApparentPower;    //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'VA'    Offset= -2000000000
  uint32_t framecnt;
} UPAACP_t;

// def @UPAAC CAN Message (217970430)
#define UPAAC_IDE (1U)
#define UPAAC_DLC (8U)
#define UPAAC_CANID (0xCFDF6FEU)
#define UPAAC_CYC (100U)
// -- Utility Phase A Basic AC Quantities
// signal: @UtilityPhaseAACFrequency
#define UtilityPhaseAACFrequency_CovFactor 0.0078125
#define UtilityPhaseAACFrequency_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Line to Line RMS voltage measured at the utility incomer phase AB.
  uint16_t UtltyPhseABLineLineACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // Line to Neutral RMS voltage measured at the utility incomer phase A.
  uint16_t UtltyPhsALneNeutralACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // AC frequency measured at the utility incomer phase A.
  uint16_t UtilityPhaseAACFrequency;         //      Bits=16.  [ 0     , 501.9921875 ]  Unit:'Hz'    Factor= 0.0078125

  // RMS current measured at the utility incomer phase A.
  uint16_t UtilityPhaseAACRMSCurrent;        //      Bits=16.  [ 0     , 64255  ]  Unit:'A'    
  uint32_t framecnt;
} UPAAC_t;

// def @UTACR CAN Message (217970686)
#define UTACR_IDE (1U)
#define UTACR_DLC (8U)
#define UTACR_CANID (0xCFDF7FEU)
#define UTACR_CYC (100U)
// -- Utility Total AC Reactive Power
// signal: @UtilityTotalReactivePower
#define UtilityTotalReactivePower_CovFactor 1
#define UtilityTotalReactivePower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @UtilityOverallPowerFactor
#define UtilityOverallPowerFactor_CovFactor 6.103515625E-05
#define UtilityOverallPowerFactor_CovS(x) ((int32_t)((x / 6.103515625E-05) + 16384))
typedef struct
{

  // The total reactive power delivered by the utility incomer
  int64_t UtilityTotalReactivePower;         //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'Var'   Offset= -2000000000

  // The average power factor of the utility incomer.
  int32_t UtilityOverallPowerFactor;         //      Bits=16.  [ -1    , 2.921814 ]  Unit:''      Offset= -1        Factor= 6.103515625E-05

  // Lead/lag status for utility incomer average power factor.    00 Leading  01 Lagging  10 Error  11 Not Available or Not Installed
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Lagging" 
  // 0 - "Leading" 

  uint8_t UtlityOverallPowerFactorLagging;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} UTACR_t;

// def @UTACP CAN Message (217970942)
#define UTACP_IDE (1U)
#define UTACP_DLC (8U)
#define UTACP_CANID (0xCFDF8FEU)
#define UTACP_CYC (100U)
// -- Utility Total AC Power
// signal: @UtilityTotalRealPower
#define UtilityTotalRealPower_CovFactor 1
#define UtilityTotalRealPower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @UtilityTotalApparentPower
#define UtilityTotalApparentPower_CovFactor 1
#define UtilityTotalApparentPower_CovS(x) ((int64_t)(x + 2000000000))
typedef struct
{

  // Total real power delivered by the utility incomer.
  int64_t UtilityTotalRealPower;         //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'W'     Offset= -2000000000

  // The total apparent power delivered by the utility incomer.
  int64_t UtilityTotalApparentPower;     //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'VA'    Offset= -2000000000
  uint32_t framecnt;
} UTACP_t;

// def @UAAC CAN Message (217971198)
#define UAAC_IDE (1U)
#define UAAC_DLC (8U)
#define UAAC_CANID (0xCFDF9FEU)
#define UAAC_CYC (100U)
// -- Utility Average Basic AC Quantities
// signal: @UtilityAverageACFrequency
#define UtilityAverageACFrequency_CovFactor 0.0078125
#define UtilityAverageACFrequency_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average Line to Line RMS voltage measured at the utility incomer .
  uint16_t UtltyAvrageLineLineACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The average Line to Neutral AC RMS voltage measured at the utility incomer .
  uint16_t UtltyAvrgLneNeutralACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // Average AC frequency measured at the utility incomer.
  uint16_t UtilityAverageACFrequency;        //      Bits=16.  [ 0     , 501.9921875 ]  Unit:'Hz'    Factor= 0.0078125

  // Average RMS current measured at the utility incomer.
  uint16_t UtilityAverageACRMSCurrent;       //      Bits=16.  [ 0     , 64255  ]  Unit:'A'    
  uint32_t framecnt;
} UAAC_t;

// def @GTACE CAN Message (217971454)
#define GTACE_IDE (1U)
#define GTACE_DLC (8U)
#define GTACE_CANID (0xCFDFAFEU)
#define GTACE_CYC (100U)
// -- Generator Total AC Energy
typedef struct
{

  // The total kilowatt-hours that have been exported by the generator.
  uint32_t GeneratorTotalKWHoursExport;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'kWh'  

  // The total kilowatt-hours that have been imported by the generator.
  uint32_t GeneratorTotalKWHoursImport;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'kWh'  
  uint32_t framecnt;
} GTACE_t;

// def @GPCACR CAN Message (217971710)
#define GPCACR_IDE (1U)
#define GPCACR_DLC (8U)
#define GPCACR_CANID (0xCFDFBFEU)
#define GPCACR_CYC (100U)
// -- Generator Phase C AC Reactive Power
// signal: @GeneratorPhaseCReactivePower
#define GeneratorPhaseCReactivePower_CovFactor 1
#define GeneratorPhaseCReactivePower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @GeneratorPhaseCPowerFactor
#define GeneratorPhaseCPowerFactor_CovFactor 6.103515625E-05
#define GeneratorPhaseCPowerFactor_CovS(x) ((int32_t)((x / 6.103515625E-05) + 16384))
typedef struct
{

  // The reactive power delivered by phase C of the generator
  int64_t GeneratorPhaseCReactivePower;      //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'Var'   Offset= -2000000000

  // The power factor of phases C of the generator.
  int32_t GeneratorPhaseCPowerFactor;        //      Bits=16.  [ -1    , 1      ]  Unit:''      Offset= -1        Factor= 6.103515625E-05

  // Lead/lag status for generator phase C power factor.    00 Leading  01 Lagging  10 Error  11 Not Available or Not Installed
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Lagging" 
  // 0 - "Leading" 

  uint8_t GnratorPhaseCPowerFactorLagging;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} GPCACR_t;

// def @GPCACP CAN Message (217971966)
#define GPCACP_IDE (1U)
#define GPCACP_DLC (8U)
#define GPCACP_CANID (0xCFDFCFEU)
#define GPCACP_CYC (100U)
// -- Generator Phase C AC Power
// signal: @GeneratorPhaseCRealPower
#define GeneratorPhaseCRealPower_CovFactor 1
#define GeneratorPhaseCRealPower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @GeneratorPhaseCApparentPower
#define GeneratorPhaseCApparentPower_CovFactor 1
#define GeneratorPhaseCApparentPower_CovS(x) ((int64_t)(x + 2000000000))
typedef struct
{

  // The real power delivered by phase C of the generator.
  int64_t GeneratorPhaseCRealPower;       //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'W'     Offset= -2000000000

  // The apparent power delivered by phase C of the generator.
  int64_t GeneratorPhaseCApparentPower;   //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'VA'    Offset= -2000000000
  uint32_t framecnt;
} GPCACP_t;

// def @GPCAC CAN Message (217972222)
#define GPCAC_IDE (1U)
#define GPCAC_DLC (8U)
#define GPCAC_CANID (0xCFDFDFEU)
#define GPCAC_CYC (100U)
// -- Generator Phase C Basic AC Quantities
// signal: @GeneratorPhaseCACFrequency
#define GeneratorPhaseCACFrequency_CovFactor 0.0078125
#define GeneratorPhaseCACFrequency_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Line to Line RMS voltage measured at the generator phase CA output.
  uint16_t GnrtrPhseCALineLineACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // Line to Neutral RMS voltage measured at the generator phase C output.
  uint16_t GnrtrPhsCLneNeutralACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // AC frequency measured at the generator phase C output.
  uint16_t GeneratorPhaseCACFrequency;       //      Bits=16.  [ 0     , 501.9921875 ]  Unit:'Hz'    Factor= 0.0078125

  // RMS current measured at the generator phase C output.
  uint16_t GeneratorPhaseCACRMSCurrent;      //      Bits=16.  [ 0     , 64255  ]  Unit:'A'    
  uint32_t framecnt;
} GPCAC_t;

// def @GPBACRP CAN Message (217972478)
#define GPBACRP_IDE (1U)
#define GPBACRP_DLC (8U)
#define GPBACRP_CANID (0xCFDFEFEU)
#define GPBACRP_CYC (100U)
// -- Generator Phase B AC Reactive Power
// signal: @GeneratorPhaseBReactivePower
#define GeneratorPhaseBReactivePower_CovFactor 1
#define GeneratorPhaseBReactivePower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @GeneratorPhaseBPowerFactor
#define GeneratorPhaseBPowerFactor_CovFactor 6.103515625E-05
#define GeneratorPhaseBPowerFactor_CovS(x) ((int32_t)((x / 6.103515625E-05) + 16384))
typedef struct
{

  // The reactive power delivered by phase B of the generator
  int64_t GeneratorPhaseBReactivePower;      //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'Var'   Offset= -2000000000

  // The power factor of phases B of the generator.
  int32_t GeneratorPhaseBPowerFactor;        //      Bits=16.  [ -1    , 1      ]  Unit:''      Offset= -1        Factor= 6.103515625E-05

  // Lead/lag status for generator phase B power factor.    00 Leading  01 Lagging  10 Error  11 Not Available or Not Installed
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Lagging" 
  // 0 - "Leading" 

  uint8_t GnratorPhaseBPowerFactorLagging;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} GPBACRP_t;

// def @GPBACP CAN Message (217972734)
#define GPBACP_IDE (1U)
#define GPBACP_DLC (8U)
#define GPBACP_CANID (0xCFDFFFEU)
#define GPBACP_CYC (100U)
// -- Generator Phase B AC Power
// signal: @GeneratorPhaseBRealPower
#define GeneratorPhaseBRealPower_CovFactor 1
#define GeneratorPhaseBRealPower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @GeneratorPhaseBApparentPower
#define GeneratorPhaseBApparentPower_CovFactor 1
#define GeneratorPhaseBApparentPower_CovS(x) ((int64_t)(x + 2000000000))
typedef struct
{

  // The real power delivered by phase B of the generator.
  int64_t GeneratorPhaseBRealPower;       //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'W'     Offset= -2000000000

  // The apparent power delivered by phase B of the generator.
  int64_t GeneratorPhaseBApparentPower;   //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'VA'    Offset= -2000000000
  uint32_t framecnt;
} GPBACP_t;

// def @GPBAC CAN Message (217972990)
#define GPBAC_IDE (1U)
#define GPBAC_DLC (8U)
#define GPBAC_CANID (0xCFE00FEU)
#define GPBAC_CYC (100U)
// -- Generator Phase B Basic AC Quantities
// signal: @GeneratorPhaseBACFrequency
#define GeneratorPhaseBACFrequency_CovFactor 0.0078125
#define GeneratorPhaseBACFrequency_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Line to Line RMS voltage measured at the generator phase BC output.
  uint16_t GnrtrPhseBCLineLineACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // Line to Neutral RMS voltage measured at the generator phase B output.
  uint16_t GnrtrPhsBLneNeutralACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // AC frequency measured at the generator phase B output.
  uint16_t GeneratorPhaseBACFrequency;       //      Bits=16.  [ 0     , 501.9921875 ]  Unit:'Hz'    Factor= 0.0078125

  // RMS current measured at the generator phase B output.
  uint16_t GeneratorPhaseBACRMSCurrent;      //      Bits=16.  [ 0     , 64255  ]  Unit:'A'    
  uint32_t framecnt;
} GPBAC_t;

// def @GPAACR CAN Message (217973246)
#define GPAACR_IDE (1U)
#define GPAACR_DLC (8U)
#define GPAACR_CANID (0xCFE01FEU)
#define GPAACR_CYC (100U)
// -- Generator Phase A AC Reactive Power
// signal: @GeneratorPhaseAReactivePower
#define GeneratorPhaseAReactivePower_CovFactor 1
#define GeneratorPhaseAReactivePower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @GeneratorPhaseAPowerFactor
#define GeneratorPhaseAPowerFactor_CovFactor 6.103515625E-05
#define GeneratorPhaseAPowerFactor_CovS(x) ((int32_t)((x / 6.103515625E-05) + 16384))
typedef struct
{

  // The reactive power delivered by phase A of the generator
  int64_t GeneratorPhaseAReactivePower;      //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'Var'   Offset= -2000000000

  // The power factor of phase A of the generator.
  int32_t GeneratorPhaseAPowerFactor;        //      Bits=16.  [ -1    , 1      ]  Unit:''      Offset= -1        Factor= 6.103515625E-05

  // Lead/lag status for generator phase A power factor.    00 Leading  01 Lagging  10 Error  11 Not Available or Not Installed
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Lagging" 
  // 0 - "Leading" 

  uint8_t GnratorPhaseAPowerFactorLagging;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} GPAACR_t;

// def @GPAACP CAN Message (217973502)
#define GPAACP_IDE (1U)
#define GPAACP_DLC (8U)
#define GPAACP_CANID (0xCFE02FEU)
#define GPAACP_CYC (100U)
// -- Generator Phase A AC Power
// signal: @GeneratorPhaseARealPower
#define GeneratorPhaseARealPower_CovFactor 1
#define GeneratorPhaseARealPower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @GeneratorPhaseAApparentPower
#define GeneratorPhaseAApparentPower_CovFactor 1
#define GeneratorPhaseAApparentPower_CovS(x) ((int64_t)(x + 2000000000))
typedef struct
{

  // The real power delivered by phase A of the generator.
  int64_t GeneratorPhaseARealPower;       //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'W'     Offset= -2000000000

  // The apparent power delivered by phase A of the generator.
  int64_t GeneratorPhaseAApparentPower;   //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'VA'    Offset= -2000000000
  uint32_t framecnt;
} GPAACP_t;

// def @GPAAC CAN Message (217973758)
#define GPAAC_IDE (1U)
#define GPAAC_DLC (8U)
#define GPAAC_CANID (0xCFE03FEU)
#define GPAAC_CYC (100U)
// -- Generator Phase A Basic AC Quantities
// signal: @GeneratorPhaseAACFrequency
#define GeneratorPhaseAACFrequency_CovFactor 0.0078125
#define GeneratorPhaseAACFrequency_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Line to Line RMS voltage measured at the generator phase AB output.
  uint16_t GnrtrPhseABLineLineACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // Line to Neutral RMS voltage measured at the generator phase A output.
  uint16_t GnrtrPhsALneNeutralACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // AC frequency measured at the generator phase A output.
  uint16_t GeneratorPhaseAACFrequency;       //      Bits=16.  [ 0     , 501.9921875 ]  Unit:'Hz'    Factor= 0.0078125

  // RMS current measured at the generator phase A output.
  uint16_t GeneratorPhaseAACRMSCurrent;      //      Bits=16.  [ 0     , 64255  ]  Unit:'A'    
  uint32_t framecnt;
} GPAAC_t;

// def @GTACR CAN Message (217974014)
#define GTACR_IDE (1U)
#define GTACR_DLC (8U)
#define GTACR_CANID (0xCFE04FEU)
#define GTACR_CYC (100U)
// -- Generator Total AC Reactive Power
// signal: @GeneratorTotalReactivePower
#define GeneratorTotalReactivePower_CovFactor 1
#define GeneratorTotalReactivePower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @GeneratorOverallPowerFactor
#define GeneratorOverallPowerFactor_CovFactor 6.103515625E-05
#define GeneratorOverallPowerFactor_CovS(x) ((int32_t)((x / 6.103515625E-05) + 16384))
typedef struct
{

  // The total reactive power delivered by the generator
  int64_t GeneratorTotalReactivePower;       //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'Var'   Offset= -2000000000

  // The average power factor of the generator.
  int32_t GeneratorOverallPowerFactor;       //      Bits=16.  [ -1    , 1      ]  Unit:''      Offset= -1        Factor= 6.103515625E-05

  // Lead/lag status for generator average power factor.    00 Leading  01 Lagging  10 Error  11 Not Available or Not Installed
  // 3 - "Not Available or Not Installed" 
  // 2 - "Error" 
  // 1 - "Lagging" 
  // 0 - "Leading" 

  uint8_t GnrtorOverallPowerFactorLagging;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} GTACR_t;

// def @GTACP CAN Message (217974270)
#define GTACP_IDE (1U)
#define GTACP_DLC (8U)
#define GTACP_CANID (0xCFE05FEU)
#define GTACP_CYC (100U)
// -- Generator Total AC Power
// signal: @GeneratorTotalRealPower
#define GeneratorTotalRealPower_CovFactor 1
#define GeneratorTotalRealPower_CovS(x) ((int64_t)(x + 2000000000))
// signal: @GeneratorTotalApparentPower
#define GeneratorTotalApparentPower_CovFactor 1
#define GeneratorTotalApparentPower_CovS(x) ((int64_t)(x + 2000000000))
typedef struct
{

  // Total real power delivered by the generator.
  int64_t GeneratorTotalRealPower;       //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'W'     Offset= -2000000000

  // The total apparent power delivered by the generator.
  int64_t GeneratorTotalApparentPower;   //      Bits=32.  [ -2000000000, 2211081215 ]  Unit:'VA'    Offset= -2000000000
  uint32_t framecnt;
} GTACP_t;

// def @GAAC CAN Message (217974526)
#define GAAC_IDE (1U)
#define GAAC_DLC (8U)
#define GAAC_CANID (0xCFE06FEU)
#define GAAC_CYC (100U)
// -- Generator Average Basic AC Quantities
// signal: @GeneratorAverageACFrequency
#define GeneratorAverageACFrequency_CovFactor 0.0078125
#define GeneratorAverageACFrequency_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average Line to Line RMS voltage measured at the generator output.
  uint16_t GnrtrAvrageLineLineACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The average Line to Neutral AC RMS voltage measured at the Generator output.
  uint16_t GnrtrAvrgLneNeutralACRMSVoltage;  //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // Average AC frequency measured at the generator output.
  uint16_t GeneratorAverageACFrequency;      //      Bits=16.  [ 0     , 501.9921875 ]  Unit:'Hz'    Factor= 0.0078125

  // Average RMS current measured at the generator output.
  uint16_t GeneratorAverageACRMSCurrent;     //      Bits=16.  [ 0     , 64255  ]  Unit:'A'    
  uint32_t framecnt;
} GAAC_t;

// def @LCMD CAN Message (217989630)
#define LCMD_IDE (1U)
#define LCMD_DLC (8U)
#define LCMD_CANID (0xCFE41FEU)
#define LCMD_CYC (1000U)
// -- Lighting Command  The lighting command message has been defined as a global message from the tractor to all lighting controllers on the tractor and attached implements.  Separate messages are provided for tractor and implement work and driving ...
typedef struct
{

  // Command to activate or de-activate the tractor or powered vehicle running lights.  Usually only used for on road vehicles.    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t RunningLightCmd;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the tractor alternate head lights (only low beam is available on alternate head lights).  The alternate position lights are intended for use with loader and snow plows that tend to block the primary head lights.   ...
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t AltBeamHeadLightCmd;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the tractor low beam head light lamps.     00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t LowBeamHeadLightCmd;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the tractor high beam head light lamps.     00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t HighBeamHeadLightCmd;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate tractor front fog lights.    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t TractorFrontFogLightsCmd;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate slow moving vehicle indicator lights on tractor and/or implements.  Activation of the slow moving vehicle lights implies that the controller should manipulate the lighting as appropriate to provide the slow moving ...
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t RotatingBeaconLightCmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate right turn signal lights on the tractor and all connected implements    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t RightTurnSignalLightsCmd;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate left turn signal lights on the tractor and all connected implements    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t LeftTurnSignalLightsCmd;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the back up lights and/ or associated alarm if required    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t BackUpLightAndAlarmHornCmd;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the tractor and implement center stop light    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t CenterStopLightCmd;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the tractor and implement right stop light    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t RightStopLightCmd;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the tractor and implement left stop lights    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t LeftStopLightCmd;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the implement high mounted clearance and lights.      00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t ImplementClearanceLightCmd;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the tractor high mounted clearance and center ID lights    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t TractorClearanceLightCmd;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate implement front position lights, rear red tail lights, side amber running lights, license plate lights and instrument and switch back lights.      00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 2 - "Reserved" 
  // 3 - "Don?t Care" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t ImplementMarkerLightCmd;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate tractor and implement front position lights, rear red tail lights, side amber running lights, license plate lights and instrument and switch back lights.      00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t TractorMarkerLightCmd;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate tractor or implement rear fog lights.      00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t RearFogLightCmd;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the tractor underside mounted work lights.    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t TrctrUndrsdeMountedWorkLightsCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the tractor rear low  mounted work lights.    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t TrctrRearLowMountedWorkLightsCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the tractor rear high  mounted work lights.    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t TrctrRarHighMountedWorkLightsCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the tractor side low mounted work lights.    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t TrctrSideLowMountedWorkLightsCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the tractor side high mounted work lights.    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t TrctrSdeHighMountedWorkLightsCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the tractor front low mounted work lights.    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t TrctrFrntLowMountedWorkLightsCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the tractor front high mounted work lights.    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t TrctrFrntHghMountedWorkLightsCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate an implement OEM option 2 light.  This is provided to meet special needs on implements, such as tank inspection or filling lights.    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t ImplementOEMOption2LightCmd;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate an implement OEM option 1 light.  This is provided to meet special needs on implements, such as tank inspection or filling lights.    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t ImplementOEMOption1LightCmd;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate work lights mounted on an implement to illuminate beyond right end of the implement.    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t ImplementRightFacingWorkLightCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate work lights mounted on an implement to illuminate beyond left end of the implement.    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t ImplementLeftForwardWorkLightCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to provide a response of the light state    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t LightingDataRqCmd;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the forward facing work lights toward the right end of the implement.    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t ImplmentRightForwardWorkLightCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate the left facing work lights toward the left end of the implement.    00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t ImplementLeftFacingWorkLightCmd;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate or de-activate implement rear work lights.  (This is also the same as Reversing Lights for truck applications.)      00 De-activate  01 Activate  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t ImplementRearWorkLightCmd;          //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} LCMD_t;

// def @ASC5 CAN Message (217995262)
#define ASC5_IDE (1U)
#define ASC5_DLC (8U)
#define ASC5_CANID (0xCFE57FEU)
#define ASC5_CYC (100U)
// -- Air Suspension Control 5  Used for damper stiffness information
// signal: @DamperStiffnessFrontAxle
#define DamperStiffnessFrontAxle_CovFactor 0.4
#define DamperStiffnessFrontAxle_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DamperStiffnessRearAxle
#define DamperStiffnessRearAxle_CovFactor 0.4
#define DamperStiffnessRearAxle_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DamperStiffnessLift_TagAxle
#define DamperStiffnessLift_TagAxle_CovFactor 0.4
#define DamperStiffnessLift_TagAxle_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Damper stiffness information of the shock absorber control at the front axle
  uint8_t DamperStiffnessFrontAxle;           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Damper stiffness information of the shock absorber control at the rear axle
  uint8_t DamperStiffnessRearAxle;            //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Damper stiffness information of the shock absorber control at the lift of tag axle
  uint8_t DamperStiffnessLift_TagAxle;        //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Signal which indicates the current mode of operation of the electronic shock absorber control at the front axle.    00 Normal operation dampers passive  01 Normal operation dampers active  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Normal operation dampers active" 
  // 0 - "Normal operation dampers passive" 

  uint8_t ElctrncShckAbsrbrCtrlMdFrontAxle;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the current mode of operation of the electronic shock absorber control at the rear axle.    00 Normal operation dampers passive  01 Normal operation dampers active  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Normal operation dampers active" 
  // 0 - "Normal operation dampers passive" 

  uint8_t ElctrncShckAbsrbrCtrlMdeRearAxle;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the current mode of operation of the electronic shock absorber control at the lift/tag axle.    00 Normal operation dampers passive  01 Normal operation dampers active  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Normal operation dampers active" 
  // 0 - "Normal operation dampers passive" 

  uint8_t ElctrncShckAbsrbrCtrlMdLft_TgAxl;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} ASC5_t;

// def @ASC1 CAN Message (217996030)
#define ASC1_IDE (1U)
#define ASC1_DLC (8U)
#define ASC1_CANID (0xCFE5AFEU)
#define ASC1_CYC (100U)
// -- Air Suspension Control 1  Used for suspension control  information
typedef struct
{

  // Signal which indicates the nominal (desired) height of the front axle to be controlled by the suspension system.  These heights are discrete levels.  They are the upper level, lower level, normal level 1, normal level 2, normal level 3, customer ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 10 - "Lowering" 
  // 9 - "Raising" 
  // 8 - "Level change stopped" 
  // 7 - "Lower Level" 
  // 6 - "Upper Level" 
  // 5 - "Customer Level" 
  // 4 - "Preset Level" 
  // 3 - "Normal Level 3" 
  // 2 - "Normal Level 2" 
  // 1 - "Normal Level 1" 
  // 0 - "Level not specified" 

  uint8_t NominalLevelFrontAxle;              //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Signal which indicates the nominal (desired) height of the rear axle to be controlled by the suspension system.  For further explanations see SPN 1734 - Nominal Level Front Axle.  0000 Level not specified,(i.e. the nominal level is none of the ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 10 - "Lowering" 
  // 9 - "Raising" 
  // 8 - "Level change stopped" 
  // 7 - "Lower Level" 
  // 6 - "Upper Level" 
  // 5 - "Customer Level" 
  // 4 - "Preset Level" 
  // 3 - "Normal Level 3" 
  // 2 - "Normal Level 2" 
  // 1 - "Normal Level 1" 
  // 0 - "Level not specified" 

  uint8_t NominalLevelRearAxle;               //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Signal which indicates whether the actual height of the front axle is below the nominal (desired) level for the front axle. For explanations of nominal level see parameter SPN 1734 - Nominal Level Front Axle.  00 Not below  01 Below  10 Error  11 ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Below" 
  // 0 - "Not below" 

  uint8_t BelowNominalLevelFrontAxle;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates whether the actual height of the rear axle is below the nominal (desired) level for the rear axle. For explanations of nominal level see SPN 1734 - Nominal Level Front Axle.  00 Not below  01 Below  10 Error  11 Not available   ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Below" 
  // 0 - "Not below" 

  uint8_t BelowNominalLevelRearAxle;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates whether the actual height of the front axle is above the nominal (desired) level of the front axle. For explanations of nominal level see SPN 1734 - Nominal Level Front Axle.  00 Not above  01 Above  10 Error  11 Not available   ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Above" 
  // 0 - "Not above" 

  uint8_t AboveNominalLevelFrontAxle;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates whether the actual height of the rear axle is above the nominal (desired) level of the rear axle. For explanations of nominal level see parameter SPN 1734 - Nominal Level Front Axle.  00 Not above  01 Above  10 Error  11 Not ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Above" 
  // 0 - "Not above" 

  uint8_t AboveNominalLevelRearAxle;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the actual lowering level change at the front axle    00 Lowering not active  01 Lowering active  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lowering active" 
  // 0 - "Lowering not active" 

  uint8_t LoweringCtrlModeFrontAxle;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the actual lowering level change at the rear axle    00 Lowering not active  01 Lowering active  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lowering active" 
  // 0 - "Lowering not active" 

  uint8_t LoweringCtrlModeRearAxle;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the actual lifting level change at the front axle    00 Lifting not active  01 Lifting active  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lifting active" 
  // 0 - "Lifting not active" 

  uint8_t LiftingCtrlModeFrontAxle;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the actual lifting level change at the rear axle    00 Lifting not active  01 Lifting active  10 Error  11 Not available
  // 0 - "Lifting not active" 
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lifting active" 

  uint8_t LiftingCtrlModeRearAxle;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the actual level change in case of kneeling function  0000 Not active,(i.e. the kneeling function is not active\
  // 15 - "Not available" 
  // 14 - "Error" 
  // 4 - "Kneeling aborted" 
  // 3 - "Lifting active" 
  // 2 - "Kneeling level reached" 
  // 1 - "Lowering active" 
  // 0 - "Not active" 

  uint8_t KneelingInformation;                //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Signal which indicates the actual control mode of the air suspension system  0000    Normal operation; i.e. the system performs a \
  // 15 - "Not available" 
  // 14 - "Error" 
  // 11 - "Force to bumper level request is in effect" 
  // 10 - "Automatic air suspension control prohibited" 
  // 9 - "Air suspension control prohibited" 
  // 8 - "Exhausting bellow function" 
  // 7 - "Traction help, load reduce" 
  // 6 - "Optimum traction 2" 
  // 5 - "Optimum traction 1" 
  // 4 - "Pressure ratio 2" 
  // 3 - "Pressure ratio 1" 
  // 2 - "Load fixing" 
  // 1 - "Traction help, load transfer)" 
  // 0 - "Normal operation" 

  uint8_t LevelCtrlMode;                      //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The signal which indicates the status of the security device.  An example of a security device is a curbstone feeler installed beneath the doors of a bus. If the security device becomes active during kneeling the kneeling process (lowering) is ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Active" 
  // 0 - "Not active" 

  uint8_t SecurityDevice;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates whether vehicle motion is inhibited.    00 Vehicle may be moved  01 Vehicle motion is inhibited  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Vehicle motion is inhibited" 
  // 0 - "Vehicle may be moved" 

  uint8_t VehicleMotionInhibit;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates that the doors may be opened. [Please note: doors instead of door!]  In case a kneeling request is active the ASC indicates during lowering the vehicle \
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Doors may be opened" 
  // 0 - "Doors may not be opened" 

  uint8_t DoorRelease;                        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the position / load condition of lift axle / tag axle 1.   Numbering of lift/tag axles starts at front axle.  See SPN 6843 for more detail.  00 Lift axle position down / tag axle laden  01 Lift axle position up / tag axle ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lift axle position up / tag axle unladen" 
  // 0 - "Lift axle position down / tag axle laden" 

  uint8_t LiftAxle1Pos;                       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates that the vehicle height at the front axle (SPNs 1721 and 1722) is within the bumper range.    00 Actual level out of bumper range  01 Actual level within bumper range  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Actual level within bumper range" 
  // 0 - "Actual level out of bumper range" 

  uint8_t FrontAxleInBumperRange;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates that the vehicle height at the rear axle (SPNs 1723 and 1724) is within the bumper range.    00 Actual level out of bumper range  01 Actual level within bumper range  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Actual level within bumper range" 
  // 0 - "Actual level out of bumper range" 

  uint8_t RearAxleInBumperRange;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the position / load condition of lift axle / tag axle #2.   Numbering of lift/tag axles starts at front axle.  See SPN 6844 for more detail.  00 Lift axle position down / tag axle laden  01 Lift axle position up / tag axle ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lift axle position up / tag axle unladen" 
  // 0 - "Lift axle position down / tag axle laden" 

  uint8_t LiftAxle2Pos;                       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates that the suspension system is controlled by remote control #1. Remote control is an external unit to operate the suspension system.    00 Not active  01 Active  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Active" 
  // 0 - "Not active" 

  uint8_t SuspensionRemoteCtrl1;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates that the suspension system is controlled by remote control #2. Remote control is an external unit to operate the suspension system.    00 Not active  01 Active  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Active" 
  // 0 - "Not active" 

  uint8_t SuspensionRemoteCtrl2;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter indicates if the function Allow Level Control During Braking is active. Functions is activated by SPN 5293.    00 = Deactivated  01 = Activated  10 = Reserved  11 = Don?t care/take no action
  // 3 - "Don?t care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Activated" 
  // 0 - "Deactivated" 

  uint8_t AllwLevelCtrlDuringBrakingStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter indicates if the function Speed Dependant Level Control is active. The function is activated by SPN 5295.    00 = Inactive  01 = Active  10 = Reserved  11 = Don?t' care/take no action
  // 3 - "Don?t' care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Active" 
  // 0 - "Inactive" 

  uint8_t SpeedDependantLevelCtrlStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates that the air suspension control cannot perform a request due to the operating conditions. It also provides a reason for the refusal.  0000 Actual request not refused  0001 Axle load limit reached  (load transfer)  0010 Would ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 7 - "Requested level not available" 
  // 6 - "General reject" 
  // 5 - "Below speed limit" 
  // 4 - "Above speed limit" 
  // 3 - "Bogie differential not locked" 
  // 2 - "Would exceed axle load limit" 
  // 1 - "Axle load limit reached " 
  // 0 - "Actual request not refused" 

  uint8_t SuspensionCtrlRefusalInformation;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Signal which indicates that the air suspension control has memory levels selected or stored.  Response to memory level request in ASC2 (byte 8.5). If the request was executed the respective status will be set. If the request was not executed ...
  // 15 - "not available" 
  // 14 - "Error indicator" 
  // 13 - "Memory level  5 stored" 
  // 12 - "Memory level  4 stored" 
  // 11 - "Memory level  3 stored" 
  // 10 - "Memory level  2 stored" 
  // 9 - "Memory level  1 stored" 
  // 8 - "reserved" 
  // 7 - "reserved" 
  // 6 - "reserved" 
  // 5 - "Memory level 5 selected" 
  // 4 - "Memory level 4 selected" 
  // 3 - "Memory level 3 selected" 
  // 2 - "Memory level 2 selected" 
  // 1 - "Memory level 1 selected " 
  // 0 - "No memory level " 

  uint8_t MemoryLevel;                        //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} ASC1_t;

// def @TCO1 CAN Message (218000638)
#define TCO1_IDE (1U)
#define TCO1_DLC (8U)
#define TCO1_CANID (0xCFE6CFEU)
#define TCO1_CYC (50U)
// -- Tachograph
// signal: @TachographOutputShaftSpeed
#define TachographOutputShaftSpeed_CovFactor 0.125
#define TachographOutputShaftSpeed_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @TachographVehicleSpeed
#define TachographVehicleSpeed_CovFactor 0.00390625
#define TachographVehicleSpeed_CovS(x) ((uint16_t)((x / 0.00390625)))
typedef struct
{

  // State of work of the driver.      000 Rest - sleeping  001 Driver available - short break  010 Work - loading, unloading, working in an office  011 Drive - behind wheel   100-101 Reserved  110 Error  111 Not available
  // 7 - "Not available" 
  // 6 - "Error" 
  // 3 - "Drive" 
  // 2 - "Work" 
  // 1 - "Driver available" 
  // 0 - "Rest" 

  uint8_t Driver1WorkingState;           //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // State of work of the driver.      000 Rest - sleeping  001 Driver available - short break  010 Work - loading, unloading, working in an office  011 Drive - behind wheel   100-101 Reserved  110 Error  111 Not available
  // 7 - "Not available" 
  // 6 - "Error" 
  // 3 - "Drive" 
  // 2 - "Work" 
  // 1 - "Driver available" 
  // 0 - "Rest" 

  uint8_t Driver2WorkingState;           //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Indicates whether motion of the vehicle is detected or not.    00 Vehicle motion not detected  01 Vehicle motion detected  10 - Error  11 - Not available
  // 3 - "- Not available" 
  // 2 - "- Error" 
  // 1 - "Vehicle motion detected" 
  // 0 - "Vehicle motion not detected" 

  uint8_t VehicleMotion;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates if the driver approaches or exceeds working time limits (or other limits).  0000 Normal/No limits reached  0001 Limit #1 - 15 min before 4 ? h  0010 Limit #2 - 4 ? h reached  0011 Limit #3 - 15 min before 9 h  0100 Limit #4 - 9 h reached   ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 13 - "Other" 
  // 6 - "Limit #6" 
  // 5 - "Limit #5" 
  // 4 - "Limit #4" 
  // 3 - "Limit #3" 
  // 2 - "Limit #2" 
  // 1 - "Limit #1" 
  // 0 - "Normal/No limits reached" 

  uint8_t Driver1TimeRelatedStates;      //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Indicates the presence of a driver card    00 - Driver card not present  01 - Driver card present  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Driver card present" 
  // 0 - "Driver card not present" 

  uint8_t DriverCardDriver1;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the vehicle is exceeding the legal speed limit set in the tachograph.    00 No overspeed  01 Overspeed  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Overspeed" 
  // 0 - "No overspeed" 

  uint8_t VehicleOverspeed;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates if the driver approaches or exceeds working time limits (or other limits).  0000 Normal/No limits reached  0001 Limit #1 - 15 min before 4 ? h  0010 Limit #2 - 4 ? h reached  0011 Limit #3 - 15 min before 9 h  0100 Limit #4 - 9 h reached   ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 13 - "Other" 
  // 6 - "Limit #6" 
  // 5 - "Limit #5" 
  // 4 - "Limit #4" 
  // 3 - "Limit #3" 
  // 2 - "Limit #2" 
  // 1 - "Limit #1" 
  // 0 - "Normal/No limits reached" 

  uint8_t Driver2TimeRelatedStates;      //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Indicates the presence of a driver card    00 - Driver card not present  01 - Driver card present  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Driver card present" 
  // 0 - "Driver card not present" 

  uint8_t DriverCardDriver2;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that a tachograph event has occurred.  This may include power supply interruption, interruption of the speed sensor, incorrect data on the driver card, driving without a driver card, illegal removal of a driver card, insertion of a driver ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Tachograph event" 
  // 0 - "No tachograph event" 

  uint8_t SystemEvent;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that handling information is present.  Information could include ?no printer paper?, ?no driver card?, etc.    00 - No handling information  01 - Handling information  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Handling information" 
  // 0 - "No handling information" 

  uint8_t HandlingInformation;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the tachograph performance; including electronic or mechanical analysis, instrument analysis, speed sensor analysis, mass storage analysis, and printer analysis.  00 - Normal performance  01 - Performance analysis  10 - Error  11 - Not ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Performance analysis" 
  // 0 - "Normal performance" 

  uint8_t TachographPerformance;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the direction of the vehicle.    00 - Forward  01 - Reverse  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Reverse" 
  // 0 - "Forward" 

  uint8_t DirectionIndicator;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Calculated speed of the transmission output shaft.
  uint16_t TachographOutputShaftSpeed;   //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // Speed of the vehicle registered by the tachograph.
  uint16_t TachographVehicleSpeed;       //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/h'  Factor= 0.00390625
  uint32_t framecnt;
} TCO1_t;

// def @LTP CAN Message (218001918)
#define LTP_IDE (1U)
#define LTP_DLC (8U)
#define LTP_CANID (0xCFE71FEU)
#define LTP_CYC (50U)
// -- Laser Tracer Position
// signal: @LaserTracerTargetDeviation
#define LaserTracerTargetDeviation_CovFactor 0.1
#define LaserTracerTargetDeviation_CovS(x) ((int32_t)((x / 0.1) + 32000))
// signal: @LaserTracerVerticalDistance
#define LaserTracerVerticalDistance_CovFactor 0.1
#define LaserTracerVerticalDistance_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // The calculated distance for the laser target to the current laser tracer reference point.    Parameter specific parameter: 0xFE03 indicates that the sensor can not sense the laser
  int32_t LaserTracerTargetDeviation;       //      Bits=16.  [ -3200 , 3225.5 ]  Unit:'mm'    Offset= -3200     Factor= 0.1   

  // The elevation of the laser tracer sensor in a laser leveling system.
  uint16_t LaserTracerVerticalDistance;     //      Bits=16.  [ 0     , 6400   ]  Unit:'mm'    Factor= 0.1   

  // The calculated percent deviation between the target distance and the center of the laser tracer.
  uint8_t LaserTracerHorizontalDeviation;   //      Bits=08.  [ 0     , 200    ]  Unit:'%'    

  // Informs display devices how to display the current position of the laser tracer.  Values which are less than 128 decimal are bit-mapped values and any combination of these values is considered a valid value.  For example communicating the \
  // 255 - "Not Available" 
  // 254 - "Error" 
  // 159 - "No data" 
  // 149 - "High Coarse" 
  // 148 - "High Medium/Coarse" 
  // 147 - "High Medium" 
  // 146 - "High Medium/Fine" 
  // 145 - "High Fine" 
  // 144 - "On Grade" 
  // 132 - "Low Fine" 
  // 131 - "Low Medium/Fine" 
  // 130 - "Low Medium" 
  // 129 - "Low Medium/Coarse" 
  // 128 - "Low Coarse" 
  // 64 - "Right LED on" 
  // 32 - "Left LED on" 
  // 16 - "Down LED on" 
  // 8 - "Up LED on" 
  // 4 - "On-grade ?C? LED on" 
  // 2 - "On-grade ?B? LED on" 
  // 1 - "On-grade ?A? LED on" 

  uint8_t LEDDisplayData2;                  //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Provides the status of the laser tracer to the operator.  00000001 Laser power is on  00000010 Laser is ready  00000100 Valid target (1 = yes)  00001000 Previous pass (1 = yes)  00010000 Stringline (1 = yes)  00100000 Curb (1 = yes)  All other ...
  // 32 - "Curb" 
  // 16 - "Stringline" 
  // 8 - "Previous pass" 
  // 4 - "Valid target" 
  // 2 - "Laser is ready" 
  // 1 - "Laser power is on" 

  uint8_t LaserTracerInformation;           //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} LTP_t;

// def @LBC CAN Message (218002174)
#define LBC_IDE (1U)
#define LBC_DLC (8U)
#define LBC_CANID (0xCFE72FEU)
#define LBC_CYC (50U)
// -- Laser Leveling System Blade Control
// signal: @BladeDurationAndDirection
#define BladeDurationAndDirection_CovFactor 0.1
#define BladeDurationAndDirection_CovS(x) ((int32_t)((x / 0.1) + 32768))
typedef struct
{

  // Used to indicate the duration and direction that the land leveling system blade moves.
  int32_t BladeDurationAndDirection;        //      Bits=16.  [ -3276.8, 3148.7 ]  Unit:'sec'   Offset= -3276.8   Factor= 0.1   

  // Allows the user to select the type of blade control for the land leveling system.      00000000 Manual mode  00000001 Automatic mode  00000010 Inactive automatic mode  All other values Reserved
  // 2 - "Inactive automatic mode" 
  // 1 - "Automatic mode" 
  // 0 - "Manual mode" 

  uint8_t BladeCtrlMode;                    //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // 15 - "Not Available" 
  // 14 - "Error" 
  // 2 - "Inactive Auto" 
  // 1 - "Auto " 
  // 0 - "Manual" 

  uint8_t BladeCtrlModeLeft;                //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // 15 - "Not Available" 
  // 14 - "Error" 
  // 2 - "Inactive Auto" 
  // 1 - "Auto " 
  // 0 - "Manual" 

  uint8_t BladeCtrlModeRight;               //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Communicate the enable/disable status of the Land Leveling System.    00 = Disabled  01= Enabled  10 = Error  11 = Not available / Not installed
  // 3 - "Not available / Not installed" 
  // 2 - "Error" 
  // 0 - "Disabled" 

  uint8_t LandLevelingSystemEnableStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} LBC_t;

// def @LMP CAN Message (218002430)
#define LMP_IDE (1U)
#define LMP_DLC (8U)
#define LMP_CANID (0xCFE73FEU)
#define LMP_CYC (50U)
// -- Laser Receiver Mast Position
// signal: @MastPos
#define MastPos_CovFactor 0.1
#define MastPos_CovS(x) ((int32_t)((x / 0.1) + 32000))
typedef struct
{

  // Used to monitor the position of the sensor attached to the land leveling mast.
  int32_t MastPos;                       //      Bits=16.  [ -3200 , 3225.5 ]  Unit:'mm'    Offset= -3200     Factor= 0.1   
  uint32_t framecnt;
} LMP_t;

// def @LSP CAN Message (218002686)
#define LSP_IDE (1U)
#define LSP_DLC (8U)
#define LSP_CANID (0xCFE74FEU)
#define LSP_CYC (50U)
// -- Modify Leveling System Control Set Point
// signal: @ModifyLevelingSystemSetPoint
#define ModifyLevelingSystemSetPoint_CovFactor 0.1
#define ModifyLevelingSystemSetPoint_CovS(x) ((int32_t)((x / 0.1) + 32000))
// signal: @BldeHeightSetPointHighResolution
#define BldeHeightSetPointHighResolution_CovFactor 1E-07
#define BldeHeightSetPointHighResolution_CovS(x) ((int64_t)((x / 1E-07) + 2097152000))
typedef struct
{

  // Used to control and coordinate the set point for the leveling system.  Operating Range: -3200 to +3200 mm, negative values are below current position, positive values are above current position, zero is no change.  Parameter specific parameter:   ...
  int32_t ModifyLevelingSystemSetPoint;       //      Bits=16.  [ -3200 , 3225.5 ]  Unit:'mm'    Offset= -3200     Factor= 0.1   

  // High resolution for the laser guided blade set point.  The high resolution required for more accurate control and 'accurate' unit conversions.    Negative values are below grade, positive values are above grade, zero is on grade.
  int64_t BldeHeightSetPointHighResolution;   //      Bits=32.  [ -209.7152, 209.7152 ]  Unit:'m'     Offset= -209.7152 Factor= 1E-07 
  uint32_t framecnt;
} LSP_t;

// def @LVD CAN Message (218002942)
#define LVD_IDE (1U)
#define LVD_DLC (8U)
#define LVD_CANID (0xCFE75FEU)
#define LVD_CYC (50U)
// -- Laser Leveling System Vertical Deviation
// signal: @LaserStrikeVerticalDeviation
#define LaserStrikeVerticalDeviation_CovFactor 0.1
#define LaserStrikeVerticalDeviation_CovS(x) ((int32_t)((x / 0.1) + 32000))
// signal: @LaserStrikeDataLatency
#define LaserStrikeDataLatency_CovFactor 5.12E-05
#define LaserStrikeDataLatency_CovS(x) ((uint16_t)((x / 5.12E-05)))
// signal: @AbsLaserStrikePos
#define AbsLaserStrikePos_CovFactor 0.1
#define AbsLaserStrikePos_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // The calculated distance from the laser strike position to the current land leveling system reference point.
  int32_t LaserStrikeVerticalDeviation;   //      Bits=16.  [ -3200 , 3225.5 ]  Unit:'mm'    Offset= -3200     Factor= 0.1   

  // Identifies which type of Laser Receiver transmitted the message.    0 = Reserved   1 = Linear Laser Receiver  2 = 1 Meter Survey Receiver  3 = 2 Meter Survey Receiver  4 = 2.5 Meter Survey Receiver  5-250 = Reserved
  // 4 - "2.5 Meter Survey Receiver" 
  // 3 - "2 Meter Survey Receiver" 
  // 2 - "1 Meter Survey Receiver" 
  // 1 - "Linear Laser Receiver" 
  // 0 - "Reserved " 

  uint8_t LaserReceiverType;              //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Time from laser strike to CAN message transmission.  This parameter will be reported by survey receiver type devices only. Byte 3 (SPN 2576) of  PGN 65141 identifies the type of Laser Receiver.
  uint16_t LaserStrikeDataLatency;        //      Bits=16.  [ 0     , 3.289856 ]  Unit:'s'     Factor= 5.12E-05

  // Laser Strike location on the survey type  laser receiver.
  uint16_t AbsLaserStrikePos;             //      Bits=16.  [ 0     , 6425.5 ]  Unit:'mm'    Factor= 0.1   
  uint32_t framecnt;
} LVD_t;

// def @FLI1 CAN Message (284166142)
#define FLI1_IDE (1U)
#define FLI1_DLC (8U)
#define FLI1_CANID (0x10F007FEU)
#define FLI1_CYC (50U)
// -- Forward Lane Image 1
typedef struct
{

  // Indicates that the middle of vehicle departs the lane on the left side. The parameter indicates that the vehicle is changing the lane to the left.  00   Middle of the vehicle does not depart the lane to the left side  01   Middle of the vehicle ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Middle of the vehicle departs the lane to the left side" 
  // 0 - "Middle of the vehicle does not depart the lane to the left side" 

  uint8_t LaneDepartureLeft;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the middle of vehicle departs the lane on the right side. The parameter indicates that the vehicle is changing the lane to the right.  00   Middle of the vehicle does not depart the lane to the right side  01   Middle of the vehicle ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Middle of the vehicle departs the lane to the right side" 
  // 0 - "Middle of the vehicle does not depart the lane to the right side" 

  uint8_t LaneDepartureRight;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates departure imminent on right side of lane.    00 Not imminent  01 Imminent  10 Reserved  11 Not Used
  // 3 - "Not Used" 
  // 2 - "Reserved" 
  // 1 - "Imminent" 
  // 0 - "Not imminent" 

  uint8_t LaneDepartureImminentRightSide;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates departure imminent on left side of lane.    00 Not imminent  01 Imminent  10 Reserved  11 Not used
  // 3 - "Not used" 
  // 2 - "Reserved" 
  // 1 - "Imminent" 
  // 0 - "Not imminent" 

  uint8_t LaneDepartureImminentLeftSide;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates when a distracted driving condition is detected. This signal can be used independent of the technology and ECU used to estimate the distracted driver condition.  000 = No distracted driving condition detected  001 = Level 1 - Mild ...
  // 7 - "Not Available" 
  // 3 - "Level 3" 
  // 2 - "Level 2" 
  // 1 - "Level 1" 
  // 0 - "No distracted driving condition detected" 

  uint8_t DriverAlertnessWarning;           //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} FLI1_t;

// def @TFAC CAN Message (284171006)
#define TFAC_IDE (1U)
#define TFAC_DLC (8U)
#define TFAC_CANID (0x10F01AFEU)
#define TFAC_CYC (50U)
// -- Engine Throttle / Fuel Actuator Control Command  Used to control networked electronic throttle control actuator and/or fuel control actuator valves.  Otherwise, this PGN can be used to monitor commanded % positioning to electronic throttle control ...
// signal: @EngThrottleActuator1CtrlCmd
#define EngThrottleActuator1CtrlCmd_CovFactor 0.0025
#define EngThrottleActuator1CtrlCmd_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngThrottleActuator2CtrlCmd
#define EngThrottleActuator2CtrlCmd_CovFactor 0.0025
#define EngThrottleActuator2CtrlCmd_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngFuelActuator1CtrlCmd
#define EngFuelActuator1CtrlCmd_CovFactor 0.0025
#define EngFuelActuator1CtrlCmd_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngFuelActuator2CtrlCmd
#define EngFuelActuator2CtrlCmd_CovFactor 0.0025
#define EngFuelActuator2CtrlCmd_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // The control command to throttle actuator 1, normalized to percent, where 0% represents fully closed and 100% represents fully open.  Typically, this throttle actuator is used to regulate air or air / fuel mix to the engine. Using the standard ...
  uint16_t EngThrottleActuator1CtrlCmd;  //      Bits=16.  [ 0     , 100    ]  Unit:'%'     Factor= 0.0025

  // The control command to throttle actuator 2, normalized to percent, where 0% represents fully closed and 100% represents fully open.  Typically, this throttle actuator is used to regulate air or air / fuel mix to the engine. Using the standard ...
  uint16_t EngThrottleActuator2CtrlCmd;  //      Bits=16.  [ 0     , 100    ]  Unit:'%'     Factor= 0.0025

  // The control command to fuel actuator 1, normalized to percent, where 0% represents fully closed and 100% represents fully open. Typically, this fuel actuator is used to regulate low pressure natural gas flow rate, mixing into the air flow, which ...
  uint16_t EngFuelActuator1CtrlCmd;      //      Bits=16.  [ 0     , 100    ]  Unit:'%'     Factor= 0.0025

  // The control command to fuel actuator 2, normalized to percent, where 0% represents fully closed and 100% represents fully open. Typically, this fuel actuator is used to regulate low pressure natural gas flow rate, mixing into the air flow, which ...
  uint16_t EngFuelActuator2CtrlCmd;      //      Bits=16.  [ 0     , 100    ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} TFAC_t;

// def @A1SCRAI2 CAN Message (284177406)
#define A1SCRAI2_IDE (1U)
#define A1SCRAI2_DLC (8U)
#define A1SCRAI2_CANID (0x10F033FEU)
#define A1SCRAI2_CYC (50U)
// -- Aftertreatment 1 SCR Ammonia Information 2  This message contains aftertreatment intermediate ammonia information for aftertreatment system 1 (or bank 1).
// signal: @IntmdNH3
#define IntmdNH3_CovFactor 0.1
#define IntmdNH3_CovS(x) ((int32_t)((x / 0.1) + 2000))
typedef struct
{

  // The amount of NH3 in the exhaust aftertreatment system measured by a NH3 sensor at an intermediate point in the SCR system, represented in NH3 molecule parts per million non-NH3 molecules in exhaust bank 1.
  int32_t IntmdNH3;                        //      Bits=16.  [ -200  , 6225.5 ]  Unit:'ppm'   Offset= -200      Factor= 0.1   

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment SCR intermediate NH3 sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures the ...
  uint8_t IntmdNH3SnsrPreliminaryFMI;      //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates that the NH3 reading of the aftertreatment SCR intermediate NH3 sensor is stable as determined by the manufacturer?s control software in exhaust bank 1.    00 - Reading is not stable  01 - Reading is stable  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Reading is stable" 
  // 0 - "Reading is not stable" 

  uint8_t IntmdNH3ReadingStable;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the power supplied to the aftertreatment SCR intermediate NH3 sensor is within the manufacturer?s specification in exhaust bank 1.    00 - Power is not in range  01 - Power is in range  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Power is in range" 
  // 0 - "Power is not in range" 

  uint8_t IntmdNH3SnsrPwrInRange;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the heater element of the aftertreatment SCR intermediate NH3 sensor is within the manufacturer?s specified range for accurate measurements in exhaust bank 1.  00 - Heater element is not in range  01 - Heater element is in range  10 - ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Heater element is in range" 
  // 0 - "Heater element is not in range" 

  uint8_t IntmdNH3SnsrAtTemp;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the heater of the outlet NH3 exhaust sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures the most ...
  uint8_t IntmdNH3SnsrHtrPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the heater status in the warm-up process. Upon receiving a power-up command, the NH3 sensor ramps up according to a manufacturer defined profile. The Preheat 1, Preheat 2, and Automatic messages are regions within this profile in exhaust ...
  // 3 - "Heater off or not available" 
  // 2 - "Preheat 1 " 
  // 1 - "Preheat 2 " 
  // 0 - "Automatic " 

  uint8_t IntmdNH3SnsrHtrCtrl;             //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} A1SCRAI2_t;

// def @A2SCRAI2 CAN Message (284177662)
#define A2SCRAI2_IDE (1U)
#define A2SCRAI2_DLC (8U)
#define A2SCRAI2_CANID (0x10F034FEU)
#define A2SCRAI2_CYC (50U)
// -- Aftertreatment 2 SCR Ammonia Information 2  This message contains aftertreatment intermediate ammonia information for aftertreatment system 2 (or bank 2).
// signal: @IntmdNH3
#define IntmdNH3_CovFactor 0.1
#define IntmdNH3_CovS(x) ((int32_t)((x / 0.1) + 2000))
typedef struct
{

  // The amount of NH3 in the exhaust aftertreatment system measured by a NH3 sensor at an intermediate point in the SCR system, represented in NH3 molecule parts per million non-NH3 molecules in exhaust bank 2.
  int32_t IntmdNH3;                        //      Bits=16.  [ -200  , 6225.5 ]  Unit:'ppm'   Offset= -200      Factor= 0.1   

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment SCR intermediate NH3 sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple failures the ...
  uint8_t IntmdNH3SnsrPreliminaryFMI;      //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates that the NH3 reading of the aftertreatment SCR intermediate NH3 sensor is stable as determined by the manufacturer?s control software in exhaust bank 2.    00 - Reading is not stable  01 - Reading is stable  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Reading is stable" 
  // 0 - "Reading is not stable" 

  uint8_t IntmdNH3ReadingStable;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the power supplied to the aftertreatment SCR intermediate NH3 sensor is within the manufacturer?s specification in exhaust bank 2.    00 - Heater element is not in range  01 - Heater element is in range  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Heater element is in range" 
  // 0 - "Heater element is not in range" 

  uint8_t IntmdNH3SnsrPwrInRange;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the heater element of the aftertreatment SCR intermediate NH3 sensor is within the manufacturer?s specified range for accurate measurements in exhaust bank 2.  00 - Heater element is not in range  01 - Heater element is in range  10 - ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Heater element is in range" 
  // 0 - "Heater element is not in range" 

  uint8_t IntmdNH3SnsrAtTemp;              //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the heater of the SCR intermediate NH3 exhaust sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple failures ...
  uint8_t IntmdNH3SnsrHtrPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the heater status in the warm-up process. Upon receiving a power-up command, the NH3 sensor ramps up according to a manufacturer defined profile. The Preheat 1, Preheat 2, and Automatic messages are regions within this profile in exhaust ...
  // 3 - "Heater off or Not available" 
  // 2 - "Preheat 1 " 
  // 1 - "Preheat 2 " 
  // 0 - "Automatic " 

  uint8_t IntmdNH3SnsrHtrCtrl;             //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} A2SCRAI2_t;

// def @ENGSC CAN Message (284225022)
#define ENGSC_IDE (1U)
#define ENGSC_DLC (8U)
#define ENGSC_CANID (0x10F0EDFEU)
// -- Engine Start Control  Message used to manage engine starts.  Default broadcast rate of 20 ms unless the sending  device has received Engine Start Control Message Rate (SPN 7752j) from the engine start arbitrator indicating a  switch to 250 ms or on ...
typedef struct
{

  // Indicates the sender?s desire to start the engine. The engine start arbitrator latches this signal and, if possible, completes the engine start regardless of a change of state of this signal. Use Engine Start Abort Request (SPN 7747) to un-latch the ...
  // 3 - "Not available" 
  // 2 - "Start requested,  automatic type" 
  // 1 - "Start requested,  operator type" 
  // 0 - "Start not requested" 

  uint8_t Req;                           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the sender?s consent to start the engine for different start types. An operator-requested engine start is a start that is initiated directly by the operator (i.e. via the key switch). An automatic engine start is one that is initiated by a ...
  // 7 - "Not available" 
  // 3 - "Consent to both" 
  // 2 - "Consent to automatic start only" 
  // 1 - "Consent to operator-requested start only" 
  // 0 - "No consent" 

  uint8_t Consent;                       //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Indicates the sender?s desire to abort an engine start. This signal is used by requesters and consenters to request that the arbitrator cancel an engine start that is in progress.  The sender of this signal may increase the broadcast rate ...
  // 3 - "Don?t care / Take no action" 
  // 2 - "Reserved" 
  // 1 - "Abort requested" 
  // 0 - "Abort not requested" 

  uint8_t AbortReq;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Feedback of the current state of first engine starter. This signal is intended to be used by the arbitrator as feedback to its command signal (SPN 7753).  Additional details regarding the starter state may be available in SPN 1675.  000 = Starter ...
  // 7 - "Not available" 
  // 4 - "Starter command unlatched,  start aborted by starter controller" 
  // 3 - "Starter command unlatched,  start abort command received from arbitrator" 
  // 2 - "Starter command unlatched,  start completed" 
  // 1 - "Starter command latched" 
  // 0 - "Starter not commanded" 

  uint8_t Starter1Feedback;              //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Feedback of the current state of second engine starter. This signal is intended to be used by the arbitrator as feedback to its command signal (SPN 7753).  Additional details regarding the starter state may be available in SPN 1675.  000 = Starter ...
  // 7 - "Not available" 
  // 4 - "Starter command unlatched,  start aborted by starter controller" 
  // 3 - "Starter command unlatched,  start abort command received from arbitrator" 
  // 2 - "Starter command unlatched,  start completed" 
  // 1 - "Starter command latched" 
  // 0 - "Starter not commanded" 

  uint8_t Starter2Feedback;              //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Message counter to allow detection of data integrity issues. The counter is incremented every time a device sends out the Engine Start Control message. When the counter has reached a value of 15 it starts over at 0 for the next message cycle ...
  uint8_t MessageCounter;                //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Checksum to allow detection of data integrity issues. The receiving node shall calculate the checksum and compare its calculated value with the received checksum. In case of a mismatch the message shall be discarded.  The message checksum is ...
  uint8_t Checksum;                      //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} ENGSC_t;

// def @ESA CAN Message (284227070)
#define ESA_IDE (1U)
#define ESA_DLC (8U)
#define ESA_CANID (0x10F0F5FEU)
// -- Engine Start Arbitrator  Message from the engine start arbitrator, used to manage engine starts.  Default broadcast rate of 20 ms unless the arbitrator is transmitting Engine Start Control Message Rate (SPN 7752) indicating a switch to 250 ms or on ...
typedef struct
{

  // This signal is sent by the arbitrator to control the rate at which other participants send the Engine Start Control Message (ENGSC). The arbitrator sets this signal to the slower rate after the first engine start attempt after initial power-up is ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Once every 250 ms or on change but no faster than 20 ms" 
  // 0 - "Once every 20 ms" 

  uint8_t CtrlMessageRate;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command from the arbitrator to the engine starter controller(s).  The arbitrator takes input from consenters and requesters to initiate an engine start. This signal is used by the arbitrator to command the first or second starter instance.  Starter ...
  // 7 - "Don?t care / Take no action" 
  // 3 - "Command withdrawn" 
  // 2 - "Command active for starter 2" 
  // 1 - "Command active for starter 1" 
  // 0 - "Command not active" 

  uint8_t StarterCmd;                        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Indicates the arbitrator?s latch status for engine start requests. All ?unlatched? states shall transition to state ?0 - Start Request not received? after 1000 ms unless a different state becomes more appropriate in the meantime. While this time may ...
  // 15 - "Not available" 
  // 6 - "Start request unlatched, start could not be completed because the starter command was not successful" 
  // 5 - "Start request unlatched, start aborted due to abort request" 
  // 4 - "Start request unlatched, consent not established within allowed time" 
  // 3 - "Start request unlatched, start completed" 
  // 2 - "Start request latched, consent confirmed" 
  // 1 - "Start request latched, waiting for consent" 
  // 0 - "Start request not received" 

  uint8_t ReqLatchStatus;                    //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Arbitrator?s summary of the consent statuses of all devices which the arbitrator considers for operator start requests. The purpose of this parameter is for requesters to determine if an operator start request would be honored at the current time.   ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Consent" 
  // 0 - "No consent" 

  uint8_t OpEngStartConsentSummary;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Arbitrator?s summary of the consent statuses of all devices which the arbitrator considers for automatic start requests. The purpose of this parameter is for requesters to determine if an automatic start request would be honored at the current time.   ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Consent" 
  // 0 - "No consent" 

  uint8_t AutomaticEngStartConsentSummary;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Message counter to allow detection of data integrity issues. The counter is incremented every time a device sends out the Engine Start Control message. When the counter has reached a value of 15 it starts over at 0 for the next message cycle ...
  uint8_t MessageCounter;                    //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Checksum to allow detection of data integrity issues. The receiving node shall calculate the checksum and compare its calculated value with the received checksum. In case of a mismatch the message shall be discarded.  The message checksum is ...
  uint8_t Checksum;                          //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} ESA_t;

// def @AF3 CAN Message (284987390)
#define AF3_IDE (1U)
#define AF3_DLC (8U)
#define AF3_CANID (0x10FC8FFEU)
#define AF3_CYC (100U)
// -- Alternate Fuel 3
// signal: @EngGasFuelSupplyPress
#define EngGasFuelSupplyPress_CovFactor 0.00390625
#define EngGasFuelSupplyPress_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @EngFuelVaporizer1DischargeTemp
#define EngFuelVaporizer1DischargeTemp_CovFactor 1
#define EngFuelVaporizer1DischargeTemp_CovS(x) ((int16_t)(x + 40))
// signal: @GasFuelAccumulatorTemp
#define GasFuelAccumulatorTemp_CovFactor 1
#define GasFuelAccumulatorTemp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Pressure of gaseous fuel supply to fuel metering device in systems where the pressure range defined for SPN 159 is not sufficient.
  uint16_t EngGasFuelSupplyPress;           //      Bits=16.  [ 0     , 250.996 ]  Unit:'MPa'   Factor= 0.00390625

  // The temperature of the fuel in its gaseous state at the outlet of the first fuel vaporizer
  int16_t EngFuelVaporizer1DischargeTemp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Gaseous fuel temperature at the outlet of the Gas Filter.
  int16_t GasFuelAccumulatorTemp;           //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} AF3_t;

// def @EBCC CAN Message (285008894)
#define EBCC_IDE (1U)
#define EBCC_DLC (8U)
#define EBCC_CANID (0x10FCE3FEU)
#define EBCC_CYC (100U)
// -- Engine Exhaust Brake Control  Contains information about the engine exhaust brake system control.
// signal: @EngTurbo1TurbineOutletPress
#define EngTurbo1TurbineOutletPress_CovFactor 2
#define EngTurbo1TurbineOutletPress_CovS(x) ((uint8_t)((x / 2)))
// signal: @DsredEngTurbo1TurbineOutletPress
#define DsredEngTurbo1TurbineOutletPress_CovFactor 2
#define DsredEngTurbo1TurbineOutletPress_CovS(x) ((uint8_t)((x / 2)))
// signal: @EngExhaustBrakeActuatorCmd
#define EngExhaustBrakeActuatorCmd_CovFactor 0.4
#define EngExhaustBrakeActuatorCmd_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngTurbo2TurbineOutletPress
#define EngTurbo2TurbineOutletPress_CovFactor 2
#define EngTurbo2TurbineOutletPress_CovS(x) ((uint8_t)((x / 2)))
// signal: @DsredEngTurbo2TurbineOutletPress
#define DsredEngTurbo2TurbineOutletPress_CovFactor 2
#define DsredEngTurbo2TurbineOutletPress_CovS(x) ((uint8_t)((x / 2)))
typedef struct
{

  // Gage pressure of the combustion by-products exiting the turbine side of the turbocharger 1.
  uint8_t EngTurbo1TurbineOutletPress;        //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // The desired gage pressure of the combustion by-products exiting the turbine side of the turbocharger 1 at the current engine operating conditions.
  uint8_t DsredEngTurbo1TurbineOutletPress;   //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // The control command applied to the engine exhaust brake actuator, where 0% represents no braking and 100% represents full braking.
  uint8_t EngExhaustBrakeActuatorCmd;         //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Gage pressure of the combustion by-products exiting the turbine side of the turbocharger 2.
  uint8_t EngTurbo2TurbineOutletPress;        //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // The desired gage pressure of the combustion by-products exiting the turbine side of the turbocharger 5 at the current engine operating conditions.
  uint8_t DsredEngTurbo2TurbineOutletPress;   //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     
  uint32_t framecnt;
} EBCC_t;

// def @EEC9 CAN Message (285015550)
#define EEC9_IDE (1U)
#define EEC9_DLC (8U)
#define EEC9_CANID (0x10FCFDFEU)
#define EEC9_CYC (100U)
// -- Electronic Engine Controller 9  Engine related parameters
// signal: @EngExhstGsRecirculation2ValvePos
#define EngExhstGsRecirculation2ValvePos_CovFactor 0.0025
#define EngExhstGsRecirculation2ValvePos_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngExhstGsRcirculation2Valve2Pos
#define EngExhstGsRcirculation2Valve2Pos_CovFactor 0.0025
#define EngExhstGsRcirculation2Valve2Pos_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @CommandedEngFuelRailPress
#define CommandedEngFuelRailPress_CovFactor 0.00390625
#define CommandedEngFuelRailPress_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @CmmndedEngFuelInjectionCtrlPress
#define CmmndedEngFuelInjectionCtrlPress_CovFactor 0.00390625
#define CmmndedEngFuelInjectionCtrlPress_CovS(x) ((uint16_t)((x / 0.00390625)))
typedef struct
{

  // Position of EGR2 valve expressed as a percentage of full travel. 0% means the valve is closed and no exhaust gas is flowing into the air stream. 100% means the valve is fully opened.
  uint16_t EngExhstGsRecirculation2ValvePos;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // The position of the second exhaust gas recirculation valve of EGR 2 expressed as a percentage of full travel. 0% means the valve is closed and no exhaust gas is flowing into the air stream. 100% means the valve is fully opened.
  uint16_t EngExhstGsRcirculation2Valve2Pos;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Provides the commanded set point value for the engine fuel rail gage pressure
  uint16_t CommandedEngFuelRailPress;         //      Bits=16.  [ 0     , 250.996 ]  Unit:'MPa'   Factor= 0.00390625

  // Provides the commanded set point value for the engine fuel injection control pressure.
  uint16_t CmmndedEngFuelInjectionCtrlPress;  //      Bits=16.  [ 0     , 250.996 ]  Unit:'MPa'   Factor= 0.00390625
  uint32_t framecnt;
} EEC9_t;

// def @ACCVC CAN Message (285037054)
#define ACCVC_IDE (1U)
#define ACCVC_DLC (8U)
#define ACCVC_CANID (0x10FD51FEU)
#define ACCVC_CYC (1000U)
// -- Aftercooler Coolant Control Valve Command  Transmit status information of the Aftercooler Temperature Control
// signal: @DsrdAftercoolerCoolantIntakeTemp
#define DsrdAftercoolerCoolantIntakeTemp_CovFactor 1
#define DsrdAftercoolerCoolantIntakeTemp_CovS(x) ((int16_t)(x + 40))
// signal: @DsrdAftrclrClntThermostatOpening
#define DsrdAftrclrClntThermostatOpening_CovFactor 0.4
#define DsrdAftrclrClntThermostatOpening_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngChrgeAirCoolerBypassValve1Cmd
#define EngChrgeAirCoolerBypassValve1Cmd_CovFactor 0.0025
#define EngChrgeAirCoolerBypassValve1Cmd_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngChrgeAirCoolerBypassValve2Cmd
#define EngChrgeAirCoolerBypassValve2Cmd_CovFactor 0.0025
#define EngChrgeAirCoolerBypassValve2Cmd_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // Specifies if the aftercooler coolant thermostat valve will operate in temperature control mode or position control mode.    00 = temperature control mode  01 = position control mode (used for service only)  10 = reserved  11 = don't care/reserved
  // 3 - "don't care/reserved" 
  // 2 - "reserved" 
  // 1 - "position control mode" 
  // 0 - "temperature control mode" 

  uint8_t AftercoolerCoolantThermostatMode;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the desired temperature of the fluid in the low temperature aftercooler circuit to an electronic thermostat.  If the aftercooler coolant thermostat valve is operating in position control mode (see SPN 4198) then this value should be 0xFF.
  int16_t DsrdAftercoolerCoolantIntakeTemp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Used to transmit the desired position of the low temperature aftercooler temperature control valve.  0% represents the thermostat allows flow to completely bypass the aftercooler and 100% represents the flow is fully through the aftercooler.   If ...
  uint8_t DsrdAftrclrClntThermostatOpening;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Desired percentage of charge air cooler Bypass Valve 1 opening. 0% means no air is bypassed. 100% means full bypass capacity.
  uint16_t EngChrgeAirCoolerBypassValve1Cmd;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Desired percentage of charge air cooler Bypass Valve 2 opening. 0% means no air is bypassed. 100% means full bypass capacity.
  uint16_t EngChrgeAirCoolerBypassValve2Cmd;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} ACCVC_t;

// def @ECCVC CAN Message (285037310)
#define ECCVC_IDE (1U)
#define ECCVC_DLC (8U)
#define ECCVC_CANID (0x10FD52FEU)
#define ECCVC_CYC (1000U)
// -- Engine Coolant Control Valve Command  Transmit status information from the Master ECU to an electronic thermostat
// signal: @DesiredEngCoolantPumpOutletTemp
#define DesiredEngCoolantPumpOutletTemp_CovFactor 1
#define DesiredEngCoolantPumpOutletTemp_CovS(x) ((int16_t)(x + 40))
// signal: @DsredEngCoolantThermostatOpening
#define DsredEngCoolantThermostatOpening_CovFactor 0.4
#define DsredEngCoolantThermostatOpening_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngAxClerSupplyValve1ActuatorCmd
#define EngAxClerSupplyValve1ActuatorCmd_CovFactor 0.4
#define EngAxClerSupplyValve1ActuatorCmd_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngAxClerSupplyValve2ActuatorCmd
#define EngAxClerSupplyValve2ActuatorCmd_CovFactor 0.4
#define EngAxClerSupplyValve2ActuatorCmd_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Specifies if the engine coolant thermostat valve will operate in temperature control mode or position control mode.    00 = temperature control mode  01 = position control mode (used for service only)  10 = reserved  11 = don't care/reserved
  // 2 - "reserved" 
  // 1 - "position control mode" 
  // 0 - "temperature control mode" 
  // 3 - "don't care/reserved" 

  uint8_t EngCoolantThermostatMode;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired engine coolant temperature of the engine to an electronic thermostat.  If the electronic thermostat valve is operating in position control mode (see SPN 4195)  then transmit 0xFF.
  int16_t DesiredEngCoolantPumpOutletTemp;    //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Indicates the desired position of the engine coolant control valve.   0% represents the thermostat allows flow to completely bypass the radiator and 100% represents the flow is fully through the radiator.  If the electronic thermostat is operating ...
  uint8_t DsredEngCoolantThermostatOpening;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The control command applied to the engine auxiliary cooler supply valve 1 actuator, where 0% represents closed and 100% represents open.    See SPN 4197 for primary engine thermostat valve.
  uint8_t EngAxClerSupplyValve1ActuatorCmd;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The control command applied to the engine auxiliary cooler supply valve 2 actuator, where 0% represents closed and 100% represents open.
  uint8_t EngAxClerSupplyValve2ActuatorCmd;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} ECCVC_t;

// def @GFI3 CAN Message (285057790)
#define GFI3_IDE (1U)
#define GFI3_DLC (8U)
#define GFI3_CANID (0x10FDA2FEU)
#define GFI3_CYC (500U)
// -- Fuel Information 3 (Gaseous)  Gaseous fuel information 3
// signal: @EngFuelValve2IntakeAbsPress
#define EngFuelValve2IntakeAbsPress_CovFactor 0.1
#define EngFuelValve2IntakeAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngGas2MassFlowRate
#define EngGas2MassFlowRate_CovFactor 0.05
#define EngGas2MassFlowRate_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @EngFuelTemp2
#define EngFuelTemp2_CovFactor 1
#define EngFuelTemp2_CovS(x) ((int16_t)(x + 40))
// signal: @EngFuelValve2OutletAbsPress
#define EngFuelValve2OutletAbsPress_CovFactor 0.1
#define EngFuelValve2OutletAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Absolute pressure of gas on intake side of the second fuel system control valve, using standard convention for determining position.  In a system with two fuel system control valves, left/front is #1 (SPN 1390) and right/rear is #2 (SPN 3466).  In a ...
  uint16_t EngFuelValve2IntakeAbsPress;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Gas mass flow rate delivered to an engine through its second fuel control system, using standard convention for determining position.  In a system with two fuel system control valves, left/front is #1 (SPN 1241) and right/rear is #2 (SPN 3467).  In ...
  uint16_t EngGas2MassFlowRate;          //      Bits=16.  [ 0     , 3212.75 ]  Unit:'kg/h'  Factor= 0.05  

  // Second Temperature measurement of fuel (or gas) of the first fuel type. See SPN 174 for first fuel temperature measurement.
  int16_t EngFuelTemp2;                  //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Absolute pressure of gas on outlet side of the second fuel system control valve.  See SPN 2980 for the first or only fuel system control valve.
  uint16_t EngFuelValve2OutletAbsPress;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} GFI3_t;

// def @EEC6 CAN Message (285058046)
#define EEC6_IDE (1U)
#define EEC6_DLC (8U)
#define EEC6_CANID (0x10FDA3FEU)
#define EEC6_CYC (100U)
// -- Electronic Engine Controller 6  Engine related parameters
// signal: @EngTrbCmprssorBypassActuator1Cmd
#define EngTrbCmprssorBypassActuator1Cmd_CovFactor 0.0025
#define EngTrbCmprssorBypassActuator1Cmd_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngVriableGeometryTurboActuator1
#define EngVriableGeometryTurboActuator1_CovFactor 0.4
#define EngVriableGeometryTurboActuator1_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngTrbCmprssorBypassActuator1Pos
#define EngTrbCmprssorBypassActuator1Pos_CovFactor 0.4
#define EngTrbCmprssorBypassActuator1Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngTrbCmprssorBypassActuator2Cmd
#define EngTrbCmprssorBypassActuator2Cmd_CovFactor 0.0025
#define EngTrbCmprssorBypassActuator2Cmd_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngDsrdTrbCmprssrBypssActtor1Pos
#define EngDsrdTrbCmprssrBypssActtor1Pos_CovFactor 0.4
#define EngDsrdTrbCmprssrBypssActtor1Pos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // The command to a compressor bypass actuator, normalized to percent, where 0% nominally represents fully closed and 100% represents fully open.  Typically, the turbocharger compressor bypass actuator is used to keep the engine out of surge by ...
  uint16_t EngTrbCmprssorBypassActuator1Cmd;  //      Bits=16.  [ 0     , 100    ]  Unit:'%'     Factor= 0.0025

  // Actuator that controls the variable geometry turbocharger geometry.The control command to the actuator, normalized to percent, where 0% nominally represents fully closed (smallest turbocharger geometry) and 100% represents fully open (largest ...
  uint8_t EngVriableGeometryTurboActuator1;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Measures the position of the turbocharger compressor bypass actuator, where 0% represents bypass fully closed and 100% represents bypass fully open.  Typically, the compressor bypass is used to lower the compressor outlet pressure and/or intake ...
  uint8_t EngTrbCmprssorBypassActuator1Pos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The command to a compressor bypass actuator 2, normalized to percent, where 0% nominally represents fully closed and 100% represents fully open. Typically, the turbocharger compressor bypass actuator is used to keep the engine out of surge by ...
  uint16_t EngTrbCmprssorBypassActuator2Cmd;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // The requested position of the Engine Turbocharger Compressor Bypass actuator by the engine ECU, where 0% represents bypass fully closed and 100% represents bypass fully open.    This is the position that the device is attempting to achieve.
  uint8_t EngDsrdTrbCmprssrBypssActtor1Pos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Used to identify  the appplicable J1939-73 FMI detected in the Engine Turbocharger Compressor Bypass Actuator 1 by the manufacturers software. When there is no failure FMI 31 is transmitted. When there is multiple failures, the most severe is ...
  uint8_t EngTrbCmprssrBypssActtr1PrlmnryF;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the status of the Engine Turbocharger Compresssor Bypass Actuator 1 drive circuitry temperature.  Temperature excursions may affect the torque output.  000 - High Most severe  001 - High Least severe  010 - In Range  011 - Low Least ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Not Defined" 
  // 4 - "Low Most severe" 
  // 3 - "Low Least severe" 
  // 2 - "In Range" 
  // 1 - "High Least severe" 
  // 0 - "High Most severe" 

  uint8_t EngTrbCmprssrBypssActtr1TmpSttus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} EEC6_t;

// def @ACC1 CAN Message (285110270)
#define ACC1_IDE (1U)
#define ACC1_DLC (8U)
#define ACC1_CANID (0x10FE6FFEU)
#define ACC1_CYC (100U)
// -- Adaptive Cruise Control 1  NOTE?The ACC1 message is required whenever the engine is running and ACC is powered on and not  faulted. The timeout for ACC1 message will be between 2.5 times to 5 times the update rate.  The ACC1 message is intended ...
// signal: @RoadCurvature
#define RoadCurvature_CovFactor 0.0078125
#define RoadCurvature_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
typedef struct
{

  // Absolute velocity of the preceding vehicle situated within 250 m in the same lane and moving in the same direction.
  uint8_t SpeedOfForwardVehicle;              //      Bits=08.  [ 0     , 250    ]  Unit:'km/h' 

  // Distance to the preceding vehicle situated within 250 m in the same lane and moving in the same direction.
  uint8_t DistanceToForwardVehicle;           //      Bits=08.  [ 0     , 250    ]  Unit:'m'    

  // Value of the desired (chosen) velocity of the adaptive cruise control system.
  uint8_t AdaptiveCruiseCtrlSetSpeed;         //      Bits=08.  [ 0     , 120    ]  Unit:'km/h' 

  // This parameter is used to indicate the current state, or mode, of operation by the Adaptive Cruise Control (ACC) device. The states characterize independent system states (e.g., it is not possible to express distance control active and overtake mode ...
  // 7 - "Not available/not valid" 
  // 6 - "Disabled or error condition" 
  // 5 - "Finish mode" 
  // 4 - "Hold mode" 
  // 3 - "Overtake mode" 
  // 2 - "Distance control active" 
  // 1 - "Speed control active" 
  // 0 - "Off" 

  uint8_t AdaptiveCruiseCtrlMode;             //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Selected distance mode for adaptive cruise control.  000 ACC Distance mode #1 (largest distance)  001 ACC Distance mode #2  010 ACC Distance mode #3  011 ACC Distance mode #4  100 ACC Distance mode #5 (shortest distance)  101 Conventional cruise ...
  // 7 - "Not available/not valid" 
  // 6 - "Error condition" 
  // 5 - "Conventional cruise control mode" 
  // 4 - "ACC Distance mode #5" 
  // 3 - "ACC Distance mode #4" 
  // 2 - "ACC Distance mode #3" 
  // 1 - "ACC Distance mode #2" 
  // 0 - "ACC Distance mode #1" 

  uint8_t AdptiveCruiseCtrlSetDistanceMode;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Estimated value of the current road curvature for use by the adaptive cruise control system.  Positive values are used for left curves.  Curvature is the inverse of the radius and is zero for straight roads.
  int32_t RoadCurvature;                      //      Bits=16.  [ -250  , 251.992 ]  Unit:'1/km'  Offset= -250      Factor= 0.0078125

  // Signal to indicate to the driver that the ACC system has detected a target.     00 No targets detected  01 Target detected  10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Target detected" 
  // 0 - "No targets detected" 

  uint8_t ACCTargetDetected;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal to warn the driver of system deactivation due to non-driver actions. Example: Attempting to control vehicle speed below or above limits of ACC. This signal may be used to activate warning sounds or indicators.  00 ACC SSOW Not Active  01 ACC ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "ACC SSOW Active" 
  // 0 - "ACC SSOW Not Active" 

  uint8_t ACCSystemShutoffWarning;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal to indicate to the operator that the ACC system is not able to maintain the distance to the target. Example: Target stopping rapidly. This signal may be used to activate warning sounds or indicators.  00 ACC DAS Not Active  01 ACC DAS Active   ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "ACC DAS Active" 
  // 0 - "ACC DAS Not Active" 

  uint8_t ACCDistanceAlertSignal;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter indicates if a collision is imminent and strong driver reaction either by braking hard or by an avoidance maneuver are imperative to prevent a collision.  00 No warning  01 Collision is imminent  10 Error indicator  11 not available   ...
  // 3 - "not available" 
  // 2 - "Error indicator" 
  // 1 - "Collision is imminent" 
  // 0 - "No warning" 

  uint8_t ForwardCollisionWarning;            //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} ACC1_t;

// def @LVDD CAN Message (285112062)
#define LVDD_IDE (1U)
#define LVDD_DLC (8U)
#define LVDD_CANID (0x10FE76FEU)
#define LVDD_CYC (100U)
// -- Laser Leveling System Vertical Position Display Data
typedef struct
{

  // Informs display devices how to display the current vertical position.  Values which are less than 128 decimal are bit-mapped values and any combination of these values is considered a valid value.  For example communicating the \
  // 255 - "Not Available" 
  // 254 - "Error" 
  // 159 - "No data" 
  // 149 - "High Coarse" 
  // 148 - "High Medium/Coarse" 
  // 147 - "High Medium" 
  // 146 - "High Medium/Fine" 
  // 145 - "High Fine" 
  // 144 - "On Grade" 
  // 132 - "Low Fine" 
  // 131 - "Low Medium/Fine" 
  // 130 - "Low Medium" 
  // 129 - "Low Medium/Coarse" 
  // 128 - "Low Coarse" 
  // 32 - "Low Coarse LED on" 
  // 16 - "Low Fine LED on" 
  // 8 - "On-grade LED on" 
  // 4 - "High Fine LED on" 
  // 2 - "High Coarse LED on" 

  uint8_t LEDDisplayData1;               //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // This parameter informs the system what the selected Display mode will be.  0000 - Center On-Grade Display Mode 1 ( 5 CHANNEL )  0001 - Offset On-Grade Display Mode  0010 - Center On-Grade Display Mode 2 ( 7 CHANNEL )  0011 - 1110 Reserved  1111 - ...
  // 15 - "Not Available or Not Applicable" 
  // 2 - "Center On-Grade Display Mode 2" 
  // 1 - "Offset On-Grade Display Mode " 
  // 0 - "Center On-Grade Display Mode 1" 

  uint8_t LEDDisplayModeCtrl;            //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // This parameter informs the system what the selected Display deadband will be.  0000    +/- 4.5 mm  (0.015 feet, 0.18 inches)  0001    +/- 12 mm   (0.040 feet, 0.45 inches)  0010    +/- 24 mm   (0.080 feet, 0.96 inches)  0011    +/- 5  mm    (0.017 ...
  // 15 - "Not Available or Not applicable" 
  // 4 - "+/- 1 mm    " 
  // 3 - "+/- 5  mm   " 
  // 2 - "+/- 24 mm  " 
  // 1 - "+/- 12 mm  " 
  // 0 - "+/- 4.5 mm " 

  uint8_t LEDDisplayDeadbandCtrl;        //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Sets LED Pattern control mode on laser leveling systems.    0000 - 5 Channel  0001 - Offset  0010 - 7 Channel  0011 - 1110 Reserved  1111 Not Available
  // 15 - "Not Available" 
  // 2 - "- 7 Channel" 
  // 1 - "- Offset" 
  // 0 - "- 5 Channel" 

  uint8_t LEDPatternCtrl;                //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Sets Display Deadbands mode.    0000 - Narrow = +/- 4.5mm  0001 - Standard = +/- 12mm  0010 - Wide = +/- 24mm  0011 - 1110 Reserved  1111 Not Available
  // 15 - "Not Available" 
  // 2 - "- Wide = +/- 24mm" 
  // 1 - "- Standard = +/- 12mm" 
  // 0 - "- Narrow = +/- 4.5mm" 

  uint8_t DisplayDeadbands;              //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} LVDD_t;

// def @ECCAI1 CAN Message (351293182)
#define ECCAI1_IDE (1U)
#define ECCAI1_DLC (8U)
#define ECCAI1_CANID (0x14F04EFEU)
// -- Engine Cylinder 1 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 1.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl1IndctedMeanEffectivePress
#define EngCyl1IndctedMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl1IndctedMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl1AvrgStrtOfCmbustionTiming
#define EngCyl1AvrgStrtOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl1AvrgStrtOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl1AvrgCntrOfCmbustionTiming
#define EngCyl1AvrgCntrOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl1AvrgCntrOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl1AverageCombustionDuration
#define EngCyl1AverageCombustionDuration_CovFactor 0.0078125
#define EngCyl1AverageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 1.   Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl1IndctedMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 1 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl1AvrgStrtOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 1 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion happens ...
  int32_t EngCyl1AvrgCntrOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 1 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl1AverageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI1_t;

// def @ECCAI2 CAN Message (351293438)
#define ECCAI2_IDE (1U)
#define ECCAI2_DLC (8U)
#define ECCAI2_CANID (0x14F04FFEU)
// -- Engine Cylinder 2 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 2.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl2IndctedMeanEffectivePress
#define EngCyl2IndctedMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl2IndctedMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl2AvrgStrtOfCmbustionTiming
#define EngCyl2AvrgStrtOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl2AvrgStrtOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl2AvrgCntrOfCmbustionTiming
#define EngCyl2AvrgCntrOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl2AvrgCntrOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl2AverageCombustionDuration
#define EngCyl2AverageCombustionDuration_CovFactor 0.0078125
#define EngCyl2AverageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 2.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl2IndctedMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 2 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl2AvrgStrtOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 2 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion happens ...
  int32_t EngCyl2AvrgCntrOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 2 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl2AverageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI2_t;

// def @ECCAI3 CAN Message (351293694)
#define ECCAI3_IDE (1U)
#define ECCAI3_DLC (8U)
#define ECCAI3_CANID (0x14F050FEU)
// -- Engine Cylinder 3 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 3.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl3IndctedMeanEffectivePress
#define EngCyl3IndctedMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl3IndctedMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl3AvrgStrtOfCmbustionTiming
#define EngCyl3AvrgStrtOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl3AvrgStrtOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl3AvrgCntrOfCmbustionTiming
#define EngCyl3AvrgCntrOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl3AvrgCntrOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl3AverageCombustionDuration
#define EngCyl3AverageCombustionDuration_CovFactor 0.0078125
#define EngCyl3AverageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 3.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl3IndctedMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 3 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl3AvrgStrtOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 3 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion happens ...
  int32_t EngCyl3AvrgCntrOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 3 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl3AverageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI3_t;

// def @ECCAI4 CAN Message (351293950)
#define ECCAI4_IDE (1U)
#define ECCAI4_DLC (8U)
#define ECCAI4_CANID (0x14F051FEU)
// -- Engine Cylinder 4 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 4.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl4IndctedMeanEffectivePress
#define EngCyl4IndctedMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl4IndctedMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl4AvrgStrtOfCmbustionTiming
#define EngCyl4AvrgStrtOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl4AvrgStrtOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl4AvrgCntrOfCmbustionTiming
#define EngCyl4AvrgCntrOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl4AvrgCntrOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl4AverageCombustionDuration
#define EngCyl4AverageCombustionDuration_CovFactor 0.0078125
#define EngCyl4AverageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 4.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl4IndctedMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 4 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl4AvrgStrtOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 4 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion happens ...
  int32_t EngCyl4AvrgCntrOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 4 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl4AverageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI4_t;

// def @ECCAI5 CAN Message (351294206)
#define ECCAI5_IDE (1U)
#define ECCAI5_DLC (8U)
#define ECCAI5_CANID (0x14F052FEU)
// -- Engine Cylinder 5 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 5.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl5IndctedMeanEffectivePress
#define EngCyl5IndctedMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl5IndctedMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl5AvrgStrtOfCmbustionTiming
#define EngCyl5AvrgStrtOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl5AvrgStrtOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl5AvrgCntrOfCmbustionTiming
#define EngCyl5AvrgCntrOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl5AvrgCntrOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl5AverageCombustionDuration
#define EngCyl5AverageCombustionDuration_CovFactor 0.0078125
#define EngCyl5AverageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 5.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl5IndctedMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 5 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl5AvrgStrtOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 5 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion happens ...
  int32_t EngCyl5AvrgCntrOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 5 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl5AverageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI5_t;

// def @ECCAI6 CAN Message (351294462)
#define ECCAI6_IDE (1U)
#define ECCAI6_DLC (8U)
#define ECCAI6_CANID (0x14F053FEU)
// -- Engine Cylinder 6 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 6.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl6IndctedMeanEffectivePress
#define EngCyl6IndctedMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl6IndctedMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl6AvrgStrtOfCmbustionTiming
#define EngCyl6AvrgStrtOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl6AvrgStrtOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl6AvrgCntrOfCmbustionTiming
#define EngCyl6AvrgCntrOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl6AvrgCntrOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl6AverageCombustionDuration
#define EngCyl6AverageCombustionDuration_CovFactor 0.0078125
#define EngCyl6AverageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 6.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl6IndctedMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 6 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl6AvrgStrtOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 6 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion happens ...
  int32_t EngCyl6AvrgCntrOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 6 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl6AverageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI6_t;

// def @ECCAI7 CAN Message (351294718)
#define ECCAI7_IDE (1U)
#define ECCAI7_DLC (8U)
#define ECCAI7_CANID (0x14F054FEU)
// -- Engine Cylinder 7 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 7.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl7IndctedMeanEffectivePress
#define EngCyl7IndctedMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl7IndctedMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl7AvrgStrtOfCmbustionTiming
#define EngCyl7AvrgStrtOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl7AvrgStrtOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl7AvrgCntrOfCmbustionTiming
#define EngCyl7AvrgCntrOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl7AvrgCntrOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl7AverageCombustionDuration
#define EngCyl7AverageCombustionDuration_CovFactor 0.0078125
#define EngCyl7AverageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 7.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl7IndctedMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 7 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl7AvrgStrtOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 7 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion happens ...
  int32_t EngCyl7AvrgCntrOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 7 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl7AverageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI7_t;

// def @ECCAI8 CAN Message (351294974)
#define ECCAI8_IDE (1U)
#define ECCAI8_DLC (8U)
#define ECCAI8_CANID (0x14F055FEU)
// -- Engine Cylinder 8 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 8.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl8IndctedMeanEffectivePress
#define EngCyl8IndctedMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl8IndctedMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl8AvrgStrtOfCmbustionTiming
#define EngCyl8AvrgStrtOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl8AvrgStrtOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl8AvrgCntrOfCmbustionTiming
#define EngCyl8AvrgCntrOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl8AvrgCntrOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl8AverageCombustionDuration
#define EngCyl8AverageCombustionDuration_CovFactor 0.0078125
#define EngCyl8AverageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 8.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl8IndctedMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 8 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl8AvrgStrtOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 8 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion happens ...
  int32_t EngCyl8AvrgCntrOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 8 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl8AverageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI8_t;

// def @ECCAI9 CAN Message (351295230)
#define ECCAI9_IDE (1U)
#define ECCAI9_DLC (8U)
#define ECCAI9_CANID (0x14F056FEU)
// -- Engine Cylinder 9 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 9.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl9IndctedMeanEffectivePress
#define EngCyl9IndctedMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl9IndctedMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl9AvrgStrtOfCmbustionTiming
#define EngCyl9AvrgStrtOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl9AvrgStrtOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl9AvrgCntrOfCmbustionTiming
#define EngCyl9AvrgCntrOfCmbustionTiming_CovFactor 0.0078125
#define EngCyl9AvrgCntrOfCmbustionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl9AverageCombustionDuration
#define EngCyl9AverageCombustionDuration_CovFactor 0.0078125
#define EngCyl9AverageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 9.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl9IndctedMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 9 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl9AvrgStrtOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 9 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion happens ...
  int32_t EngCyl9AvrgCntrOfCmbustionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 9 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl9AverageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI9_t;

// def @ECCAI10 CAN Message (351295486)
#define ECCAI10_IDE (1U)
#define ECCAI10_DLC (8U)
#define ECCAI10_CANID (0x14F057FEU)
// -- Engine Cylinder 10 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 10.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl10IndctdMeanEffectivePress
#define EngCyl10IndctdMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl10IndctdMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl10AvrgStrtOfCmbstionTiming
#define EngCyl10AvrgStrtOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl10AvrgStrtOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl10AvrgCntrOfCmbstionTiming
#define EngCyl10AvrgCntrOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl10AvrgCntrOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl10AvrageCombustionDuration
#define EngCyl10AvrageCombustionDuration_CovFactor 0.0078125
#define EngCyl10AvrageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 10.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl10IndctdMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 10 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl10AvrgStrtOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 10 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion ...
  int32_t EngCyl10AvrgCntrOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 10 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl10AvrageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI10_t;

// def @ECCAI11 CAN Message (351295742)
#define ECCAI11_IDE (1U)
#define ECCAI11_DLC (8U)
#define ECCAI11_CANID (0x14F058FEU)
// -- Engine Cylinder 11 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 11.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl11IndctdMeanEffectivePress
#define EngCyl11IndctdMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl11IndctdMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl11AvrgStrtOfCmbstionTiming
#define EngCyl11AvrgStrtOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl11AvrgStrtOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl11AvrgCntrOfCmbstionTiming
#define EngCyl11AvrgCntrOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl11AvrgCntrOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl11AvrageCombustionDuration
#define EngCyl11AvrageCombustionDuration_CovFactor 0.0078125
#define EngCyl11AvrageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 11.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl11IndctdMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 11 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl11AvrgStrtOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 11 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion ...
  int32_t EngCyl11AvrgCntrOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 11 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl11AvrageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI11_t;

// def @ECCAI12 CAN Message (351295998)
#define ECCAI12_IDE (1U)
#define ECCAI12_DLC (8U)
#define ECCAI12_CANID (0x14F059FEU)
// -- Engine Cylinder 12 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 12.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl12IndctdMeanEffectivePress
#define EngCyl12IndctdMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl12IndctdMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl12AvrgStrtOfCmbstionTiming
#define EngCyl12AvrgStrtOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl12AvrgStrtOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl12AvrgCntrOfCmbstionTiming
#define EngCyl12AvrgCntrOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl12AvrgCntrOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl12AvrageCombustionDuration
#define EngCyl12AvrageCombustionDuration_CovFactor 0.0078125
#define EngCyl12AvrageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 12.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl12IndctdMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 12 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl12AvrgStrtOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 12 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion ...
  int32_t EngCyl12AvrgCntrOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 12 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl12AvrageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI12_t;

// def @ECCAI13 CAN Message (351296254)
#define ECCAI13_IDE (1U)
#define ECCAI13_DLC (8U)
#define ECCAI13_CANID (0x14F05AFEU)
// -- Engine Cylinder 13 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 13.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl13IndctdMeanEffectivePress
#define EngCyl13IndctdMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl13IndctdMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl13AvrgStrtOfCmbstionTiming
#define EngCyl13AvrgStrtOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl13AvrgStrtOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl13AvrgCntrOfCmbstionTiming
#define EngCyl13AvrgCntrOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl13AvrgCntrOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl13AvrageCombustionDuration
#define EngCyl13AvrageCombustionDuration_CovFactor 0.0078125
#define EngCyl13AvrageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 13.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl13IndctdMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 13 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl13AvrgStrtOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 13 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion ...
  int32_t EngCyl13AvrgCntrOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 13 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl13AvrageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI13_t;

// def @ECCAI14 CAN Message (351296510)
#define ECCAI14_IDE (1U)
#define ECCAI14_DLC (8U)
#define ECCAI14_CANID (0x14F05BFEU)
// -- Engine Cylinder 14 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 14.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl14IndctdMeanEffectivePress
#define EngCyl14IndctdMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl14IndctdMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl14AvrgStrtOfCmbstionTiming
#define EngCyl14AvrgStrtOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl14AvrgStrtOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl14AvrgCntrOfCmbstionTiming
#define EngCyl14AvrgCntrOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl14AvrgCntrOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl14AvrageCombustionDuration
#define EngCyl14AvrageCombustionDuration_CovFactor 0.0078125
#define EngCyl14AvrageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 14.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl14IndctdMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 14 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl14AvrgStrtOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 14 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion ...
  int32_t EngCyl14AvrgCntrOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 14 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl14AvrageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI14_t;

// def @ECCAI15 CAN Message (351296766)
#define ECCAI15_IDE (1U)
#define ECCAI15_DLC (8U)
#define ECCAI15_CANID (0x14F05CFEU)
// -- Engine Cylinder 15 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 15.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl15IndctdMeanEffectivePress
#define EngCyl15IndctdMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl15IndctdMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl15AvrgStrtOfCmbstionTiming
#define EngCyl15AvrgStrtOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl15AvrgStrtOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl15AvrgCntrOfCmbstionTiming
#define EngCyl15AvrgCntrOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl15AvrgCntrOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl15AvrageCombustionDuration
#define EngCyl15AvrageCombustionDuration_CovFactor 0.0078125
#define EngCyl15AvrageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 15.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl15IndctdMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 15 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl15AvrgStrtOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 15 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion ...
  int32_t EngCyl15AvrgCntrOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 15 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl15AvrageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI15_t;

// def @ECCAI16 CAN Message (351297022)
#define ECCAI16_IDE (1U)
#define ECCAI16_DLC (8U)
#define ECCAI16_CANID (0x14F05DFEU)
// -- Engine Cylinder 16 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 16.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl16IndctdMeanEffectivePress
#define EngCyl16IndctdMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl16IndctdMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl16AvrgStrtOfCmbstionTiming
#define EngCyl16AvrgStrtOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl16AvrgStrtOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl16AvrgCntrOfCmbstionTiming
#define EngCyl16AvrgCntrOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl16AvrgCntrOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl16AvrageCombustionDuration
#define EngCyl16AvrageCombustionDuration_CovFactor 0.0078125
#define EngCyl16AvrageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 16.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl16IndctdMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 16 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl16AvrgStrtOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 16 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion ...
  int32_t EngCyl16AvrgCntrOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 16 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl16AvrageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI16_t;

// def @ECCAI17 CAN Message (351297278)
#define ECCAI17_IDE (1U)
#define ECCAI17_DLC (8U)
#define ECCAI17_CANID (0x14F05EFEU)
// -- Engine Cylinder 17 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 17.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl17IndctdMeanEffectivePress
#define EngCyl17IndctdMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl17IndctdMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl17AvrgStrtOfCmbstionTiming
#define EngCyl17AvrgStrtOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl17AvrgStrtOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl17AvrgCntrOfCmbstionTiming
#define EngCyl17AvrgCntrOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl17AvrgCntrOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl17AvrageCombustionDuration
#define EngCyl17AvrageCombustionDuration_CovFactor 0.0078125
#define EngCyl17AvrageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 17.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl17IndctdMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 17 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl17AvrgStrtOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 17 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion ...
  int32_t EngCyl17AvrgCntrOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 17 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl17AvrageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI17_t;

// def @ECCAI18 CAN Message (351297534)
#define ECCAI18_IDE (1U)
#define ECCAI18_DLC (8U)
#define ECCAI18_CANID (0x14F05FFEU)
// -- Engine Cylinder 18 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 18.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl18IndctdMeanEffectivePress
#define EngCyl18IndctdMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl18IndctdMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl18AvrgStrtOfCmbstionTiming
#define EngCyl18AvrgStrtOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl18AvrgStrtOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl18AvrgCntrOfCmbstionTiming
#define EngCyl18AvrgCntrOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl18AvrgCntrOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl18AvrageCombustionDuration
#define EngCyl18AvrageCombustionDuration_CovFactor 0.0078125
#define EngCyl18AvrageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 18.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl18IndctdMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 18 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl18AvrgStrtOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 18 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion ...
  int32_t EngCyl18AvrgCntrOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 18 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl18AvrageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI18_t;

// def @ECCAI19 CAN Message (351297790)
#define ECCAI19_IDE (1U)
#define ECCAI19_DLC (8U)
#define ECCAI19_CANID (0x14F060FEU)
// -- Engine Cylinder 19 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 19.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl19IndctdMeanEffectivePress
#define EngCyl19IndctdMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl19IndctdMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl19AvrgStrtOfCmbstionTiming
#define EngCyl19AvrgStrtOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl19AvrgStrtOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl19AvrgCntrOfCmbstionTiming
#define EngCyl19AvrgCntrOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl19AvrgCntrOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl19AvrageCombustionDuration
#define EngCyl19AvrageCombustionDuration_CovFactor 0.0078125
#define EngCyl19AvrageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 19.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl19IndctdMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 19 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl19AvrgStrtOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 19 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion ...
  int32_t EngCyl19AvrgCntrOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 19 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl19AvrageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI19_t;

// def @ECCAI20 CAN Message (351298046)
#define ECCAI20_IDE (1U)
#define ECCAI20_DLC (8U)
#define ECCAI20_CANID (0x14F061FEU)
// -- Engine Cylinder 20 Combustion Average Information  Used to transmit the average of combustion parameters of Engine Cylinder 20.  This PGN is transmitted at a defined ratio of the engine speed. The transmission rate is dependent on  SPN 6394 - Number ...
// signal: @EngCyl20IndctdMeanEffectivePress
#define EngCyl20IndctdMeanEffectivePress_CovFactor 0.0001220703125
#define EngCyl20IndctdMeanEffectivePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @EngCyl20AvrgStrtOfCmbstionTiming
#define EngCyl20AvrgStrtOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl20AvrgStrtOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl20AvrgCntrOfCmbstionTiming
#define EngCyl20AvrgCntrOfCmbstionTiming_CovFactor 0.0078125
#define EngCyl20AvrgCntrOfCmbstionTiming_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCyl20AvrageCombustionDuration
#define EngCyl20AvrageCombustionDuration_CovFactor 0.0078125
#define EngCyl20AvrageCombustionDuration_CovS(x) ((uint16_t)((x / 0.0078125)))
typedef struct
{

  // Average cylinder pressure calculated over defined number of combustion cycles for engine cylinder 20.  Negative range is to cover thermodynamic behavior during misfire.
  int32_t EngCyl20IndctdMeanEffectivePress;   //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Average start of combustion timing calculated over defined number of combustion cycles for engine cylinder 20 with reference to the crank angle.  When the combustion happens after the TDC (Top Dead Center) of this cylinder, the timing is referred in ...
  int32_t EngCyl20AvrgStrtOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average timing calculated over defined number of combustion cycles for the center of combustion in engine cylinder 20 with reference to the crank angle.  Center of Combustion is used to indicate the combustion efficiency.  When the combustion ...
  int32_t EngCyl20AvrgCntrOfCmbstionTiming;   //      Bits=16.  [ -250  , 250.992 ]  Unit:'deg'   Offset= -250      Factor= 0.0078125

  // Average duration of combustion calculated over defined number of combustion cycles for engine cylinder 20 with reference to the crank angle.  Combustion duration is the difference between end of combustion and start of combustion expressed, in this ...
  uint16_t EngCyl20AvrageCombustionDuration;  //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125
  uint32_t framecnt;
} ECCAI20_t;

// def @CDC CAN Message (352064254)
#define CDC_IDE (1U)
#define CDC_DLC (8U)
#define CDC_CANID (0x14FC12FEU)
#define CDC_CYC (1000U)
// -- Cab Door Control  This message requests or commands the cabin door functionality; door latches, windows, and mirrors. Doors are numbered left to right, front to back.
typedef struct
{

  // Commands cab door latch state change: lock or unlock.  000 = Unlock left front cab door latch (driver door on LH steer vehicles)  001 = Unlock right front cab door latch (front passenger door for LH steer vehicles)  010 = Unlock left rear cab door ...
  // 7 - "Take no action" 
  // 6 - "Reserved" 
  // 5 - "Lock all cab door latches" 
  // 4 - "Unlock all cab door latches" 
  // 3 - "Unlock right rear cab door latch" 
  // 2 - "Unlock left rear cab door latch" 
  // 1 - "Unlock right front cab door latch" 
  // 0 - "Unlock left front cab door latch" 

  uint8_t DoorsLockActCmd;               //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Request to the cab door lock controller from Remote Keyless Entry or or other external device to lock or unlock doors.  This parameter is different from Cab Doors Lock Actuation Command (SPN xxxx) because this is a request to actuate door locks ...
  // 7 - "Take no action" 
  // 6 - "Reserved" 
  // 5 - "Request lock all cab door latches" 
  // 4 - "Request unlock all cab door latches" 
  // 3 - "Request unlock right rear cab door latch" 
  // 2 - "Request unlock left rear cab door latch" 
  // 1 - "Request unlock right front cab door latch" 
  // 0 - "Request unlock left front cab door latch" 

  uint8_t RemoteCabDoorLockReq;          //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Commands position change of left front window (driver door window on left-hand steer vehicles).  000 = Window move up  001 = Window move down  010 = Window auto up  011 = Window auto down  100 = Reserved  101 = Reserved  110 = Reserved  111 = Take ...
  // 7 - "Take no action" 
  // 6 - "Reserved" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Window auto down" 
  // 2 - "Window auto up" 
  // 1 - "Window move down" 
  // 0 - "Window move up" 

  uint8_t LeftFrontWindowPosCmd;         //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Commands position change of right front window (passenger door window on left-hand steer vehicles).  000 = Window move up  001 = Window move down  010 = Window auto up  011 = Window auto down  100 = Reserved  101 = Reserved  110 = Reserved  111 = ...
  // 7 - "Take no action" 
  // 6 - "Reserved" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Window auto down" 
  // 2 - "Window auto up" 
  // 1 - "Window move down" 
  // 0 - "Window move up" 

  uint8_t RightFrontWindowPosCmd;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Commands position change of left rear window.    000 = Window move up  001 = Window move down  010 = Window auto up  011 = Window auto down  100 = Reserved  101 = Reserved  110 = Reserved  111 = Take no action
  // 7 - "Take no action" 
  // 6 - "Reserved" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Window auto down" 
  // 2 - "Window auto up" 
  // 1 - "Window move down" 
  // 0 - "Window move up" 

  uint8_t LeftRearWindowPosCmd;          //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Commands position change of the right rear window.    000 = Window move up  001 = Window move down  010 = Window auto up  011 = Window auto down  100 = Reserved  101 = Reserved  110 = Reserved  111 = Take no action
  // 7 - "Take no action" 
  // 6 - "Reserved" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Window auto down" 
  // 2 - "Window auto up" 
  // 1 - "Window move down" 
  // 0 - "Window move up" 

  uint8_t RightRearWindowPosCmd;         //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Commands horizontal position change of the primary mirror on the left side (driver side for left-hand steer vehicles).    00 = Move left  01 = Move right  10 = Reserved  11 = Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Move right" 
  // 0 - "Move left" 

  uint8_t MirrorLeft1HorizontalCmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Commands vertical position change of the primary mirror on the left side (driver side for left-hand steer vehicles).    00 = Move up  01 = Move down  10 = Reserved  11 = Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Move down" 
  // 0 - "Move up" 

  uint8_t MirrorLeft1VerticalCmd;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Commands horizontal position change of the primary mirror on the right side (passenger side for lefthand steer vehicles).    00 = Move left  01 = Move right  10 = Reserved  11 = Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Move right" 
  // 0 - "Move left" 

  uint8_t MirrorRight1HorizontalCmd;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Commands vertical position change of the primary mirror on the right side (passenger side for lefthand steer vehicles).    00 = Move up  01 = Move down  10 = Reserved  11 = Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Move down" 
  // 0 - "Move up" 

  uint8_t MirrorRight1VerticalCmd;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Commands horizontal position change of the second mirror on the left side (driver side for left-hand steer vehicles).    00 = Move left  01 = Move right  10 = Reserved  11 = Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Move right" 
  // 0 - "Move left" 

  uint8_t MirrorLeft2HorizontalCmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Commands vertical position change of the second mirror on the left side (driver side for left-hand steer vehicles).     00 = Move up  01 = Move down  10 = Reserved  11 = Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Move down" 
  // 0 - "Move up" 

  uint8_t MirrorLeft2VerticalCmd;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Commands horizontal position change of the second mirror on the right side (passenger side for lefthand steer vehicles).    00 = Move left  01 = Move right  10 = Reserved  11 = Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Move right" 
  // 0 - "Move left" 

  uint8_t MirrorRight2HorizontalCmd;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Commands vertical position change of the second mirror on the right side (passenger side for lefthand steer vehicles).    00 = Move up  01 = Move down  10 = Reserved  11 = Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Move down" 
  // 0 - "Move up" 

  uint8_t MirrorRight2VerticalCmd;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Mirror heat on" 
  // 0 - "Mirror heat off" 

  uint8_t MirrorLeft1HeatCmd;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Mirror heat on" 
  // 0 - "Mirror heat off" 

  uint8_t MirrorRight1HeatCmd;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Mirror heat on" 
  // 0 - "Mirror heat off" 

  uint8_t MirrorLeft2HeatCmd;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Mirror heat on" 
  // 0 - "Mirror heat off" 

  uint8_t MirrorRight2HeatCmd;           //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} CDC_t;

// def @DLS CAN Message (352064510)
#define DLS_IDE (1U)
#define DLS_DLC (8U)
#define DLS_CANID (0x14FC13FEU)
#define DLS_CYC (1000U)
// -- Door Latch Status  This message provides status of the cabin door  latches. Doors are numbered left to right, front to back.
typedef struct
{

  // Status of the left front cab door latch (driver door for left-hand steer vehicles). Door latches may have 3 positions indicating fully open, 1st detent or \  000 = Door Latch Open  001 = Door Latch Fully ...
  // 7 - "Not Available" 
  // 6 - "Error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Reserved" 
  // 2 - "Door Latch Ajar" 
  // 1 - "Door Latch Fully Closed/Latched" 
  // 0 - "Door Latch Open" 

  uint8_t LeftFrontCabDoorLatchPos;      //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Status of the right front cab door latch (passenger door for left-hand steer vehicles). Door latches may have 3 positions indicating fully open, 1st detent or \  000 = Door Latch Open  001 = Door Latch Fully ...
  // 7 - "Not Available" 
  // 6 - "Error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Reserved" 
  // 2 - "Door Latch Ajar" 
  // 1 - "Door Latch Fully Closed/Latched" 
  // 0 - "Door Latch Open" 

  uint8_t RightFrontCabDoorLatchPos;     //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Status of the left rear cab door latch. Door latches may have 3 positions indicating fully open, 1st detent or \  000 = Door Latch Open  001 = Door Latch Fully Closed/Latched  010 = Door Latch Ajar  011 = ...
  // 7 - "Not Available" 
  // 6 - "Error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Reserved" 
  // 2 - "Door Latch Ajar" 
  // 1 - "Door Latch Fully Closed/Latched" 
  // 0 - "Door Latch Open" 

  uint8_t LeftRearCabDoorLatchPos;       //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Status of the right rear cab door latch. Door latches may have 3 positions indicating fully open, 1st detent or \  000 = Door Latch Open  001 = Door Latch Fully Closed/Latched  010 = Door Latch Ajar  011 = ...
  // 7 - "Not Available" 
  // 6 - "Error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Reserved" 
  // 2 - "Door Latch Ajar" 
  // 1 - "Door Latch Fully Closed/Latched" 
  // 0 - "Door Latch Open" 

  uint8_t RightRearCabDoorLatchPos;      //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} DLS_t;

// def @VEP6 CAN Message (352065022)
#define VEP6_IDE (1U)
#define VEP6_DLC (8U)
#define VEP6_CANID (0x14FC15FEU)
#define VEP6_CYC (100U)
// -- Vehicle Electrical Power 6  Voltage and current measurements for batteries 3 and 4.
typedef struct
{
  uint32_t framecnt;
} VEP6_t;

// def @PLT2 CAN Message (352065278)
#define PLT2_IDE (1U)
#define PLT2_DLC (8U)
#define PLT2_CANID (0x14FC16FEU)
#define PLT2_CYC (1000U)
// -- Payload Temperature 2  Payload temperatures
typedef struct
{
  uint32_t framecnt;
} PLT2_t;

// def @PLT1 CAN Message (352065534)
#define PLT1_IDE (1U)
#define PLT1_DLC (8U)
#define PLT1_CANID (0x14FC17FEU)
#define PLT1_CYC (1000U)
// -- Payload Temperature 1  Payload temperatures
typedef struct
{
  uint32_t framecnt;
} PLT1_t;

// def @AFT1PSI3 CAN Message (352072446)
#define AFT1PSI3_IDE (1U)
#define AFT1PSI3_DLC (8U)
#define AFT1PSI3_CANID (0x14FC32FEU)
#define AFT1PSI3_CYC (250U)
// -- Aftertreatment 1 Particulate Sensor Information 3  This message contains information for the particulate sensor in bank 1 of a 2 bank system or the particulate sensor in a single bank system.
typedef struct
{

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment particulate sensor heater high side driver by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t HtrHiSideDriverPreliminaryFMI;      //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The value of this parameter is not retained when power is removed from the particulate sensor.  000 - Tests monitored continuously. There are no enable or pause conditions. See Aftertreatment 1 Particulate Sensor Heater High Side Driver Preliminary ...
  // 7 - "Not Available" 
  // 3 - "Enable or pause conditions have allowed tests to execute this power cycle" 
  // 2 - "Enable or pause conditions have allowed tests to execute this power cycle" 
  // 1 - "Tests supported but not completed this power cycle" 
  // 0 - "Tests monitored continuously" 

  uint8_t HtrHiSideDriverDiagnosticStatus;    //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment particulate sensor heater high side driver by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t HtrLowSideDriverPreliminaryFMI;     //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The value of this parameter is not retained when power is removed from the particulate sensor.  000 - Tests monitored continuously. There are no enable or pause conditions. See Aftertreatment 1 Particulate Sensor Heater Low Side Driver Preliminary ...
  // 7 - "Not Available" 
  // 3 - "Enable or pause conditions have allowed tests to execute this power cycle" 
  // 2 - "Enable or pause conditions have allowed tests to execute this power cycle" 
  // 1 - "Tests supported but not completed this power cycle" 
  // 0 - "Tests monitored continuously" 

  uint8_t HtrLowSideDriverDiagnosticStatus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment particulate sensor input by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures the most ...
  uint8_t InputPreliminaryFMI;                //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The value of this parameter is not retained when power is removed from the particulate sensor.  000 - Tests monitored continuously. There are no enable or pause conditions. See Aftertreatment 1 Particulate Sensor Input Preliminary FMI (SPN 7325) for ...
  // 7 - "Not Available" 
  // 3 - "Enable or pause conditions have allowed tests to execute this power cycle" 
  // 2 - "Enable or pause conditions have allowed tests to execute this power cycle" 
  // 1 - "Tests supported but not completed this power cycle" 
  // 0 - "Tests monitored continuously" 

  uint8_t InputDiagnosticStatus;              //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment particulate sensor power supply by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures ...
  uint8_t PwrSupplyPreliminaryFMI;            //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The value of this parameter is not retained when power is removed from the particulate sensor.  000 - Tests monitored continuously. There are no enable or pause conditions. See Aftertreatment 1 Particulate Sensor Power Supply Preliminary FMI (SPN ...
  // 7 - "Not Available" 
  // 3 - "Enable or pause conditions have allowed tests to execute this power cycle" 
  // 2 - "Enable or pause conditions have allowed tests to execute this power cycle" 
  // 1 - "Tests supported but not completed this power cycle" 
  // 0 - "Tests monitored continuously" 

  uint8_t PwrSupplyDiagnosticStatus;          //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment particulate sensor heater power supply by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t HtrPwrSupplyPreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The value of this parameter is not retained when power is removed from the particulate sensor.  000 - Tests monitored continuously. There are no enable or pause conditions. See Aftertreatment 1 Particulate Sensor Heater Power Supply Preliminary FMI ...
  // 7 - "Not Available" 
  // 3 - "Enable or pause conditions have allowed tests to execute this power cycle" 
  // 2 - "Enable or pause conditions have allowed tests to execute this power cycle" 
  // 1 - "Tests supported but not completed this power cycle" 
  // 0 - "Tests monitored continuously" 

  uint8_t HtrPwrSupplyDiagnosticStatus;       //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} AFT1PSI3_t;

// def @EFIMRPI3 CAN Message (352072702)
#define EFIMRPI3_IDE (1U)
#define EFIMRPI3_DLC (8U)
#define EFIMRPI3_CANID (0x14FC33FEU)
#define EFIMRPI3_CYC (500U)
// -- Engine Fuel Injector Metering Rail Pressure Information 3  Transmits rail pressure information.
// signal: @EngInjctrMtringRail1DesiredPress
#define EngInjctrMtringRail1DesiredPress_CovFactor 5
#define EngInjctrMtringRail1DesiredPress_CovS(x) ((uint16_t)((x / 5)))
// signal: @EngInjctrMtringRail2DesiredPress
#define EngInjctrMtringRail2DesiredPress_CovFactor 5
#define EngInjctrMtringRail2DesiredPress_CovS(x) ((uint16_t)((x / 5)))
typedef struct
{

  // The desired pressure of fuel in the primary, or first, metering rail as delivered from the supply pump to the injector metering intake.
  uint16_t EngInjctrMtringRail1DesiredPress;  //      Bits=16.  [ 0     , 321275 ]  Unit:'kPa'   Factor= 5     

  // The desired pressure of fuel in metering rail 2 as delivered from the supply pump to the injector metering intake.
  uint16_t EngInjctrMtringRail2DesiredPress;  //      Bits=16.  [ 0     , 321275 ]  Unit:'kPa'   Factor= 5     
  uint32_t framecnt;
} EFIMRPI3_t;

// def @EFIMRPI2 CAN Message (352072958)
#define EFIMRPI2_IDE (1U)
#define EFIMRPI2_DLC (8U)
#define EFIMRPI2_CANID (0x14FC34FEU)
#define EFIMRPI2_CYC (500U)
// -- Engine Fuel Injector Metering Rail Pressure Information 2  Transmits the rail pressure information as measured by different rail pressure sensors.
// signal: @EngInjectorMeteringRail1Press1
#define EngInjectorMeteringRail1Press1_CovFactor 5
#define EngInjectorMeteringRail1Press1_CovS(x) ((uint16_t)((x / 5)))
// signal: @EngInjectorMeteringRail1Press2
#define EngInjectorMeteringRail1Press2_CovFactor 5
#define EngInjectorMeteringRail1Press2_CovS(x) ((uint16_t)((x / 5)))
// signal: @EngInjectorMeteringRail2Press1
#define EngInjectorMeteringRail2Press1_CovFactor 5
#define EngInjectorMeteringRail2Press1_CovS(x) ((uint16_t)((x / 5)))
// signal: @EngInjectorMeteringRail2Press2
#define EngInjectorMeteringRail2Press2_CovFactor 5
#define EngInjectorMeteringRail2Press2_CovS(x) ((uint16_t)((x / 5)))
typedef struct
{

  // The pressure of fuel measured by first rail pressure sensor in the primary, or first, metering rail as delivered from the supply pump to the injector metering intake.
  uint16_t EngInjectorMeteringRail1Press1;  //      Bits=16.  [ 0     , 321275 ]  Unit:'kPa'   Factor= 5     

  // The pressure of fuel measured by the second rail pressure sensor in the primary, or first, metering rail as delivered from the supply pump to the injector metering intake.
  uint16_t EngInjectorMeteringRail1Press2;  //      Bits=16.  [ 0     , 321275 ]  Unit:'kPa'   Factor= 5     

  // The pressure of fuel measured by first rail pressure sensor in the metering rail 2 as delivered from the supply pump to the injector metering intake.
  uint16_t EngInjectorMeteringRail2Press1;  //      Bits=16.  [ 0     , 321275 ]  Unit:'kPa'   Factor= 5     

  // The pressure of fuel measured by second rail pressure sensor in the metering rail 2 as delivered from the supply pump to the injector metering intake.
  uint16_t EngInjectorMeteringRail2Press2;  //      Bits=16.  [ 0     , 321275 ]  Unit:'kPa'   Factor= 5     
  uint32_t framecnt;
} EFIMRPI2_t;

// def @GFSVI CAN Message (352073470)
#define GFSVI_IDE (1U)
#define GFSVI_DLC (8U)
#define GFSVI_CANID (0x14FC36FEU)
#define GFSVI_CYC (500U)
// -- Gaseous Fuel Supply Valve Information  Used to transmit information on valves on the gaseous fuel supply lines.
// signal: @GasFuelSupplyShutoffValve1Pos
#define GasFuelSupplyShutoffValve1Pos_CovFactor 0.4
#define GasFuelSupplyShutoffValve1Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @GasFuelSupplyShutoffValve2Pos
#define GasFuelSupplyShutoffValve2Pos_CovFactor 0.4
#define GasFuelSupplyShutoffValve2Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @GasFuelSupplyBleedValve1Pos
#define GasFuelSupplyBleedValve1Pos_CovFactor 0.4
#define GasFuelSupplyBleedValve1Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @GasFuelSupplyBleedValve2Pos
#define GasFuelSupplyBleedValve2Pos_CovFactor 0.4
#define GasFuelSupplyBleedValve2Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @GasFuelSupplyBleedValve3Pos
#define GasFuelSupplyBleedValve3Pos_CovFactor 0.4
#define GasFuelSupplyBleedValve3Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @InertGasSupplyValvePos
#define InertGasSupplyValvePos_CovFactor 0.4
#define InertGasSupplyValvePos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Position of shutoff valve 1, which is used to control the flow of gaseous fuel through the fuel supply unit. 0% represents valve fully closed and 100% represents valve fully open.
  uint8_t GasFuelSupplyShutoffValve1Pos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Position of shutoff valve 2, which is used to control the flow of gaseous fuel through the fuel supply unit. 0% represents valve fully closed and 100% represents valve fully open.
  uint8_t GasFuelSupplyShutoffValve2Pos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Position of bleed valve 1, which is used to control the flow of gaseous fuel through the fuel supply unit. 0% represents valve fully closed and 100% represents valve fully open.
  uint8_t GasFuelSupplyBleedValve1Pos;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Position of bleed valve 2, which is used to control the flow of gaseous fuel through the fuel supply unit. 0% represents valve fully closed and 100% represents valve fully open.
  uint8_t GasFuelSupplyBleedValve2Pos;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Position of bleed valve 3, which is used to control the flow of gaseous fuel through the fuel supply unit. 0% represents valve fully closed and 100% represents valve fully open.
  uint8_t GasFuelSupplyBleedValve3Pos;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Position of inert gas supply valve used to control the flow of inert gas into the engine to purge the system.    0% represents valve fully closed and 100% represents valve fully open.
  uint8_t InertGasSupplyValvePos;          //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} GFSVI_t;

// def @EOMDI2 CAN Message (352073726)
#define EOMDI2_IDE (1U)
#define EOMDI2_DLC (8U)
#define EOMDI2_CANID (0x14FC37FEU)
#define EOMDI2_CYC (500U)
// -- Engine Oil Mist Detection Information 2  Used to transmit oil mist information determined by the engine monitoring system
typedef struct
{

  // Percentage of detected oil mist in compartment 9 compared to the lower explosion limit (LEL). 100% means the measured value is on the lower explosion limit,whereas 0% means no detected oil mist in the air.
  uint8_t EngOilMist9Concentration;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Percentage of detected oil mist in compartment 10 compared to the lower explosion limit (LEL). 100% means the measured value is on the lower explosion limit,whereas 0% means no detected oil mist in the air.
  uint8_t EngOilMist10Concentration;     //      Bits=08.  [ 0     , 250    ]  Unit:'%'    
  uint32_t framecnt;
} EOMDI2_t;

// def @EOMDI1 CAN Message (352073982)
#define EOMDI1_IDE (1U)
#define EOMDI1_DLC (8U)
#define EOMDI1_CANID (0x14FC38FEU)
#define EOMDI1_CYC (500U)
// -- Engine Oil Mist Detection Information 1  Used to transmit oil mist information determined by the engine monitoring system
typedef struct
{

  // Percentage of detected oil mist in compartment 1 compared to the lower explosion limit (LEL). 100% means the measured value is on the lower explosion limit, whereas 0% means no detected oil mist in the air. This measurement is typically taken in ...
  uint8_t EngOilMist1Concentration;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Percentage of detected oil mist in compartment 2 compared to the lower explosion limit (LEL). 100% means the measured value is on the lower explosion limit,whereas 0% means no detected oil mist in the air.
  uint8_t EngOilMist2Concentration;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Percentage of detected oil mist in compartment 3 compared to the lower explosion limit (LEL). 100% means the measured value is on the lower explosion limit,whereas 0% means no detected oil mist in the air.
  uint8_t EngOilMist3Concentration;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Percentage of detected oil mist in compartment 4 compared to the lower explosion limit (LEL). 100% means the measured value is on the lower explosion limit,whereas 0% means no detected oil mist in the air.
  uint8_t EngOilMist4Concentration;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Percentage of detected oil mist in compartment 5 compared to the lower explosion limit (LEL). 100% means the measured value is on the lower explosion limit,whereas 0% means no detected oil mist in the air.
  uint8_t EngOilMist5Concentration;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Percentage of detected oil mist in compartment 6 compared to the lower explosion limit (LEL). 100% means the measured value is on the lower explosion limit,whereas 0% means no detected oil mist in the air.
  uint8_t EngOilMist6Concentration;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Percentage of detected oil mist in compartment 7 compared to the lower explosion limit (LEL). 100% means the measured value is on the lower explosion limit,whereas 0% means no detected oil mist in the air.
  uint8_t EngOilMist7Concentration;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Percentage of detected oil mist in compartment 8 compared to the lower explosion limit (LEL). 100% means the measured value is on the lower explosion limit,whereas 0% means no detected oil mist in the air.
  uint8_t EngOilMist8Concentration;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    
  uint32_t framecnt;
} EOMDI1_t;

// def @GFSP2 CAN Message (352074238)
#define GFSP2_IDE (1U)
#define GFSP2_DLC (8U)
#define GFSP2_CANID (0x14FC39FEU)
#define GFSP2_CYC (500U)
// -- Gaseous Fuel Supply Pressure 2  Used to transmit information on pressures at various points of Gaseous fuel supplied to the engine.
// signal: @PlantGasFuelSupplyOutletPress
#define PlantGasFuelSupplyOutletPress_CovFactor 0.5
#define PlantGasFuelSupplyOutletPress_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @PlantInertGasSupplyOutletPress
#define PlantInertGasSupplyOutletPress_CovFactor 0.5
#define PlantInertGasSupplyOutletPress_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // Pressure of the gaseous fuel supplied from the plant room for one or more engines.  Based on the application, plant room will contain fuel tank for gas, vaporizer and heater and cooler compartments.
  uint16_t PlantGasFuelSupplyOutletPress;   //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // Pressure of the purge gas supplied to the engine. Inert gas is used to remove gaseous fuel build-up in the engines and in the fuel supply lines when gaseous fuel is not in operation.
  uint16_t PlantInertGasSupplyOutletPress;  //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   
  uint32_t framecnt;
} GFSP2_t;

// def @GFSP1 CAN Message (352074494)
#define GFSP1_IDE (1U)
#define GFSP1_DLC (8U)
#define GFSP1_CANID (0x14FC3AFEU)
#define GFSP1_CYC (500U)
// -- Gaseous Fuel Supply Pressure 1  Used to transmit information on pressures at various points of Gaseous fuel supplied to the engine.
// signal: @EngGasFuelSupplyPress2
#define EngGasFuelSupplyPress2_CovFactor 0.5
#define EngGasFuelSupplyPress2_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @GasFuelSupplyUnitIntakePress
#define GasFuelSupplyUnitIntakePress_CovFactor 0.5
#define GasFuelSupplyUnitIntakePress_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @GsFlSpplyShtoffValve1IntakePress
#define GsFlSpplyShtoffValve1IntakePress_CovFactor 0.5
#define GsFlSpplyShtoffValve1IntakePress_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @GsFlSpplyShtoffValve2IntakePress
#define GsFlSpplyShtoffValve2IntakePress_CovFactor 0.5
#define GsFlSpplyShtoffValve2IntakePress_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // Second gage pressure measurement of gaseous fuel supply to fuel metering device. If only one sensor is used for gas supply pressure measurement, use SPN 159 instead.
  uint16_t EngGasFuelSupplyPress2;            //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // Pressure of gaseous fuel supply measured at the intake of gaseous fuel supply unit. Gaseous fuel valve unit contains block and bleed valves to regulate the flow of gaseous fuel from the plant to engine.    Gas Supply Unit Intake Pressure
  uint16_t GasFuelSupplyUnitIntakePress;      //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // Pressure of gaseous fuel supply measured at shutoff valve 1 in gaseous fuel supply unit. Shutoff valves are used to regulate gaseous fuel supply to engine.
  uint16_t GsFlSpplyShtoffValve1IntakePress;  //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // Pressure of gaseous fuel supply measured at shutoff valve 2 in gaseous fuel supply unit. Shutoff valves are used to regulate gaseous fuel supply to engine.
  uint16_t GsFlSpplyShtoffValve2IntakePress;  //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   
  uint32_t framecnt;
} GFSP1_t;

// def @EFIMRPI1 CAN Message (352096510)
#define EFIMRPI1_IDE (1U)
#define EFIMRPI1_DLC (8U)
#define EFIMRPI1_CANID (0x14FC90FEU)
#define EFIMRPI1_CYC (500U)
// -- Engine Fuel Injector Metering Rail Pressure Information 1  Used to transmit the rail pressure information as measured by different rail pressure sensors.
// signal: @EngInjectorMeteringRail1Press1
#define EngInjectorMeteringRail1Press1_CovFactor 0.00390625
#define EngInjectorMeteringRail1Press1_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @EngInjectorMeteringRail1Press2
#define EngInjectorMeteringRail1Press2_CovFactor 0.00390625
#define EngInjectorMeteringRail1Press2_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @EngInjectorMeteringRail2Press1
#define EngInjectorMeteringRail2Press1_CovFactor 0.00390625
#define EngInjectorMeteringRail2Press1_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @EngInjectorMeteringRail2Press2
#define EngInjectorMeteringRail2Press2_CovFactor 0.00390625
#define EngInjectorMeteringRail2Press2_CovS(x) ((uint16_t)((x / 0.00390625)))
typedef struct
{

  // The pressure of fuel measured by first rail pressure sensor in the primary, or first, metering rail as delivered from the supply pump to the injector metering intake.  Note:  This is for the rail pressure from the 1st rail pressure sensor.  This may ...
  uint16_t EngInjectorMeteringRail1Press1;  //      Bits=16.  [ 0     , 250.996 ]  Unit:'MPa'   Factor= 0.00390625

  // The pressure of fuel measured by the second rail pressure sensor in the primary, or first, metering rail as delivered from the supply pump to the injector metering intake.  Note:  This is for the rail pressure from the 2nd rail pressure sensor ...
  uint16_t EngInjectorMeteringRail1Press2;  //      Bits=16.  [ 0     , 250.996 ]  Unit:'MPa'   Factor= 0.00390625

  // The pressure of fuel measured by first rail pressure sensor in the metering rail 2 as delivered from the supply pump to the injector metering intake.  Note:  This is for the rail pressure from the 1st rail pressure sensor.  This may be different ...
  uint16_t EngInjectorMeteringRail2Press1;  //      Bits=16.  [ 0     , 250.996 ]  Unit:'MPa'   Factor= 0.00390625

  // The pressure of fuel measured by second rail pressure sensor in the metering rail 2 as delivered from the supply pump to the injector metering intake.  Note:  This is for the rail pressure from the 2nd rail pressure sensor.  This may be different ...
  uint16_t EngInjectorMeteringRail2Press2;  //      Bits=16.  [ 0     , 250.996 ]  Unit:'MPa'   Factor= 0.00390625
  uint32_t framecnt;
} EFIMRPI1_t;

// def @VSL CAN Message (352098558)
#define VSL_IDE (1U)
#define VSL_DLC (8U)
#define VSL_CANID (0x14FC98FEU)
#define VSL_CYC (500U)
// -- Vehicle Speed Limiter  Vehicle speed limiter information, including Soft Top Speed Limit information
typedef struct
{

  // Indicates that the current Maximum Vehicle Speed Limit (SPN 74) has been temporarily increased to the Soft Top Speed Limit. Under certain conditions, the legal speed limit allowed by the Greenhouse Gas Regulations can be increased to a speed ...
  // 3 - "Not Available" 
  // 2 - "Reserved" 
  // 1 - "Soft Top Speed Limit is Active" 
  // 0 - "Soft Top Speed Limit is Inactive" 

  uint8_t SoftTopSpeedLimitActive;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Greenhouse Gas Regulations limit the overall distance that Soft Top Speed can be used in relation to the total distance traveled. This parameter indicates the allowable ratio has been exceeded and Soft Top Speed is unavailable. It will become ...
  // 3 - "Not Available" 
  // 2 - "Reserved" 
  // 1 - "Soft top ratio limit has been exceeded" 
  // 0 - "Soft top ratio limit has not been exceeded" 

  uint8_t SoftTopLifetimeLimitExceeded;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the remaining distance that the vehicle can travel at the Soft Top Speed Limit within the larger reset window. The reset window may be distance (possibly indicated by SPN 6373), time, or something else as determined by the manufacturer.   ...
  uint16_t SftTpSpeedLimitRemainingDistance;  //      Bits=16.  [ 0     , 64255  ]  Unit:'km'   

  // This parameter will decrement as long as the vehicle is moving. When this parameter reaches 0, it will be reset to its maximum value and continue to decrement.
  uint16_t SoftTopSpeedLimitResetDistance;    //      Bits=16.  [ 0     , 64255  ]  Unit:'km'   

  // Indicates the remaining distance that the vehicle can continuously travel at the Soft Top Speed Limit.  This parameter will decrement while the Soft Top Speed Limit Active (SPN 6370) is 1 and will reset to its maximum allowed value when the Soft Top ...
  uint16_t SftTpSpdLmtRmnngCntnsIntrvlDstnc;  //      Bits=16.  [ 0     , 64255  ]  Unit:'km'   
  uint32_t framecnt;
} VSL_t;

// def @ETAPC CAN Message (352099838)
#define ETAPC_IDE (1U)
#define ETAPC_DLC (8U)
#define ETAPC_CANID (0x14FC9DFEU)
#define ETAPC_CYC (1000U)
// -- Engine Timing Actuator Position Command  Used to trasmit the commanded position of Engine Timing actuator 1 and 2.
typedef struct
{

  // The commanded position of actuator 1 on the engine timing system by Engine Control Module.  The engine timing system has different timing positions and the timing positions may be used to determine intake and outlet valve timings.  000 - Reserved   ...
  // 7 - "Not Available" 
  // 4 - "Diesel Part Load / Gas Mode Position" 
  // 3 - "Gas Mode Position" 
  // 2 - "Diesel Part Load Position" 
  // 1 - "Diesel Mode Position" 
  // 0 - "Reserved" 

  uint8_t EngTimingActuator1PosCmd;      //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The commanded position of actuator 2 on the engine timing system by Engine Control Module.  The engine timing system has different timing positions and the timing positions may be used to determine intake and outlet valve timings.  000 - Reserved   ...
  // 7 - "Not Available" 
  // 4 - "Diesel Part Load / Gas Mode Position" 
  // 3 - "Gas Mode Position" 
  // 2 - "Diesel Part Load Position" 
  // 1 - "Diesel Mode Position" 
  // 0 - "Reserved" 

  uint8_t EngTimingActuator2PosCmd;      //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} ETAPC_t;

// def @ETAP CAN Message (352100094)
#define ETAP_IDE (1U)
#define ETAP_DLC (8U)
#define ETAP_CANID (0x14FC9EFEU)
#define ETAP_CYC (1000U)
// -- Engine Timing Actuator Position  Used to transmit position information of Engine Timing actuator 1 and 2
typedef struct
{

  // The detected position of actuator 1 on the Engine Timing System, where the system has different timing positions depending on current operating status of the engine. Timing positions may be used to determine intake and outlet valve timings.  000 - ...
  // 7 - "Not Available" 
  // 4 - "Diesel Part Load / Gas Mode Position" 
  // 3 - "Gas Mode Position" 
  // 2 - "Diesel Part Load Position" 
  // 1 - "Diesel Mode Position" 
  // 0 - "Unknown Position" 

  uint8_t EngTimingActuator1;               //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The detected position of actuator 2 on the Engine Timing System, where the system has different timing positions depending on current operating status of the engine. Timing positions may be used to determine intake and outlet valve timings.  000 - ...
  // 7 - "Not Available" 
  // 4 - "Diesel Part Load / Gas Mode Position" 
  // 3 - "Gas Mode Position" 
  // 2 - "Diesel Part Load Position" 
  // 1 - "Diesel Mode Position" 
  // 0 - "Unknown Position" 

  uint8_t EngTimingActuator2;               //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The requested position of actuator 1 on the Engine Timing System, as determined by external system such as operator, monitoring, or protection system. Requested position is sent to the Control Module sending the command the Engine Timing System ...
  // 7 - "Not Available" 
  // 4 - "Diesel Part Load / Gas Mode Position" 
  // 3 - "Gas Mode Position" 
  // 2 - "Diesel Part Load Position" 
  // 1 - "Diesel Mode Position" 
  // 0 - "Position Not Requested" 

  uint8_t EngTimingActuator1RequestedPos;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The requested position of actuator 2 on the Engine Timing System, as determined by external system such as operator, monitoring or protection system. Requested position is sent to the Control Module sending the command the Engine Timing System ...
  // 7 - "Not Available" 
  // 4 - "Diesel Part Load / Gas Mode Position" 
  // 3 - "Gas Mode Position" 
  // 2 - "Diesel Part Load Position" 
  // 1 - "Diesel Mode Position" 
  // 0 - "Position Not Requested" 

  uint8_t EngTimingActuator2RequestedPos;   //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} ETAP_t;

// def @ETC10 CAN Message (352108542)
#define ETC10_IDE (1U)
#define ETC10_DLC (8U)
#define ETC10_CANID (0x14FCBFFEU)
#define ETC10_CYC (100U)
// -- Electronic Transmission Controller #10  Electronic Transmission Controller #10
// signal: @TransClutch1ActuatorPercent
#define TransClutch1ActuatorPercent_CovFactor 0.4
#define TransClutch1ActuatorPercent_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransClutch2ActuatorPercent
#define TransClutch2ActuatorPercent_CovFactor 0.4
#define TransClutch2ActuatorPercent_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransHydPumpActuator1Percent
#define TransHydPumpActuator1Percent_CovFactor 0.4
#define TransHydPumpActuator1Percent_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransShiftActuator1Percent
#define TransShiftActuator1Percent_CovFactor 0.4
#define TransShiftActuator1Percent_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransShiftActuator2Percent
#define TransShiftActuator2Percent_CovFactor 0.4
#define TransShiftActuator2Percent_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransHydPumpActuator2Percent
#define TransHydPumpActuator2Percent_CovFactor 0.4
#define TransHydPumpActuator2Percent_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // The current modulated value for the transmission clutch 1 actuator, where 0% = no hydraulic pressure and 100% = full hydraulic pressure.
  uint8_t TransClutch1ActuatorPercent;        //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The current modulated value for the transmission clutch 2 actuator, where 0% = no hydraulic pressure and 100% = full hydraulic pressure.
  uint8_t TransClutch2ActuatorPercent;        //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The current modulated value for the actuator that controls the transmission hydraulic pump, where 0% = no hydraulic pressure and 100% = full hydraulic pressure.
  uint8_t TransHydPumpActuator1Percent;       //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The current modulated value for the transmission shift 1 actuator, where 0% = no hydraulic pressure and 100% = full hydraulic pressure.
  uint8_t TransShiftActuator1Percent;         //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The current modulated value for the transmission shift 2 actuator, where 0% = no hydraulic pressure and 100% = full hydraulic pressure.
  uint8_t TransShiftActuator2Percent;         //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Identifies the status of the actuator that cools transmission clutch 1.    00 = off  01 = on  10 = error  11 = not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t TrnsClutch1CoolingActuatorStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the actuator that cools transmission clutch 2.    00 = off  01 = on  10 = error  11 = not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t TrnsClutch2CoolingActuatorStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the actuator that moves the transmission shift rail identified as rail #1.    00 = off  01 = on  10 = error  11 = not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t TransShiftRail1ActuatorStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the actuator that moves the transmission shift rail identified as rail #2.    00 = off  01 = on  10 = error  11 = not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t TransShiftRail2ActuatorStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the actuator that moves the transmission shift rail identified as rail #3.    00 = off  01 = on  10 = error  11 = not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t TransShiftRail3ActuatorStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the actuator that moves the transmission shift rail identified as rail #4.    00 = off  01 = on  10 = error  11 = not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t TransShiftRail4ActuatorStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the actuator that moves the transmission shift rail identified as rail #5.    00 = off  01 = on  10 = error  11 = not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t TransShiftRail5ActuatorStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the actuator that moves the transmission shift rail identified as rail #6.    00 = off  01 = on  10 = error  11 = not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t TransShiftRail6ActuatorStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The current modulated value for actuator 2 that controls the transmission hydraulic pump, where 0% = no hydraulic pressure and 100% = full hydraulic pressure.
  uint8_t TransHydPumpActuator2Percent;       //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} ETC10_t;

// def @ETC11 CAN Message (352108798)
#define ETC11_IDE (1U)
#define ETC11_DLC (8U)
#define ETC11_CANID (0x14FCC0FEU)
#define ETC11_CYC (100U)
// -- Electronic Transmission Controller #11  Electronic Transmission Controller #11
// signal: @TransShiftRail1Pos
#define TransShiftRail1Pos_CovFactor 0.4
#define TransShiftRail1Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransShiftRail2Pos
#define TransShiftRail2Pos_CovFactor 0.4
#define TransShiftRail2Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransShiftRail3Pos
#define TransShiftRail3Pos_CovFactor 0.4
#define TransShiftRail3Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransShiftRail4Pos
#define TransShiftRail4Pos_CovFactor 0.4
#define TransShiftRail4Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransShiftRail5Pos
#define TransShiftRail5Pos_CovFactor 0.4
#define TransShiftRail5Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransShiftRail6Pos
#define TransShiftRail6Pos_CovFactor 0.4
#define TransShiftRail6Pos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // The current position of transmission shift rail identified as rail #1.
  uint8_t TransShiftRail1Pos;            //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The current position of transmission shift rail identified as rail #2.
  uint8_t TransShiftRail2Pos;            //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The current position of transmission shift rail identified as rail #3.
  uint8_t TransShiftRail3Pos;            //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The current position of transmission shift rail identified as rail #4.
  uint8_t TransShiftRail4Pos;            //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The current position of transmission shift rail identified as rail #5.
  uint8_t TransShiftRail5Pos;            //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The current position of transmission shift rail identified as rail #6.
  uint8_t TransShiftRail6Pos;            //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} ETC11_t;

// def @LLRE CAN Message (352120574)
#define LLRE_IDE (1U)
#define LLRE_DLC (8U)
#define LLRE_CANID (0x14FCEEFEU)
#define LLRE_CYC (200U)
// -- Land Leveling System Reference Elevation Data  This PGN will be used to communicate the reference elvation information for the land leveling system.  It will communicate the left and right blade offset data and left and right elevation deviation ...
// signal: @BladeElevationDeviationLeft
#define BladeElevationDeviationLeft_CovFactor 1
#define BladeElevationDeviationLeft_CovS(x) ((int32_t)(x + 32000))
// signal: @BladeElevationDeviationRight
#define BladeElevationDeviationRight_CovFactor 1
#define BladeElevationDeviationRight_CovS(x) ((int32_t)(x + 32000))
// signal: @BldeReferenceElevationOffsetLeft
#define BldeReferenceElevationOffsetLeft_CovFactor 1
#define BldeReferenceElevationOffsetLeft_CovS(x) ((int32_t)(x + 32000))
// signal: @BldReferenceElevationOffsetRight
#define BldReferenceElevationOffsetRight_CovFactor 1
#define BldReferenceElevationOffsetRight_CovS(x) ((int32_t)(x + 32000))
typedef struct
{

  // Indicate the blade's left elevation deviation with respect to the reference elevation.  Serves as an indication of how far the left end of the blade is above or below grade.  A positive number indicates that the blade is above the desired grade.  A ...
  int32_t BladeElevationDeviationLeft;        //      Bits=16.  [ -32000, 32255  ]  Unit:'mm'    Offset= -32000   

  // Indicate the blade's right elevation deviation with respect to the reference elevation.  Serves as an indication of how far the left end of the blade is above or below grade.  A positive number indicates that the blade is above the desired grade.  A ...
  int32_t BladeElevationDeviationRight;       //      Bits=16.  [ -32000, 32255  ]  Unit:'mm'    Offset= -32000   

  // Indicates the blade's left elevation offset with respect to the reference elevation.  An offset of 0 m represents no offset from the reference elevation.  A positive number indicates that the offset elevation is above the original reference ...
  int32_t BldeReferenceElevationOffsetLeft;   //      Bits=16.  [ -32000, 32255  ]  Unit:'mm'    Offset= -32000   

  // Indicates the blade's right elevation offset with respect to the reference elevation.  An offset of 0 m represents no offset from the reference elevation.  A positive number indicates that the offset elevation is above the original reference ...
  int32_t BldReferenceElevationOffsetRight;   //      Bits=16.  [ -32000, 32255  ]  Unit:'mm'    Offset= -32000   
  uint32_t framecnt;
} LLRE_t;

// def @EFL_P11 CAN Message (352120830)
#define EFL_P11_IDE (1U)
#define EFL_P11_DLC (8U)
#define EFL_P11_CANID (0x14FCEFFEU)
#define EFL_P11_CYC (500U)
// -- Engine Fluid Level/Pressure 11  Engine related parameters.
// signal: @EngExhstGsRcrcltn1IntakeAbsPress
#define EngExhstGsRcrcltn1IntakeAbsPress_CovFactor 0.1
#define EngExhstGsRcrcltn1IntakeAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngExhstGsRcrcltn1OutletAbsPress
#define EngExhstGsRcrcltn1OutletAbsPress_CovFactor 0.1
#define EngExhstGsRcrcltn1OutletAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngOilPress
#define EngOilPress_CovFactor 0.1
#define EngOilPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngFuelDeliveryPress
#define EngFuelDeliveryPress_CovFactor 0.1
#define EngFuelDeliveryPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // EGR intake absolute pressure measured before the EGR 1 valve.
  uint16_t EngExhstGsRcrcltn1IntakeAbsPress;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // EGR outlet absolute pressure is measured after the EGR 1 valve. See SPN 5019 for 1 byte resolution.
  uint16_t EngExhstGsRcrcltn1OutletAbsPress;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Gage pressure of oil in engine lubrication system as provided by oil pump. See SPN 100 for alternate resolution.
  uint16_t EngOilPress;                       //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Gage pressure of fuel in system as delivered from supply pump to the injection pump. See SPN 94 for alternate resolution.    See also SPN 5578 for Engine Fuel Delivery Absolute Pressure.
  uint16_t EngFuelDeliveryPress;              //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} EFL_P11_t;

// def @EMAP CAN Message (352123902)
#define EMAP_IDE (1U)
#define EMAP_DLC (8U)
#define EMAP_CANID (0x14FCFBFEU)
// -- Engine Manifold Actuator Position  Engine manifold actuator position parameters
// signal: @EngExhstMnfldBnk1FlwBlncVlvActtr
#define EngExhstMnfldBnk1FlwBlncVlvActtr_CovFactor 0.0025
#define EngExhstMnfldBnk1FlwBlncVlvActtr_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngExhstMnfldBnk2FlwBlncVlvActtr
#define EngExhstMnfldBnk2FlwBlncVlvActtr_CovFactor 0.0025
#define EngExhstMnfldBnk2FlwBlncVlvActtr_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // Actual percentage of maximum Engine Exhaust Manifold Bank 1 Balance valve opening. 0% means valve is closed. 100% means maximum valve opening (full gas flow).
  uint16_t EngExhstMnfldBnk1FlwBlncVlvActtr;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Actual percentage of maximum Engine Manifold Bank 2 Balance valve opening. 0% means valve is closed. 100% means maximum valve opening (full gas flow).
  uint16_t EngExhstMnfldBnk2FlwBlncVlvActtr;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} EMAP_t;

// def @EFL_P10 CAN Message (352125182)
#define EFL_P10_IDE (1U)
#define EFL_P10_DLC (8U)
#define EFL_P10_CANID (0x14FD00FEU)
#define EFL_P10_CYC (500U)
// -- Engine Fluid Level/Pressure 10  Engine related parameters
// signal: @EngExhstGsRcirculation2DiffPress
#define EngExhstGsRcirculation2DiffPress_CovFactor 0.0078125
#define EngExhstGsRcirculation2DiffPress_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngExhstGsRcrclation2IntakePress
#define EngExhstGsRcrclation2IntakePress_CovFactor 2
#define EngExhstGsRcrclation2IntakePress_CovS(x) ((uint8_t)((x / 2)))
// signal: @EngExhstGsRcrcltn2OutletAbsPress
#define EngExhstGsRcrcltn2OutletAbsPress_CovFactor 0.1
#define EngExhstGsRcrcltn2OutletAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngExhstGsRcrcltn2IntakeAbsPress
#define EngExhstGsRcrcltn2IntakeAbsPress_CovFactor 0.1
#define EngExhstGsRcrcltn2IntakeAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngCoolantPress2
#define EngCoolantPress2_CovFactor 2
#define EngCoolantPress2_CovS(x) ((uint8_t)((x / 2)))
typedef struct
{

  // Differential Pressure across the Exhaust Gas Recirculation 2 (EGR2) system.
  int32_t EngExhstGsRcirculation2DiffPress;   //      Bits=16.  [ -250  , 251.99 ]  Unit:'kPa'   Offset= -250      Factor= 0.0078125

  // EGR2 intake gauge pressure is measured after EGR2 cooler and before EGR2 valve
  uint8_t EngExhstGsRcrclation2IntakePress;   //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // Absolute Pressure immediately after the EGR2 valve
  uint16_t EngExhstGsRcrcltn2OutletAbsPress;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // EGR intake absolute pressure measured before the EGR 2 valve.
  uint16_t EngExhstGsRcrcltn2IntakeAbsPress;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Gage pressure of liquid found in the engine coolant system - second instance.    See SPN 7313 for alternate range and resolution.
  uint8_t EngCoolantPress2;                   //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     
  uint32_t framecnt;
} EFL_P10_t;

// def @OCSI CAN Message (352130814)
#define OCSI_IDE (1U)
#define OCSI_DLC (8U)
#define OCSI_CANID (0x14FD16FEU)
#define OCSI_CYC (5000U)
// -- Occupant Classification System Information  Message containing status of Occupant Classification System for driver, passenger and rear seating positions. The PGN becomes updated every time a Beltlock Status changes in the Beltlock and Airbag ...
typedef struct
{

  // State of Occupant Classification System for driver.    000 = empty  001 = child  010 = small adult  011 = adult  100 = large adult  101 = reserved  110 = Error - Classification of occupant cannot be determined  111 = not available
  // 7 - "not available" 
  // 6 - "Error" 
  // 5 - "reserved" 
  // 4 - "large adult" 
  // 3 - "adult" 
  // 2 - "small adult" 
  // 1 - "child" 
  // 0 - "empty" 

  uint8_t DrvrOccpntClssfctionSystemStatus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // State of Occupant Classification System for passenger.    000 = empty  001 = child  010 = small adult  011 = adult  100 = large adult  101 = Error - Classification of occupant cannot be determined  110 = reserved  111 = not available
  // 7 - "not available" 
  // 6 - "reserved" 
  // 5 - "Error" 
  // 4 - "large adult" 
  // 3 - "adult" 
  // 2 - "small adult" 
  // 1 - "child" 
  // 0 - "empty" 

  uint8_t PssngrOccpntClssfctnSystemStatus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // State of Occupant Classification System for seat position 3.    00 = empty  01 = occupied  10 = Error - Classification cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "occupied" 
  // 0 - "empty" 

  uint8_t OccpntClssificationSystem3Status;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Occupant Classification System for seat position 4.    00 = empty  01 = occupied  10 = Error - Classification cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "occupied" 
  // 0 - "empty" 

  uint8_t OccpntClssificationSystem4Status;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Occupant Classification System for seat position 5.    00 = empty  01 = occupied  10 = Error - Classification cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "occupied" 
  // 0 - "empty" 

  uint8_t OccpntClssificationSystem5Status;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Occupant Classification System for seat position 6.    00 = empty  01 = occupied  10 = Error - Classification cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "occupied" 
  // 0 - "empty" 

  uint8_t OccpntClssificationSystem6Status;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Occupant Classification System for seat position 7.    00 = empty  01 = occupied  10 = Error - Classification cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "occupied" 
  // 0 - "empty" 

  uint8_t OccpntClssificationSystem7Status;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Occupant Classification System for seat position 8.    00 = empty  01 = occupied  10 = Error - Classification cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "occupied" 
  // 0 - "empty" 

  uint8_t OccpntClssificationSystem8Status;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Occupant Classification System for seat position 9.    00 = empty  01 = occupied  10 = Error - Classification cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "occupied" 
  // 0 - "empty" 

  uint8_t OccpntClssificationSystem9Status;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Occupant Classification System for seat position 10.    00 = empty  01 = occupied  10 = Error - Classification cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "occupied" 
  // 0 - "empty" 

  uint8_t OccpntClssficationSystem10Status;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} OCSI_t;

// def @BDS CAN Message (352131070)
#define BDS_IDE (1U)
#define BDS_DLC (8U)
#define BDS_CANID (0x14FD17FEU)
#define BDS_CYC (250U)
// -- Beltlock and Airbag Deactivation Switch Information  Message containing Beltlock States and the Passener Airbag Deactivation Switch State.
typedef struct
{

  // State of switch used to determine if Driver Beltlock is buckled.    00 = unlocked  01 = locked  10 = Error - Beltlock state cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "locked" 
  // 0 - "unlocked" 

  uint8_t DriverBeltlockStatus;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of switch used to determine if Passenger Beltlock is buckled.    00 = unlocked  01 = locked  10 = Error - Beltlock state cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "locked" 
  // 0 - "unlocked" 

  uint8_t PassengerBeltlockStatus;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of switch used to determine if Beltlock 3 is buckled.    00 = unlocked  01 = locked  10 = Error - Beltlock state cannot be determined  11 = not available
  // 0 - "unlocked" 
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "locked" 

  uint8_t Beltlock3Status;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of switch used to determine if Beltlock 4 is buckled.    00 = unlocked  01 = locked  10 = Error - Beltlock state cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "locked" 
  // 0 - "unlocked" 

  uint8_t Beltlock4Status;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of switch used to determine if Beltlock 5 is buckled.    00 = unlocked  01 = locked  10 = Error - Beltlock state cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "locked" 
  // 0 - "unlocked" 

  uint8_t Beltlock5Status;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of switch used to determine if Beltlock 6 is buckled.    00 = unlocked  01 = locked  10 = Error - Beltlock state cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "locked" 
  // 0 - "unlocked" 

  uint8_t Beltlock6Status;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of switch used to determine if Beltlock 7 is buckled.    00 = unlocked  01 = locked  10 = Error - Beltlock state cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "locked" 
  // 0 - "unlocked" 

  uint8_t Beltlock7Status;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of switch used to determine if Beltlock 8 is buckled.    00 = unlocked  01 = locked  10 = Error - Beltlock state cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "locked" 
  // 0 - "unlocked" 

  uint8_t Beltlock8Status;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of switch used to determine if Beltlock 9 is buckled.    00 = unlocked  01 = locked  10 = Error - Beltlock state cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "locked" 
  // 0 - "unlocked" 

  uint8_t Beltlock9Status;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of switch used to determine if Beltlock 10 is buckled.    00 = unlocked  01 = locked  10 = Error - Beltlock state cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "locked" 
  // 0 - "unlocked" 

  uint8_t Beltlock10Status;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of switch used to deactivate Passenger Airbag manually.    00 = passenger airbag activated  01 = passenger airbag deactivated  10 = Error - State of deactivation switch cannot be determined  11 = not available
  // 3 - "not available" 
  // 2 - "Error" 
  // 1 - "passenger airbag deactivated" 
  // 0 - "passenger airbag activated" 

  uint8_t PssngrArbgDctivationSwitchStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} BDS_t;

// def @A1SCREGT1 CAN Message (352141054)
#define A1SCREGT1_IDE (1U)
#define A1SCREGT1_DLC (8U)
#define A1SCREGT1_CANID (0x14FD3EFEU)
#define A1SCREGT1_CYC (500U)
// -- Aftertreatment 1 SCR Exhaust Gas Temperature 1  This message contains SCR catalyst intake and outlet exhaust gas temperature information for aftertreatment system 1 (or bank 1).
// signal: @InTemp
#define InTemp_CovFactor 0.03125
#define InTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @OutTemp
#define OutTemp_CovFactor 0.03125
#define OutTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of engine combustion byproducts entering the SCR in exhaust bank 1.
  int32_t InTemp;                        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Used to identify the applicable J1939-73 FMI detected in the SCR intake temperature sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is ...
  uint8_t InTempPreliminaryFMI;          //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Temperature of engine combustion byproducts leaving the SCR outlet in exhaust bank 1.
  int32_t OutTemp;                       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Used to identify the applicable J1939-73 FMI detected in the SCR outlet temperature sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is ...
  uint8_t OutTempPreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} A1SCREGT1_t;

// def @EAI CAN Message (352146430)
#define EAI_IDE (1U)
#define EAI_DLC (8U)
#define EAI_CANID (0x14FD53FEU)
#define EAI_CYC (500U)
// -- Engine Average Information  Reports averaged engine information
// signal: @EngExhaustGasTempAverage
#define EngExhaustGasTempAverage_CovFactor 0.03125
#define EngExhaustGasTempAverage_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasTempAverageBank1
#define EngExhaustGasTempAverageBank1_CovFactor 0.03125
#define EngExhaustGasTempAverageBank1_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasTempAverageBank2
#define EngExhaustGasTempAverageBank2_CovFactor 0.03125
#define EngExhaustGasTempAverageBank2_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // The calculated average temperature based upon all of the engine exhaust port temperatures.  This is the average temperature based upon the exhaust port temperature measurements at each of the engine cylinders.  Notes:  Use SPN 173 - Engine Exhaust ...
  int32_t EngExhaustGasTempAverage;        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // The calculated average temperature based upon all of the Bank 1 (left bank) engine exhaust port temperatures.  This is the average temperature based upon the exhaust port temperature measurements of each of the engine cylinders on the left bank ...
  int32_t EngExhaustGasTempAverageBank1;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // The calculated average temperature based upon all of the Bank 2 (right bank) engine exhaust port temperatures.  This is the average temperature based upon the exhaust port temperature measurements of each of the engine cylinders on the right bank ...
  int32_t EngExhaustGasTempAverageBank2;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} EAI_t;

// def @GCVW CAN Message (352151806)
#define GCVW_IDE (1U)
#define GCVW_DLC (8U)
#define GCVW_CANID (0x14FD68FEU)
// -- Gross Combination Vehicle Weight  Gross Combination Vehicle Weight
// signal: @GrossCombinationWeight
#define GrossCombinationWeight_CovFactor 2
#define GrossCombinationWeight_CovS(x) ((uint32_t)((x / 2)))
// signal: @NetVehicleWeightChange
#define NetVehicleWeightChange_CovFactor 2
#define NetVehicleWeightChange_CovS(x) ((int32_t)((x / 2) + 8224767))
typedef struct
{

  // Total weight of the truck and all the trailers with on-board scales.
  uint32_t GrossCombinationWeight;       //      Bits=24.  [ 0     , 32899070 ]  Unit:'kg'    Factor= 2     

  // Identifies the net vehicle weight change from the time of last vehicle net weight zeroing.
  int32_t NetVehicleWeightChange;        //      Bits=24.  [ -16449535, 16449535 ]  Unit:'kg'    Offset= -16449535 Factor= 2     
  uint32_t framecnt;
} GCVW_t;

// def @AGW CAN Message (352152318)
#define AGW_IDE (1U)
#define AGW_DLC (8U)
#define AGW_CANID (0x14FD6AFEU)
// -- Axle Group Weight  Combination of specific axle group and the weight imposed on that axle group.
// signal: @AxleGroupWeight
#define AxleGroupWeight_CovFactor 2
#define AxleGroupWeight_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // Specific axle group used in conjunction with and when communicating the axle group weight, listed from the front of the vehicle to the rear.  If the value of SPN 5935 is 15, then this SPN is used to indicate the axle group referred to by this PGN ...
  // 15 - "Reserved" 
  // 14 - "Additional trailer axle group" 
  // 13 - "Trailer H axle group" 
  // 12 - "Trailer G axle group" 
  // 11 - "Trailer F axle group" 
  // 10 - "Trailer E axle group" 
  // 9 - "Trailer D axle group" 
  // 8 - "Trailer C axle group" 
  // 7 - "Trailer B axle group" 
  // 6 - "Trailer A axle group" 
  // 5 - "Additional tractor axle group" 
  // 4 - "Tag axle group" 
  // 3 - "Sole or Forward-most Drive axle group" 
  // 2 - "Lift axle group" 
  // 1 - "Sole or Forward-most Steer axle group" 
  // 0 - "Reserved" 

  uint8_t AxleGroupLocation;             //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Location of the axle group, listed from front of the vehicle to rear.  If the value of SPN 4073 is 15, then this SPN is used to indicate the axle group referred to by this PGN. Otherwise, this SPN should be broadcast as 15.  0 = Reserved  1 = Rear ...
  // 2 - "Rear Drive axle group" 
  // 1 - "Rear Steer axle group" 
  // 0 - "Reserved" 

  uint8_t AdditionalAxleGroupLocation;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Total mass imposed on the road surface by all the tires in the axle group
  uint16_t AxleGroupWeight;              //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     
  uint32_t framecnt;
} AGW_t;

// def @EGRBV CAN Message (352158206)
#define EGRBV_IDE (1U)
#define EGRBV_DLC (8U)
#define EGRBV_CANID (0x14FD81FEU)
#define EGRBV_CYC (500U)
// -- EGR Cooler Bypass  Contains information about the EGR Cooler Bypass
// signal: @EGR1CoolerBypassActuatorPostion
#define EGR1CoolerBypassActuatorPostion_CovFactor 0.4
#define EGR1CoolerBypassActuatorPostion_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // The parameter gives the % open of the exhaust gas recirculation cooler bypass actuator, where 0% = Fully Closed (no gas flowing through the bypass), and 100% = Fully Open.
  uint8_t EGR1CoolerBypassActuatorPostion;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} EGRBV_t;

// def @EBS11 CAN Message (402849534)
#define EBS11_IDE (1U)
#define EBS11_DLC (8U)
#define EBS11_CANID (0x1802FEFEU)
#define EBS11_CYC (10U)
// -- Electronic Brake System #1/1  Message to transmit data of the towing vehicle to the towed vehicle. See ISO 11992-2.
// signal: @ServiceBrakeDemandValue
#define ServiceBrakeDemandValue_CovFactor 0.01953125
#define ServiceBrakeDemandValue_CovS(x) ((uint16_t)((x / 0.01953125)))
// signal: @ParkBrakeDemandValue
#define ParkBrakeDemandValue_CovFactor 0.4
#define ParkBrakeDemandValue_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @RetarderDemandValue
#define RetarderDemandValue_CovFactor 1
#define RetarderDemandValue_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // Signal indicating the ABS is active/passive.
  // 1 - "Active" 
  // 0 - "Passiv, but installed" 

  uint8_t VehicleABSActive;              //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // This signal indicates the active/passive state in all cases when the installed retarder is applied by the driver?s demand or by other systems (brakes).
  // 1 - "Active" 
  // 0 - "Passive" 

  uint8_t VehicleRetarderCtrlActive;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates that ASR brake control is active/passive.
  // 1 - "Active" 
  // 0 - "Passive, but installed" 

  uint8_t ASRBreakControlActive;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates that ASR engine control is active/passive.
  // 3 - "NotAvailable" 
  // 2 - "Reserved" 
  // 1 - "ASREngineControlActive" 
  // 0 - "ASREngnCntrlPassiveButInstalled" 

  uint8_t ASREngineControlActive;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates that the brake pedal is being pressed.
  // 1 - "Switch on" 
  // 0 - "Switch off" 

  uint8_t BrakeLightSwitch;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Information to identify a dolly axle within the road train.
  // 1 - "Dolly axle" 
  // 0 - "Towing or towed vehicle" 

  uint8_t VehicleType;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The requested brake pressure value of the service brake demanded by the driver.
  uint16_t ServiceBrakeDemandValue;      //      Bits=16.  [ 0     , 1255   ]  Unit:'kPa'   Factor= 0.01953125

  // The requested brake pressure value of the parking brake as a percentage of maximum.
  uint8_t ParkBrakeDemandValue;          //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The demanded value of the retarder on the towed vehicle(s) as a percentage of the absolute peak torque of retarder.
  int16_t RetarderDemandValue;           //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     
  uint32_t framecnt;
} EBS11_t;

// def @EBS21 CAN Message (402915070)
#define EBS21_IDE (1U)
#define EBS21_DLC (8U)
#define EBS21_CANID (0x1803FEFEU)
#define EBS21_CYC (10U)
// -- Electronic Brake System #2/1  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-2.
// signal: @Wheel_BasedVehicleSpeed
#define Wheel_BasedVehicleSpeed_CovFactor 0.00390625
#define Wheel_BasedVehicleSpeed_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @ActualRetarderPercTorque
#define ActualRetarderPercTorque_CovFactor 1
#define ActualRetarderPercTorque_CovS(x) ((int16_t)(x + 125))
// signal: @WheelSpeedDiffMainAxle
#define WheelSpeedDiffMainAxle_CovFactor 0.00390625
#define WheelSpeedDiffMainAxle_CovS(x) ((int32_t)((x / 0.00390625) + 32000))
typedef struct
{

  // Signal indicating the ABS is active/passive.
  // 1 - "Active" 
  // 0 - "Passiv, but installed" 

  uint8_t VehicleABSActive;              //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // This signal indicates the active/passive state in all cases when the installed retarder is applied by the driver?s demand or by other systems (brakes).
  // 1 - "Active" 
  // 0 - "Passive" 

  uint8_t VehicleRetarderCtrlActive;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal indicating the service brake of the towed vehicle is active/passive, by observing the brake pressure.
  // 1 - "Active" 
  // 0 - "Passive" 

  uint8_t VehicleServiceBrakeActive;     //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal indicating the automatic towed vehicle braking is active/passive.
  // 1 - "Active" 
  // 0 - "Passive" 

  uint8_t AutomTowedVehBreakActive;      //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates that Vehicle Dynamic Control (VDC) is active/passive.
  // 1 - "Active" 
  // 0 - "Passive, but installed" 

  uint8_t VDCActive;                     //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal indicating the trailer is requesting to be braked by the commercial vehicle by means of bleeding the pneumatic supply line.
  // 1 - "Supply line braking request" 
  // 0 - "No supply line braking request" 

  uint8_t SupplyLineBrakingRequest;      //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Actual speed of the vehicle (positive value for forward and backward speed) calculated as the average of the wheel speeds of one axle influenced by slip and filtered by a frequency range of 5 Hz to 20 Hz.
  uint16_t Wheel_BasedVehicleSpeed;      //      Bits=16.  [ 0     , 251    ]  Unit:'km/hr' Factor= 0.00390625

  // Actual torque of the retarder as negative percentage of maximum.
  int16_t ActualRetarderPercTorque;      //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // Difference between the wheel speed at the right side and and the left side of the main axle.
  int32_t WheelSpeedDiffMainAxle;        //      Bits=16.  [ -125  , 125    ]  Unit:'km/hr' Offset= -125      Factor= 0.00390625
  uint32_t framecnt;
} EBS21_t;

// def @CAM11 CAN Message (403046142)
#define CAM11_IDE (1U)
#define CAM11_DLC (8U)
#define CAM11_CANID (0x1805FEFEU)
// -- CANopen Application Message #1/1  Message to transmit data of the towing vehicle to the towed vehicle. See ISO 11992-3.
typedef struct
{
  uint32_t framecnt;
} CAM11_t;

// def @CAM21 CAN Message (403111678)
#define CAM21_IDE (1U)
#define CAM21_DLC (8U)
#define CAM21_CANID (0x1806FEFEU)
// -- CANopen Application Message #2/1  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-3.
typedef struct
{
  uint32_t framecnt;
} CAM21_t;

// def @GPV4 CAN Message (403177214)
#define GPV4_IDE (1U)
#define GPV4_DLC (8U)
#define GPV4_CANID (0x1807FEFEU)
#define GPV4_CYC (100U)
// -- General Purpose Valve Pressure  The measured load sense pressure and pilot pressure of a valve.  May also include the load sense and supply pressure for a valve assembly, when available.
// signal: @ValveLoadSensePress
#define ValveLoadSensePress_CovFactor 5
#define ValveLoadSensePress_CovS(x) ((uint16_t)((x / 5)))
// signal: @ValvePilotPress
#define ValvePilotPress_CovFactor 16
#define ValvePilotPress_CovS(x) ((uint8_t)((x / 16)))
// signal: @ValveAssemblyLoadSensePress
#define ValveAssemblyLoadSensePress_CovFactor 5
#define ValveAssemblyLoadSensePress_CovS(x) ((uint16_t)((x / 5)))
// signal: @ValveAssemblySupplyPress
#define ValveAssemblySupplyPress_CovFactor 5
#define ValveAssemblySupplyPress_CovS(x) ((uint16_t)((x / 5)))
typedef struct
{

  // The maximum of the currently measured pressures of a valve's work port A and work port B.
  uint16_t ValveLoadSensePress;          //      Bits=16.  [ 0     , 321275 ]  Unit:'kPa'   Factor= 5     

  // Pressure of a valve's pilot supply port.
  uint8_t ValvePilotPress;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa'   Factor= 16    

  // The maximum pressure of a valve assembly's current collective load sense pressures where a valve assembly can consist of two or more valves.
  uint16_t ValveAssemblyLoadSensePress;  //      Bits=16.  [ 0     , 321275 ]  Unit:'kPa'   Factor= 5     

  // Pressure of the hydraulic supply port to a valve assembly.
  uint16_t ValveAssemblySupplyPress;     //      Bits=16.  [ 0     , 321275 ]  Unit:'kPa'   Factor= 5     
  uint32_t framecnt;
} GPV4_t;

// def @EEC16 CAN Message (403504894)
#define EEC16_IDE (1U)
#define EEC16_DLC (8U)
#define EEC16_CANID (0x180CFEFEU)
#define EEC16_CYC (50U)
// -- Electronic Engine Controller 16
// signal: @AccelPedalPos3
#define AccelPedalPos3_CovFactor 0.4
#define AccelPedalPos3_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // The ratio of actual position of the third analog engine speed/torque request input device (such as an accelerator pedal or throttle lever) to the maximum position of the input device.  This parameter is intended for the third accelerator control in ...
  uint8_t AccelPedalPos3;                //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} EEC16_t;

// def @TSIC CAN Message (411041534)
#define TSIC_IDE (1U)
#define TSIC_DLC (8U)
#define TSIC_CANID (0x187FFEFEU)
// -- Tire Sensor Identification Command  The tire sensor identification number command for each monitored tire.  The command will be used to program sensor identification numbers for individual tire. Since there are multiple tire sensors to report, the ...
typedef struct
{

  // Total count of monitored tire sensor identification numbers represented in this instance of the parameter group.
  uint8_t NumOfTireSensors;              //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // The number of the monitored tire that corresponds with the tire sensor identification number SPN 7586. In order to specify the monitored tire by location, use the tire location SPN 7585.    The value 0xFF indicates this SPN is not used.
  uint8_t Num;                           //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // The location of monitored tire that corresponds with the tire sensor identification number SPN 7586. In order to specify the monitored tire by tire number, use the tire number SPN 7584.  The high order 4 bits indicate the vehicle axle position of ...
  uint8_t Location;                      //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The identification number of tire sensor for the tire specified in the tire sensor tire number (SPN 7584) or tire sensor location (SPN 7585).
  uint8_t Num7586;                       //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} TSIC_t;

// def @HSC1 CAN Message (411107070)
#define HSC1_IDE (1U)
#define HSC1_DLC (8U)
#define HSC1_CANID (0x1880FEFEU)
#define HSC1_CYC (1000U)
// -- Hybrid System Control 1  This messages is sent to the hybrid system to control hybrid related features.
typedef struct
{

  // Indicates the hybrid system protection override request state.  This request allows overriding of hybrid system protection  features and failure modes allowing hybrid systems to continue to operate, if possible. This is not the physical switch that ...
  // 3 - "Don't care / take no action" 
  // 2 - "Reserved" 
  // 1 - "Active" 
  // 0 - "Not active" 

  uint8_t HybridSystemProtectionOverrideRq;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the Hybrid System Disable Request state.  The signal gives network controllers the ability to disable the propulsion aspect of hybrid system operation when this request is on.  However, hybrid powered accessories may be on and the engine ...
  // 3 - "Don't Care / Take No Action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t PropulsionDisableReq;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the hybrid system regenerative braking disable request state.  This signal gives network controllers the ability to disable all regenerative braking.  This is not the operator controlled switch that performs regenerative braking disable ...
  // 3 - "Don't care / take no action" 
  // 2 - "Reserved" 
  // 1 - "Regenerative braking disable request is active" 
  // 0 - "Regenerative braking disable request is not active" 

  uint8_t HybrdSystmRgnrtvBrakingDisableRq;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the Hybrid System Shutdown Request state.  The signal gives network controllers the ability to disable all hybrid system functionality including propulsion, regenerative braking, and hybrid powered accessories.  For electric hybrids, the ...
  // 3 - "Don't Care / Take No Action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t ShutdownCmd;                        //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} HSC1_t;

// def @AFTSC CAN Message (411172606)
#define AFTSC_IDE (1U)
#define AFTSC_DLC (8U)
#define AFTSC_CANID (0x1881FEFEU)
#define AFTSC_CYC (1000U)
// -- Aftertreatment System Control  Used to request the aftertreatment system to perform or inhibit certain operations.
typedef struct
{

  // Provides state of inhibit request for Aftertreatment thermal management from external system.  Aftertreatment Thermal Management indicates that the exhaust temperatures have been controlled for expected functioning of the aftertreatment system - ...
  // 3 - "Not Available" 
  // 2 - "Reserved for SAE assignment" 
  // 1 - "Inhibit" 
  // 0 - "Do not inhibit" 

  uint8_t ThermalManagementInhReq;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // A request to permit the DEF hydraulic stiffness check. The request continues to be broadcast until the stiffness check is finished or the corresponding permission status indicates an error.  00 = no request  01 = request to permit DEF hydraulic ...
  // 3 - "don't care" 
  // 2 - "reserved" 
  // 1 - "request to permit DEF hydraulic stiffness check or stiffness check is running" 
  // 0 - "no request" 

  uint8_t RqToPermitDEFHydStiffnessCheck;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // A request to permit the DEF dosing test injection. The request continues to be broadcast until the test injection is finished or the corresponding permission status indicates an error.  000 = no request  001 = request to permit DEF Dosing Test ...
  // 7 - "don't care" 
  // 2 - "urgent request to permit DEF Dosing Test Injection or test injection is running" 
  // 1 - "request to permit DEF Dosing Test Injection or test injection is running" 
  // 0 - "no request" 

  uint8_t RqToPermitDEFDosingTestInjection;   //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} AFTSC_t;

// def @TCCI CAN Message (411238142)
#define TCCI_IDE (1U)
#define TCCI_DLC (8U)
#define TCCI_CANID (0x1882FEFEU)
// -- Tire Configuration Command Information  Details the attributes for the tire monitoring settings for the tires.
// signal: @UndrPrssPrcntageThresholdSetting
#define UndrPrssPrcntageThresholdSetting_CovFactor 0.5
#define UndrPrssPrcntageThresholdSetting_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @ExtrmUndrPrssPrcntgThrshldStting
#define ExtrmUndrPrssPrcntgThrshldStting_CovFactor 0.5
#define ExtrmUndrPrssPrcntgThrshldStting_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @OvrPrssPrcentageThresholdSetting
#define OvrPrssPrcentageThresholdSetting_CovFactor 0.5
#define OvrPrssPrcentageThresholdSetting_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @OverTempSetting
#define OverTempSetting_CovFactor 1
#define OverTempSetting_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // The location of monitored tire on the vehicle.  The high order 4 bits indicate the vehicle axle position of the tire, counting front to back on the vehicle, with the value 0 representing the front axle on the vehicle. If the upper 4 bits have a ...
  uint8_t TireLocation;                       //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Configurable value of the cold inflation pressure of the tire. Cold inflation pressure is the default/reference inflation pressure suggested by the manufacturer for a specific tire.
  uint16_t ColdInflationPressSetting;         //      Bits=16.  [ 0     , 64255  ]  Unit:'kPa'  

  // Configurable percent deviation from the set cold inflation pressure, for the under tire pressure alert.
  uint8_t UndrPrssPrcntageThresholdSetting;   //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Factor= 0.5   

  // Configurable percent deviation from the set cold inflation pressure, for the extreme under tire pressure alert.
  uint8_t ExtrmUndrPrssPrcntgThrshldStting;   //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Factor= 0.5   

  // Configurable percentage deviation from the set cold inflation pressure, for the over tire pressure alert.
  uint8_t OvrPrssPrcentageThresholdSetting;   //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Factor= 0.5   

  // Configurable constant temperature above which an over temperature alert will trigger.
  int16_t OverTempSetting;                    //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Command signal used to enable/disable the tire sensor. On receipt of this command, the tire sensor may either be enabled or disabled.    00 Off / Isolate / Disable  01 On / Enable  10 Reserved / Not Defined  11 Don?t Care / Take No Action
  // 3 - "Don?t Care / Take No Action" 
  // 2 - "Reserved / Not Defined" 
  // 1 - "On / Enable" 
  // 0 - "Off / Isolate / Disable" 

  uint8_t SnsrEnableSetting;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} TCCI_t;

// def @PCIC CAN Message (411303678)
#define PCIC_IDE (1U)
#define PCIC_DLC (8U)
#define PCIC_CANID (0x1883FEFEU)
// -- Payload Calibration Information Command  Calibration setting commands for the Payload Measurement System.
// signal: @PayloadCalibCommandedWeight
#define PayloadCalibCommandedWeight_CovFactor 2
#define PayloadCalibCommandedWeight_CovS(x) ((uint16_t)((x / 2)))
// signal: @PayloadCorrectionFactorCmd
#define PayloadCorrectionFactorCmd_CovFactor 1
#define PayloadCorrectionFactorCmd_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // Specifies the current payload point being calibrated. The data specified in the 'Payload Calibration Commanded Weight' SPN (SPN 6872) or 'Payload Correction Factor Command' SPN (SPN 6873) shall be used for calibrating this specified payload point ...
  // 15 - "Not Available" 
  // 14 - "Error" 
  // 13 - "Reserved" 
  // 12 - "Reset Calibration" 
  // 11 - "Correction Point" 
  // 10 - "End Point" 
  // 9 - "Calibration Reference Point 9" 
  // 8 - "Calibration Reference Point 8" 
  // 7 - "Calibration Reference Point 7" 
  // 6 - "Calibration Reference Point 6" 
  // 5 - "Calibration Reference Point 5" 
  // 4 - "Calibration Reference Point 4" 
  // 3 - "Calibration Reference Point 3" 
  // 2 - "Calibration Reference Point 2" 
  // 1 - "Calibration Reference Point 1" 
  // 0 - "Zero Point" 

  uint8_t PayloadCalibSetPointCmd;       //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The true known mass of real load weight applicable for the calibration point specified in SPN 6871 and used for calibrating Payload system.  Multipoint calibration of the Payload Measurement system is perfomed by loading the machine with up to 10 ...
  uint16_t PayloadCalibCommandedWeight;  //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     

  // The payload correction factor is used to fine tune the sensor gain value.  Correction factor calibration of the Payload Measurement system is performed through a Payload Calibration Set Point SPN value of Correction Point and the Payload Correction ...
  int16_t PayloadCorrectionFactorCmd;    //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     
  uint32_t framecnt;
} PCIC_t;

// def @AFT1PSC CAN Message (411369214)
#define AFT1PSC_IDE (1U)
#define AFT1PSC_DLC (8U)
#define AFT1PSC_CANID (0x1884FEFEU)
#define AFT1PSC_CYC (200U)
// -- Aftertreatment 1 Particulate Sensor Control  This PGN contains parameters used to control the particulate sensor and to provide data that the particulate sensor needs to operate.
// signal: @ExhTemp
#define ExhTemp_CovFactor 0.03125
#define ExhTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @ExhVelocity
#define ExhVelocity_CovFactor 0.00390625
#define ExhVelocity_CovS(x) ((uint16_t)((x / 0.00390625)))
typedef struct
{

  // Aftertreatment 1 particulate sensor shutdown request.    00 - Shutdown request not active  01 - Shutdown request active  10 - SAE reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "SAE reserved" 
  // 1 - "Shutdown request active" 
  // 0 - "Shutdown request not active" 

  uint8_t ShutdownReq;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Another ECU would send this to request that the particulate sensor perform a regeneration of the sensor.  A request would be considered active when this parameter transitions from 00 to 01.  00 - Regeneration not requested  01 - Regeneration ...
  // 3 - "Not available" 
  // 2 - "SAE reserved" 
  // 1 - "Regeneration requested" 
  // 0 - "Regeneration not requested" 

  uint8_t RegenReq;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the temperature near the particulate sensor has exceeded the dew point.    00 - Dewpoint has not been reached  01 - Dewpoint has been reached  10 - SAE reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "SAE reserved" 
  // 1 - "Dewpoint has been reached" 
  // 0 - "Dewpoint has not been reached" 

  uint8_t Dewpoint;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This is the temperature in the exhaust stream that is closest to the particulate sensor. This could be a calculated value or read from another sensor. The ECU transmitting this message to the particulate sensor controller will be aware of the ...
  int32_t ExhTemp;                       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Velocity of the exhaust gas near the particulate sensor.
  uint16_t ExhVelocity;                  //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/h'  Factor= 0.00390625
  uint32_t framecnt;
} AFT1PSC_t;

// def @CM2 CAN Message (411434750)
#define CM2_IDE (1U)
#define CM2_DLC (8U)
#define CM2_CANID (0x1885FEFEU)
#define CM2_CYC (1000U)
// -- Cab Message 2  Message containing parameters originating from the vehicle cab.
// signal: @EngFan2RequestedPercentSpeed
#define EngFan2RequestedPercentSpeed_CovFactor 0.4
#define EngFan2RequestedPercentSpeed_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @PerformanceBiasSelection
#define PerformanceBiasSelection_CovFactor 0.4
#define PerformanceBiasSelection_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @PrdctvCriseCtrlMaxPositiveOffset
#define PrdctvCriseCtrlMaxPositiveOffset_CovFactor 0.125
#define PrdctvCriseCtrlMaxPositiveOffset_CovS(x) ((uint8_t)((x / 0.125)))
// signal: @PrdctvCriseCtrlMaxNegativeOffset
#define PrdctvCriseCtrlMaxNegativeOffset_CovFactor 0.125
#define PrdctvCriseCtrlMaxNegativeOffset_CovS(x) ((int16_t)((x / 0.125) + 250))
typedef struct
{

  // Fan speed of the second fan in the system as a ratio of the actual fan drive (current speed) to the fully engaged fan drive (maximum fan speed). A two state fan (off/on) will use 0% and 100% respectively.  A three state fan (off/intermediate/on) ...
  uint8_t EngFan2RequestedPercentSpeed;       //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Indicates the operating bias toward performance of the power source.  0% Functionality is biased toward fuel economy as much as possible.  50% Functionality is biased toward neither fuel economy or performance.  100% Functionality is biased toward ...
  uint8_t PerformanceBiasSelection;           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The position of the operator inducement override switch. This switch function allows the operator to override an operator inducement derate.  See EU Commission directive 2012/46/EU. Appendix 1 Section 5.5 for more information.  00 Off  01 On  10 ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t SCROprtrInducementOverrideSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of a switch available to the operator that will inhibit the system from purging the debris from the heat exchanger.  00   not active  01   active  10   error  11   not available  This SPN would be ?not active? when purging the ...
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t HtExchngrDbrisPurgeInhibitSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of a switch available to the operator that forces the system to purge the debris from the heat exchanger.  00   not active  01   active  10   error  11   not available  This SPN would be ?not active? when purging the debris from ...
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t HtExchngerDebrisPurgeForceSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether predictive cruise control (PCC) is enabled. When not enabled, the predictive cruise control does not calculate a speed offset or identify predictive cruise events, and the predictive cruise control state (SPN 7317) shall not be ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Predictive cruise control is enabled" 
  // 0 - "Predictive cruise control is not enabled" 

  uint8_t PredictiveCruiseCtrlEnableSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the operator has requested to deactivate the predictive cruise control (PCC) function.  If enabled, the PCC device may still provide notification of events in range, road grade, and other information. But if requested to be ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Predictive cruise control is requested to be deactived" 
  // 0 - "Predictive cruise control is not requested to be deactived" 

  uint8_t PrdctiveCruiseCtrlDeactivationRq;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of a switch to indicate the control system is permitted to automatically elevate the engine speed as needed for strategies such as cold mode, aftertreatment regeneration, etc. This is not a direct command to increase the engine ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Allowed to elevate engine speed" 
  // 0 - "Not allowed to elevate engine speed" 

  uint8_t ElevatedEngSpdAllowedSw;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // If this parameter is 01, then the aftertreatment control system is permitted to perform an aftertreatment regeneration, but the aftertreatment control system is not allowed to take control of the engine speed for the purposes of regeneration. A ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Aftertreatment regeneration is allowed when engine speed exceeds regeneration threshold" 
  // 0 - "Aftertreatment regeneration is not allowed when engine speed exceeds regeneration threshold" 

  uint8_t AFTRegenEngSpdAllowedSw;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Maximum speed increase that the predictive cruise control (PCC) is allowed to request. This may be adjusted by the operator (either directly or indirectly) to tailor the performance of the PCC system.  This parameter is used in conjunction with ...
  uint8_t PrdctvCriseCtrlMaxPositiveOffset;   //      Bits=08.  [ 0     , 31.25  ]  Unit:'km/h'  Factor= 0.125 

  // Maximum speed decrease that the predictive cruise control (PCC) is allowed to request. This may be adjusted by the operator (either directly or indirectly) to tailor the performance of the PCC system.  This parameter is used in conjunction with ...
  int16_t PrdctvCriseCtrlMaxNegativeOffset;   //      Bits=08.  [ -31.25, 0      ]  Unit:'km/h'  Offset= -31.25    Factor= 0.125 

  // This enable switch is for optional use with interfaces using SPN 7695 [Transmission Auto-Neutral (Manual Return) Request] or another vehicle input configured for Auto-Neutral (Manual Return) functionality. When supported by the vehicle system and ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransAutoNeutralEnableSw;           //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} CM2_t;

// def @SPOC CAN Message (411500286)
#define SPOC_IDE (1U)
#define SPOC_DLC (8U)
#define SPOC_CANID (0x1886FEFEU)
#define SPOC_CYC (100U)
// -- Switched Power Outputs Command  The switched power outputs command is sent to the Power Distribution Module (PDM) to change the state of the PDM's switched power outputs.  This command is sent to the PDM as needed to change the power outputs, but no ...
typedef struct
{

  // Desired state of Switched Power Output #4. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput4Cmd;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #3. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput3Cmd;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #2. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput2Cmd;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #1. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput1Cmd;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #8. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput8Cmd;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #7. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput7Cmd;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #6. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput6Cmd;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #5. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput5Cmd;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #12. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput12Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #11. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput11Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #10. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput10Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #9. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput9Cmd;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #16. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput16Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #15. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput15Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #14. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput14Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #13. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput13Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #20. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput20Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #19. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput19Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #18. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput18Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #17. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput17Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #24. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput24Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #23. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput23Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #22. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput22Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #21. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput21Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #28. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput28Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #27. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput27Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #26. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput26Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #25. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput25Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #32. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput32Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #31. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput31Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #30. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput30Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Desired state of Switched Power Output #29. Used to set the desired state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedPowerOutput29Cmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} SPOC_t;

// def @ESR CAN Message (411565822)
#define ESR_IDE (1U)
#define ESR_DLC (8U)
#define ESR_CANID (0x1887FEFEU)
#define ESR_CYC (1000U)
// -- Engine State Requests
// signal: @EngGasFuelSupplyDesiredPress
#define EngGasFuelSupplyDesiredPress_CovFactor 0.5
#define EngGasFuelSupplyDesiredPress_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // Devices send this request to the engine controller to:  (a) Shut off engine fueling, but remain prepared to re-start quickly by not shutting down the control system, or  (b) Keep the engine running.  00 Fueling not desired (shut off engine fueling)   ...
  // 3 - "Don't care / Take no action" 
  // 2 - "Parameter supported" 
  // 1 - "Fueling desired" 
  // 0 - "Fueling not desired" 

  uint8_t DesiredEngFuelingState;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to request that the engine should not be allowed to use gaseous fuel for engine cylinder combustion. This state is relevant for dual fuel systems and would be used when conditions are detected that make it unsafe or not appropriate to use ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Gaseous Fuel Usage Inhibited" 
  // 0 - "Gaseous Fuel Usage Not Inhibited" 

  uint8_t EngGasFuelUsageInhibited;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Engine controller receives this request from another control module to select the type of fuel to be used for engine operation.  0x00 - Not available - NONE  0x01 - Gasoline/petrol - GAS  0x02 - Methanol - METH  0x03 - Ethanol - ETH  0x04 - Diesel - ...
  // 255 - "Not supported" 
  // 254 - "Reserved for use in SPN 5837" 
  // 24 - "Reserved for use in SPN 5837" 
  // 23 - "Natural Gas" 
  // 7 - "Propane" 
  // 6 - "Compressed Natural Gas" 
  // 5 - "Liquefied Petroleum Gas" 
  // 4 - "Diesel" 
  // 3 - "Ethanol" 
  // 2 - "Methanol" 
  // 1 - "Gasoline/petrol" 
  // 0 - "Not available" 

  uint8_t RequestedFuelType;              //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Desired gage pressure of gaseous fuel supply to the engine.
  uint16_t EngGasFuelSupplyDesiredPress;  //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   
  uint32_t framecnt;
} ESR_t;

// def @RBR CAN Message (411631358)
#define RBR_IDE (1U)
#define RBR_DLC (8U)
#define RBR_CANID (0x1888FEFEU)
// -- Radio Beacon Request  Message used to request the wireless transceiver to transmit a special beacon signal and to report  the reception of a special beacon signal by a wireless transceiver. A unique number is included in  each beacon signal to ...
// signal: @WirelessSignalStrength2
#define WirelessSignalStrength2_CovFactor 0.5
#define WirelessSignalStrength2_CovS(x) ((int16_t)((x / 0.5) + 250))
typedef struct
{

  // The number is used to identify a wireless message originating from a device on a particular machine. Within a beacon request message (see SPN 5755 [Radio Beacon Direction]), this number is included in the transmitted beacon signal. Within a beacon ...
  uint16_t UnqBeaconMessageIdentifierNumber;  //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Indicates the function of a particular instance of the Radio Beacon Request message. The 'Beacon Request' state indicates the message is sent to a wireless transceiver to request a transmit of the special beacon message. The 'Beacon Received ...
  // 3 - "Don't Care" 
  // 2 - "Reserved" 
  // 1 - "Beacon Received Acknowledgement" 
  // 0 - "Beacon Request" 

  uint8_t RadioBeaconDirection;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The ID of the off-board transmitter that sent the incoming special beacon message received by the wireless transceiver.
  uint32_t TransmitterID2;                    //      Bits=24.  [ 0     , 16449635 ]  Unit:''     

  // The absolute received signal strength of the special beacon signal received from the off-board transmitter. The signal strength is reported as a Received Signal Strength Indicator (RSSI) value in dBm. This measurement method is identical to SPN 5753 ...
  int16_t WirelessSignalStrength2;            //      Bits=08.  [ -125  , 0      ]  Unit:'dBm'   Offset= -125      Factor= 0.5   
  uint32_t framecnt;
} RBR_t;

// def @RGE24 CAN Message (411696894)
#define RGE24_IDE (1U)
#define RGE24_DLC (8U)
#define RGE24_CANID (0x1889FEFEU)
// -- Running Gear Equipment #2/4  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-2.
typedef struct
{
  uint32_t framecnt;
} RGE24_t;

// def @RGE12 CAN Message (411762430)
#define RGE12_IDE (1U)
#define RGE12_DLC (8U)
#define RGE12_CANID (0x188AFEFEU)
// -- Running Gear Equipment #1/2  Message to transmit data of the towing vehicle to the towed vehicle. See ISO 11992-2.
typedef struct
{
  uint32_t framecnt;
} RGE12_t;

// def @CCP_DTO CAN Message (411827966)
#define CCP_DTO_IDE (1U)
#define CCP_DTO_DLC (8U)
#define CCP_DTO_CANID (0x188BFEFEU)
// -- CCP Data Transmission Object  The DTO message is the one of two PGNs needed by the CAN Calibration Protocol. It is sent by an ECU in response tool to tool queries or commands.
typedef struct
{
  uint32_t framecnt;
} CCP_DTO_t;

// def @CCP_CRO CAN Message (411893502)
#define CCP_CRO_IDE (1U)
#define CCP_CRO_DLC (8U)
#define CCP_CRO_CANID (0x188CFEFEU)
// -- CCP Command Receive Object  The CRO message is the one of two PGNs needed by the CAN Calibration Protocol. It is sent by a tool to send queries or commands to a target ECU.
typedef struct
{
  uint32_t framecnt;
} CCP_CRO_t;

// def @SCCCM CAN Message (411959038)
#define SCCCM_IDE (1U)
#define SCCCM_DLC (8U)
#define SCCCM_CANID (0x188DFEFEU)
// -- Sequence Control Client-to-Sequence Control Master  This PGN is for sending response messages from control functions to a Sequence Control Master on the tractor and connected implement(s).
typedef struct
{
  uint32_t framecnt;
} SCCCM_t;

// def @SCMCC CAN Message (412024574)
#define SCMCC_IDE (1U)
#define SCMCC_DLC (8U)
#define SCMCC_CANID (0x188EFEFEU)
// -- Sequence Control Master-to-Sequence Control Client  The PGN is for a sequence control system, such as a headland management system, which includes tractor and implement functions in one system.
typedef struct
{
  uint32_t framecnt;
} SCMCC_t;

// def @ECC CAN Message (412090110)
#define ECC_IDE (1U)
#define ECC_DLC (8U)
#define ECC_CANID (0x188FFEFEU)
#define ECC_CYC (10000U)
// -- Engine Configuration Commands  This PGN contains parameters that are used to configure engine operation.
typedef struct
{

  // Overrides the engine protection shutdown functionality due to low coolant level.  00 - Disable engine protection shutdown override due to low coolant level  01 - Enable engine protection shutdown override due to low coolant level  10 - Reserved  11 ...
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Enable engine protection shutdown override due to low coolant level" 
  // 0 - "Disable engine protection shutdown override due to low coolant level" 

  uint8_t ClntLvlEngPrtctnShtdwnOvrrideCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} ECC_t;

// def @SFC CAN Message (412155646)
#define SFC_IDE (1U)
#define SFC_DLC (8U)
#define SFC_CANID (0x1890FEFEU)
#define SFC_CYC (1000U)
// -- Supplemental Fan Command  Command message to control the speed and direction of Supplemental Fan for additional cooling beyond that of the primary cooling fan. For Example, this fan could be used to provide additional cooling to an aftertreatment ...
// signal: @SupplementalFanSpeedCmd
#define SupplementalFanSpeedCmd_CovFactor 0.5
#define SupplementalFanSpeedCmd_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // Enable/Disable command to Supplemental Fan.    00  Disable   01  Enable  10  Reserved   11  Don't Care/Take no action
  // 3 - "Don't Care/Take no action" 
  // 2 - "Reserved " 
  // 1 - "Enable" 
  // 0 - "Disable " 

  uint8_t SupplementalFanEnableCmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Direction command to the Supplemental Fan. Fan can be commanded to run forward or reverse.    00   Forward  01   Reverse  10   Reserved  11   Don't care/take no action (leave function as is)
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Reverse" 
  // 0 - "Forward" 

  uint8_t SupplementalFanDirectionCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Speed command to Supplemental Fan.
  uint16_t SupplementalFanSpeedCmd;      //      Bits=16.  [ 0     , 32127.5 ]  Unit:'rpm'   Factor= 0.5   

  // Command to allow the supplemental fan controller to remain alive independently of the electrical enable input to the fan. This allows the fan controller to remain alive after the key switch has disabled the electrical enable pin on the fan ...
  // 3 - "Don't Care/Take no action" 
  // 2 - "Reserved" 
  // 1 - "Enable" 
  // 0 - "Disable" 

  uint8_t SupplementalFanPowerHold;      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} SFC_t;

// def @VLS1 CAN Message (412221182)
#define VLS1_IDE (1U)
#define VLS1_DLC (8U)
#define VLS1_CANID (0x1891FEFEU)
// -- Vehicle/Chassis Lubrication System 1  Used to command a vehicle/chassis lubrication system
typedef struct
{

  // Command signal to lock or unlock the ability to change the lubrication cycle mode.  Locking the lubrication mode would prevent the changing of the lubrication cycle mode, perhaps by an operator.  00 - Not Locked  01 - Locked  10 - Reserved  11 - No ...
  // 3 - "No action" 
  // 2 - "Reserved" 
  // 1 - "Locked" 
  // 0 - "Not Locked" 

  uint8_t LubricationCycleModeLockCmd;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to change the lubrication cycle. It gives the operator or technician the ability to the change the frequency of lubrication.  000 - Cycle mode # 1 (Lowest Lubrication Frequency)  001 - Cycle mode # 2  010 - Cycle mode # 3 (Highest ...
  // 7 - "No action" 
  // 2 - "Cycle mode # 3" 
  // 1 - "Cycle mode # 2" 
  // 0 - "Cycle mode # 1" 

  uint8_t LubricationCycleSetCmd;           //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Command signal to change lubrication system operational mode. The mode set command gives the operator and/or technician the ability to change the operational mode when diagnosing and servicing of the system is required.  Automatic is the normal ...
  // 4 - "Test Mode # 3" 
  // 3 - "Test Mode # 2" 
  // 2 - "Test Mode # 1" 
  // 1 - "Manual Service Mode" 
  // 0 - "Automatic Mode" 
  // 7 - "Take no action" 

  uint8_t LubricationOperationModeSetCmd;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Command signal to reset the lubrication pump.  It allows the operator and/or technician to reset the paused lubrication pump and clear lubrication system faults. This shall enable the lubrication system to resume its normal operation.  00 - No ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Reset pump operation  " 
  // 0 - "No action" 

  uint8_t LubricationPumpEnableCmd;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to enable or pause the lubrication activation clock  00 - Pause  01 - Enable  10 - Reserved  11 - Take no action  Note:  In some vehicles or machines the lubrication is only required when the vehicle or machine is in certain state ...
  // 3 - "Take no action     " 
  // 2 - "Reserved " 
  // 1 - "Enable" 
  // 0 - "Pause" 

  uint8_t LubricationTimingCycleCmd;        //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} VLS1_t;

// def @HCDI1 CAN Message (412286718)
#define HCDI1_IDE (1U)
#define HCDI1_DLC (8U)
#define HCDI1_CANID (0x1892FEFEU)
#define HCDI1_CYC (100U)
// -- Aftertreatment 1 Hydrocarbon Doser Information 1  This PGN contains information about the HC Doser and the Diesel Particulate Filter
// signal: @RequestedFuelMassRate
#define RequestedFuelMassRate_CovFactor 0.05
#define RequestedFuelMassRate_CovS(x) ((uint16_t)((x / 0.05)))
typedef struct
{

  // Requested fuel dosing quantity from hydrocarbon doser.
  uint16_t RequestedFuelMassRate;            //      Bits=16.  [ 0     , 3212.75 ]  Unit:'g/min' Factor= 0.05  

  // Indicates whether the HC Doser/ HC Dosing system is enabled or is waiting for regeneration.  000 HC doser disabled  001 HC doser active  010 SAE reserved  011 HC doser enabled, waiting for regeneration  100 SAE reserved  101 SAE reserved  110 Error   ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "SAE reserved" 
  // 4 - "SAE reserved" 
  // 3 - "HC doser enabled" 
  // 2 - "SAE reserved" 
  // 1 - "HC doser active" 
  // 0 - "HC doser disabled" 

  uint8_t HCDoserStatus;                     //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Indicates whether the Hydrocarbon Doser (HCD) is presently injecting diesel fuel into the exhaust pipe.    00 Injecting not active  01 Injecting active  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Injecting active" 
  // 0 - "Injecting not active" 

  uint8_t HCDoserInjectingStatus;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether an error is active in the Hydrocarbon Doser (HCD) or whether the internal cyclic system test of the HCD is presently active.  This is not intended to replace the DM8/DM30 - Test results requirement for OBD.  000 System test has ...
  // 7 - "Not available" 
  // 6 - "Error " 
  // 1 - "Internal system test is in process" 
  // 0 - "System test has executed and passed or System test has not yet executed" 

  uint8_t DiagnosticStatusOfHCDoser;         //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Purging of the Hydrocarbon Doser (HCD) is required.  Request could come from the HCD system.    00   Purging not required  01   Purging required - less urgent  10   Purging required - urgent  11   Not available
  // 3 - "Not available" 
  // 2 - "Purging required, urgent" 
  // 1 - "Purging required, less urgent" 
  // 0 - "Purging not required" 

  uint8_t HydrocarbonDoserPurgingRequired;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} HCDI1_t;

// def @LVDSOM CAN Message (412548862)
#define LVDSOM_IDE (1U)
#define LVDSOM_DLC (8U)
#define LVDSOM_CANID (0x1896FEFEU)
// -- Low Voltage Disconnect Set Operating Mode  Low Voltage Disconnect (LVD) Set Operating Mode is sent to the LVD to either manuallly override the normal LVD function and force the outputs to be disconnected or connected, or to put the LVD back into ...
typedef struct
{

  // Desired Operating Mode of the LVD.  Used to issue a J1939 request to the LVD to change modes.    0000 - Automatic  0001-0011 - Reserved  0100 - Manual Disconnect  0101 - Manual Connect  0110-1110 - Reserved  1111 - No change
  // 15 - "No change" 
  // 5 - "Manual Connect" 
  // 4 - "Manual Disconnect" 
  // 0 - "Automatic" 

  uint8_t LwVltgDscnnctDsiredOperatingMode;   //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} LVDSOM_t;

// def @NCS CAN Message (412614398)
#define NCS_IDE (1U)
#define NCS_DLC (8U)
#define NCS_CANID (0x1897FEFEU)
#define NCS_CYC (10000U)
// -- Noise Control Status  Used to report the current state of the Noise Control System.
typedef struct
{

  // This parameter returns the current status of the Cab Noise Control system.    00 - Cab Noise Control System ON-Line  01 - Cab Noise Control System OFF-Line  10 - Error Indicator  11 - Not Available/Not Requested
  // 3 - "Not Available/Not Requested" 
  // 2 - "Error Indicator" 
  // 1 - "Cab Noise Control System OFF-Line" 
  // 0 - "Cab Noise Control System ON-Line" 

  uint8_t CabNoiseCtrlStatus;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter returns the current status of tuning function of the Cab Noise Control system.    When the tuning state is active, the Cab Noise Control System adjusts certain system characteristics (e.g. to account for sensor and/or transducer ...
  // 15 - "Not Available/Not Tuning/Not Requested" 
  // 14 - "Tuning Mode" 
  // 13 - "Reserved" 
  // 12 - "Reserved" 
  // 11 - "Reserved " 
  // 10 - "Automatic Tuning Mode, Saving Data" 
  // 9 - "Automatic Tuning Mode, Command Complete" 
  // 8 - "Automatic Tuning Mode" 
  // 7 - "Manual Tuning Denied" 
  // 6 - "Reserved" 
  // 5 - "Reserved" 
  // 4 - "Reserved " 
  // 3 - "Reserved" 
  // 2 - "Manual Tuning Mode, Saving Data" 
  // 1 - "Manual Tuning Mode, Command Complete" 
  // 0 - "Manual Tuning Mode" 

  uint8_t CabNoiseCtrlTuningStatus;      //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} NCS_t;

// def @NC1 CAN Message (412679934)
#define NC1_IDE (1U)
#define NC1_DLC (8U)
#define NC1_CANID (0x1898FEFEU)
#define NC1_CYC (10000U)
// -- Noise Control 1  Used to issue commands to the Noise Control System.  This command PGN typically originates from either a Cab control panel or a diagnostic tool.
typedef struct
{

  // Command signal to change the state of the Cab Noise Control System to on-line or off-line    00 - Take Cab Noise Control System Off Line  01 - Bring Cab Noise Control System On Line  10 - Reserved  11 - Don't Care/Not Commanded
  // 3 - "Don't Care/Not Commanded" 
  // 2 - "Reserved" 
  // 1 - "Bring Cab Noise Control System On Line" 
  // 0 - "Take Cab Noise Control System Off Line" 

  uint8_t CabNoiseCtrlCmd;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command values for the Tuning State of the Cab Noise Control System.  The Tuning State allows the Cab Noise Control System to adjust certain system characteristics (e.g. to account for microphone or speaker degradation over time).  000 - Activate ...
  // 7 - "Don't Care" 
  // 6 - "Reserved" 
  // 5 - "Exit Tuning,  Saving Parameters" 
  // 4 - "Exit Tuning,  Not Saving Parameters" 
  // 3 - "Remain In Tuning" 
  // 2 - "Activate Automatic Tuning State" 
  // 1 - "Activate Automatic Tuning" 
  // 0 - "Activate Manual Tuning" 

  uint8_t CabNoiseCtrlTuningCmd;         //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} NC1_t;

// def @GPM18 CAN Message (412811006)
#define GPM18_IDE (1U)
#define GPM18_DLC (8U)
#define GPM18_CANID (0x189AFEFEU)
// -- General Purpose Message #1/8  Message to transmit data of the towing vehicle to the towed vehicle. See ISO 11992-3.
typedef struct
{
  uint32_t framecnt;
} GPM18_t;

// def @PMI CAN Message (412876542)
#define PMI_IDE (1U)
#define PMI_DLC (8U)
#define PMI_CANID (0x189BFEFEU)
// -- Proprietary Method Identification  This is a standardized mechanism for an ECU to report a listing of the manufacturer specific (i.e. proprietary) methods and formats it supports when using the PropA, PropA2, and PropB PGNs (see J1939-21).  The ...
typedef struct
{

  uint16_t DataDictionaryManufacturerCode;  //      Bits=11.  [ 0     , 2047   ]  Unit:''     

  // A manufacturer defined code to define the proprietary communications method.  The structure and interpretation of the code is manufacturer specific.  This allows manufacturers to establish their own methods for reporting proprietary support for ...
  uint32_t DataDictionaryMethod;            //      Bits=21.  [ 0     , 2097151 ]  Unit:''     
  uint32_t framecnt;
} PMI_t;

// def @AUXIO7 CAN Message (412942078)
#define AUXIO7_IDE (1U)
#define AUXIO7_DLC (8U)
#define AUXIO7_CANID (0x189CFEFEU)
// -- Auxiliary Input/Output Status 7  Notes:  Implementers are encouraged to use specific functional SPNs whenever possible.  AUXIO PGNs are intended for two categories of use in which fixed mapping to functions is not possible:  1)  Generic I/O devices   ...
typedef struct
{

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel18;               //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel17;               //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel16;               //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel15;               //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel22;               //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel21;               //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel20;               //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel19;               //      Bits=08.  [ 0     , 250    ]  Unit:''     
  uint32_t framecnt;
} AUXIO7_t;

// def @AUXIO6 CAN Message (413007614)
#define AUXIO6_IDE (1U)
#define AUXIO6_DLC (8U)
#define AUXIO6_CANID (0x189DFEFEU)
// -- Auxiliary Input/Output Status 6  Notes:  Implementers are encouraged to use specific functional SPNs whenever possible.  AUXIO PGNs are intended for two categories of use in which fixed mapping to functions is not possible:  1)  Generic I/O devices   ...
typedef struct
{

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel10;               //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel9;                //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel8;                //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel7;                //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel14;               //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel13;               //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel12;               //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the current value of auxiliary input/output channels that are configured uniquely per application.
  uint8_t AuxI_OChannel11;               //      Bits=08.  [ 0     , 250    ]  Unit:''     
  uint32_t framecnt;
} AUXIO6_t;

// def @DM29 CAN Message (413073150)
#define DM29_IDE (1U)
#define DM29_DLC (8U)
#define DM29_CANID (0x189EFEFEU)
// -- DTC Counts  The purpose of this DM is to identify the number of DTCs in each category. The categories are pending, all pending, MIL-on, previously MIL-on, and permanent DTCs.
typedef struct
{

  uint8_t PendingDTCs;                   //      Bits=08.  [ 0     , 255    ]  Unit:''     

  uint8_t AllPendingDTCs;                //      Bits=08.  [ 0     , 255    ]  Unit:''     

  uint8_t MILOnDTCs;                     //      Bits=08.  [ 0     , 255    ]  Unit:''     

  uint8_t PreviouslyMILOnDTCs;           //      Bits=08.  [ 0     , 255    ]  Unit:''     

  uint8_t PermanentDTCs;                 //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} DM29_t;

// def @DM34 CAN Message (413204222)
#define DM34_IDE (1U)
#define DM34_DLC (8U)
#define DM34_CANID (0x18A0FEFEU)
// -- NTE Status  The status of engine operating in the NTE control areas for given pollutants, such as NOx and PM.
typedef struct
{

  // Status of engine operation within the NOx NTE Deficiency Area.  The NOx NTE Deficiency Area is defined as bounded regions or conditions within the NTE control area for NOx where the manufacturer has received a deficiency.  If the application does ...
  // 3 - "NotAvailable" 
  // 2 - "Reserved" 
  // 1 - "InsideControlArea" 
  // 0 - "OutsideControlArea" 

  uint8_t NOxNTEDeficiencyAreaStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of engine operation within the manufacturer specific NOx NTE limited testing region.  The manufacturer specific NOx NTE limited testing region is defined as bounded regions within the NTE control area for NOx where the manufacturer has ...
  // 3 - "NotAvailable" 
  // 2 - "Reserved" 
  // 1 - "InsideControlArea" 
  // 0 - "OutsideControlArea" 

  uint8_t MnfcNOxNTECarveOutAreaStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of engine operation within the bounded region of the engine?s torque and speed map where emissions must not exceed a specific emission cap for NOx under the NTE requirement.
  // 3 - "NotAvailable" 
  // 2 - "Reserved" 
  // 1 - "InsideControlArea" 
  // 0 - "OutsideControlArea" 

  uint8_t NOxNTEControlAreaStatus;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of engine operation within the PM NTE Deficiency Area.  The PM NTE Deficiency Area is defined as bounded regions or conditions within the NTE control area for PM where the manufacturer has received a deficiency.  If the application does not ...
  // 3 - "NotAvailable" 
  // 2 - "Reserved" 
  // 1 - "InsideControlArea" 
  // 0 - "OutsideControlArea" 

  uint8_t PMNTEDeficiencyAreaStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of engine operation within the manufacturer specific PM NTE limited testing region.  The manufacturer specific PM NTE  limited testing region is defined as bounded regions within the NTE control area for PM where the manufacturer has limited ...
  // 3 - "NotAvailable" 
  // 2 - "Reserved" 
  // 1 - "InsideControlArea" 
  // 0 - "OutsideControlArea" 

  uint8_t MnfcPMNTECarveOutAreaStatus;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of engine operation within the bounded region of the engine?s torque and speed map where emissions must not exceed a specific emission cap for PM under the NTE requirement.
  // 3 - "NotAvailable" 
  // 2 - "Reserved" 
  // 1 - "InsideControlArea" 
  // 0 - "OutsideControlArea" 

  uint8_t PMNTEControlAreaStatus;         //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} DM34_t;

// def @DM32 CAN Message (413335294)
#define DM32_IDE (1U)
#define DM32_DLC (8U)
#define DM32_CANID (0x18A2FEFEU)
// -- Regulated Exhaust Emission Level Exceedance  Provides the DTCs and associated timers related to a regulated exhaust emission level exceedance due to an emission control system malfunction.
// signal: @DTCTotalActiveTime
#define DTCTotalActiveTime_CovFactor 0.2
#define DTCTotalActiveTime_CovS(x) ((uint16_t)((x / 0.2)))
// signal: @DTCTotalPreviouslyActiveTime
#define DTCTotalPreviouslyActiveTime_CovFactor 0.2
#define DTCTotalPreviouslyActiveTime_CovS(x) ((uint16_t)((x / 0.2)))
// signal: @DTCTimeUntilDerate
#define DTCTimeUntilDerate_CovFactor 0.25
#define DTCTimeUntilDerate_CovS(x) ((uint8_t)((x / 0.25)))
typedef struct
{

  // This 19-bit number is used to identify the item for which diagnostics are being reported.
  uint16_t SPN1;                          //      Bits=16.  [ 0     , 65536  ]  Unit:''     

  // The FMI defines the type of failure detected in the subsystem identified by an SPN.
  // 31 - "Not available" 
  // 19 - "Received network data in error" 
  // 18 - "Below normal (moderately severe)" 
  // 17 - "Below normal (least severe)" 
  // 16 - "Above normal (moderately severe)" 
  // 15 - "Above normal (least severe)" 
  // 14 - "Special intstructions" 
  // 13 - "Out of calibration" 
  // 12 - "Bad intelligent device" 
  // 11 - "Root cause not known" 
  // 10 - "Abnormal rate of change" 
  // 9 - "Abnormal update rate" 
  // 8 - "Abnormal frequency" 
  // 7 - "Mechanical system not responding" 
  // 6 - "Current above normal" 
  // 5 - "Current below normal" 
  // 4 - "Voltage below normal" 
  // 3 - "Voltage above normal" 
  // 2 - "Data erratic" 
  // 1 - "Below normal (most severe)" 
  // 0 - "Above normal (most severe)" 

  uint8_t FailureModeIdentifier1;         //      Bits=05.  [ 0     , 0      ]  Unit:''     

  // SPN #1 (Conversion Version 4)
  uint8_t SPN1High;                       //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // This timer provides the total number of hours the DTC has been confirmed and active
  uint16_t DTCTotalActiveTime;            //      Bits=16.  [ 0     , 12851  ]  Unit:'hr'    Factor= 0.2   

  // This timer provides the number of hours the NOx malfunction has been confirmed and previously active
  uint16_t DTCTotalPreviouslyActiveTime;  //      Bits=16.  [ 0     , 12851  ]  Unit:'hr'    Factor= 0.2   

  // This timer provides the number of hours the malfunction has until the OBD required derate will occur
  uint8_t DTCTimeUntilDerate;             //      Bits=08.  [ 0     , 62.5   ]  Unit:'hr'    Factor= 0.25  
  uint32_t framecnt;
} DM32_t;

// def @DM31 CAN Message (413400830)
#define DM31_IDE (1U)
#define DM31_DLC (8U)
#define DM31_CANID (0x18A3FEFEU)
// -- DTC To Lamp Association  This message shall provide the applicable lamp(s) for each individual DTC
typedef struct
{

  // Diagnostic Trouble Code
  uint32_t DTC1;                         //      Bits=32.  [ 0     , 4294967295 ]  Unit:''     

  // Lamp support status
  // 3 - "Unavailable" 
  // 2 - "Reserved" 
  // 1 - "LampOn" 
  // 0 - "LampOff" 

  uint8_t DTCProtectLampSupportStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lamp support status
  // 3 - "Unavailable" 
  // 2 - "Reserved" 
  // 1 - "LampOn" 
  // 0 - "LampOff" 

  uint8_t DTCWarnLampSupportStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lamp support status
  // 3 - "Unavailable" 
  // 2 - "Reserved" 
  // 1 - "LampOn" 
  // 0 - "LampOff" 

  uint8_t DTCStopLampSupportStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lamp support status
  // 3 - "Unavailable" 
  // 2 - "ShortMI" 
  // 1 - "LampOn" 
  // 0 - "LampOff" 

  uint8_t DTCMilSupportStatus;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lamp support status
  // 3 - "Unavailable" 
  // 2 - "Reserved" 
  // 1 - "FastFlash" 
  // 0 - "SlowFlash" 

  uint8_t DTCProtectLampSupportFlash;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lamp support status
  // 3 - "Unavailable" 
  // 2 - "Reserved" 
  // 1 - "FastFlash" 
  // 0 - "SlowFlash" 

  uint8_t DTCWarnLampSupportFlash;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lamp support status
  // 3 - "Unavailable" 
  // 2 - "Reserved" 
  // 1 - "FastFlash" 
  // 0 - "SlowFlash" 

  uint8_t DTCStopLampSupportFlash;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lamp support status
  // 3 - "Unavailable" 
  // 2 - "Class_C_DTC" 
  // 1 - "FastFlash" 
  // 0 - "SlowFlash" 

  uint8_t DTCMilSupportFlash;            //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} DM31_t;

// def @AUXIO4 CAN Message (413531902)
#define AUXIO4_IDE (1U)
#define AUXIO4_DLC (8U)
#define AUXIO4_CANID (0x18A5FEFEU)
// -- Auxiliary Input/Output Status 4  Notes:  Implementers are encouraged to use specific functional SPNs whenever possible.  AUXIO PGNs are intended for two categories of use in which fixed mapping to functions is not possible:  1)  Generic I/O devices   ...
typedef struct
{

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O84;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O83;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O82;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O81;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O88;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O87;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O86;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O85;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O92;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O91;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O90;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O89;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O96;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 0 - "Auxiliary channel off" 
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 

  uint8_t AuxI_O95;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O94;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O93;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O100;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O99;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O98;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O97;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O104;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O103;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O102;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O101;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O108;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O107;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O106;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O105;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O112;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O111;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O110;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O109;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} AUXIO4_t;

// def @AUXIO3 CAN Message (413597438)
#define AUXIO3_IDE (1U)
#define AUXIO3_DLC (8U)
#define AUXIO3_CANID (0x18A6FEFEU)
// -- Auxiliary Input/Output Status 3  Notes:  Implementers are encouraged to use specific functional SPNs whenever possible.  AUXIO PGNs are intended for two categories of use in which fixed mapping to functions is not possible:  1)  Generic I/O devices   ...
typedef struct
{

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O52;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O51;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O50;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O49;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O56;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O55;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O54;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O53;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O60;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O59;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O58;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O57;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O64;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O63;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O62;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O61;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O68;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O67;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O66;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O65;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O72;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O71;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O70;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O69;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O76;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O75;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O74;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O73;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O80;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O79;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O78;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O77;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} AUXIO3_t;

// def @AUXIO2 CAN Message (413662974)
#define AUXIO2_IDE (1U)
#define AUXIO2_DLC (8U)
#define AUXIO2_CANID (0x18A7FEFEU)
// -- Auxiliary Input/Output Status 2  Notes:  Implementers are encouraged to use specific functional SPNs whenever possible.  AUXIO PGNs are intended for two categories of use in which fixed mapping to functions is not possible:  1)  Generic I/O devices   ...
typedef struct
{

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O20;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O19;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O18;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O17;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O24;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O23;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O22;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O21;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O28;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 0 - "Auxiliary channel off" 
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 

  uint8_t AuxI_O27;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O26;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O25;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O32;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O31;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O30;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O29;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O36;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O35;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O34;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O33;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O40;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O39;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O38;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O37;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O44;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O43;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O42;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O41;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O48;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O47;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O46;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.  00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error Indicator or Not Used , depending on application  11 - Not Available ...
  // 3 - "Not Available or Take No Action" 
  // 2 - "Error Indicator or Not Used " 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O45;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} AUXIO2_t;

// def @DISP1 CAN Message (413728510)
#define DISP1_IDE (1U)
#define DISP1_DLC (8U)
#define DISP1_CANID (0x18A8FEFEU)
// -- Text Display  This provides ASCII text information, for example to an display instrument.  Broadcast rate should be on event and 1-5 seconds due to variable character length.  This message is to convey information from an ecu to a display.  In its ...
typedef struct
{

  // This parameter describes the status for the display how to show the information.  0000 Clear display - The displayed information should be deleted or not displayed any more.  0001 Hold display - The presently displayed information should be retained   ...
  // 15 - "- Not applicable" 
  // 6 - "Blink substring" 
  // 5 - "Highlight substring" 
  // 4 - "Overwrite substring" 
  // 3 - "Overwrite display" 
  // 2 - "Append at end of display" 
  // 1 - "Hold display" 
  // 0 - "Clear display" 

  uint8_t TextDisplayInstructions;       //      Bits=04.  [ 0     , 15     ]  Unit:''     

  uint8_t TextDisplayIndex;              //      Bits=08.  [ 0     , 200    ]  Unit:''     
  uint32_t framecnt;
} DISP1_t;

// def @FLIC CAN Message (413794046)
#define FLIC_IDE (1U)
#define FLIC_DLC (8U)
#define FLIC_CANID (0x18A9FEFEU)
// -- Forward Lane Image Command  Message containing commands, sent to the forward image controller
typedef struct
{

  // Command to enable/disable Lane Departure Indication    00   Disable Lane Departure Warning  01   Enable Lane Departure Warning  10   Reserved  11   Don?t care
  // 3 - "Don?t care" 
  // 2 - "Reserved" 
  // 1 - "Enable Lane Departure Warning" 
  // 0 - "Disable Lane Departure Warning" 

  uint8_t LaneDepartureWarningEnableCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} FLIC_t;

// def @CFS CAN Message (413859582)
#define CFS_IDE (1U)
#define CFS_DLC (8U)
#define CFS_CANID (0x18AAFEFEU)
// -- Client (ECU) to File Server message  Used for send Status of the client to the file server, volume handling, file access, file handling and directory handling.  Description of messages is given in ISO 11783 Part 13.
typedef struct
{
  uint32_t framecnt;
} CFS_t;

// def @FSC CAN Message (413925118)
#define FSC_IDE (1U)
#define FSC_DLC (8U)
#define FSC_CANID (0x18ABFEFEU)
// -- File Server to Client (ECU) message  Used for obtaining status of the client, volume handling, file access, file handling and directory handling.  Description of messages is given in ISO 11783 Part 13.
typedef struct
{
  uint32_t framecnt;
} FSC_t;

// def @GMS CAN Message (413990654)
#define GMS_IDE (1U)
#define GMS_DLC (8U)
#define GMS_CANID (0x18ACFEFEU)
// -- Agricultural Guidance Machine Info  Machine system feedback detailing status of machine relative to guidance operation
typedef struct
{
  uint32_t framecnt;
} GMS_t;

// def @GSC CAN Message (414056190)
#define GSC_IDE (1U)
#define GSC_DLC (8U)
#define GSC_CANID (0x18ADFEFEU)
// -- Agricultural Guidance System Command  Steering command expressed as desired curvature
typedef struct
{
  uint32_t framecnt;
} GSC_t;

// def @TPRS CAN Message (414121726)
#define TPRS_IDE (1U)
#define TPRS_DLC (8U)
#define TPRS_CANID (0x18AEFEFEU)
// -- Tire Pressure Reference Setting  For setting the tire pressure reference values.    This message is the setpoint for the PGN 64953 Tire Pressure reference information message.
// signal: @ReferenceTirePressSetting_33
#define ReferenceTirePressSetting_33_CovFactor 8
#define ReferenceTirePressSetting_33_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePressSetting_32
#define ReferenceTirePressSetting_32_CovFactor 8
#define ReferenceTirePressSetting_32_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePressSetting_31
#define ReferenceTirePressSetting_31_CovFactor 8
#define ReferenceTirePressSetting_31_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePressSetting_30
#define ReferenceTirePressSetting_30_CovFactor 8
#define ReferenceTirePressSetting_30_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePressSetting_23
#define ReferenceTirePressSetting_23_CovFactor 8
#define ReferenceTirePressSetting_23_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePressSetting_22
#define ReferenceTirePressSetting_22_CovFactor 8
#define ReferenceTirePressSetting_22_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePressSetting_21
#define ReferenceTirePressSetting_21_CovFactor 8
#define ReferenceTirePressSetting_21_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePressSetting_20
#define ReferenceTirePressSetting_20_CovFactor 8
#define ReferenceTirePressSetting_20_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePressSetting_13
#define ReferenceTirePressSetting_13_CovFactor 8
#define ReferenceTirePressSetting_13_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePressSetting_12
#define ReferenceTirePressSetting_12_CovFactor 8
#define ReferenceTirePressSetting_12_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePressSetting_11
#define ReferenceTirePressSetting_11_CovFactor 8
#define ReferenceTirePressSetting_11_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePressSetting_10
#define ReferenceTirePressSetting_10_CovFactor 8
#define ReferenceTirePressSetting_10_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePressSetting_01
#define ReferenceTirePressSetting_01_CovFactor 8
#define ReferenceTirePressSetting_01_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePressSetting_00
#define ReferenceTirePressSetting_00_CovFactor 8
#define ReferenceTirePressSetting_00_CovS(x) ((uint8_t)((x / 8)))
typedef struct
{

  // Identifies which tire is associated with the parametric data in this PGN.  The low order 4 bits represent a position number, counting left to right when facing in the direction of normal vehicle travel (forward).  The high order 4 bits represent a ...
  // 51 - "Axle3_Position3" 
  // 50 - "Axle3_Position2" 
  // 49 - "Axle3_Position1" 
  // 35 - "Axle2_Position3" 
  // 34 - "Axle2_Position2" 
  // 33 - "Axle2_Position1" 
  // 19 - "Axle1_Position3" 
  // 18 - "Axle1_Position2" 
  // 17 - "Axle1_Position1" 
  // 1 - "Axle0_Position1" 
  // 48 - "Axle3_Position0" 
  // 32 - "Axle2_Position0" 
  // 16 - "Axle1_Position0" 
  // 0 - "Axle0_Position0" 

  uint8_t TireLocation;                   //      Bits=08.  [ 0     , 255    ]  Unit:''     

  uint8_t ReferenceTirePressSetting_33;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePressSetting_32;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePressSetting_31;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePressSetting_30;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePressSetting_23;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePressSetting_22;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePressSetting_21;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePressSetting_20;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePressSetting_13;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePressSetting_12;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePressSetting_11;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePressSetting_10;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePressSetting_01;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePressSetting_00;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     
  uint32_t framecnt;
} TPRS_t;

// def @PLM CAN Message (414187262)
#define PLM_IDE (1U)
#define PLM_DLC (8U)
#define PLM_CANID (0x18AFFEFEU)
// -- Parameter Locate Message  This message is designed to cause other CAs to respond with the identity of any message that they send in which the particular parameter (identified by specific SPN) is contained
typedef struct
{
  uint32_t framecnt;
} PLM_t;

// def @CIM CAN Message (414252798)
#define CIM_IDE (1U)
#define CIM_DLC (8U)
#define CIM_CANID (0x18B0FEFEU)
// -- Configuration Identification Message  Message used to identify the data content (by SPN) of one of the configurable messages  (identified by PGN).
typedef struct
{
  uint32_t framecnt;
} CIM_t;

// def @PCM1 CAN Message (414318334)
#define PCM1_IDE (1U)
#define PCM1_DLC (8U)
#define PCM1_CANID (0x18B1FEFEU)
// -- Proprietarily Configurable Message #1  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM1_t;

// def @PCM2 CAN Message (414383870)
#define PCM2_IDE (1U)
#define PCM2_DLC (8U)
#define PCM2_CANID (0x18B2FEFEU)
// -- Proprietarily Configurable Message #2  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM2_t;

// def @PCM3 CAN Message (414449406)
#define PCM3_IDE (1U)
#define PCM3_DLC (8U)
#define PCM3_CANID (0x18B3FEFEU)
// -- Proprietarily Configurable Message #3  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM3_t;

// def @PCM4 CAN Message (414514942)
#define PCM4_IDE (1U)
#define PCM4_DLC (8U)
#define PCM4_CANID (0x18B4FEFEU)
// -- Proprietarily Configurable Message #4  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM4_t;

// def @PCM5 CAN Message (414580478)
#define PCM5_IDE (1U)
#define PCM5_DLC (8U)
#define PCM5_CANID (0x18B5FEFEU)
// -- Proprietarily Configurable Message #5  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM5_t;

// def @PCM6 CAN Message (414646014)
#define PCM6_IDE (1U)
#define PCM6_DLC (8U)
#define PCM6_CANID (0x18B6FEFEU)
// -- Proprietarily Configurable Message #6  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM6_t;

// def @PCM7 CAN Message (414711550)
#define PCM7_IDE (1U)
#define PCM7_DLC (8U)
#define PCM7_CANID (0x18B7FEFEU)
// -- Proprietarily Configurable Message #7  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM7_t;

// def @PCM8 CAN Message (414777086)
#define PCM8_IDE (1U)
#define PCM8_DLC (8U)
#define PCM8_CANID (0x18B8FEFEU)
// -- Proprietarily Configurable Message #8  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM8_t;

// def @PCM9 CAN Message (414842622)
#define PCM9_IDE (1U)
#define PCM9_DLC (8U)
#define PCM9_CANID (0x18B9FEFEU)
// -- Proprietarily Configurable Message #9  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM9_t;

// def @PCM10 CAN Message (414908158)
#define PCM10_IDE (1U)
#define PCM10_DLC (8U)
#define PCM10_CANID (0x18BAFEFEU)
// -- Proprietarily Configurable Message #10  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM10_t;

// def @PCM11 CAN Message (414973694)
#define PCM11_IDE (1U)
#define PCM11_DLC (8U)
#define PCM11_CANID (0x18BBFEFEU)
// -- Proprietarily Configurable Message #11  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM11_t;

// def @PCM12 CAN Message (415039230)
#define PCM12_IDE (1U)
#define PCM12_DLC (8U)
#define PCM12_CANID (0x18BCFEFEU)
// -- Proprietarily Configurable Message #12  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM12_t;

// def @PCM13 CAN Message (415104766)
#define PCM13_IDE (1U)
#define PCM13_DLC (8U)
#define PCM13_CANID (0x18BDFEFEU)
// -- Proprietarily Configurable Message #13  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM13_t;

// def @PCM14 CAN Message (415170302)
#define PCM14_IDE (1U)
#define PCM14_DLC (8U)
#define PCM14_CANID (0x18BEFEFEU)
// -- Proprietarily Configurable Message #14  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM14_t;

// def @PCM15 CAN Message (415235838)
#define PCM15_IDE (1U)
#define PCM15_DLC (8U)
#define PCM15_CANID (0x18BFFEFEU)
// -- Proprietarily Configurable Message #15  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM15_t;

// def @PCM16 CAN Message (415301374)
#define PCM16_IDE (1U)
#define PCM16_DLC (8U)
#define PCM16_CANID (0x18C0FEFEU)
// -- Proprietarily Configurable Message #16  Proprietarily Configuration message for use in J1939-74.
typedef struct
{
  uint32_t framecnt;
} PCM16_t;

// def @DM21 CAN Message (415366910)
#define DM21_IDE (1U)
#define DM21_DLC (8U)
#define DM21_CANID (0x18C1FEFEU)
// -- Diagnostic Readiness 2  Message to convey information relevant to the readiness of the OBD system.
typedef struct
{

  // The kilometers accumulated while the MIL is activated.
  uint16_t DistanceWhileMILisActivated;     //      Bits=16.  [ 0     , 64255  ]  Unit:'km'   

  // Distance accumulated since DTCs were cleared (via an external test equipment or possibly, a battery disconnect).
  uint16_t DistanceSinceDTCsCleared;        //      Bits=16.  [ 0     , 64255  ]  Unit:'km'   

  // Accumulated count (in minutes) while the MIL is activated (on).  For US, Euro IV and Euro V implementations, conditions include:  - Reset to 0x0000 when MIL state changes from deactivated to activated by this ECU  - Accumulate counts in minutes if ...
  uint16_t MinutesAccumulatedMILActivated;  //      Bits=16.  [ 0     , 64255  ]  Unit:'min'  

  // Time accumulated since DTCs were cleared (via an external test equipment or possibly, a battery disconnect).
  uint16_t TimeSinceDTCsCleared;            //      Bits=16.  [ 0     , 64255  ]  Unit:'min'  
  uint32_t framecnt;
} DM21_t;

// def @DM22 CAN Message (415497982)
#define DM22_IDE (1U)
#define DM22_DLC (8U)
#define DM22_CANID (0x18C3FEFEU)
// -- Individual Clear/Reset Of Active And Previously Active DTC  All of the diagnostic information pertaining to the specified diagnostic trouble code should be erased when the CLR_PA_REQ or CLR_ACT_REQ action of this PG is requested.
typedef struct
{

  // DM22 Control byte is used to identify the function being performed by this message.  A numeric indication of the message function and content within the Individual DTC Clear message. The interpretation of these values are shown in the table below.   ...
  // 1 - "Request to Clear/Reset a Specific Previously Active DTC" 
  // 0 - "Reserved for SAE Assignment" 

  uint8_t IndividualDTCClearControlByte;     //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // DM22 parameter which is the Negative Acknowledge Indicator For Individual DTC Clear.  A numeric value with interpretation that is specific to the Control Byte Value within the Individual DTC Clear message.  For DM22 Control Byte Values 3 and 19 will ...
  // 0 - "General Negative Acknowledge" 
  // 1 - "Access Denied" 

  uint8_t CtrlByteIndicIndividualDTCClear;   //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // DM22 the SPN of the DTC to Clear.
  uint16_t SPN1;                             //      Bits=16.  [ 0     , 524287 ]  Unit:''     

  // DM22 the FMI of the DTC to Clear.
  // 31 - "Not available" 
  // 19 - "Received network data in error" 
  // 18 - "Below normal (moderately severe)" 
  // 17 - "Below normal (least severe)" 
  // 16 - "Above normal (moderately severe)" 
  // 15 - "Above normal (least severe)" 
  // 14 - "Special intstructions" 
  // 13 - "Out of calibration" 
  // 12 - "Bad intelligent device" 
  // 11 - "Root cause not known" 
  // 10 - "Abnormal rate of change" 
  // 9 - "Abnormal update rate" 
  // 8 - "Abnormal frequency" 
  // 7 - "Mechanical system not responding" 
  // 6 - "Current above normal" 
  // 5 - "Current below normal" 
  // 4 - "Voltage below normal" 
  // 3 - "Voltage above normal" 
  // 2 - "Data erratic" 
  // 1 - "Below normal (most severe)" 
  // 0 - "Above normal (most severe)" 

  uint8_t FailureModeIdentifier1;            //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // SPN #1 (Conversion Version 4)
  uint8_t SPN1High;                          //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} DM22_t;

// def @GPV3 CAN Message (415563518)
#define GPV3_IDE (1U)
#define GPV3_DLC (8U)
#define GPV3_CANID (0x18C4FEFEU)
// -- General Purpose Valve Command  This message provides control of the flow through a general purpose valve.  Defined in ISO 11783-7.
typedef struct
{

  // The command to set the flow through the extend or retract port of an auxiliary valve of a tractor
  uint8_t PortFlowCmd;                   //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} GPV3_t;

// def @GPV2 CAN Message (415629054)
#define GPV2_IDE (1U)
#define GPV2_DLC (8U)
#define GPV2_CANID (0x18C5FEFEU)
// -- General Purpose Valve Measured Flow  This message provides the measurement of a general purpose valve.  Defined in ISO11783-7.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor
  uint8_t ExtendPortMeasuredFlow;        //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor
  uint8_t RetractPortMeasuredFlow;       //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor
  uint16_t ExtendPortPress;              //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor
  uint16_t RetractPortPress;             //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor
  uint8_t ReturnPortPress;               //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} GPV2_t;

// def @GPV1 CAN Message (415694590)
#define GPV1_IDE (1U)
#define GPV1_DLC (8U)
#define GPV1_CANID (0x18C6FEFEU)
// -- General Purpose Valve Estimated Flow  This message provides the estimated flow of a general purpose valve.  Defined in ISO 11783-7.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor
  uint8_t ExtendPortEstFlow;             //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor
  uint8_t RetractPortEstFlow;            //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the general purpose valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.  0000            Blocked  0001            Extend  0010            Retract  0011            Floating   ...
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t ValveState;                    //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of a general purpose valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t ValveFailSafeMode;             //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} GPV1_t;

// def @ETPDT CAN Message (415760126)
#define ETPDT_IDE (1U)
#define ETPDT_DLC (8U)
#define ETPDT_CANID (0x18C7FEFEU)
// -- Extended Transport Protocol - Data Transfer  Defined in ISO 11783-6  Annex L
typedef struct
{
  uint32_t framecnt;
} ETPDT_t;

// def @ETPCM CAN Message (415825662)
#define ETPCM_IDE (1U)
#define ETPCM_DLC (8U)
#define ETPCM_CANID (0x18C8FEFEU)
// -- Extended Transport Protocol - Connection Management  Defined in ISO 11783-6  Annex L
typedef struct
{
  uint32_t framecnt;
} ETPCM_t;

// def @RQST2 CAN Message (415891198)
#define RQST2_IDE (1U)
#define RQST2_DLC (8U)
#define RQST2_CANID (0x18C9FEFEU)
// -- Request 2  Used to Request a PGN from network device or devices and to specify whether the response should use the Transfer PGN or not. PGN and data set for all devices it is tasked with reporting.
typedef struct
{

  // PGN which is requested by Request2 message
  uint32_t ParameterGroupNumber;         //      Bits=24.  [ 0     , 16777215 ]  Unit:''     

  // Requester is to respond the Request 2 message via the Transfer PGN    00 No  01 Yes  10 Undefined  11 NA
  // 3 - "NA" 
  // 2 - "Undefined" 
  // 1 - "Yes" 
  // 0 - "No" 

  uint8_t UseTransferMode;               //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} RQST2_t;

// def @XFER CAN Message (415956734)
#define XFER_IDE (1U)
#define XFER_DLC (8U)
#define XFER_CANID (0x18CAFEFEU)
// -- Transfer  The Transfer PGN provides a mechanism for reporting multiple data sets for a given PGN.
typedef struct
{

  // PGN associated with this transfer message
  uint32_t PGNofRequstedInformation;         //      Bits=24.  [ 0     , 16777215 ]  Unit:''     

  // Length of data reported with the associated PGN via the Transfer PGN.
  uint8_t LengthOfDataForTheReportedPGN;     //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Subset of the 64-bit NAME (SPN 2848), consisting of the most significant 32 bits, which identifies the controller application.  It excludes the manufacturer code and identity number.  It is sometimes used to identify a device for instance in the ...
  uint32_t ShrtNameOfActualReportingDevice;  //      Bits=32.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} XFER_t;

// def @PD CAN Message (416022270)
#define PD_IDE (1U)
#define PD_DLC (8U)
#define PD_CANID (0x18CBFEFEU)
// -- Process Data Message  The Process Data message has been defined as a destination specific message implying that the sender must decide which implement should receive the message.Working Set).
typedef struct
{

  // This 3 bit parameter that indicates how the data in the following Process Data Parameters is to be used when combined with the Process Data Type parameter. See Table A.2.    NOTE: Process Data Type is included since MOD is a function of PD
  uint8_t ProcessDataModifier;           //      Bits=03.  [ 0     , 0      ]  Unit:''     

  // This 2 bit parameter indicates what the data in the following Process Data Parameters is to be used for. See Table A.2.  00 Data is Set Point  01 Data is Actual values  10 Message is Set Point request  11 Message is Actual value request  Data is Set ...
  // 3 - "Message is Actual value request" 
  // 2 - "Message is Set Point request" 
  // 1 - "Data is Actual values" 
  // 0 - "Data is Set Point" 

  uint8_t ProcessDataType;               //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This 2 bit parameter that indicates the format or availability of the data in the following Process Data Parameter.  00 Data format is Long Integer  01 Data format is Floating  10 Data format is unsigned Long Integer  11 Not Available or error  Data ...
  // 3 - "Not Available or error" 
  // 2 - "Data format is unsigned Long Integer" 
  // 1 - "Data format is Floating" 
  // 0 - "Data format is Long Integer" 

  uint8_t DataFormat_ErrorCondition;     //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates which member of the set of possible entities is being referenced. The means of generating this Count Number is explained in the following clause.
  uint8_t CountNumber;                   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // This 4 bit parameter of this message will indicate which Implement is referenced within a set of identical Implements.  The numbering is to start with 1 at the leftmost, foremost, bottom most implement.  The numbering will then increment from left ...
  uint8_t ImplementPos;                  //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // This 4 bit parameter indicates which data dictionary page is to be used to locate the identity of the following data.
  uint8_t ImplementType;                 //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // This 4 bit parameter indicates the Column that is to be used within the specific Data Dictionary Table identified by the Implement Type. This is the Instance (INST) in LBS documents.
  uint8_t DataDictionaryColumn;          //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // This 4 bit parameter indicates the Row that is to be used within the specific Data Dictionary Table identified by the Implement Type. This is the Group (GRUP) in LBS documents.
  uint8_t DataDictionaryRow;             //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // This 4 byte parameter contains the actual data  for the Process Data Message.
  uint32_t ProcessVariableValue;         //      Bits=32.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} PD_t;

// def @REQRR CAN Message (416087806)
#define REQRR_IDE (1U)
#define REQRR_DLC (8U)
#define REQRR_CANID (0x18CCFEFEU)
// -- Request for Repetition Rate  This message allows the system to adapt the bus bandwidth to the needs of the user of messages.
typedef struct
{

  // This parameter defines the repetition rate of the specified PGN.
  uint16_t RepetitionRateParameter;      //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // This 3 bit parameter that indicates how the data in the following Process Data Parameters is to be used when combined with the Process Data Type parameter. See Table A.2.    NOTE: Process Data Type is included since MOD is a function of PD
  uint8_t ProcessDataModifier;           //      Bits=03.  [ 0     , 0      ]  Unit:''     

  // This 2 bit parameter indicates what the data in the following Process Data Parameters is to be used for. See Table A.2.  00 Data is Set Point  01 Data is Actual values  10 Message is Set Point request  11 Message is Actual value request  Data is Set ...
  // 3 - "Message is Actual value request" 
  // 2 - "Message is Set Point request" 
  // 1 - "Data is Actual values" 
  // 0 - "Data is Set Point" 

  uint8_t ProcessDataType;               //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This 2 bit parameter that indicates the format or availability of the data in the following Process Data Parameter.  00 Data format is Long Integer  01 Data format is Floating  10 Data format is unsigned Long Integer  11 Not Available or error  Data ...
  // 3 - "Not Available or error" 
  // 2 - "Data format is unsigned Long Integer" 
  // 1 - "Data format is Floating" 
  // 0 - "Data format is Long Integer" 

  uint8_t DataFormat_ErrorCondition;     //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This 4 bit parameter of this message will indicate which Implement is referenced within a set of identical Implements.  The numbering is to start with 1 at the leftmost, foremost, bottom most implement.  The numbering will then increment from left ...
  uint8_t ImplementPos;                  //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // This 4 bit parameter indicates which data dictionary page is to be used to locate the identity of the following data.
  uint8_t ImplementType;                 //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // This 4 bit parameter indicates the Column that is to be used within the specific Data Dictionary Table identified by the Implement Type. This is the Instance (INST) in LBS documents.
  uint8_t DataDictionaryColumn;          //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // This 4 bit parameter indicates the Row that is to be used within the specific Data Dictionary Table identified by the Implement Type. This is the Group (GRUP) in LBS documents.
  uint8_t DataDictionaryRow;             //      Bits=04.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} REQRR_t;

// def @KWP4 CAN Message (416153342)
#define KWP4_IDE (1U)
#define KWP4_DLC (8U)
#define KWP4_CANID (0x18CDFEFEU)
// -- Reserved for ISO 15765  KWP2000 Mixed functional addressing
typedef struct
{
  uint32_t framecnt;
} KWP4_t;

// def @KWP3 CAN Message (416218878)
#define KWP3_IDE (1U)
#define KWP3_DLC (8U)
#define KWP3_CANID (0x18CEFEFEU)
// -- Reserved for ISO 15765  KWP2000 Mixed physical addressing
typedef struct
{
  uint32_t framecnt;
} KWP3_t;

// def @CTL CAN Message (416284414)
#define CTL_IDE (1U)
#define CTL_DLC (8U)
#define CTL_CANID (0x18CFFEFEU)
#define CTL_CYC (5000U)
// -- Continuous Torque & Speed Limit Request
// signal: @EngSpeedLimitRqMinContinuous
#define EngSpeedLimitRqMinContinuous_CovFactor 32
#define EngSpeedLimitRqMinContinuous_CovS(x) ((uint8_t)((x / 32)))
// signal: @EngSpeedLimitRqMaxContinuous
#define EngSpeedLimitRqMaxContinuous_CovFactor 32
#define EngSpeedLimitRqMaxContinuous_CovS(x) ((uint8_t)((x / 32)))
// signal: @EngTorqueLimitRqMinContinuous
#define EngTorqueLimitRqMinContinuous_CovFactor 1
#define EngTorqueLimitRqMinContinuous_CovS(x) ((int16_t)(x + 125))
// signal: @EngTorqueLimitRqMaxContinuous
#define EngTorqueLimitRqMaxContinuous_CovFactor 1
#define EngTorqueLimitRqMaxContinuous_CovS(x) ((int16_t)(x + 125))
// signal: @MnContinuousRetarderSpeedLimitRq
#define MnContinuousRetarderSpeedLimitRq_CovFactor 32
#define MnContinuousRetarderSpeedLimitRq_CovS(x) ((uint8_t)((x / 32)))
// signal: @MxContinuousRetarderSpeedLimitRq
#define MxContinuousRetarderSpeedLimitRq_CovFactor 32
#define MxContinuousRetarderSpeedLimitRq_CovS(x) ((uint8_t)((x / 32)))
// signal: @MnCntinuousRetarderTorqueLimitRq
#define MnCntinuousRetarderTorqueLimitRq_CovFactor 1
#define MnCntinuousRetarderTorqueLimitRq_CovS(x) ((int16_t)(x + 125))
// signal: @MxCntinuousRetarderTorqueLimitRq
#define MxCntinuousRetarderTorqueLimitRq_CovFactor 1
#define MxCntinuousRetarderTorqueLimitRq_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // Requested minimum continuous engine speed
  uint8_t EngSpeedLimitRqMinContinuous;       //      Bits=08.  [ 0     , 8000   ]  Unit:'rpm'   Factor= 32    

  // Requested maximum continuous engine speed
  uint8_t EngSpeedLimitRqMaxContinuous;       //      Bits=08.  [ 0     , 8000   ]  Unit:'rpm'   Factor= 32    

  // Requested minimum continuous engine torque (operating range: 0 to 125%)
  int16_t EngTorqueLimitRqMinContinuous;      //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Offset= -125     

  // Requested maximum continuous engine torque (operating range: 0 to 125%)
  int16_t EngTorqueLimitRqMaxContinuous;      //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Offset= -125     

  // Requested minimum continuous retarder speed
  uint8_t MnContinuousRetarderSpeedLimitRq;   //      Bits=08.  [ 0     , 8000   ]  Unit:'rpm'   Factor= 32    

  // Requested maximum continuous retarder speed
  uint8_t MxContinuousRetarderSpeedLimitRq;   //      Bits=08.  [ 0     , 8000   ]  Unit:'rpm'   Factor= 32    

  // Requested minimum continuous retarder torque (operating range: -125 to 0%)
  int16_t MnCntinuousRetarderTorqueLimitRq;   //      Bits=08.  [ -125  , 0      ]  Unit:'%'     Offset= -125     

  // Requested maximum continuous retarder torque (operating range: -125 to 0%)
  int16_t MxCntinuousRetarderTorqueLimitRq;   //      Bits=08.  [ -125  , 0      ]  Unit:'%'     Offset= -125     
  uint32_t framecnt;
} CTL_t;

// def @CL CAN Message (416349950)
#define CL_IDE (1U)
#define CL_DLC (8U)
#define CL_CANID (0x18D0FEFEU)
#define CL_CYC (5000U)
// -- Cab Illumination Message  This message contains information that controls illumination devices inside the vehicle's cab.
// signal: @IlluminationBrightnessPercent
#define IlluminationBrightnessPercent_CovFactor 0.4
#define IlluminationBrightnessPercent_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @SwtchBcklghtIllmntnBrghtnssPrcnt
#define SwtchBcklghtIllmntnBrghtnssPrcnt_CovFactor 0.4
#define SwtchBcklghtIllmntnBrghtnssPrcnt_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @SwtchIndctnIllmntnBrghtnssPrcent
#define SwtchIndctnIllmntnBrghtnssPrcent_CovFactor 0.4
#define SwtchIndctnIllmntnBrghtnssPrcent_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Commanded backlight brightness level for all cab displays.      Note:  If a separate device is used to independently control the switch backlight brightness level, see SPN 5532.
  uint8_t IlluminationBrightnessPercent;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Commanded switch backlight brightness level for all operator control switches.  This is separate from the cab display illumination Brightness Percent parameter.  Note:  If a single device is used to control both the backlight brightness level of the ...
  uint8_t SwtchBcklghtIllmntnBrghtnssPrcnt;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Commanded switch indication illumination brightness level for all operator control switches. This is separate from the cab display illumination Brightness Percent parameter.  Note: If a single device is used to control both the indication brightness ...
  uint8_t SwtchIndctnIllmntnBrghtnssPrcent;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} CL_t;

// def @DM18 CAN Message (416612094)
#define DM18_IDE (1U)
#define DM18_DLC (8U)
#define DM18_CANID (0x18D4FEFEU)
// -- Data Security  The data security parameter group is used to send security entities of a given type and length. These entities are data produced by or used for applications of cryptography and supporting procedures to ensure data security.
typedef struct
{

  // This 12-bit parameter contains the length, in bytes, of the Data Security Parameter.
  uint8_t SecurityEntityLength;          //      Bits=08.  [ 0     , 4095   ]  Unit:''     

  // This 4-bit parameter that indicates whether the data in the following Security Entity parameter is to be used as a Long Seed, Long Key, Session Key, or Certificate.
  // 3 - "Data is Certificate" 
  // 2 - "Data is Session Key" 
  // 1 - "Data is Long Key" 
  // 0 - "Data is Long Seed" 

  uint8_t SecurityEntityType;            //      Bits=04.  [ 0     , 15     ]  Unit:''     

  uint8_t SecurityEntityLengthHigh;      //      Bits=04.  [ 0     , 255    ]  Unit:'Byte' 

  // This Parameter is used to send the data for the Data Security message. There are presently four different items defined. The Data Security Parameter shall be sent least significant byte first.
  uint8_t DataSecurityParameter;         //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} DM18_t;

// def @TDA CAN Message (416677630)
#define TDA_IDE (1U)
#define TDA_DLC (8U)
#define TDA_CANID (0x18D5FEFEU)
// -- Time/Date Adjust
// signal: @AdjustSeconds
#define AdjustSeconds_CovFactor 0.25
#define AdjustSeconds_CovS(x) ((uint8_t)((x / 0.25)))
// signal: @AdjustDay
#define AdjustDay_CovFactor 0.25
#define AdjustDay_CovS(x) ((uint8_t)((x / 0.25)))
// signal: @AdjustYear
#define AdjustYear_CovFactor 1
#define AdjustYear_CovS(x) ((uint16_t)(x - 1985))
// signal: @AdjustLocalMinuteOffset
#define AdjustLocalMinuteOffset_CovFactor 1
#define AdjustLocalMinuteOffset_CovS(x) ((int16_t)(x + 125))
// signal: @AdjustLocalHourOffset
#define AdjustLocalHourOffset_CovFactor 1
#define AdjustLocalHourOffset_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // The seconds component for setting the current time of day.  This should be reported as the seconds component of the current time according to the time of day standard indicated with the Local Hour Offset parameter (SPN 1602).  The time of day should ...
  uint8_t AdjustSeconds;                 //      Bits=08.  [ 0     , 59.75  ]  Unit:'s'     Factor= 0.25  

  // The minutes component for setting the current time of day.  This should be reported as the minutes component of the current time according to the time of day standard indicated with the Local Hour Offset parameter (SPN 1602).  The time of day should ...
  uint8_t AdjustMinutes;                 //      Bits=08.  [ 0     , 59     ]  Unit:'min'  

  // The hours component for setting the current time of day.  This should be reported as the hours component of the current time according to the time of day standard indicated with the Local Hour Offset parameter (SPN 1602).  The time of day should be ...
  uint8_t AdjustHours;                   //      Bits=08.  [ 0     , 23     ]  Unit:'h'    

  // The month component for setting the current calendar date.  This should be reported as the month component of the current date according to the calendar date standard indicated with the Local Hour Offset parameter (SPN 1602).  The calendar date ...
  uint8_t AdjustMonth;                   //      Bits=08.  [ 1     , 12     ]  Unit:'months'

  // The day component for setting the current calendar date.  This should be reported as the day component of the current date according to the calendar date standard indicated with the Local Hour Offset parameter (SPN 1602).  The calendar date should ...
  uint8_t AdjustDay;                     //      Bits=08.  [ 0.25  , 31.75  ]  Unit:'days'  Factor= 0.25  

  // The year component for setting the current calendar date.  This should be reported as the year component of the current date according to the calendar date standard indicated with the Local Hour Offset parameter (SPN 1602).  The calendar date should ...
  uint16_t AdjustYear;                   //      Bits=08.  [ 1985  , 2235   ]  Unit:'years' Offset= 1985     

  // The minute component for setting the offset between the UTC (Universal Time Coordinate) time and date and a the local time zone time and date.  This is the number of minutes to add to UTC, a.k.a. GMT, time and date to convert to the time and date in ...
  int16_t AdjustLocalMinuteOffset;       //      Bits=08.  [ -59   , 59     ]  Unit:'min'   Offset= -125     

  // The hour component for setting the offset between the UTC (Universal Time Coordinate) time and date and a the local time zone time and date.  This is the number of minutes to add to UTC, a.k.a. GMT, time and date to convert to the time and date in ...
  int16_t AdjustLocalHourOffset;         //      Bits=08.  [ -24   , 23     ]  Unit:'h'     Offset= -125     
  uint32_t framecnt;
} TDA_t;

// def @DM17 CAN Message (416743166)
#define DM17_IDE (1U)
#define DM17_DLC (8U)
#define DM17_CANID (0x18D6FEFEU)
// -- Boot Load Data  Used primarily to load boot data/program into a device when a memory access boot load command has been issued.
typedef struct
{

  // This is a 1-byte parameter using the same SLOT as the Raw Binary Data. There shall be 8 occurrences of this parameter in the message. The meaning of this parameter is proprietary. The structure used to reference the program and verify the data is ...
  uint8_t BootLoadData;                  //      Bits=08.  [ 0     , 0      ]  Unit:''     

  int8_t BootLoadData1;                  //  [-] Bits=08.  [ 0     , 0      ]  Unit:''     

  int8_t BootLoadData2;                  //  [-] Bits=08.  [ 0     , 0      ]  Unit:''     

  int8_t BootLoadData3;                  //  [-] Bits=08.  [ 0     , 0      ]  Unit:''     

  int8_t BootLoadData4;                  //  [-] Bits=08.  [ 0     , 0      ]  Unit:''     

  int8_t BootLoadData5;                  //  [-] Bits=08.  [ 0     , 0      ]  Unit:''     

  int8_t BootLoadData6;                  //  [-] Bits=08.  [ 0     , 0      ]  Unit:''     

  int8_t BootLoadData7;                  //  [-] Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} DM17_t;

// def @DM16 CAN Message (416808702)
#define DM16_IDE (1U)
#define DM16_DLC (8U)
#define DM16_CANID (0x18D7FEFEU)
// -- Binary Data Transfer  Used primarily to transfer data for the memory access commands.
typedef struct
{

  // This is an 8-bit (1-byte) parameter to be sent within the Binary Data Transfer PGN to provide information on the number of Raw Binary Data parameters which will follow when the message is single packet. Its value is between 1 and 7 when the Binary ...
  uint8_t NumberOfOccurance;             //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // This is a 1-byte parameter representing the value for 1 byte of memory. It can have any value between 0 and 255 (0 and 0xFF) with no reserved values.  
  uint8_t RawBinaryData;                 //      Bits=08.  [ 0     , 0      ]  Unit:''     

  int8_t RawBinaryData1;                 //  [-] Bits=08.  [ 0     , 0      ]  Unit:''     

  int8_t RawBinaryData2;                 //  [-] Bits=08.  [ 0     , 0      ]  Unit:''     

  int8_t RawBinaryData3;                 //  [-] Bits=08.  [ 0     , 0      ]  Unit:''     

  int8_t RawBinaryData4;                 //  [-] Bits=08.  [ 0     , 0      ]  Unit:''     

  int8_t RawBinaryData5;                 //  [-] Bits=08.  [ 0     , 0      ]  Unit:''     

  int8_t RawBinaryData6;                 //  [-] Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} DM16_t;

// def @DM15 CAN Message (416874238)
#define DM15_IDE (1U)
#define DM15_DLC (8U)
#define DM15_CANID (0x18D8FEFEU)
// -- Memory Access Response  The main use for the Memory_Access_Response is for a device to answer a tool which has attempted to access the memory within the device.
typedef struct
{

  // When the Status of the Memory Access Response message is a Proceed, an 11-bit parameter identifies the amount of memory (i.e. the range of memory) over which the Device is willing to allow a particular operation to be carried out. For ?Proceed? the ...
  uint8_t NumberAllowed;                 //      Bits=08.  [ 0     , 2047   ]  Unit:''     

  // This is a 3-bit parameter which allows the Device to return its Status. All Memory Access Requests originate at a Tool and are considered Commands. All Memory Access Responses originate at a Device and are considered Status. The device may choose to ...
  // 7 - "Reserved" 
  // 6 - "Reserved" 
  // 5 - "OperationFailed" 
  // 4 - "OperationCompleted" 
  // 3 - "Reserved" 
  // 2 - "Reserved" 
  // 1 - "Busy" 
  // 0 - "Proceed" 

  uint8_t Status;                        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  uint8_t NumberAllowedHigh;             //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // This is a 24-bit parameter which has two uses. One is to transfer a checksum, CRC or other type of EDC parameter (or any segment thereof) from a device to a Tool within the Memory Access Response message. The second use is to send an Error Indicator ...
  // 16777215 - "NoErrorIndicatorAvailable" 
  // 65540 - "TransprtNotComplWithinTimeAllowd" 
  // 65539 - "TransportNotInitWithinTimeAllowd" 
  // 65538 - "NoResponseInTheTimeAllowed" 
  // 65537 - "ModuleExceedingNumberOfRetries" 
  // 65536 - "AbortFromExtToNormalSoftwareProc" 
  // 4103 - "VehicleNotInParkOrNotStationary" 
  // 4102 - "EngineRunning" 
  // 4101 - "NotInEngineeringOrDevelopmentMode" 
  // 4100 - "NotInDiagnosticMode" 
  // 4099 - "InvalidKey" 
  // 4098 - "InvalidUserLevel" 
  // 4097 - "InvalidPassword" 
  // 4096 - "SecurityErrorGeneral" 
  // 266 - "NameDoesNotConformToExpectdValue" 
  // 265 - "DataDoesNotConformToValueRanges" 
  // 264 - "AddrForBootLoadExeInvalidBoundary" 
  // 263 - "AddrForBootLoadExeOutsideExeMem" 
  // 262 - "OpReqExeTransfAndEraseOfProgMem" 
  // 261 - "OpRequiresPriorEraseOfProgramMem" 
  // 260 - "OpRequiresPriorEraseOfDataMem" 
  // 259 - "ReqMemoryExceededAvailableMemory" 
  // 258 - "LengthNotValidForMemStructAndOp" 
  // 257 - "AddressNotOnValidBoundary" 
  // 256 - "AddressingOrDataGeneralError" 
  // 36 - "InternalFailurePreventingReq" 
  // 35 - "PROMDidNotVerifyOnWrite" 
  // 34 - "FLASHDidNotVerifyOnWrite" 
  // 33 - "RAMDidNotVerifyOnWrite" 
  // 32 - "EDCParaNotCorrectForDataStream" 
  // 31 - "ProcessUnspecReqFromThisAddress" 
  // 23 - "ProcessingEDCPGenerationReq" 
  // 22 - "ProcessingBootLoadReq" 
  // 19 - "ProcessingStatusReq" 
  // 18 - "ProcessingWriteReq" 
  // 17 - "ProcessingReadReq" 
  // 16 - "ProcessingEraseReq" 
  // 2 - "ProcessingForSomeoneElse" 
  // 1 - "ErrorNotIdentified" 
  // 0 - "NoError" 

  uint32_t ErrorIndicator;               //      Bits=24.  [ 0     , 16777215 ]  Unit:''     

  // This is an 8-bit parameter used to identify how to handle the data in the Error Indicator/ EDC Parameter. This EDCP Extension parameter is used within the Memory Access Response message (Device to Tool). Meaning must be determined from a table of ...
  // 9 - "DataInErrIndAndDataInSeedIsTime" 
  // 6 - "DataInErrorIndicator" 
  // 3 - "ConcatenateDataAsLowerEDCParam" 
  // 2 - "ConcatenateDataAsHigherEDCParam" 
  // 0 - "Completed" 
  // 255 - "NoErrIndicator/EDCParamAvailable" 

  uint8_t EDCP_Extension;                //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // This is a 16-bit parameter which is used by the Device primarily to send a Seed to a Tool, when using a Seed/Key type security system. It is also used by the Device to signal the Tool that the Device is satisfied that a complete Key has been ...
  // 255 - "NoFurtherKeyRequiredOfTool" 
  // 1 - "UseLongSeedOrKeyFromDataSecMsg" 
  // 0 - "SeedCompleted_BeginSendingKey" 

  uint16_t Seed;                         //      Bits=16.  [ 0     , 65535  ]  Unit:''     
  uint32_t framecnt;
} DM15_t;

// def @DM14 CAN Message (416939774)
#define DM14_IDE (1U)
#define DM14_DLC (8U)
#define DM14_CANID (0x18D9FEFEU)
// -- Memory Access Request  The main use for the Memory_Access_Request message is by a tool wishing to alter the memory of a device.
typedef struct
{

  // This is an 11-bit parameter which identifies the amount of memory (i.e. the range within the memory) over which the Tool desires an operation to be carried out when the Command of the Memory Access Request message is a Read, Write, Boot Load, or ...
  uint8_t NumberRequested;               //      Bits=08.  [ 0     , 2047   ]  Unit:''     

  // This is a 3-bit parameter which allows the Tool to send Commands to the Device. All Memory Access Requests originate at a Tool and are considered Commands. Some of the values within the Command have been overlaid with the same values in Status so ...
  // 7 - "EDCP_Generation" 
  // 6 - "BootLoad" 
  // 5 - "OperationFailed" 
  // 4 - "OperationCompleted" 
  // 3 - "StatusRequest" 
  // 2 - "Write" 
  // 1 - "Read" 
  // 0 - "Erase" 

  uint8_t Command;                       //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Indicates whether the Pointer and Pointer Extension are direct memory addresses (Pointer Type identifier = 0) or if the Pointer Extension is identifying a particular SPACE with the Pointer referencing a specific OBJECT within that particular SPACE ...
  // 1 - "DirectedSpatialAddressing" 
  // 0 - "DirectMemoryAddressing" 

  uint8_t PointerType;                   //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // Length/Number Requested
  uint8_t NumberRequestedHigh;           //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // If Pointer Type 0 is used, this 24-bit parameter, which has a value of 0 to 16,777,215 (0 to 0xFFFFFF) with no reserved ranges, is concatenated with the 8-bit Pointer Extension to form a direct memory address. The address thus formed represents the ...
  uint32_t Pointer;                      //      Bits=24.  [ 0     , 16777215 ]  Unit:''     

  // This parameter is either the high order 8 bits of a complete direct memory address or the identifier of a particular spacial address.
  // 0 - "SPN_SPACE" 

  uint8_t PointerExtension;              //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // This is a 2-byte parameter which is used by the Tool to primarily send a Key to the Device, but which can also be used by the Tool to provide a Password or a User_Level to the Device if desired (see  APPENDIX C).  This Key/User_Level parameter can ...
  // 65535 - "NoKeyAvailable" 
  // 0 - "UseLongSeedOrKey" 

  uint16_t KeyOrUserLevel;               //      Bits=16.  [ 0     , 65535  ]  Unit:''     
  uint32_t framecnt;
} DM14_t;

// def @KWP2 CAN Message (417005310)
#define KWP2_IDE (1U)
#define KWP2_DLC (8U)
#define KWP2_CANID (0x18DAFEFEU)
// -- Reserved for ISO 15765
typedef struct
{

  uint8_t SN;                            //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // 2 - "Overflow" 
  // 1 - "Wait " 
  // 0 - "Continue To Send" 

  uint8_t FlowStatus;                    //      Bits=04.  [ 0     , 3      ]  Unit:''     

  uint8_t SingleFrameDataLength;         //      Bits=04.  [ 0     , 7      ]  Unit:'Byte' 

  uint16_t FirstFrameDataLength;         //      Bits=12.  [ 0     , 4095   ]  Unit:'Byte' 

  // Part of Network Protocol Control Information (N_PCI) of a ISO 15765 message.
  // 3 - "Flow control " 
  // 2 - "Consecutive frame" 
  // 1 - "First frame" 
  // 0 - "Single frame" 

  uint8_t ProtocolCtrlInformation;       //      Bits=04.  [ 0     , 3      ]  Unit:''     

  uint8_t BlockSize;                     //      Bits=08.  [ 0     , 255    ]  Unit:''     

  uint8_t SeparationTime;                //      Bits=08.  [ 0     , 255    ]  Unit:'ms'   
  uint32_t framecnt;
} KWP2_t;

// def @KWP1 CAN Message (417070846)
#define KWP1_IDE (1U)
#define KWP1_DLC (8U)
#define KWP1_CANID (0x18DBFEFEU)
// -- Reserved for ISO 15765
typedef struct
{

  uint8_t SN;                            //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // 2 - "Overflow" 
  // 1 - "Wait " 
  // 0 - "Continue To Send" 

  uint8_t FlowStatus;                    //      Bits=04.  [ 0     , 3      ]  Unit:''     

  uint8_t SingleFrameDataLength;         //      Bits=04.  [ 0     , 7      ]  Unit:'Byte' 

  uint16_t FirstFrameDataLength;         //      Bits=12.  [ 0     , 4095   ]  Unit:'Byte' 

  // Part of Network Protocol Control Information (N_PCI) of a ISO 15765 message.
  // 3 - "Flow control " 
  // 2 - "Consecutive frame" 
  // 1 - "First frame" 
  // 0 - "Single frame" 

  uint8_t ProtocolCtrlInformation;       //      Bits=04.  [ 0     , 3      ]  Unit:''     

  uint8_t BlockSize;                     //      Bits=08.  [ 0     , 255    ]  Unit:''     

  uint8_t SeparationTime;                //      Bits=08.  [ 0     , 255    ]  Unit:'ms'   
  uint32_t framecnt;
} KWP1_t;

// def @DM13 CAN Message (417332990)
#define DM13_IDE (1U)
#define DM13_DLC (8U)
#define DM13_CANID (0x18DFFEFEU)
// -- Stop Start Broadcast  This message is used to stop or start broadcast messages. These broadcast messages may be on networks other than SAE J1939.
typedef struct
{

  // Identifies the action to be performed on the J1939 Network #1, Primary Vehicle Network? communications port.  00 Stop Broadcast  01 Start Broadcast  10 Reserved  11 Don?t Care/take no action (leave as is)
  // 3 - "Don?t Care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Start Broadcast" 
  // 0 - "Stop Broadcast" 

  uint8_t J1939Network1;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the action to be performed on the J1922 communications port.  00 Stop Broadcast  01 Start Broadcast  10 Reserved  11 Don?t Care/take no action (leave as is)
  // 3 - "Don?t Care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Start Broadcast" 
  // 0 - "Stop Broadcast" 

  uint8_t SAE_J1922;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the action to be performed on the J1587 communications port.    00 Stop Broadcast  01 Start Broadcast  10 Reserved  11 Don?t Care/take no action (leave as is)
  // 3 - "Don?t Care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Start Broadcast" 
  // 0 - "Stop Broadcast" 

  uint8_t SAE_J1587;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the action to be performed on the communications port that this parameter was received on.    00 Stop Broadcast  01 Start Broadcast  10 Reserved  11 Don?t Care/take no action (leave as is)
  // 3 - "Don?t Care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Start Broadcast" 
  // 0 - "Stop Broadcast" 

  uint8_t CurrentDataLink;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the action to be performed on the ?Other, Manufacture Specified Port? communications port.    00 Stop Broadcast  01 Start Broadcast  10 Reserved  11 Don?t Care/take no action (leave as is)
  // 2 - "Reserved" 
  // 1 - "Start Broadcast" 
  // 0 - "Stop Broadcast" 
  // 3 - "Don?t Care/take no action" 

  uint8_t ManufacturerSpecificPort;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the action to be performed on the J1850 communications port.    00 Stop Broadcast  01 Start Broadcast  10 Reserved  11 Don?t Care/take no action (leave as is)
  // 3 - "Don?t Care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Start Broadcast" 
  // 0 - "Stop Broadcast" 

  uint8_t SAE_J1850;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the action to be performed on the ISO 9141 communications port.    00 Stop Broadcast  01 Start Broadcast  10 Reserved  11 Don?t Care/take no action (leave as is)
  // 3 - "Don?t Care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Start Broadcast" 
  // 0 - "Stop Broadcast" 

  uint8_t ISO9141;                       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the action to be performed on the J1939 Network #2 communications port.    00 Stop Broadcast  01 Start Broadcast  10 Reserved  11 Don?t Care/take no action (leave as is)
  // 3 - "Don?t Care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Start Broadcast" 
  // 0 - "Stop Broadcast" 

  uint8_t J1939Network2;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the action to be performed on the J1939 Network #4 communications port.    00 Stop Broadcast  01 Start Broadcast  10 Reserved  11 Don?t Care/take no action (leave as is)
  // 3 - "Don?t Care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Start Broadcast" 
  // 0 - "Stop Broadcast" 

  uint8_t J1939Network4;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the action to be performed on the Proprietary Network #2 communications port.    00 Stop Broadcast  01 Start Broadcast  10 Reserved  11 Don?t Care/take no action (leave as is)
  // 3 - "Don?t Care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Start Broadcast" 
  // 0 - "Stop Broadcast" 

  uint8_t ProprietaryNetwork2;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the action to be performed on the Proprietary Network #1 communications port.    00 Stop Broadcast  01 Start Broadcast  10 Reserved  11 Don?t Care/take no action (leave as is)
  // 3 - "Don?t Care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Start Broadcast" 
  // 0 - "Stop Broadcast" 

  uint8_t ProprietaryNetwork1;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the action to be performed on the J1939 Network #3 communications port.    00 Stop Broadcast  01 Start Broadcast  10 Reserved  11 Don?t Care/take no action (leave as is)
  // 3 - "Don?t Care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Start Broadcast" 
  // 0 - "Stop Broadcast" 

  uint8_t J1939Network3;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicator to all nodes that the current communication port broadcast messages are being suspended due to commands other than J1939 DM13. Therefore, the receiving nodes should suspend timeout diagnostics for all messages from the transmitting device ...
  // 15 - "Not Available" 
  // 14 - "Resuming normal broadcast pattern" 
  // 3 - "Temporary suspension of some messages" 
  // 2 - "Temporary suspension of all broadcasts" 
  // 1 - "Indefinite suspension of some messages" 
  // 0 - "Indefinite suspension of all broadcasts" 

  uint8_t SuspendSignal;                 //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Indicator to all nodes that the communication ports that have been acted upon by the Stop Start Broadcast PGN are remaining in the modified state. Therefore all nodes should act accordingly. The Hold signal is required to be broadcast every 5 ...
  // 15 - "Not Avai l abl e" 
  // 1 - "Devices whose broadcast state has been modified" 
  // 0 - "All Devices" 

  uint8_t HoldSignal;                    //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Indicates the duration of a suspension of broadcast messages when that duration is known by the transmitting device. If the DM13 message is sent with thee suspend signal value of 2 or 3, the value of this parameter will represent the duration of ...
  uint16_t SuspendDuration;              //      Bits=16.  [ 0     , 64255  ]  Unit:'s'    
  uint32_t framecnt;
} DM13_t;

// def @CM1 CAN Message (417398526)
#define CM1_IDE (1U)
#define CM1_DLC (8U)
#define CM1_CANID (0x18E0FEFEU)
#define CM1_CYC (1000U)
// -- Cab Message 1  Message containing parameters originating from the vehicle cab.
// signal: @RequestedPercentFanSpeed
#define RequestedPercentFanSpeed_CovFactor 0.4
#define RequestedPercentFanSpeed_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @CabInteriorTempCmd
#define CabInteriorTempCmd_CovFactor 0.03125
#define CabInteriorTempCmd_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Fan speed of the first or only fan in the system as a ratio of the actual fan drive (current speed) to the fully engaged fan drive (maximum fan speed). A two state fan (off/on) will use 0% and 100% respectively. A three state fan ...
  uint8_t RequestedPercentFanSpeed;           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Parameter used to command a certain cab interior temperature.    Note: See also SPN 170.  SPN 1662 is an additional diagnostic SPN associated with cab temperature.
  int32_t CabInteriorTempCmd;                 //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Indicates whether to activate the auxiliary heater coolant water pump.    00 Deactivate water pump  01 Activate water pump  10 Reserved  11 Don't care/take no action
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Activate water pump" 
  // 0 - "Deactivate water pump" 

  uint8_t AuxHeaterCoolantPumpRq;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to hold the battery main switch.    00 Release Battery Main Switch  01 Hold Battery Main Switch  10 undefined  11 Don't care/take no action
  // 3 - "Don't care/take no action" 
  // 2 - "undefined" 
  // 1 - "Hold Battery Main Switch" 
  // 0 - "Release Battery Main Switch" 

  uint8_t BatteryMainSwitchHoldRq;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Senses whether the operator seat is in the forward driving position    00 Operator seat not facing forward  01 Operator seat is facing forward  10 Error  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Operator seat is facing forward" 
  // 0 - "Operator seat not facing forward" 

  uint8_t OperatorSeatDirectionSwitch;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of switch used to determine if Seat Belt is buckled    00 NOT Buckled  01 OK - Seat Belt is buckled  10 Error - Switch state cannot be determined  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "OK" 
  // 0 - "NOT Buckled" 

  uint8_t SeatBeltSwitch;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request by a secondary device to command the Park Brake.  The Park Brake controller should treat this as a request and should apply the Park Brake as determined by the controller.  Feedback of the park brake actuation may utilize SPN 70, SPN 619 or ...
  // 3 - "Don't care/Take no action" 
  // 2 - "SAE Reserved  " 
  // 1 - "Park Brake apply requested" 
  // 0 - "Park Brake apply not requested" 

  uint8_t ParkBrakeCmd;                       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which decreases the Vehicle Limiting Speed Governor (VLSG).    00 - Switch in the off state  01 - Switch in the on state - decrease  10 - Error  11 - Not available
  // 2 - "Error" 
  // 1 - "Switch in the on state" 
  // 0 - "Switch in the off state" 
  // 3 - "Not available" 

  uint8_t VhclLmtngSpdGvrnrDecrementSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which increases the Vehicle Limiting Speed Governor (VLSG).    00 - Switch in the off state  01 - Switch in the on state - increase  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Switch in the on state" 
  // 0 - "Switch in the off state" 

  uint8_t VhclLmtngSpdGvrnrIncrementSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which enables the Vehicle Limiting Speed Governor (VLSG) such that the vehicle speed may be either increased or decreased when the engine is off idle.    00 - Switch disabled  01 - Switched enabled  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Switched enabled" 
  // 0 - "Switch disabled" 

  uint8_t VhclLmtngSpdGovernorEnableSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of a switch available to the operator that inhibits aftertreatment regeneration.  00 not active  01 active  10 error  11 not available  This SPN would be ?not active? when aftertreatment regeneration is allowed to occur normally ...
  // 3 - "not available " 
  // 2 - "error " 
  // 1 - "active " 
  // 0 - "not active " 

  uint8_t AFTRegenInhSw;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of a switch available to the operator that forces aftertreatment regeneration.  00 not active  01 active  10 error  11 not available  This SPN would be ?not active? when aftertreatment regeneration is allowed to occur normally ...
  // 3 - "not available " 
  // 2 - "error " 
  // 1 - "active " 
  // 0 - "not active " 

  uint8_t AFTRegenForceSw;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that automated gear shifting is enabled via a switch        00 = Automated Gear Shifting is disabled      01 = Automated Gear Shifting is enabled      10 = Error      11 = Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Automated Gear Shifting is enabled" 
  // 0 - "Automated Gear Shifting is disabled" 

  uint8_t AtomaticGearShiftingEnableSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which enables the idle management system to be enabled. When this system is enabled with the engine in an idle mode and safe operating conditions existing, then the engine may be started or stopped automatically.  00 - Switch in the ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Switch in the on state" 
  // 0 - "Switch in the off state" 

  uint8_t EngAutomaticStartEnableSwitch;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to activate the auxiliary heater.  0000 De-activate auxiliary heater  0001 Off due to ADR per European Regulations for Transport of hazardous materials  0010 Economy mode  0011 Normal mode  0100 Heater pump up-keep  0101-1000 Reserved   ...
  // 15 - "Don't care/take no action" 
  // 14 - "Reserved" 
  // 4 - "Heater pump up-keep" 
  // 3 - "Normal mode" 
  // 2 - "Economy mode" 
  // 1 - "Off due to ADR per European Regulations for Transport of hazardous materials" 
  // 0 - "De-activate auxiliary heater" 

  uint8_t AuxHeaterModeRq;                    //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Request to activate engine zone heating.    00 Do not heat engine zone  01 Heat engine zone  10 Reserved  11 Don't care/take no action
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Heat engine zone" 
  // 0 - "Do not heat engine zone" 

  uint8_t RqEngZoneHeating;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Request to activate cab zone heating.    00 Do not heat cab engine zone  01 Heat cab zone  10 Reserved  11 Don't care/take no action
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Heat cab zone" 
  // 0 - "Do not heat cab engine zone" 

  uint8_t RqCabZoneHeating;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // User selected maximum vehicle speed.  If one is selected, then this SPN must equal one of the maximum vehicle speeds #1-#7 from PGN 64997 - Maximum Vehicle Speed Limit Status . If different maximum vehicle speed requests are present from different ...
  uint8_t SelectedMaxVehicleSpeedLimit;       //      Bits=08.  [ 0     , 250    ]  Unit:''     
  uint32_t framecnt;
} CM1_t;

// def @GPM21 CAN Message (417464062)
#define GPM21_IDE (1U)
#define GPM21_DLC (8U)
#define GPM21_CANID (0x18E1FEFEU)
#define GPM21_CYC (100U)
// -- General Purpose Message #2/1  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-3.
typedef struct
{

  // Information to identify a dolly axle within the road train.
  // 1 - "Dolly axle" 
  // 0 - "Towing or towed vehicle" 

  uint8_t VehicleType;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} GPM21_t;

// def @GPM11 CAN Message (417529598)
#define GPM11_IDE (1U)
#define GPM11_DLC (8U)
#define GPM11_CANID (0x18E2FEFEU)
#define GPM11_CYC (100U)
// -- General Purpose Message #1/1  Message to transmit data of the towing vehicle to the towed vehicle. See ISO 11992-3.
typedef struct
{

  // Information to identify a dolly axle within the road train.
  // 1 - "Dolly axle" 
  // 0 - "Towing or towed vehicle" 

  uint8_t VehicleType;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to activate the anti-theft device.
  // 3 - "Take no action" 
  // 1 - "Anti-theft device on" 
  // 0 - "Anti-theft device off" 

  uint8_t AntiTheftDeviceReq;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to switch on or off the obstacle detection device (ODD).
  // 3 - "Take no action" 
  // 1 - "ODD on" 
  // 0 - "ODD off" 

  uint8_t ODDRequest;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} GPM11_t;

// def @DM07 CAN Message (417595134)
#define DM07_IDE (1U)
#define DM07_DLC (8U)
#define DM07_CANID (0x18E3FEFEU)
// -- Command Non-continuously Monitored Test  The purpose of this command in the diagnostic process is to provide the ability to command On-Board Diagnostic monitoring tests of specific components/ systems that are not continuously monitored
typedef struct
{

  // The TID has 2 methods to designate the test to be run. The first method uses the TID alone and these test identifiers are manufacturer-defined test identifiers. For this first use there are 64 valid test identifiers, 1 to 64. The second method uses ...
  // 250 - "Last Measured Scaled Results" 
  // 249 - "Command Standard Test" 
  // 247 - "All scaled test results" 

  uint8_t TestIdentifier;                //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // This parameter identifies the component / system that will be tested.
  uint16_t SPN1;                         //      Bits=16.  [ 0     , 524287 ]  Unit:''     

  // This parameter identifies the failure mode identifier which represents the test(s) that shall be run on the component / system that will be tested.
  // 31 - "Not available" 
  // 19 - "Received network data in error" 
  // 18 - "Below normal (moderately severe)" 
  // 17 - "Below normal (least severe)" 
  // 16 - "Above normal (moderately severe)" 
  // 15 - "Above normal (least severe)" 
  // 14 - "Special intstructions" 
  // 13 - "Out of calibration" 
  // 12 - "Bad intelligent device" 
  // 11 - "Root cause not known" 
  // 10 - "Abnormal rate of change" 
  // 9 - "Abnormal update rate" 
  // 8 - "Abnormal frequency" 
  // 7 - "Mechanical system not responding" 
  // 6 - "Current above normal" 
  // 5 - "Current below normal" 
  // 4 - "Voltage below normal" 
  // 3 - "Voltage above normal" 
  // 2 - "Data erratic" 
  // 1 - "Below normal (most severe)" 
  // 0 - "Above normal (most severe)" 

  uint8_t FailureModeIdentifier1;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // SPN #1 (Conversion Version 4)
  uint8_t SPN1High;                      //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} DM07_t;

// def @RGE11 CAN Message (417660670)
#define RGE11_IDE (1U)
#define RGE11_DLC (8U)
#define RGE11_CANID (0x18E4FEFEU)
#define RGE11_CYC (100U)
// -- Running Gear Equipment #1/1  Message to transmit data of the towing vehicle to the towed vehicle. See ISO 11992-2.
// signal: @DrivenAxleLoad
#define DrivenAxleLoad_CovFactor 2
#define DrivenAxleLoad_CovS(x) ((uint16_t)((x / 2)))
// signal: @ParkingAndTrailerAirPress
#define ParkingAndTrailerAirPress_CovFactor 8
#define ParkingAndTrailerAirPress_CovS(x) ((uint8_t)((x / 8)))
// signal: @AuxEquipSupplyPressure
#define AuxEquipSupplyPressure_CovFactor 8
#define AuxEquipSupplyPressure_CovS(x) ((uint8_t)((x / 8)))
typedef struct
{

  // Command signal to activate a normal ride body height. The normal levels 1 and 2 are trailer specific body heights.
  // 2 - "Take no action" 
  // 1 - "Normal level 2" 
  // 0 - "Normal level 1" 

  uint8_t RideHeightRequest;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to control the body height [up (lifting)/down (lowering)] for the front axle.
  // 2 - "Take no action" 
  // 1 - "Vehicle body down (lowering)" 
  // 0 - "Vehicle body up (lifting)" 

  uint8_t LevelChangeReqFrontAxle;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to control the body height [up (lifting)/down (lowering)] for the rear axle.
  // 2 - "Take no action" 
  // 1 - "Vehicle body down (lowering)" 
  // 0 - "Vehicle body up (lifting)" 

  uint8_t LevelChangeReqRearAxle;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to control the lift axle position / tag axle load condition to transfer more load on the driven axle of the commercial vehicle.
  // 3 - "Take no action" 
  // 1 - "Traction help request" 
  // 0 - "No traction help request" 

  uint8_t TractionHelpReq;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to control the lift axle position / tag axle load condition.
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Position up / tag axle unladen" 
  // 0 - "Position down / tag axle laden" 

  uint8_t LiftAxle1PositionReq;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to control the lift axle position / tag axle load condition.
  // 3 - "Take no action" 
  // 1 - "Position up / tag axle unladen" 
  // 0 - "Position down / tag axle laden" 

  uint8_t LiftAxle2PositionReq;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to lock the steering axle.
  // 3 - "Take no action" 
  // 1 - "Lock steering axle" 
  // 0 - "Unlock steering axle" 

  uint8_t SteeringAxleLockingReq;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to control the body height to a level programmed and memorised in the ECU.
  // 3 - "Take no action" 
  // 1 - "Ramp level 2" 
  // 0 - "Ramp level 1" 

  uint8_t RampLevelReq;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to enable or disable the automatic level control.
  // 3 - "Take no action" 
  // 1 - "Enable level control" 
  // 0 - "Disable level control" 

  uint8_t LevelControlReq;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to store the actual body height level as new programmed and memorised ramp levels 1 or 2 in the ECU
  // 3 - "Take no action" 
  // 1 - "Store ramp level 2" 
  // 0 - "Store ramp level 1" 

  uint8_t RampLevelStorageReq;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal to stop immediately any change of the actual body height level.
  // 3 - "Take no action" 
  // 1 - "Stop request" 
  // 0 - "No stop request" 

  uint8_t StopLevelChangeReq;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Actual static vertical load on driven axle of the commercial vehicle. In case of more than one driven axle the value of the axle with the highest vertical load is transmitted.
  uint16_t DrivenAxleLoad;               //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     

  // The pneumatic pressure in the circuit or reservoir for the parking brake and the trailer supply.
  uint8_t ParkingAndTrailerAirPress;     //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // The pneumatic pressure in the auxiliary circuit.
  uint8_t AuxEquipSupplyPressure;        //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     
  uint32_t framecnt;
} RGE11_t;

// def @RGE21 CAN Message (417726206)
#define RGE21_IDE (1U)
#define RGE21_DLC (8U)
#define RGE21_CANID (0x18E5FEFEU)
#define RGE21_CYC (100U)
// -- Running Gear Equipment #2/1  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-2.
typedef struct
{

  // Signal which indicates the body height position of the vehicle as an answer to 'ride height request'.
  // 1 - "Vehicle body at requested level" 
  // 0 - "Vehicle body not at req. level" 

  uint8_t LevelCtrlSysRideHeightLevel;    //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates that the automatic level control is enabled or disabled.
  // 1 - "Level control enabled" 
  // 0 - "Level control disabled" 

  uint8_t LevelControl;                   //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates that a load transfer is active.
  // 1 - "Traction help active" 
  // 0 - "Traction help inactive" 

  uint8_t TractionHelp;                   //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the ramp level positions of the vehicle independently of a specific request.
  // 3 - "Not available" 
  // 1 - "Ramp level 2" 
  // 0 - "Ramp level 1" 

  uint8_t RampLevelPosition;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the position / load condition of lift axle / tag axle 1.   Numbering of lift/tag axles starts at front axle.  See SPN 6843 for more detail.  00 Lift axle position down / tag axle laden  01 Lift axle position up / tag axle ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lift axle position up / tag axle unladen" 
  // 0 - "Lift axle position down / tag axle laden" 

  uint8_t LiftAxle1Pos;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the position / load condition of lift axle / tag axle #2.   Numbering of lift/tag axles starts at front axle.  See SPN 6844 for more detail.  00 Lift axle position down / tag axle laden  01 Lift axle position up / tag axle ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lift axle position up / tag axle unladen" 
  // 0 - "Lift axle position down / tag axle laden" 

  uint8_t LiftAxle2Pos;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the actual steering axle locking status.
  // 1 - "Steering axle locked" 
  // 0 - "Steering axle unlocked" 

  uint8_t SteeringAxleLocking;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the storage of a new ramp level in the ECU.
  // 1 - "New ramp level stored" 
  // 0 - "No new storage request" 

  uint8_t RampLevelStorage;               //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the level change of the body height at the front axle due to any external requests.
  // 1 - "Body lifting/lowering active" 
  // 0 - "Body lifting/lowering not active" 

  uint8_t LevelChangeFrontAxle;           //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the level change of the body height at the rear axle due to any external requests.
  // 1 - "Body lifting/lowering active" 
  // 0 - "Body lifting/lowering not active" 

  uint8_t LevelChangeRearAxle;            //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the stop of any level change due to a 'stop request'.
  // 1 - "Level change stopped" 
  // 0 - "No stop request" 

  uint8_t StopLevelChangeAcknowledge;     //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the normal levels of the vehicle independently of a specific request.
  // 3 - "Not available" 
  // 1 - "Normal level 2" 
  // 0 - "Normal level 1" 

  uint8_t NormalLevel;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the level of the body height as an anser to 'ramp level request'.
  // 1 - "Body at requested ramp level" 
  // 0 - "Body not at requested ramp level" 

  uint8_t RampLevel;                      //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Actual nominal vehicle body height.
  uint16_t NominalVehBodyLevelFrontAxle;  //      Bits=16.  [ 0     , 64255  ]  Unit:'mm'   

  // Actual nominal vehicle body height.
  uint16_t NominalVehBodyLevelRearAxle;   //      Bits=16.  [ 0     , 64255  ]  Unit:'mm'   
  uint32_t framecnt;
} RGE21_t;

// def @VT12 CAN Message (417791742)
#define VT12_IDE (1U)
#define VT12_DLC (8U)
#define VT12_CANID (0x18E6FEFEU)
// -- Virtual Terminal-to-Node
typedef struct
{
  uint32_t framecnt;
} VT12_t;

// def @VT21 CAN Message (417857278)
#define VT21_IDE (1U)
#define VT21_DLC (8U)
#define VT21_CANID (0x18E7FEFEU)
// -- Node-to-Virtual Terminal
typedef struct
{
  uint32_t framecnt;
} VT21_t;

// def @ACKM CAN Message (417922814)
#define ACKM_IDE (1U)
#define ACKM_DLC (8U)
#define ACKM_CANID (0x18E8FEFEU)
// -- Acknowledgment Message  The Acknowledgment PG is used to provide a handshake mechanism between transmitting and receiving devices.
typedef struct
{

  // Indicates the acknowledgement response.  0 - Positive Acknowledgment (ACK)  1 - Negative Acknowledgment (NACK)  2 - Access Denied (PGN supported but access denied)  3 - Cannot Respond (PGN supported but ECU cannot respond now) cannot respond with ...
  // 3 - "Cannot Respond" 
  // 2 - "Access Denied" 
  // 1 - "Negative Acknowledgment" 
  // 0 - "Positive Acknowledgment" 

  uint8_t ControlByte;                      //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Group Function of PGN being acknowledged. This field identifies for a device the specific group function of a PGN being acknowledged or declined.  This field is not used if the PGN being acknowledged or declined is not a group function PGN.
  uint8_t GroupFunctionValue;               //      Bits=08.  [ 0     , 255    ]  Unit:''     

  uint8_t AddressBusy;                      //      Bits=08.  [ 0     , 255    ]  Unit:''     

  uint8_t AddressAccessDenied;              //      Bits=08.  [ 0     , 255    ]  Unit:''     

  uint8_t AddressNegativeAcknowledgement;   //      Bits=08.  [ 0     , 255    ]  Unit:''     

  uint8_t AddressAcknowledged;              //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // PGN which is requested by the Request message
  uint32_t ParameterGroupNumber;            //      Bits=24.  [ 0     , 16777215 ]  Unit:''     
  uint32_t framecnt;
} ACKM_t;

// def @RQST CAN Message (418053886)
#define RQST_IDE (1U)
#define RQST_DLC (3U)
#define RQST_CANID (0x18EAFEFEU)
// -- Request  This message type, identified by the PGN, provides the capability to request information globally or from a specific destination.
typedef struct
{

  // Whenever it is necessary to identify a Parameter Group in the data field of a CAN data frame, it will be expressed in 24 bits.  The Parameter Group Number is a 24 bit value that has the following constituent components:  Reserved bit, Data Page bit, ...
  uint32_t ParameterGroupNumber;         //      Bits=24.  [ 0     , 16777215 ]  Unit:''     
  uint32_t framecnt;
} RQST_t;

// def @TPDT CAN Message (418119422)
#define TPDT_IDE (1U)
#define TPDT_DLC (8U)
#define TPDT_CANID (0x18EBFEFEU)
// -- Transport Protocol - Data Transfer  Used for the transfer of data associated with Parameter Groups that have more than 8 bytes of data.
typedef struct
{

  // Sequence Number (TP.DT)
  uint8_t SequenceNumber;                //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} TPDT_t;

// def @TPCMxx CAN Message (418184958)
#define TPCMxx_IDE (1U)
#define TPCMxx_DLC (8U)
#define TPCMxx_CANID (0x18ECFEFEU)
// -- Transport Protocol - Connection Mgmt  Used for the transfer of Parameter Groups that have 9 or more bytes of data.
typedef struct
{

  // Control byte (I.e. Group Function) associated with the Transport Protocol - Connection Management (PGN 60,416)  16 (dec) - Request to Send  17 (dec) - Clear to Send  19 (dec) - End of Message ACK  32 (dec) - Broadcast Announce Message  255 (dec) - ...
  // 24 - "EAbort" 
  // 23 - "EEoMACK" 
  // 22 - "EDPO" 
  // 21 - "ECTS" 
  // 20 - "ERTS" 
  // 255 - "Abort" 
  // 32 - "BAM" 
  // 19 - "EoMA" 
  // 17 - "CTS" 
  // 16 - "RTS" 

  uint8_t ControlByte;                    //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Total message size (in bytes) received for RTS/CTS message.  Messages shorter than 9 data bytes should be sent without utilizing the transport protocol.  Messages longer than 1785 can not use the RTS/CTS transport protocol.
  uint16_t TotalMessageSizeEoMA;          //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Total message size (in bytes) for BAM  message.  Messages shorter than 9 data bytes should be sent without utilizing the transport protocol.  Messages longer than 1785 can not use the BAM transport protocol.
  uint16_t TotalMessageSizeBAM;           //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Reason for connection abort message.  1 Already in one or more connection managed sessions and cannot support another.  2 System resources were needed for another task so this connection managed session was terminated.  3 A timeout occurred and this ...
  uint8_t ConnectionAbortReason;          //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Number of Packets that can be sent (TP.CM_CTS)
  uint8_t NumberOfPacketsThatCanBeSent;   //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Total message size (in bytes) for RTS/CTS message.  Messages shorter than 9 data bytes should be sent without utilizing the transport protocol.  Messages longer than 1785 can not use the RTS/CTS transport protocol.
  uint16_t TotalMessageSize;              //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Next Packet Number to be sent (TP.CM_CTS)
  uint8_t NextPacketNumberToBeSent;       //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Total number of packets received for RTS/CTS message.  Zero and one are not valid values.
  uint8_t TotalNumberOfPacketsEoMA;       //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Total number of packets for BAM message.  Zero and one are not valid values.
  uint8_t TotalNumberOfPacketsBAM;        //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Total number of packets for RTS/CTS message.  Zero and one are not valid values.
  uint8_t TotalNumberOfPackets;           //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Maximum number of packets for RTS/CTS message.  zero through four are not allowed
  uint8_t MaximumNumberOfPackets;         //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Requested PGN in the TP.CM_RTS message
  // 255 - "NotAvailable" 

  uint32_t PGNumber;                      //      Bits=24.  [ 0     , 16777200 ]  Unit:''     
  uint32_t framecnt;
} TPCMxx_t;

// def @Nxx CAN Message (418250494)
#define Nxx_IDE (1U)
#define Nxx_DLC (8U)
#define Nxx_CANID (0x18EDFEFEU)
// -- Network Layer
typedef struct
{

  // Identifies the function or service of an instance of the Network Message.    A summary of the Network Message Control Bytes value assignments are defined within SAE J1939-31.
  // 133 - "SP_Reset Message " 
  // 132 - "SP_Response Message " 
  // 131 - "SP_Request Message " 
  // 130 - "GP_Reset Message " 
  // 129 - "GP_Response " 
  // 128 - "GP_Request " 
  // 67 - "NTX_Response " 
  // 66 - "NTX_Request " 
  // 65 - "NT_Response" 
  // 64 - "NT_Request " 
  // 6 - "MFDB_CreateEntry" 
  // 5 - "MFDB_SetMode" 
  // 4 - "MFDB_Clear" 
  // 3 - "MFDB_Delete" 
  // 2 - "MFDB_Add" 
  // 1 - "MFDB_Response" 
  // 0 - "MFDB_Request" 

  uint8_t NetworkMessageControlByte;     //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Identifies the destination port, or send port, of messages being moved through the NIECU.   The Port Number assignments are defined within SAE J1939-31. 
  // 21 - "Global (All ports)" 
  // 0 - "Local" 

  uint8_t ToPort;                        //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Identifies a specific port of the NIECU without context of messaging direction.   The Port Number assignments are defined within SAE J1939-31.
  // 21 - "Global (All ports)" 
  // 0 - "Local" 

  uint8_t NIECUPort;                     //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Identifies the origination port, or receive port, of messages being moved through the NIECU.   The Port Number assignments are defined within SAE J1939-31. 
  // 21 - "Global (All ports)" 
  // 0 - "Local" 

  uint8_t FromPort;                      //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The number of instances of Source Addresses and associated NAMEs included in the associated data content.
  uint8_t NumberOfSA_NAMEPairs;          //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Identifies the mode of filtering operation applied for messages being passed from one specific port to another specific port.   The Filter Mode value assignments are defined within SAE J1939-31.
  // 1 - "PassSpecificPGNs" 
  // 0 - "BlockSpecificPGNs" 

  uint8_t FilterMode;                    //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} Nxx_t;

// def @AC CAN Message (418316030)
#define AC_IDE (1U)
#define AC_DLC (8U)
#define AC_CANID (0x18EEFEFEU)
// -- Address Claimed  Message used to claim an address for a Controller Application.
typedef struct
{

  uint32_t IdentityNumber;               //      Bits=21.  [ 0     , 2097152 ]  Unit:''     

  // Assigned by NMEA 2000 Committee
  // 454 - "NGK Spark Plug Co. Ltd" 
  // 453 - "Cooper Bussmann" 
  // 452 - "WIKA Alexander Wiegand SE & Co. KG" 
  // 451 - "Parker Hannifin Corp" 
  // 450 - "Dycor Technologies Ltd." 
  // 449 - "Polaris Industries Inc" 
  // 448 - "Stanadyne Corporation, Electronics Systems" 
  // 447 - "Great Plains Mfg." 
  // 446 - "CertTech, L.L.C." 
  // 445 - "KAT MECHATRONIC, Electronic Product Division" 
  // 444 - "ITT Power Solutions" 
  // 443 - "SignalQuest, Inc." 
  // 442 - "Horsch Maschinen GmbH" 
  // 441 - "PTG Reifendruckregelsysteme GmbH" 
  // 440 - "Cummins Power Generation" 
  // 439 - "Hyundai Heavy Industries" 
  // 438 - "Comar Systems Ltd" 
  // 437 - "Digital Yacht Limited" 
  // 436 - "Kinze Manufacturing" 
  // 435 - "Zunhammer GmbH" 
  // 434 - "Stored Energy Systems" 
  // 433 - "Rowe Electronics" 
  // 432 - "S&A Systems, Inc." 
  // 431 - "Tohatsu Corporation" 
  // 430 - "Auteq Telematica S.A." 
  // 520 - "Trapeze" 
  // 519 - "Peeters Landbouwmachines b.v." 
  // 518 - "Transas USA Inc." 
  // 517 - "Noland Engineering" 
  // 516 - "AVAT Automation GmbH" 
  // 515 - "GINAF Trucks Nederland B.V." 
  // 514 - "DISTek Integration, Inc." 
  // 513 - "FarmscanAg" 
  // 512 - "Inpower LLC" 
  // 511 - "Sulky" 
  // 510 - "Marinesoft Co. Ltd" 
  // 509 - "MOTORTECH GmbH" 
  // 508 - "Transtech Innovations" 
  // 507 - "Test Center ISOBUS" 
  // 506 - "IHI STAR Machinery Corporation" 
  // 505 - "Yetter Farm Equipment" 
  // 504 - "Vesper Marine" 
  // 503 - "Naviop S.R.L." 
  // 502 - "Attwood Corporation" 
  // 501 - "Agrotronix S.A." 
  // 500 - "Oxbo International Corporation" 
  // 499 - "LCJ Capteurs" 
  // 498 - "Innovative Design Solutions, Inc" 
  // 497 - "SENTRON Sistemas Embarcados" 
  // 496 - "W. Gessmann GmbH" 
  // 495 - "HOLMER Maschinenbau GmbH" 
  // 494 - "Synerject" 
  // 493 - "Watcheye" 
  // 492 - "Inergy Automotive Systems" 
  // 491 - "Penny and Giles Ltd" 
  // 490 - "QuikQ" 
  // 489 - "Appareo Systems" 
  // 488 - "The Charles Machine Works, Inc." 
  // 487 - "DSE Test Solutions A/S" 
  // 486 - "Westport Innovations Inc." 
  // 485 - "MATT automotive" 
  // 484 - "Headsight Inc." 
  // 483 - "Valeo" 
  // 482 - "Tricon Electronics" 
  // 481 - "Chetco Digital Instruments" 
  // 480 - "EnerDel, Inc." 
  // 479 - "Vapor Bus International" 
  // 478 - "OceanSat BV" 
  // 477 - "OilQuick AB" 
  // 476 - "Hummingbird Marine Electronics" 
  // 475 - "GME" 
  // 474 - "Persen Technologies Inc." 
  // 473 - "Boss Industries, Inc." 
  // 472 - "Tenneco Inc." 
  // 471 - "Sea Cross Marine AB" 
  // 470 - "SI-TEX Marine Electronics" 
  // 469 - "RA Consulting GmbH" 
  // 468 - "Tyco Fire Protection Products" 
  // 467 - "Lely Industries N.V." 
  // 466 - "Veethree Electronics and Marine LLC" 
  // 465 - "Ashcroft Inc" 
  // 464 - "Leach International Corporation" 
  // 463 - "PROBOTIQ" 
  // 462 - "IHI Shibaura Machinery Corporation" 
  // 461 - "HAWE Hydraulik SE" 
  // 460 - "San Giorgio S.E.I.N." 
  // 459 - "Alltek Marine Electronics Corp" 
  // 458 - "Control Solutions, Inc." 
  // 457 - "RUSELPROM-ElectricDrive Ltd" 
  // 456 - "General Kinetics" 
  // 455 - "ADZ NAGANO GmbH" 
  // 429 - "Rota Engineering Ltd." 
  // 428 - "Mfg_428" 
  // 427 - "em-trak Marine Electronics Ltd" 
  // 426 - "Egersund Marine Electronics AS" 
  // 425 - "Methode Electronics Inc, MDI" 
  // 424 - "Odyne LLC" 
  // 423 - "BSM Wireless, Inc." 
  // 422 - "True Heading AB" 
  // 421 - "Vertex Standard Co, Ltd" 
  // 420 - "Vermeer Corporation, ACS Group" 
  // 419 - "Fusion Electronics Ltd" 
  // 418 - "Intellistick Inc" 
  // 417 - "KZValve" 
  // 416 - "Kubota Corporation" 
  // 415 - "Valid Manufacturing Ltd." 
  // 414 - "Cattron Group International" 
  // 413 - "Datapross Nijbroek bv" 
  // 412 - "WebTech Wireless Inc." 
  // 411 - "Hy-Drive Technologies Ltd." 
  // 410 - "COBO S.p.A. Divisione 3B6" 
  // 409 - "Transfluid S.r.L." 
  // 408 - "Corvus Energy Ltd." 
  // 407 - "Comtech Mobile Datacom" 
  // 406 - "Vecima Networks Inc." 
  // 405 - "Wema System AS" 
  // 404 - "Com Nav Marine Ltd" 
  // 403 - "Trackwell ADS, Inc." 
  // 402 - "Simma Software, Inc." 
  // 401 - "Torqeedo GmbH" 
  // 400 - "Livorsi Marine" 
  // 399 - "ISEKI & Co., Ltd." 
  // 398 - "Hilite International" 
  // 397 - "Sanyo-kiki Co Ltd." 
  // 396 - "Beyond Measure" 
  // 395 - "GENTEC S.R.L." 
  // 394 - "Capi 2 Nederland BV" 
  // 393 - "Harvest Tec, Inc" 
  // 392 - "Tianyuan Technology Co Ltd." 
  // 391 - "Electronic Design for Industry, Inc" 
  // 390 - "Partech Inc." 
  // 389 - "Benchmark Electronics, Minnesota Division" 
  // 388 - "Innomatix, LLC" 
  // 387 - "Orscheln Products, LLC" 
  // 386 - "JLG Automation BVBA" 
  // 385 - "Johnson Outdoor Marine Electronics" 
  // 384 - "Camano Light" 
  // 383 - "MCL Industries" 
  // 382 - "National Agricultural and Food Research Organization" 
  // 380 - "Suntech International Ltd." 
  // 379 - "Yamabiko Corporation" 
  // 378 - "Glendinning Marine Products" 
  // 377 - "ifm electronic gmbh" 
  // 376 - "Quake Global" 
  // 375 - "Williams Controls Inc." 
  // 372 - "Delphi" 
  // 381 - "B&G" 
  // 374 - "Northern Lights, Inc." 
  // 373 - "Electronic Design Inc." 
  // 371 - "Heinzmann GmbH & Co. KG" 
  // 370 - "Rolls-Royce Marine AS" 
  // 369 - "Power Torque Engineering Ltd" 
  // 368 - "HANSENHOF_electronic" 
  // 367 - "Fliegl Agrartechnik" 
  // 366 - "Viewnyx Corp." 
  // 365 - "Digi-Star, LLC" 
  // 364 - "OEM Controls Inc." 
  // 363 - "BEI Duncan" 
  // 362 - "Alois Poettinger Maschinenfabrik GmbH" 
  // 361 - "InMach" 
  // 360 - "HJS Emission Technology GmbH & Co KG" 
  // 359 - "Ludwig Bergmann GmbH" 
  // 358 - "Victron Energy BV" 
  // 357 - "Hardi International A/S" 
  // 356 - "Fischer Panda Generators, Inc" 
  // 355 - "Mastervolt International B.V." 
  // 354 - "Junkkari OY" 
  // 353 - "Hegemon Electronics, Inc." 
  // 352 - "SAME DEUTZ-FAHR" 
  // 351 - "Thrane & Thrane" 
  // 350 - "Noris Marine Systems GmbH & Co KG" 
  // 349 - "Suonentiet" 
  // 348 - "Amazonen Werke H. Dreyer" 
  // 347 - "Honeywell" 
  // 346 - "Control Solutions" 
  // 345 - "Korean Maritime University" 
  // 344 - "Parvus Corporation" 
  // 343 - "Baumer Group" 
  // 342 - "THOMAS MAGNETE GmbH" 
  // 341 - "Boning GmbH & Co" 
  // 340 - "Continental AG" 
  // 339 - "Competence Center ISOBUS e.V." 
  // 338 - "GRAF-SYTECO" 
  // 337 - "Carraro S.p.A." 
  // 336 - "APE s.r.o." 
  // 335 - "Evo Electric Ltd" 
  // 334 - "Takata-Petri AG" 
  // 333 - "Hadley Products Corporation" 
  // 332 - "HWH Corporation" 
  // 331 - "Horton, Inc." 
  // 330 - "Kidde Aerospace and Defense" 
  // 329 - "Deif A/S" 
  // 328 - "Qwerty Electronik AB" 
  // 252 - "Sensor-Technik Wiedemann GmbH" 
  // 251 - "German Agricultural Society" 
  // 250 - "Kuhn Group" 
  // 249 - "Schaltbau GmbH" 
  // 233 - "Yacht Monitoring Solutions Inc." 
  // 232 - "TSD Integrated Controls" 
  // 1863 - "Thomas G. Faria Co." 
  // 1862 - "Sanshin" 
  // 1861 - "Vector CANtech" 
  // 1860 - "MMP" 
  // 1859 - "Kvasar AB" 
  // 1858 - "Litton" 
  // 1857 - "Simrad" 
  // 1856 - "Trimble" 
  // 1855 - "Furuno USA" 
  // 1854 - "Northstar Technologies" 
  // 1853 - "Japan Radio Co." 
  // 1852 - "Navionics" 
  // 1851 - "Raymarine" 
  // 1850 - "Teleflex" 
  // 222 - "Generac Power Systems, Inc." 
  // 221 - "SiE" 
  // 220 - "Beede Electrical Instrument Company, Inc." 
  // 219 - "Cat OEM Solutions" 
  // 218 - "Gits Manufacturing Company" 
  // 217 - "RM Michaelides Software & Elektronik GmbH" 
  // 216 - "Paneltronics Inc." 
  // 215 - "Aetna Engineering/Fireboy-Xintex" 
  // 214 - "MC elettronica Srl" 
  // 213 - "CNH Belgium N.V." 
  // 212 - "Sure Power Industries, Inc." 
  // 211 - "DNA Group" 
  // 210 - "Iteris, Inc." 
  // 209 - "Bell Equip. Co. SA (PTY) LTD" 
  // 208 - "Drew Technologies, Inc." 
  // 207 - "Otto Engineering" 
  // 206 - "port GmbH" 
  // 205 - "SmarTire Systems Inc" 
  // 204 - "The Morey Corporation" 
  // 203 - "MILtronik GmbH" 
  // 202 - "Curtis Instruments, Inc." 
  // 201 - "Disenos y Tecnologia S.A." 
  // 200 - "MGM Brakes" 
  // 199 - "Actia Corp." 
  // 198 - "Mystic Valley Communications" 
  // 197 - "Mechron Power Systems" 
  // 196 - "LEMKEN GmbH & Co. KG" 
  // 195 - "General Engine Products" 
  // 194 - "TriMark Corporation" 
  // 193 - "Nobletec" 
  // 192 - "Floscan" 
  // 191 - "XRS Corporation" 
  // 190 - "Hella KGaA Hueck & Co." 
  // 189 - "QUALCOMM" 
  // 188 - "EMP Corp." 
  // 187 - "Air-Weigh" 
  // 186 - "Altronic, Inc." 
  // 185 - "Beede Electrical Instrument Company" 
  // 184 - "EIA Electronics" 
  // 183 - "KDS Controls, Inc." 
  // 182 - "Vehicle Systems Engineering B.V." 
  // 181 - "Coretronics, Inc." 
  // 180 - "Smart Power Systems" 
  // 179 - "TeeJet Technologies Denmark" 
  // 178 - "Siemens VDO Automotive AG" 
  // 177 - "Diagnostic System Associates" 
  // 176 - "Moritz Aerospace" 
  // 175 - "Veris Technologies, Inc." 
  // 174 - "AB Volvo Penta" 
  // 173 - "Ryeso, Inc." 
  // 172 - "Yanmar Marine USA" 
  // 171 - "Wachendorff Elektronik GmbH & Co. KG" 
  // 170 - "Computronics Corporation Ltd." 
  // 169 - "Marlin Technologies Inc." 
  // 168 - "Xantrex" 
  // 167 - "JLG Industries Inc." 
  // 166 - "Phoenix International" 
  // 165 - "CPAC Systems AB" 
  // 164 - "DaimlerChrysler Off-Highway" 
  // 163 - "BRP Inc." 
  // 162 - "Axiomatic Technologies" 
  // 161 - "Offshore Systems (UK) Limited" 
  // 160 - "Nido" 
  // 159 - "NTech Industries Inc." 
  // 158 - "Firestone Industrial Products Company" 
  // 157 - "ISSPRO Inc." 
  // 156 - "ITT Industries - Cannon" 
  // 155 - "Vetronix Corporation" 
  // 154 - "Westerbeke Corporation" 
  // 153 - "Woodward, Industrial Controls Division" 
  // 152 - "elobau GmbH & Co. KG" 
  // 151 - "Raven Industries Inc. - Flow Controls Division" 
  // 150 - "Fleetguard" 
  // 149 - "Holset" 
  // 148 - "Blue Water Data, Inc." 
  // 147 - "Nautibus Electronic GmbH" 
  // 146 - "Maxima Technologies" 
  // 145 - "MurCal Controls" 
  // 144 - "Mercury Marine" 
  // 143 - "W. Gmeiner GmbH & Co." 
  // 142 - "TRW Automotive (Commercial Steering Systems)" 
  // 141 - "Thales Navigation Ltd." 
  // 140 - "Lowrance Electronics, Inc." 
  // 139 - "Caterpillar Trimble Control Technologies (CTCT), LLC" 
  // 138 - "Georg Fritzmeier GmbH & Co. KG" 
  // 137 - "Maretron" 
  // 136 - "Komatsu Ltd." 
  // 135 - "Airmar Technology Corporation" 
  // 134 - "Iris Technology Ltd." 
  // 133 - "Bucher Schoerling GmbH" 
  // 132 - "Mulag-Fahrzeugwerk" 
  // 131 - "ITT Industries" 
  // 130 - "Nido - Universal Machines B.V." 
  // 129 - "OMNEX Control Systems, Inc." 
  // 128 - "Gerhard Duecker GmbH & Co. KG" 
  // 127 - "Holland USA" 
  // 126 - "Driver Tech" 
  // 125 - "Nevada Automotive Test Center" 
  // 124 - "Hydac Electronic" 
  // 123 - "Basler Electric" 
  // 122 - "FG Wilson (Engineering) Limited" 
  // 121 - "HED (Hydro Electronic Devices, Inc.)" 
  // 120 - "RDS Technology Ltd." 
  // 119 - "IntegriNautics" 
  // 118 - "Intron GmbH" 
  // 117 - "HUSCO International" 
  // 116 - "BEELINE Technologies" 
  // 115 - "NACCO Materials Handling Group, Inc." 
  // 114 - "EControls, Inc." 
  // 113 - "Stress-Tek, Inc." 
  // 112 - "MECALAC" 
  // 111 - "Maschinenfabrik Bernard Krone GmbH" 
  // 110 - "EPIQ Sensor-Nite" 
  // 109 - "TeeJet Technologies Denmark" 
  // 108 - "WTK-Elecktronik GmbH" 
  // 107 - "Grimme Landmaschinen GmbH & Co. KG" 
  // 106 - "BAE Systems Controls, Inc." 
  // 105 - "Kiepe Elektrik GmbH & Co. KG" 
  // 104 - "Claas Selbstfahrende Erntemaschinen GmbH" 
  // 103 - "CLAAS Agrosystems GmbH & Co. KG" 
  // 102 - "AGCO GmbH & Co." 
  // 101 - "Sensoria" 
  // 100 - "VDO Technik AG" 
  // 99 - "International Transmissions Ltd (ITL)" 
  // 98 - "Mueller-Elektronik GmbH & Co." 
  // 97 - "Ag Leader Technology, Inc." 
  // 96 - "Mech@tronic IT GmbH" 
  // 95 - "Pacific Insight Electronics Corp." 
  // 94 - "CNH Global N.V." 
  // 93 - "Perkins Engines Company Ltd." 
  // 92 - "Ag-Chem Equipment Co., Inc." 
  // 91 - "BSG Bodensee Steuergeraete GmbH" 
  // 90 - "Knorr-Bremse SfN GmbH" 
  // 89 - "Kverneland Group, Electronics Division" 
  // 88 - "Satloc Precision GPS" 
  // 87 - "J.C. Bamford Excavators Ltd (JCB)" 
  // 86 - "C.E. Niehoff & Company" 
  // 85 - "Kohler Co." 
  // 84 - "New Holland UK Limited" 
  // 83 - "Bendix VORAD Technologies" 
  // 82 - "Bobcat/Ingersoll-Rand" 
  // 81 - "Fire Research Corp" 
  // 80 - "Twin Disc, Inc." 
  // 79 - "Daimler Benz AG - Engine Division (PBM)" 
  // 78 - "Frank W. Murphy Manufacturing, Inc." 
  // 77 - "Deere Power Systems Group" 
  // 76 - "unused" 
  // 75 - "Deere & Co. Agricultural Division" 
  // 74 - "Eaton Axle-Brake Division" 
  // 73 - "LeTourneau, Inc." 
  // 72 - "Sisu Corporation" 
  // 71 - "Vansco Electronics Ltd." 
  // 70 - "Flex-Coil Limited" 
  // 69 - "Trimble Navigation" 
  // 68 - "Scania" 
  // 67 - "Funk Manufacturing Company" 
  // 66 - "John Deere Construction Equipment Division" 
  // 65 - "MAN Nutzfahrzeuge AG" 
  // 64 - "unused" 
  // 63 - "ZF Industries Inc." 
  // 62 - "Wabco" 
  // 61 - "Volvo Truck Corp." 
  // 60 - "Volvo Trucks North America Inc." 
  // 59 - "VES Inc." 
  // 58 - "SPX Corporation, OTC Division" 
  // 57 - "Sauer-Danfoss Co." 
  // 56 - "SAIC" 
  // 55 - "Ryder System Inc." 
  // 54 - "Meritor Wabco" 
  // 53 - "Continental Automotive Systems US, Inc." 
  // 52 - "Meritor Automotive, Inc." 
  // 51 - "Robert Bosch GmbH" 
  // 50 - "Robert Bosch Corp" 
  // 49 - "RE America Inc." 
  // 48 - "Pollak Alphabet" 
  // 47 - "Phillips Semiconductor" 
  // 46 - "Noregon Systems, Inc" 
  // 45 - "PACCAR" 
  // 44 - "Nippondenso Co. Ltd." 
  // 43 - "International Truck and Engine Corp. Vehicle Electronics" 
  // 42 - "International Truck and Engine Corp. Engine Electronics" 
  // 41 - "Motorola Inc." 
  // 40 - "Motorola AIEG Inc." 
  // 39 - "Microfirm Inc." 
  // 38 - "Micro Processor Systems Inc." 
  // 37 - "Mack Trucks Inc." 
  // 36 - "Lucas Ltd." 
  // 35 - "Kenworth Truck Co." 
  // 34 - "Kelsey Hayes Co." 
  // 33 - "John Deere" 
  // 32 - "Jacobs Vehicle Systems" 
  // 31 - "J Pollak Corp." 
  // 30 - "Isuzu Motors Ltd." 
  // 29 - "Hino Motors Ltd." 
  // 28 - "Grote Ind. Inc." 
  // 27 - "GMC" 
  // 26 - "General Motors Corp., Service Technology Group" 
  // 25 - "Daimler Trucks North America LLC" 
  // 24 - "Ford Motor Co., Vehicle Controls" 
  // 23 - "Ford Motor Co., Heavy Truck" 
  // 22 - "Ford Motor Co., Electronic Concepts $ Systems" 
  // 21 - "Echilin Inc., Midland Brake Inc." 
  // 20 - "Eaton Ltd" 
  // 19 - "Eaton Corp. Trucking Info Services" 
  // 18 - "Eaton Corp, Transmission Division" 
  // 17 - "Eaton Corp. Res & Dev" 
  // 16 - "Eaton Corp." 
  // 15 - "Dickey-John Corp." 
  // 14 - "Detroit Diesel Corporation" 
  // 13 - "Delco Electronics" 
  // 12 - "Deere & Company, Precision Farming" 
  // 11 - "Dearborn Group Inc." 
  // 10 - "Cummins Engine Co." 
  // 9 - "Chrysler Corp." 
  // 8 - "Caterpillar Inc." 
  // 7 - "Case Corp." 
  // 6 - "Berifors Electronics AB" 
  // 5 - "AMP Inc." 
  // 4 - "Ametek-Dixson" 
  // 3 - "Ametek, US Gauge Division" 
  // 2 - "Allison Transmission, GMC" 
  // 1 - "Allied Signal Inc." 
  // 0 - "Reserved" 
  // 231 - "Topcon Positioning Systems, Inc." 
  // 230 - "Saucon Technologies" 
  // 229 - "Garmin International Inc." 
  // 228 - "ZF Marine Electronics" 
  // 227 - "Lykketronic A/S" 
  // 226 - "Monaco Coach Corporation" 
  // 225 - "SKF" 
  // 224 - "EMMI Network, S.L." 
  // 223 - "Vaueo Retarder Co., Ltd." 
  // 263 - "IMMI" 
  // 262 - "HydraForce, Inc" 
  // 261 - "Red Dot Corporation" 
  // 260 - "Reichhardt GmbH" 
  // 259 - "Jetter AG" 
  // 258 - "ARAG" 
  // 257 - "Honda Motor Co., Ltd" 
  // 256 - "Tyco Electronics AMP" 
  // 255 - "MEAS France" 
  // 254 - "GE Sensing" 
  // 253 - "Mobile Control Systems" 
  // 298 - "Holley Performance" 
  // 297 - "Zonar Systems Inc" 
  // 296 - "micro dynamics GmbH" 
  // 295 - "BEP Marine" 
  // 294 - "Grayhill Inc." 
  // 293 - "Spyder Controls Corp." 
  // 292 - "IKUSI - Angel Iglesias S.A." 
  // 291 - "Groeneveld Transport Efficiency BV" 
  // 290 - "Kuebler GmbH" 
  // 289 - "Watlow" 
  // 288 - "Mitsubishi FUSO Truck & Bus Corp." 
  // 287 - "NTech Industries, Inc" 
  // 286 - "Coelmo srl" 
  // 285 - "Sea Recovery Corp" 
  // 284 - "Mobile Tech Chile" 
  // 283 - "CWF Hamilton & Co Ltd" 
  // 282 - "Medallion Instrumentation Systems" 
  // 281 - "Precision Governors LLC" 
  // 311 - "Patrick Power Products" 
  // 310 - "TECNORD srl" 
  // 309 - "Krauss-Maffei Wegmann GmbH & Co. KG" 
  // 308 - "Cyntrx" 
  // 307 - "MBW Technologies" 
  // 306 - "Sleipner Motor AB" 
  // 305 - "NovAtel Inc" 
  // 304 - "EmpirBus AB" 
  // 303 - "CTS Corporation" 
  // 302 - "Nissin Kogyo Co., LTD" 
  // 301 - "Parker Hannifin (UK) Ltd FDE group" 
  // 300 - "Systron Donner Automotive" 
  // 299 - "Rauch Landmaschinen GmbH" 
  // 280 - "Leica Geosystems Pty Ltd" 
  // 279 - "Geometris LP" 
  // 278 - "Takata Electronics" 
  // 277 - "LHP Telematics" 
  // 276 - "Aqua-Hot Heating Systems" 
  // 275 - "Navico Egersund AS" 
  // 274 - "LTW Technology Co., LTD" 
  // 273 - "Active Research Limited" 
  // 272 - "Gross Mechanical Laboratories, Inc" 
  // 327 - "Sonceboz SA" 
  // 326 - "Akron Brass Company" 
  // 325 - "ASM Automation Sensorik Messtechnik GmbH" 
  // 324 - "Snap-on Diagnostics" 
  // 323 - "Mobileye Vision Technologies Ltd." 
  // 322 - "MICHENKA s.r.o." 
  // 321 - "Ultra Electronics, Electrics" 
  // 320 - "Miedema Landbouwwerktuigenfabriek B.V." 
  // 319 - "Cadec Global" 
  // 318 - "SAT Plan" 
  // 317 - "Navtronics Bvba" 
  // 316 - "ITT Flow Control" 
  // 315 - "Icom Incorporated" 
  // 314 - "CSM GmbH" 
  // 313 - "Ilmor Engineering, Inc" 
  // 312 - "Lectronix, Inc." 
  // 271 - "Cole Hersee" 
  // 270 - "Tennant" 
  // 269 - "Saft America Inc.,  Space & Defense Division" 
  // 268 - "Accurate Technologies" 
  // 267 - "Red Lion Controls, Inc" 
  // 266 - "International Thermal Research Ltd" 
  // 265 - "MTS Sensor Technologie GmbH" 
  // 264 - "Autolync" 
  // 248 - "Cooper Standard Automotive Active Systems Group" 
  // 247 - "ePULSE" 
  // 246 - "Class 1, Inc" 
  // 245 - "Capstan Ag Systems, Inc." 
  // 244 - "Techno-Matic" 
  // 243 - "eRide, Inc." 
  // 242 - "Kokusandenki Co. Ltd" 
  // 241 - "Schneider Automation SAS " 
  // 240 - "Vanair Mfg" 
  // 239 - "May & Scofield Ltd" 
  // 238 - "ZF Friedrichshafen AG" 
  // 237 - "Agtron Enterprises Inc" 
  // 236 - "Norac Systems International Inc" 
  // 235 - "SailorMade Marine Telemetry - Tetra Technology Ltd." 
  // 234 - "Mondial electronic GmbH" 

  uint16_t ManufacturerCode;             //      Bits=11.  [ 0     , 2047   ]  Unit:''     

  uint8_t ECUInstance;                   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  uint8_t FunctionInstance;              //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // 127 - "Reserved" 
  // 126 - "Reserved" 
  // 125 - "Reserved" 
  // 124 - "Reserved" 
  // 123 - "Reserved" 
  // 122 - "Reserved" 
  // 121 - "Reserved" 
  // 120 - "Reserved" 
  // 119 - "Reserved" 
  // 118 - "Reserved" 
  // 117 - "Reserved" 
  // 116 - "Reserved" 
  // 115 - "Reserved" 
  // 114 - "Reserved" 
  // 113 - "Reserved" 
  // 112 - "Reserved" 
  // 111 - "Reserved" 
  // 110 - "Reserved" 
  // 109 - "Reserved" 
  // 108 - "Reserved" 
  // 107 - "Reserved" 
  // 106 - "Reserved" 
  // 105 - "Reserved" 
  // 104 - "Reserved" 
  // 103 - "Reserved" 
  // 102 - "Reserved" 
  // 101 - "Reserved" 
  // 42 - "Water Pump Control" 
  // 41 - "Lighting - Operator Controls" 
  // 40 - "Seat Control" 
  // 39 - "Ignition Control Module" 
  // 38 - "Tire Pressure Control" 
  // 37 - "Cab Controller" 
  // 36 - "Pneumatic - System Controller" 
  // 35 - "Suspension - System Controller" 
  // 34 - "Hydraulic Pump Controller" 
  // 33 - "System Monitor" 
  // 32 - "Headway Controller" 
  // 31 - "Propulsion Battery Charger" 
  // 30 - "Management Computer" 
  // 29 - "Virtual Terminal (in cab)" 
  // 28 - "Off Vehicle Gateway" 
  // 27 - "Power TakeOff (Secondary or Front)" 
  // 26 - "Body Controller" 
  // 25 - "Network Interconnect ECU" 
  // 24 - "Vehicle Security" 
  // 23 - "Vehicle Navigation" 
  // 22 - "Aerodynamic Control" 
  // 21 - "Cab Climate Control" 
  // 20 - "Trip Recorder" 
  // 19 - "Instrument Cluster" 
  // 18 - "Suspension - Drive Axle" 
  // 17 - "Suspension - Steer Axle" 
  // 16 - "Steering Controller" 
  // 15 - "Fuel System" 
  // 14 - "Cruise Control" 
  // 13 - "Retarder - Driveline" 
  // 12 - "Retarder - Engine" 
  // 11 - "Brakes - Drive Axle" 
  // 10 - "Brakes - Steer Axle" 
  // 9 - "Brakes - System Controller" 
  // 8 - "Axle - Drive" 
  // 7 - "Axle - Steering" 
  // 6 - "Power TakeOff - (Main or Rear)" 
  // 5 - "Shift Control/Console" 
  // 4 - "Battery Pack Monitor" 
  // 3 - "Transmission" 
  // 2 - "Electric Propulsion Control" 
  // 1 - "Auxiliary Power Unit (APU)" 
  // 0 - "Engine" 
  // 100 - "Reserved" 
  // 99 - "Reserved" 
  // 98 - "Reserved" 
  // 97 - "Reserved" 
  // 96 - "Reserved" 
  // 95 - "Reserved" 
  // 94 - "Reserved" 
  // 93 - "Reserved" 
  // 92 - "Reserved" 
  // 91 - "Reserved" 
  // 90 - "Reserved" 
  // 89 - "Reserved" 
  // 88 - "Reserved" 
  // 87 - "Reserved" 
  // 86 - "Reserved" 
  // 85 - "Reserved" 
  // 84 - "Reserved" 
  // 83 - "Reserved" 
  // 82 - "Reserved" 
  // 81 - "Reserved" 
  // 80 - "Reserved" 
  // 79 - "Reserved" 
  // 78 - "Fire Suppression System" 
  // 77 - "Fuel Properties Sensor" 
  // 76 - "Temperature Sensor" 
  // 75 - "Supplemental Fan" 
  // 74 - "Lubrication System" 
  // 73 - "Rollover Detection Control" 
  // 72 - "Coolant Valve Controller" 
  // 71 - "Transfer Case Control" 
  // 70 - "Auxiliary Regeneration Device" 
  // 69 - "Engine Emission Aftertreatement System" 
  // 68 - "Aftertreatment system gas measurement" 
  // 67 - "Electrical System Controller" 
  // 66 - "I/O Controller" 
  // 65 - "Gas Flow Measurement" 
  // 64 - "Endurance Braking" 
  // 63 - "Engine Valve Controller" 
  // 62 - "On-Board Diagnostic Unit" 
  // 61 - "File Server/Printer" 
  // 60 - "Cab Display" 
  // 59 - "Starter" 
  // 58 - "Fan Drive Control" 
  // 57 - "Steering Column Unit" 
  // 56 - "Communications Unit, Radio" 
  // 55 - "Communications Unit, Satellite" 
  // 54 - "Communications Unit, Cellular" 
  // 53 - "Alternator/Charging System" 
  // 52 - "Chassis Controller" 
  // 51 - "Forward-Looking Collision Warning System" 
  // 50 - "Auxiliary Heater" 
  // 49 - "Clutch/Converter Control" 
  // 48 - "Ramp Control" 
  // 47 - "Information System Controller" 
  // 46 - "Oil Sensor Unit" 
  // 45 - "Vehicle Dynamic Stability Control" 
  // 44 - "Exhaust Emission Control" 
  // 43 - "Transmission Display" 

  uint8_t Function;                      //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // 0 - "Non-specific System" 
  // 127 - "Not Available" 

  uint8_t VehicleSystem;                 //      Bits=07.  [ 0     , 127    ]  Unit:''     

  // 127 - "Not Available" 
  // 0 - "Ind. Process Control Stationary" 

  uint8_t VehicleSystem5;                //      Bits=07.  [ 0     , 127    ]  Unit:''     

  // 125 - "Entertainment" 
  // 120 - "Display" 
  // 85 - "External Environment" 
  // 75 - "Sensor Communication Interface" 
  // 35 - "Electrical Generation" 
  // 100 - "Deck, Cargo and Fishing Equipment" 
  // 90 - "Internal Environment" 
  // 80 - "Instrumentation/General Systems (deprecate)" 
  // 70 - "Communications" 
  // 60 - "Navigation" 
  // 50 - "Propulsion" 
  // 40 - "Steering and Control Surfaces" 
  // 30 - "Electrical Distribution" 
  // 25 - "Inter/Intranetwork Device" 
  // 20 - "Safety Systems" 
  // 10 - "System Tools" 
  // 127 - "Not Available" 
  // 0 - "Non-specific System" 

  uint8_t VehicleSystem4;                //      Bits=07.  [ 0     , 127    ]  Unit:''     

  // 8 - "Grader" 
  // 7 - "Four Wheel Drive Loader" 
  // 6 - "Forklift" 
  // 5 - "Excavator" 
  // 4 - "Crawler" 
  // 3 - "Backhoe" 
  // 2 - "Articulated Dump Truck" 
  // 1 - "Skid Steer Loader" 
  // 127 - "Not Available" 
  // 0 - "Non-specific System" 

  uint8_t VehicleSystem3;                //      Bits=07.  [ 0     , 127    ]  Unit:''     

  // 25 - "Slurry Applicators" 
  // 24 - "Utility Vehicles" 
  // 23 - "Mulchers" 
  // 22 - "Timber Processing Machines" 
  // 21 - "Timber loaders" 
  // 20 - "Forwarders" 
  // 19 - "Timber Harvesters" 
  // 17 - "Sensor Systems" 
  // 16 - "Skidder" 
  // 15 - "Earth Work" 
  // 14 - "Special Crops" 
  // 13 - "Powered Auxiliary Device" 
  // 12 - "Farm Yard Operations" 
  // 11 - "Transport/Trailer" 
  // 10 - "Irrigation" 
  // 9 - "Forage" 
  // 8 - "Root Harvesters" 
  // 7 - "Harvesters" 
  // 6 - "Sprayers" 
  // 5 - "Fertilizers" 
  // 4 - "Planters/Seeders" 
  // 3 - "Secondary Tillage" 
  // 2 - "Tillage" 
  // 1 - "Tractor" 
  // 127 - "Not Available" 
  // 0 - "Non-specific System" 

  uint8_t VehicleSystem2;                //      Bits=07.  [ 0     , 127    ]  Unit:''     

  // 2 - "Trailer" 
  // 1 - "Tractor" 
  // 127 - "Not Available" 
  // 0 - "Non-specific System" 

  uint8_t VehicleSystem1;                //      Bits=07.  [ 0     , 127    ]  Unit:''     

  uint8_t VehicleSystemInstance;         //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // 0 = Global;      1  = On-Highway;      2  = Agricultural and Forestry;      3  = Construction;      4  = Marine;     5  = Industrial - Process            Control - Stationary (Gen-Sets)     6  = Reserve for SAE     7  = Reserve for SAE
  // 6 - "Reserved for SAE" 
  // 7 - "Reserved for SAE" 
  // 5 - "IndustrialProcessCtrlStationary" 
  // 4 - "Marine" 
  // 3 - "Construction" 
  // 2 - "Agricultural and Forestry" 
  // 1 - "On-Highway" 
  // 0 - "Global" 

  uint8_t IndustryGroup;                 //      Bits=03.  [ 0     , 7      ]  Unit:''     

  uint8_t ArbitraryAddressCapable;       //      Bits=01.  [ 0     , 1      ]  Unit:''     
  uint32_t framecnt;
} AC_t;

// def @PropA CAN Message (418381566)
#define PropA_IDE (1U)
#define PropA_DLC (8U)
#define PropA_CANID (0x18EFFEFEU)
// -- Proprietary A  This proprietary PG uses the Destination Specific PDU Format allowing manufacturers to direct their proprietary communications to a specific destination node.
typedef struct
{

  int64_t ManufacturerSpecificInformation;   //      Bits=64.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} PropA_t;

// def @ERC1 CAN Message (418382078)
#define ERC1_IDE (1U)
#define ERC1_DLC (8U)
#define ERC1_CANID (0x18F000FEU)
#define ERC1_CYC (100U)
// -- Electronic Retarder Controller 1  NOTE- This message will be transmitted by several types of retarding devices such as engine compression release brakes, exhaust system restriction brakes, and driveline retarders using hydraulic, electric, or ...
// signal: @ActualRetarderPercentTorque
#define ActualRetarderPercentTorque_CovFactor 1
#define ActualRetarderPercentTorque_CovS(x) ((int16_t)(x + 125))
// signal: @IntendedRetarderPercentTorque
#define IntendedRetarderPercentTorque_CovFactor 1
#define IntendedRetarderPercentTorque_CovS(x) ((int16_t)(x + 125))
// signal: @DrvrsDemandRetarderPercentTorque
#define DrvrsDemandRetarderPercentTorque_CovFactor 1
#define DrvrsDemandRetarderPercentTorque_CovS(x) ((int16_t)(x + 125))
// signal: @RetarderSelectionNonengine
#define RetarderSelectionNonengine_CovFactor 0.4
#define RetarderSelectionNonengine_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @ActlMxAvlblRetarderPercentTorque
#define ActlMxAvlblRetarderPercentTorque_CovFactor 1
#define ActlMxAvlblRetarderPercentTorque_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // State signal which indicates which retarder torque mode is currently generating, limiting, or controlling the torque.  Note that the modes are not in prioritized order. Not all modes may be relevant for a given device.  Some devices may not ...
  uint8_t RetarderTorqueMode;                 //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Switch signal which indicates whether the operator wishes the retarder to be enabled for vehicle braking assist. The retarder does not check this switch, nor does the enabling of this switch engage the retarder. When this switch is ?enabled,? the ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Retarder, brake assist enabled" 
  // 0 - "Retarder, brake assist disabled" 

  uint8_t RetarderEnableBrakeAssistSwitch;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates whether the operator wishes the retarder to be enabled for transmission shift assist.  The retarder does not check this switch, nor does the enabling of this switch engage the retarder.  When this switch is ?enabled,? ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Retarder, shift assist enabled" 
  // 0 - "Retarder, shift assist disabled" 

  uint8_t RetarderEnableShiftAssistSwitch;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Actual braking torque of the retarder as a percent of retarder configuration reference torque SPN 556.    Note:  Refer to section 5.2.1 in SAE J1939-71.
  int16_t ActualRetarderPercentTorque;        //      Bits=08.  [ -125  , 0      ]  Unit:'%'     Offset= -125     

  // Braking torque of retarder that the retarder is currently trying to achieve.  This value takes into account all static limitations, but not the limitations due to the dynamic behavior of the retarder.  This value, if unchanged over a certain time, ...
  int16_t IntendedRetarderPercentTorque;      //      Bits=08.  [ -125  , 0      ]  Unit:'%'     Offset= -125     

  // Status of an event, external to the engine, that may increase the nominal temperature of the engine coolant liquid.    00 - No coolant load increase  01 - Coolant load increase possible  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Coolant load increase possible" 
  // 0 - "No coolant load increase" 

  uint8_t EngCoolantLoadIncrease;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that whether the retarder is requesting that the brake lights are illuminated.  00 - Retarder is not requesting that the brake lights are illuminated  01 - Retarder is requesting that the brake lights are illuminated  10 - Reserved  11 - ...
  // 0 - "Retarder is not requesting that the brake lights are illuminated" 
  // 3 - "Not available/Take no action" 
  // 2 - "Reserved" 
  // 1 - "Retarder is requesting that the brake lights are illuminated" 

  uint8_t RetarderRequestingBrakeLight;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Retarder road speed limit switch states:  00   Road speed limiting by retarder is disabled  01   Road speed limiting by retarder is enabled.  The road speed that the retarder will limit will be determined when the switch transitions from 00 to 01   ...
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Road speed limiting by retarder is enabled" 
  // 0 - "Road speed limiting by retarder is disabled" 

  uint8_t RetarderRoadSpeedLimitSwitch;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Retarder Road Speed Exceeded Status:    00   Road speed is below threshold   01   Road speed is above threshold and retarder is allowed to be activated  10   Reserved  11   Don't care/Take no action
  // 3 - "Don't care/Take no action" 
  // 2 - "Reserved" 
  // 1 - "Road speed is above threshold and retarder is allowed to be activated" 
  // 0 - "Road speed is below threshold " 

  uint8_t RetarderRoadSpeedExceededStatus;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The source address of the SAE J1939 device currently controlling the retarder.  It is used to expand the torque mode parameter (see SPN 899) in cases where control is in response to an ECU that is not listed in Table SPN899_A.  Its value may be the ...
  uint8_t SrcAddrssOfCntrllngDvcFrRtrdrCtr;   //      Bits=08.  [ 0     , 253    ]  Unit:''     

  // The Drivers demand retarder - percent torque is the maximum torque selected by the driver when one or more modes  are selected by the driver, such as hand lever, switch, constant torque, constant velocity, etc.
  int16_t DrvrsDemandRetarderPercentTorque;   //      Bits=08.  [ -125  , 0      ]  Unit:'%'     Offset= -125     

  // The ?Retarder Selection, non-engine? is the position of the driver?s selector for retarders that are not part of the engine system, expressed as percent and determined by the ratio of current position to the maximum possible position. The physical ...
  uint8_t RetarderSelectionNonengine;         //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // This is the maximum amount of torque that the retarder can immediately deliver.   It is the same as the maximum torque shown in the Retarder?s Configuration message, but allows for a much faster rate of change than could be communicated by reissuing ...
  int16_t ActlMxAvlblRetarderPercentTorque;   //      Bits=08.  [ -125  , 0      ]  Unit:'%'     Offset= -125     
  uint32_t framecnt;
} ERC1_t;

// def @EBC1 CAN Message (418382334)
#define EBC1_IDE (1U)
#define EBC1_DLC (8U)
#define EBC1_CANID (0x18F001FEU)
#define EBC1_CYC (100U)
// -- Electronic Brake Controller 1  Used for brake control information
// signal: @BrakePedalPos
#define BrakePedalPos_CovFactor 0.4
#define BrakePedalPos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngRetarderSelection
#define EngRetarderSelection_CovFactor 0.4
#define EngRetarderSelection_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // State signal which indicates that ASR engine control has been commanded to be active. Active means that ASR actually tries to control the engine. This state signal is independent of other control commands to the engine (e.g., from the transmission) ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "ASR engine control active" 
  // 0 - "ASR engine control passive but installed" 

  uint8_t ASREngCtrlActive;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates that ASR brake control is active. Active means that ASR actually controls wheel brake pressure at one or more wheels of the driven axle(s).  00 - ASR brake control passive but installed  01 - ASR brake control active  10 ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "ASR brake control active" 
  // 0 - "ASR brake control passive but installed" 

  uint8_t ASRBrakeCtrlActive;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates that the ABS is active.  The signal is set active when wheel brake pressure actually starts to be modulated by ABS and is reset to passive when all wheels are in a stable condition for a certain time.  The signal can ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "ABS active" 
  // 0 - "ABS passive but installed" 

  uint8_t AntiLockBrakingActive;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates that the brake pedal is being pressed.  The EBS brake switch is independent of the brake light switch and has no provisions for external connections.  00 - Brake pedal is not being pressed  01 - Brake pedal is being ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Brake pedal is being pressed" 
  // 0 - "Brake pedal is not being pressed" 

  uint8_t EBSBrakeSwitch;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Ratio of brake pedal position to maximum pedal position.  Used for electric brake applications. 0% means no braking. Also when there are two brake pedals on the machine (Left Brake Pedal Position SPN 3033 and Right Brake Pedal Position SPN 3032) the ...
  uint8_t BrakePedalPos;                      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Switch signal which indicates the position of the ABS off-road switch.    00 - ABS off-road switch passive  01 - ABS off-road switch active  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "ABS off-road switch active" 
  // 0 - "ABS off-road switch passive" 

  uint8_t ABSOffroadSwitch;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates the position of the ASR off-road switch.    00 - ASR off-road switch passive  01 - ASR off-road switch active  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "ASR off-road switch active" 
  // 0 - "ASR off-road switch passive" 

  uint8_t ASROffroadSwitch;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates the position of the ASR ?hill holder? switch.    00 - ASR ?hill holder? switch passive  01 - ASR ?hill holder? switch active  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "ASR ?hill holder? switch active" 
  // 0 - "ASR ?hill holder? switch passive" 

  uint8_t ASRHillHolderSwitch;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates the position of the traction control override switch.  The traction control override signal disables the automatic traction control function allowing the wheels to spin.  00 - Off  01 - On  10 - Error  11 - Not ...
  // 3 - "Not available or not installed" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TractionCtrlOverrideSwitch;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal used to disable the accelerator and remote accelerator inputs, causing the engine to return to idle.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t AccelInterlockSwitch;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal used to activate the torque limiting feature of the engine.  The specific nature of torque limiting should be verified with the manufacturer.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngDerateSwitch;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which requests that all engine fueling stop.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngAuxShutdownSwitch;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates that the remote accelerator has been enabled and controls the engine.  00 - Off  01 - On  10 - Error  11 - Not available  NOTE?The accelerator interlock switch (see SPN 972) must be disabled in order for the remote ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t RemoteAccelEnableSwitch;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The position of the operator controlled selector, expressed as a percentage and determined by the ratio of the current position of the selector to its maximum possible position. Zero percent means no braking torque is requested by the operator from ...
  uint8_t EngRetarderSelection;               //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Signal which indicates whether an ABS system is fully operational or whether its functionality is reduced by a defect or by an intended action (e.g., by activation of an ABS-off-road switch or during special diagnostic procedures).  There are cases ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Fully Operational" 
  // 0 - "Not Fully Operational" 

  uint8_t ABSFullyOperational;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter commands the EBS red optical warning signal    00 Off  01 On  10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EBSRedWarningSignal;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter commands the ABS/EBS amber/yellow optical warning signal    00 Off  01 On  10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t ABS_EBSAmberWarningSignal;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter commands the ATC/ASR driver information signal, for example a dash lamp.    00 Off  01 On   10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "On " 
  // 0 - "Off" 

  uint8_t ATC_ASRInformationSignal;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The source address of the SAE J1939 device currently controlling the brake system. Its value may be the source address of the ECU transmitting the message (which means that no external SAE J1939 message is providing the active command) or the source ...
  uint8_t SrcAddrssOfCntrllngDvcFrBrkeCtrl;   //      Bits=08.  [ 0     , 253    ]  Unit:''     

  // Switch signal which indicates the position of the halt brake switch.    00    Halt brake switch passive  01    Halt brake switch active  10    Error  11    Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Halt brake switch active" 
  // 0 - "Halt brake switch passive" 

  uint8_t HaltBrakeSwitch;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates that ABS in the trailer is actively controlling the brakes.  A message is sent to the tractor from the trailer (i.e. by PLC). The receiving device in the tractor transfers this information to the J1939 network.  At the ...
  // 3 - "Trailer ABS Status Information Not Available or Parameter Not Supported" 
  // 2 - "Reserved" 
  // 1 - "Trailer ABS Active" 
  // 0 - "Trailer ABS Status Information Available But Not Active" 

  uint8_t TrailerABSStatus;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter commands the tractor-mounted trailer ABS optical warning signal.    00 Off  01 On   10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "On " 
  // 0 - "Off" 

  uint8_t TrctrMntdTrailerABSWarningSignal;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EBC1_t;

// def @ETC2 CAN Message (418383358)
#define ETC2_IDE (1U)
#define ETC2_DLC (8U)
#define ETC2_CANID (0x18F005FEU)
#define ETC2_CYC (100U)
// -- Electronic Transmission Controller 2
// signal: @TransSelectedGear
#define TransSelectedGear_CovFactor 1
#define TransSelectedGear_CovS(x) ((int16_t)(x + 125))
// signal: @TransActualGearRatio
#define TransActualGearRatio_CovFactor 0.001
#define TransActualGearRatio_CovS(x) ((uint16_t)((x / 0.001)))
// signal: @TransCurrentGear
#define TransCurrentGear_CovFactor 1
#define TransCurrentGear_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // The gear that the transmission will attempt to achieve during the current shift if a shift is in progress, or the next shift if one is pending (i.e., waiting for torque reduction to initiate the shift).
  int16_t TransSelectedGear;             //      Bits=08.  [ -125  , 125    ]  Unit:''      Offset= -125     

  // Actual ratio of input shaft speed to output shaft speed.
  uint16_t TransActualGearRatio;         //      Bits=16.  [ 0     , 64.255 ]  Unit:''      Factor= 0.001 

  // The gear currently engaged in the transmission or the last gear engaged while the transmission is in the process of shifting to the new or selected gear.  Transitions toward a destination gear will not be indicated.  Once the selected gear has been ...
  int16_t TransCurrentGear;              //      Bits=08.  [ -125  , 125    ]  Unit:''      Offset= -125     

  // Range selected by the operator.  Characters may include P, Rx, Rx-1...R2, R1, R, Nx, Nx-1...N2, N1, N, D, D1, D2..., Dx, L, L1, L2..., Lx-1, 1, 2, 3,...  If only one displayed character is required, the second character shall be used and the first ...
  uint16_t TransRequestedRange;          //      Bits=16.  [ 0     , 255    ]  Unit:''     

  // Range currently being commanded by the transmission control system. Characters may include P, Rx, Rx-1...R2, R1, R, Nx, Nx-1...N2, N1, N, D, D1, D2..., Dx, L, L1, L2..., Lx-1, 1, 2, 3,... If only one displayed character is required, the second ...
  uint16_t TransCurrentRange;            //      Bits=16.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} ETC2_t;

// def @EAC1 CAN Message (418383614)
#define EAC1_IDE (1U)
#define EAC1_DLC (8U)
#define EAC1_CANID (0x18F006FEU)
#define EAC1_CYC (500U)
// -- Electronic Axle Controller 1  NOTE - Request has to be responded to with as many messages as necessary to transmit all available information.
typedef struct
{

  // To identify to which of several similar devices (such as tires or fuel tanks) the information applies.  The low order 4 bits represent a position number, counting left to right when facing in the direction of normal vehicle travel (forward).  The ...
  uint8_t Location;                         //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // State used which indicates the condition of the front axle 1 differential lock.  The differential locks are located as defined in figure SPN564_A.    00 Differential lock disengaged  01 Differential lock engaged  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Differential lock engaged" 
  // 0 - "Differential lock disengaged" 

  uint8_t DiffLockStateFrontAxle1;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State used which indicates the condition of the front axle 2 differential lock. The differential locks are located as defined in figure SPN 564_A.    00 Differential lock disengaged  01 Differential lock engaged  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Differential lock engaged" 
  // 0 - "Differential lock disengaged" 

  uint8_t DiffLockStateFrontAxle2;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State used which indicates the condition of the rear axle 1 differential lock.  The differential locks are located as defined in figure SPN 564_A.    00 Differential lock disengaged  01 Differential lock engaged  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Differential lock engaged" 
  // 0 - "Differential lock disengaged" 

  uint8_t DiffLockStateRearAxle1;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State used which indicates the condition of the rear axle 2 differential lock.  The differential locks are located as defined in figure SPN 564_A.    00 Differential lock disengaged  01 Differential lock engaged  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Differential lock engaged" 
  // 0 - "Differential lock disengaged" 

  uint8_t DiffLockStateRearAxle2;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State used which indicates the condition of the central differential lock.  The differential locks are located as defined in attached figure SPN564_A.    00 Differential lock disengaged  01 Differential lock engaged  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Differential lock engaged" 
  // 0 - "Differential lock disengaged" 

  uint8_t DiffLockStateCentral;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State used which indicates the condition of the central front differential lock.  The differential locks are located as defined in figure SPN564_A.    00 Differential lock disengaged  01 Differential lock engaged  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Differential lock engaged" 
  // 0 - "Differential lock disengaged" 

  uint8_t DiffLockStateCentralFront;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State used which indicates the condition of the central rear differential lock.  The differential locks are located as defined in figure SPN564_A.    00 Differential lock disengaged  01 Differential lock engaged  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Differential lock engaged" 
  // 0 - "Differential lock disengaged" 

  uint8_t DiffLockStateCentralRear;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State used which indicates the condition of the rear axle 3 differential lock. The differential locks are located as defined in figure SPN 564_A.  [Ed note:  Forum comment resolution is in process.  The figure may need to be updated further and/or ...
  uint8_t DiffLockStRearAxle3;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Front axle group engagement status     00 front axle group disengaged   01 front axle group engaged  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "front axle group engaged" 
  // 0 - "front axle group disengaged " 

  uint8_t FrontAxleGroupEngagementStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Rear axle group engagement status    00 rear axle group disengaged   01 rear axle group engaged  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "rear axle group engaged" 
  // 0 - "rear axle group disengaged " 

  uint8_t RearAxleGroupEngagementStatus;    //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EAC1_t;

// def @HPG CAN Message (418384126)
#define HPG_IDE (1U)
#define HPG_DLC (8U)
#define HPG_CANID (0x18F008FEU)
#define HPG_CYC (50U)
// -- Hydraulic Pressure Governor Info  Information to be used for a hydraulic pressure governing control system
// signal: @HydPress
#define HydPress_CovFactor 2
#define HydPress_CovS(x) ((uint16_t)((x / 2)))
// signal: @HydIntakePress
#define HydIntakePress_CovFactor 0.0001220703125
#define HydIntakePress_CovS(x) ((int32_t)((x / 0.0001220703125) + 8192))
// signal: @HydDischargePressSetPoint
#define HydDischargePressSetPoint_CovFactor 2
#define HydDischargePressSetPoint_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // Hydraulic pressure measured at the output of the hydraulic pump.
  uint16_t HydPress;                          //      Bits=16.  [ 0     , 128510 ]  Unit:'kPa'   Factor= 2     

  // Mode for governor operation is hydraulic pressure control.    00 Disabled  01 Enabled  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Enabled" 
  // 0 - "Disabled" 

  uint8_t EngHydPressGovernorModeIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch that sets the  mode of hydraulic governor    00 Pressure Mode Inactive  01 Pressure Mode Active  10 Error Indicator  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error Indicator" 
  // 1 - "Pressure Mode Active" 
  // 0 - "Pressure Mode Inactive" 

  uint8_t EngHydPressGovernorSwitch;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The measured status of the pump used to provide water in fire fighting apparatus for distribution of water through water cannons or fire hoses.    00 Pump not engaged  01 Pump engaged  10 Error  11 Not available or not installed
  // 3 - "Not available or not installed" 
  // 2 - "Error" 
  // 1 - "Pump engaged" 
  // 0 - "Pump not engaged" 

  uint8_t FireApparatusPumpEngagement;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The measured state of the Okay To Pump interlock of the fire apparatus.  00 Okay to Pump Interlock Inactive  01 Okay to Pump Interlock Active  10 Error  11 Not Available  Note: \
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Okay to Pump Interlock Active" 
  // 0 - "Okay to Pump Interlock Inactive" 

  uint8_t FireApparatusOkayToPumpInterlock;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Hydraulic pressure measured at the intake of the hydraulic pump.
  int32_t HydIntakePress;                     //      Bits=16.  [ -1    , 6.84362793 ]  Unit:'MPa'   Offset= -1        Factor= 0.0001220703125

  // Hydraulic pressure governing system discharge pressure set point.
  uint16_t HydDischargePressSetPoint;         //      Bits=16.  [ 0     , 128510 ]  Unit:'kPa'   Factor= 2     

  // Switch that commands hydraulic pressure governor to decrease engine rpm to its idle position.    00 Idle Switch Inactive  01 Idle Switch Active  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Idle Switch Active" 
  // 0 - "Idle Switch Inactive" 

  uint8_t HydPressGovernorIdleSwitch;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch that commands hydraulic pressure governor to decrease engine rpm resulting in expected decrease of hydraulic discharge pressure.    00 Decrease Switch Inactive  01 Decrease Switch Active  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Decrease Switch Active" 
  // 0 - "Decrease Switch Inactive" 

  uint8_t HydPressGovernorDecreaseSwitch;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch that commands hydraulic pressure governor to increase engine rpm resulting in expected increase of hydraulic discharge pressure.    00 Increase Switch Inactive  01 Increase Switch Active  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Increase Switch Active" 
  // 0 - "Increase Switch Inactive" 

  uint8_t HydPressGovernorIncreaseSwitch;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch that commands hydraulic pressure governor to increase or decrease engine rpm to achieve a predefined discharge pressure.    00 Preset Switch Inactive  01 Preset Switch Active  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Preset Switch Active" 
  // 0 - "Preset Switch Inactive" 

  uint8_t HydPressGovernorPresetSwitch;       //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} HPG_t;

// def @VDC2 CAN Message (418384382)
#define VDC2_IDE (1U)
#define VDC2_DLC (8U)
#define VDC2_CANID (0x18F009FEU)
#define VDC2_CYC (10U)
// -- Vehicle Dynamic Stability Control 2  Contains information which relates to the vehicle's movement.
// signal: @SteerWheelAngle
#define SteerWheelAngle_CovFactor 0.0009765625
#define SteerWheelAngle_CovS(x) ((int32_t)((x / 0.0009765625) + 32126))
// signal: @SteerWheelTurnCounter
#define SteerWheelTurnCounter_CovFactor 1
#define SteerWheelTurnCounter_CovS(x) ((int8_t)(x + 32))
// signal: @YawRate
#define YawRate_CovFactor 0.0001220703125
#define YawRate_CovS(x) ((int32_t)((x / 0.0001220703125) + 32112))
// signal: @LateralAcceleration
#define LateralAcceleration_CovFactor 0.00048828125
#define LateralAcceleration_CovS(x) ((int32_t)((x / 0.00048828125) + 32126))
// signal: @LongitudinalAcceleration
#define LongitudinalAcceleration_CovFactor 0.1
#define LongitudinalAcceleration_CovS(x) ((int16_t)((x / 0.1) + 125))
typedef struct
{

  // The main operator`s steering wheel angle (on the steering column, not the actual wheel angle).  The vehicle being steered to the left (counterclockwise) results in a positive steering wheel angle.  This is the yaw angle of the steering wheel with ...
  int32_t SteerWheelAngle;               //      Bits=16.  [ -31.374, 31.374 ]  Unit:'rad'   Offset= -31.374   Factor= 0.0009765625

  // Indicates number of steering wheel turns, absolute position or relative position at ignition on. Positive values indicate left turns.
  int8_t SteerWheelTurnCounter;          //      Bits=06.  [ -10   , 10     ]  Unit:'turns' Offset= -32

  // Indicates whether the steering wheel angle sensor is capable of absolute measuring of the number of steering wheel turns or not (relative measuring to position at ignition on).  00 Relative measuring principle  01 Absolute measuring principle  10 ...
  // 3 - "Not Available" 
  // 2 - "Reserved" 
  // 1 - "Absolute measuring principle" 
  // 0 - "Relative measuring principle" 

  uint8_t SteerWheelAngleSensorType;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the rate of rotation about the vertical axis (i.e. the z-axis).  A positive yaw rate signal results when the vehicle turns counter-clockwise.   This parameter is defined according to a Z-Up axis system and the sign of the value is in ...
  int32_t YawRate;                       //      Bits=16.  [ -3.92 , 3.92   ]  Unit:'rad/s' Offset= -3.92     Factor= 0.0001220703125

  // Indicates a lateral acceleration of the vehicle (the component of vehicle acceleration vector along the Y-axis). A positive lateral acceleration signal results when the vehicle is accelerated to the left.  This parameter is defined according to a ...
  int32_t LateralAcceleration;           //      Bits=16.  [ -15.687, 15.687 ]  Unit:'m/s?'  Offset= -15.687   Factor= 0.00048828125

  // Indicates the longitudinal acceleration of the vehicle. A positive longitudinal acceleration signal results when the vehicle speed increases, regardless of driving the vehicle forward or backward.  This parameter is applicable to vehicle speed ...
  int16_t LongitudinalAcceleration;      //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'m/s?'  Offset= -12.5     Factor= 0.1   
  uint32_t framecnt;
} VDC2_t;

// def @ESC1 CAN Message (418384894)
#define ESC1_IDE (1U)
#define ESC1_DLC (8U)
#define ESC1_CANID (0x18F00BFEU)
#define ESC1_CYC (20U)
// -- Electronic Steering Control  PGN which indicates the actual angle and the status of a steerable axle
// signal: @ActualInnerWheelSteerAngle
#define ActualInnerWheelSteerAngle_CovFactor 0.00390625
#define ActualInnerWheelSteerAngle_CovS(x) ((int32_t)((x / 0.00390625) + 32000))
typedef struct
{

  // Signal which indicates the actual inner wheel steering angle.  The steering angle is the angle of wheel turn relative to the vehicle x-axis (yaw angle of inner wheel). See Figure SPN2927_A for explanation of positive and negative angles.  This ...
  int32_t ActualInnerWheelSteerAngle;         //      Bits=16.  [ -125  , 125    ]  Unit:'deg'   Offset= -125      Factor= 0.00390625

  // To identify to which of several similar devices (such as tires or fuel tanks) the information applies.  The low order 4 bits represent a position number, counting left to right when facing in the direction of normal vehicle travel (forward).  The ...
  uint8_t AxleLocation;                       //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // A signal which indicates different states of the steering axle  0000               Axle steering not active (adhesion steering)  0001               Axle steering active  0010               Axle centered  0011               Axle centered, because of ...
  // 15 - "Not available" 
  // 5 - "Axle steering in special mode" 
  // 4 - "Axle not active because of an error" 
  // 3 - "Axle centered,  because of an error" 
  // 2 - "Axle centered" 
  // 1 - "Axle steering active" 
  // 0 - "Axle steering not active" 

  uint8_t StatusOfSteerAxle;                  //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // A signal which indicates if lowering of lifted axle is allowed or inhibited.    00      Lowering allowed  01      Lowering inhibited  10      Reserved  11      Not available
  // 1 - "Lowering inhibited" 
  // 0 - "Lowering allowed" 
  // 3 - "Not available" 
  // 2 - "Reserved" 

  uint8_t SteerableLiftAxleLoweringInhibit;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the different types of steering systems (ref. ECE Regulation 79 paragraph 2.5)  0000             Main steering system  0001             Auxiliary steering equipment  0010-1110   Reserved for Assignment by SAE  1111             Not ...
  // 15 - "Not Available" 
  // 1 - "Auxiliary steering equipment" 
  // 0 - "Main steering system" 

  uint8_t SteerType;                          //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Steering Forces (Ref. ECE Regulation 79 paragraph 2.5)  0000             Manual steering equipment  0001             Power assisted steering equipment  0010             Full power steering equipment  0011             Self tracking steering ...
  // 15 - "Not Available" 
  // 3 - "Self tracking steering equipment" 
  // 2 - "Full power steering equipment" 
  // 1 - "Power assisted steering equipment" 
  // 0 - "Manual steering equipment" 

  uint8_t TypeOfSteerForces;                  //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Steering Transmission (Ref. ECE Regulation 79 paragraph 2.6)  0000             Purely mechanical steering transmission  0001             Purely hydraulic steering transmission  0010             Purely electric steering transmission  0011 ...
  // 15 - "Not available" 
  // 3 - "Hybrid steering transmission" 
  // 2 - "Purely electric steering transmission" 
  // 1 - "Purely hydraulic steering transmission" 
  // 0 - "Purely mechanical steering transmission" 

  uint8_t TypeOfSteerTrans;                   //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} ESC1_t;

// def @AT1IG1 CAN Message (418385662)
#define AT1IG1_IDE (1U)
#define AT1IG1_DLC (8U)
#define AT1IG1_CANID (0x18F00EFEU)
#define AT1IG1_CYC (50U)
// -- Aftertreatment 1 Intake Gas 1  The purpose of this PGN is to group the aftertreatment intake sensor data for bank 1.  These values include the NOx, %O2 , Status's of the sensors with respect to the power being supplied and the heating element, ...
// signal: @SCRInNOx1
#define SCRInNOx1_CovFactor 0.05
#define SCRInNOx1_CovS(x) ((int32_t)((x / 0.05) + 4000))
// signal: @PercentO21
#define PercentO21_CovFactor 0.000514
#define PercentO21_CovS(x) ((int32_t)((x / 0.000514) + 23346))
typedef struct
{

  // The amount of combined NO and NO2 in the exhaust entering the aftertreatment system measured by a NOx sensor at the aftertreatment intake, represented in NOx molecule parts per million non-NOx molecules in exhaust bank 1 Dosing Unit 1.  SPN 3216 ...
  int32_t SCRInNOx1;                     //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  

  // The actual oxidation factor (Percent Oxygen) of the gas within the exhaust stream. For positive values, the parameter represents the percent oxygen in excess of the amount required for stoichiometric combustion. For negative values, the parameter is ...
  int32_t PercentO21;                    //      Bits=16.  [ -12   , 21.02707 ]  Unit:'%'     Offset= -12       Factor= 0.000514

  // Indicates that the power supplied to the aftertreatment intake gas sensor, either NOx or O2, is within the manufacturer?s specification in exhaust bank 1.  This parameter reports the status as reported by the sensor.  00 - Not in range  01 - In ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 

  uint8_t Snsr1PwrInRange;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the heater element of the aftertreatment intake gas sensor, either NOx or O2, is within the manufacturer?s specified range for accurate measurements in exhaust bank 1.  00 - Not in range  01 - In range  10 - Error  11 - Not available   ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 

  uint8_t Snsr1AtTemp;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the NOx reading of the aftertreatment intake NOx sensor is stable as determined by the manufacturer?s control software in exhaust bank 1.    00 - Not stable  01 - Stable  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t SCRInNOx1ReadingStable;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the percent oxygen reading of the aftertreatment intake gas sensor, either NOx or O2, is stable as determined by the manufacturer's control software in exhaust bank 1.    00 - Not stable  01 - Stable  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t WRPercentO21ReadingStable;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the heater of the intake exhaust gas sensor, either NOx or O2, by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of ...
  uint8_t Snsr1HtrPreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the heater status in the warm-up process.  Upon receiving a power-up command, the gas sensor ramps up according to a manufacturer defined profile.  The Preheat 1, Preheat 2, and Automatic messages are regions within this profile in exhaust ...
  // 3 - "Heater off" 
  // 2 - "Preheat 1" 
  // 1 - "Preheat 2" 
  // 0 - "Automatic" 

  uint8_t Snsr1HtrCtrl;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment intake NOx sensor by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of multiple failures the most ...
  uint8_t SCRInNOxSnsr1PreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Self-diagnosis result status for the NOx sensor ATI1 (Aftertreatment Intake Bank 1)  000 Diagnosis not active  001 NOx Sensor ATI1 Self Diagnosis active flag  010 NOx Sensor ATI1 Self Diagnosis Result Complete  011 NOx Sensor ATI1 Self Diagnosis ...
  // 7 - "Not Supported" 
  // 4 - "NOx Sensor ATI1 Self Diagnosis not possible" 
  // 3 - "NOx Sensor ATI1 Self Diagnosis aborted" 
  // 2 - "NOx Sensor ATI1 Self Diagnosis Result Complete" 
  // 1 - "NOx Sensor ATI1 Self Diagnosis active flag" 
  // 0 - "Diagnosis not active" 

  uint8_t NOxSnsr1SelfDiagStatus;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment intake oxygen sensor by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of multiple failures the most ...
  uint8_t O2Snsr1PreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT1IG1_t;

// def @AT1OG1 CAN Message (418385918)
#define AT1OG1_IDE (1U)
#define AT1OG1_DLC (8U)
#define AT1OG1_CANID (0x18F00FFEU)
#define AT1OG1_CYC (50U)
// -- Aftertreatment 1 Outlet Gas 1  The purpose of this PGN is to group the aftertreatment outlet sensor data for bank 1.  These values include the NOx, %O2 , Status's of the sensors with respect to the power being supplied and the heating element, ...
// signal: @NOx1
#define NOx1_CovFactor 0.05
#define NOx1_CovS(x) ((int32_t)((x / 0.05) + 4000))
// signal: @PercentO21
#define PercentO21_CovFactor 0.000514
#define PercentO21_CovS(x) ((int32_t)((x / 0.000514) + 23346))
typedef struct
{

  // The amount of combined NO and NO2 in the exhaust exiting the aftertreatment system measured by a NOx sensor at the aftertreatment outlet, represented in NOx molecule parts per million non-NOx molecules in exhaust bank 1.  SPN 3226 shall display the ...
  int32_t NOx1;                          //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  

  // The actual oxidation factor (percent oxygen) of the gas within the exhaust stream.  For positive values, the parameter represents the percent oxygen in excess of the amount required for stoichiometric combustion.  For negative values, the parameter ...
  int32_t PercentO21;                    //      Bits=16.  [ -12   , 21.02707 ]  Unit:'%'     Offset= -12       Factor= 0.000514

  // Indicates that the power supplied to the aftertreatment outlet gas sensor, either NOx or O2, is within the manufacturer?s specification in exhaust bank 1. This parameter reports the status as reported by the sensor.  00 - Not in range  01 - In range   ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 

  uint8_t Snsr1PwrInRange;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the heater element of the aftertreatment outlet gas sensor, either NOx or O2, is within the manufacturer?s specified range for accurate measurements in exhaust bank 1.  00 - Not in range  01 - In range  10 - Error  11 - Not available   ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 

  uint8_t Snsr1AtTemp;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the NOx reading of the aftertreatment outlet NOx sensor is stable as determined by the manufacturer?s control software in exhaust bank 1.    00 - Not stable  01 - Stable  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t NOx1ReadingStable;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the percent oxygen reading of the aftertreatment outlet gas sensor, either NOx or O2, is stable as determined by the manufacturer's control software in exhaust bank 1.    00 - Not stable  01 - Stable  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t WRPercentO21ReadingStable;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the heater of the outlet exhaust gas sensor, either NOx or O2, by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of ...
  uint8_t Snsr1HtrPreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the heater status in the warm-up process.  Upon receiving a power-up command, the gas sensor ramps up according to a manufacturer defined profile.  The Preheat 1, Preheat 2, and Automatic messages are regions within this profile in exhaust ...
  // 3 - "Heater off" 
  // 2 - "Preheat 1" 
  // 1 - "Preheat 2" 
  // 0 - "Automatic" 

  uint8_t Snsr1HtrCtrl;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment outlet NOx sensor by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of multiple failures the most ...
  uint8_t NOxSnsr1PreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Self-diagnosis result status for NOx sensor ATO1 (Aftertreatment Outlet Bank 1)  000 Diagnosis not active  001 NOx Sensor ATO1 Self Diagnosis active flag  010 NOx Sensor ATO1 Self Diagnosis Result Complete  011 NOx Sensor ATO1 Self Diagnosis aborted   ...
  // 7 - "Not Supported" 
  // 4 - "NOx Sensor ATO1 Self Diagnosis not possible" 
  // 3 - "NOx Sensor ATO1 Self Diagnosis aborted" 
  // 2 - "NOx Sensor ATO1 Self Diagnosis Result Complete" 
  // 1 - "NOx Sensor ATO1 Self Diagnosis active flag" 
  // 0 - "Diagnosis not active" 

  uint8_t NOxSnsr1SelfDiagStatus;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment outlet oxygen sensor by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of multiple failures the most ...
  uint8_t O2Snsr1PreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT1OG1_t;

// def @AT2IG1 CAN Message (418386174)
#define AT2IG1_IDE (1U)
#define AT2IG1_DLC (8U)
#define AT2IG1_CANID (0x18F010FEU)
#define AT2IG1_CYC (50U)
// -- Aftertreatment 2 Intake Gas 1  The purpose of this PGN is to group the aftertreatment intake sensor data for bank 2.  These values include the NOx, %O2, status of the sensors with respect to the power being supplied and the heating element, errors ...
// signal: @SCRInNOx1
#define SCRInNOx1_CovFactor 0.05
#define SCRInNOx1_CovS(x) ((int32_t)((x / 0.05) + 4000))
// signal: @PercentO21
#define PercentO21_CovFactor 0.000514
#define PercentO21_CovS(x) ((int32_t)((x / 0.000514) + 23346))
typedef struct
{

  // The amount of combined NO and NO2 in the exhaust entering the aftertreatment system measured by a NOx sensor at the aftertreatment intake, represented in NOx molecule parts per million non-NOx molecules in exhaust bank 2.  For a single exhaust bank ...
  int32_t SCRInNOx1;                     //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  

  // The actual oxidation factor (percent oxygen) of the gas within the exhaust stream.  For positive values, the parameter represents the percent oxygen in excess of the amount required for stoichiometric combustion.  For negative values, the parameter ...
  int32_t PercentO21;                    //      Bits=16.  [ -12   , 21.02707 ]  Unit:'%'     Offset= -12       Factor= 0.000514

  // Indicates that the power supplied to the aftertreatment intake gas sensor, either NOx or O2, is within the manufacturer?s specification in exhaust bank 2.  For a single exhaust bank system, refer to parameters in PGNs 61454, 61455,  64946, 64947, ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 

  uint8_t Snsr1PwrInRange;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the heater element of the aftertreatment intake gas sensor, either NOx or O2, is within the manufacturer?s specified range for accurate measurements in exhaust bank 2.  For a single exhaust bank system, refer to parameters in PGNs ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 

  uint8_t Snsr1AtTemp;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the NOx reading of the aftertreatment intake NOx sensor is stable as determined by the manufacturer?s control software in exhaust bank 2.  For a single exhaust bank system, refer to parameters in PGNs 61454, 61455,  64946, 64947, ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t SCRInNOx1ReadingStable;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the percent oxygen reading of the aftertreatment intake gas sensor, either NOx or O2, is stable as determined by the manufacturer's control software in exhaust bank 2.  For a single exhaust bank system, refer to parameters in PGNs ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t WRPercentO21ReadingStable;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the heater of the intake exhaust gas sensor, either NOx or O2, by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of ...
  uint8_t Snsr1HtrPreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the heater status in the warm-up process.  Upon receiving a power-up command, the gas sensor ramps up according to a manufacturer defined profile.  The Preheat 1, Preheat 2, and Automatic messages are regions within this profile in exhaust ...
  // 3 - "Heater off" 
  // 2 - "Preheat 1" 
  // 1 - "Preheat 2" 
  // 0 - "Automatic" 

  uint8_t Snsr1HtrCtrl;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment intake NOx sensor by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of multiple failures the most ...
  uint8_t SCRInNOxSnsr1PreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Self-diagnosis result status for NOx sensor ATI2 (Aftertreatment Intake Bank 2)  000 Diagnosis not active  001 NOx Sensor ATI2 Self Diagnosis active flag  010 NOx Sensor ATI2 Self Diagnosis Result Complete  011 NOx Sensor ATI2 Self Diagnosis aborted   ...
  // 7 - "Not Supported" 
  // 4 - "NOx Sensor ATI2 Self Diagnosis not possible" 
  // 3 - "NOx Sensor ATI2 Self Diagnosis aborted" 
  // 2 - "NOx Sensor ATI2 Self Diagnosis Result Complete" 
  // 1 - "NOx Sensor ATI2 Self Diagnosis active flag" 
  // 0 - "Diagnosis not active" 

  uint8_t NOxSnsr1SelfDiagStatus;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment intake oxygen sensor by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of multiple failures the most ...
  uint8_t O2Snsr1PreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT2IG1_t;

// def @AT2OG1 CAN Message (418386430)
#define AT2OG1_IDE (1U)
#define AT2OG1_DLC (8U)
#define AT2OG1_CANID (0x18F011FEU)
#define AT2OG1_CYC (50U)
// -- Aftertreatment 2 Outlet Gas 1  The purpose of this PGN is to group the aftertreatment outlet sensor data for bank 2.  These values include the NOx, %O2, status of the sensors with respect to the power being supplied and the heating element, errors ...
// signal: @NOx1
#define NOx1_CovFactor 0.05
#define NOx1_CovS(x) ((int32_t)((x / 0.05) + 4000))
// signal: @PercentO21
#define PercentO21_CovFactor 0.000514
#define PercentO21_CovS(x) ((int32_t)((x / 0.000514) + 23346))
typedef struct
{

  // The amount of combined NO and NO2 in the exhaust entering the aftertreatment system measured by a NOx sensor at the aftertreatment outlet, represented in NOx molecule parts per million non-NOx molecules in exhaust bank 2.  For a single exhaust bank ...
  int32_t NOx1;                          //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  

  // The actual oxidation factor (percent oxygen) of the gas within the exhaust stream.  For positive values, the parameter represents the percent oxygen in excess of the amount required for stoichiometric combustion.  For negative values, the parameter ...
  int32_t PercentO21;                    //      Bits=16.  [ -12   , 21.02707 ]  Unit:'%'     Offset= -12       Factor= 0.000514

  // Indicates that the power supplied to the aftertreatment outlet gas sensor, either NOx or O2, is within the manufacturer?s specification in exhaust bank 2.  For a single exhaust bank system, refer to parameters in PGNs 61454, 61455,  64946, 64947, ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 

  uint8_t Snsr1PwrInRange;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the heater element of the aftertreatment outlet gas sensor, either NOx or O2, is within the manufacturer?s specified range for accurate measurements in exhaust bank 2.  For a single exhaust bank system, refer to parameters in PGNs ...
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 
  // 3 - "Not available" 

  uint8_t Snsr1AtTemp;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the NOx reading of the aftertreatment outlet NOx sensor is stable as determined by the manufacturer?s control software in exhaust bank 2.  For a single exhaust bank system, refer to parameters in PGNs 61454, 61455,  64946, 64947, ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t NOx1ReadingStable;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the percent oxygen reading of the aftertreatment outlet gas sensor, either NOx or O2, is stable as determined by the manufacturer's control software in exhaust bank 2.  For a single exhaust bank system, refer to parameters in PGNs ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t WRPercentO21ReadingStable;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the heater of the outlet exhaust gas sensor, either NOx or O2, by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of ...
  uint8_t Snsr1HtrPreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the heater status in the warm-up process.  Upon receiving a power-up command, the gas sensor ramps up according to a manufacturer defined profile.  The Preheat 1, Preheat 2, and Automatic messages are regions within this profile in exhaust ...
  // 3 - "Heater off" 
  // 2 - "Preheat 1" 
  // 1 - "Preheat 2" 
  // 0 - "Automatic" 

  uint8_t Snsr1HtrCtrl;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment outlet NOx sensor by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of multiple failures the most ...
  uint8_t NOxSnsr1PreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Self-diagnosis result status for NOx sensor ATO2 (Aftertreatment Outlet Bank 2)  000 Diagnosis not active  001 NOx Sensor ATO2 Self Diagnosis active flag  010 NOx Sensor ATO2 Self Diagnosis Result Complete  011 NOx Sensor ATO2 Self Diagnosis aborted   ...
  // 7 - "Not Supported" 
  // 4 - "NOx Sensor ATO2 Self Diagnosis not possible" 
  // 3 - "NOx Sensor ATO2 Self Diagnosis aborted" 
  // 2 - "NOx Sensor ATO2 Self Diagnosis Result Complete" 
  // 1 - "NOx Sensor ATO2 Self Diagnosis active flag" 
  // 0 - "Diagnosis not active" 

  uint8_t NOxSnsr1SelfDiagStatus;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment outlet oxygen sensor by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of multiple failures the most ...
  uint8_t O2Snsr1PreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT2OG1_t;

// def @FWSS1 CAN Message (418386686)
#define FWSS1_IDE (1U)
#define FWSS1_DLC (8U)
#define FWSS1_CANID (0x18F012FEU)
#define FWSS1_CYC (50U)
// -- Fifth Wheel Smart Systems 1  Fifth wheel smart system information. Parameters used to determine the status of the tractor to trailer coupling system integrity.
// signal: @FifthWheelVerticalForce
#define FifthWheelVerticalForce_CovFactor 5
#define FifthWheelVerticalForce_CovS(x) ((uint16_t)((x / 5)))
// signal: @FifthWheelDrawbarForce
#define FifthWheelDrawbarForce_CovFactor 10
#define FifthWheelDrawbarForce_CovS(x) ((int32_t)((x / 10) + 32000))
// signal: @FifthWheelRollMoment
#define FifthWheelRollMoment_CovFactor 10
#define FifthWheelRollMoment_CovS(x) ((int32_t)((x / 10) + 32000))
typedef struct
{

  // The amount of load being applied to the fifth wheel by the trailer. Zero load is indicated without a trailer.
  uint16_t FifthWheelVerticalForce;         //      Bits=16.  [ 0     , 321275 ]  Unit:'N'     Factor= 5     

  // Fifth wheel drawbar force, with the trailer held stationary a positive force is generated by the vehicle pulling forward.
  int32_t FifthWheelDrawbarForce;           //      Bits=16.  [ -320000, 322550 ]  Unit:'N'     Offset= -320000   Factor= 10    

  // Fifth wheel roll moment force - If the moment is positive, the trailer is rolling clockwise relative to the normal vehicle forward motion.
  int32_t FifthWheelRollMoment;             //      Bits=16.  [ -320000, 322550 ]  Unit:'N'     Offset= -320000   Factor= 10    

  // Indicates to the vehicle operator that the roll moment has exceeded a preset limit.     00 Limit not exceeded  01 Limit exceeded  10 error  11 Not Available
  // 3 - "Not Available" 
  // 2 - "error" 
  // 1 - "Limit exceeded" 
  // 0 - "Limit not exceeded" 

  uint8_t FifthWheelRollWarningIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} FWSS1_t;

// def @GPM17 CAN Message (418388990)
#define GPM17_IDE (1U)
#define GPM17_DLC (8U)
#define GPM17_CANID (0x18F01BFEU)
// -- General Purpose Message #1/7  Message to transmit data of the towing vehicle to the towed vehicle. See ISO 11992-3.
typedef struct
{
  uint32_t framecnt;
} GPM17_t;

// def @SAS CAN Message (418389502)
#define SAS_IDE (1U)
#define SAS_DLC (8U)
#define SAS_CANID (0x18F01DFEU)
#define SAS_CYC (10U)
// -- Steering Angle Sensor Information  Contains information which relates to a steering angle sensor.
// signal: @SteerWheelAngle
#define SteerWheelAngle_CovFactor 0.0009765625
#define SteerWheelAngle_CovS(x) ((int32_t)((x / 0.0009765625) + 32126))
// signal: @SteerWheelAngleRangeCounter
#define SteerWheelAngleRangeCounter_CovFactor 1
#define SteerWheelAngleRangeCounter_CovS(x) ((int8_t)(x + 32))
// signal: @SteerWheelAngleRange
#define SteerWheelAngleRange_CovFactor 0.0009765625
#define SteerWheelAngleRange_CovS(x) ((int32_t)((x / 0.0009765625) + 32126))
typedef struct
{

  // The main operator`s steering wheel angle (on the steering column, not the actual wheel angle). The vehicle being steered to the left (counterclockwise) results in a positive steering wheel angle.  This is the yaw angle of the steering wheel with the ...
  int32_t SteerWheelAngle;                   //      Bits=16.  [ -31.374, 31.374 ]  Unit:'rad'   Offset= -31.374   Factor= 0.0009765625

  // The signal indicates the number of steering wheel angle range overflows if the operating range of steering wheel is greater than the measuring range of sensor element. Positive values indicate left turns (counterclockwise). If the steering wheel ...
  int8_t SteerWheelAngleRangeCounter;        //      Bits=06.  [ -32   , 29     ]  Unit:'ranges' Offset= -32      

  // The signal indicates whether the steering wheel angle sensor is capable of absolute measuring of the number of steering wheel angle ranges or not.  Absolute measuring means that the steering wheel angle range counter signal indicates the real ...
  // 3 - "signal not available" 
  // 2 - "not defined" 
  // 1 - "absolute number of counts" 
  // 0 - "relative number of counts" 

  uint8_t SteerWheelAngleRangeCounterType;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The signal indicates the range of  the steering wheel angle the sensor element is capable to measure. The steering wheel angle signal ranges between the negative and the positive value of the steering wheel angle range.  For example, a steering ...
  int32_t SteerWheelAngleRange;              //      Bits=16.  [ 0     , 31.374 ]  Unit:'rad'   Offset= -31.374   Factor= 0.0009765625

  // This signal indicates the operational mode of the steering angle sensor.    00 - Programming mode active  01 - Normal mode active  10 - Reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Normal mode active" 
  // 0 - "Programming mode active" 

  uint8_t SteerAngleSensorActiveMode;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the calibration status of the steering angle sensor.    00 - SAS not calibrated  01 - SAS calibrated  10 - Reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "SAS calibrated" 
  // 0 - "SAS not calibrated" 

  uint8_t SteerAngleSensorCalibrated;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The message counter is to verify the signal path from the demanding device to the steering controller.  The support of this parameter is mandatory.  Note:  The initial value of the 4 bit message counter for the first message during a driving cycle ...
  uint8_t MessageCounter;                    //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The message checksum is used to verify the signal path from the demanding device to the steering controller.  The support of this parameter is mandatory if PGN 61469 is supported as there is no means to indicate ?not available?.  The 4 bit checksum ...
  uint8_t MessageChecksum;                   //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} SAS_t;

// def @EBS26 CAN Message (418390014)
#define EBS26_IDE (1U)
#define EBS26_DLC (8U)
#define EBS26_CANID (0x18F01FFEU)
// -- Electronic Brake System #2/6  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-2.
typedef struct
{
  uint32_t framecnt;
} EBS26_t;

// def @EBS25 CAN Message (418390270)
#define EBS25_IDE (1U)
#define EBS25_DLC (8U)
#define EBS25_CANID (0x18F020FEU)
// -- Electronic Brake System #2/5  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-2.
typedef struct
{
  uint32_t framecnt;
} EBS25_t;

// def @ESSI CAN Message (418390526)
#define ESSI_IDE (1U)
#define ESSI_DLC (8U)
#define ESSI_CANID (0x18F021FEU)
// -- Engine Speed Sensor Information  This PGN contains the speed information and status signal of each engine speed sensor. This message is used for service to troubleshoot no-start or hard start problems.  This message is not needed except for ...
// signal: @EngSpeed1
#define EngSpeed1_CovFactor 0.5
#define EngSpeed1_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @EngSpeed2
#define EngSpeed2_CovFactor 0.5
#define EngSpeed2_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @EngSpeed3
#define EngSpeed3_CovFactor 0.5
#define EngSpeed3_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // The engine speed as measured by speed sensor 1.  Note:  This is for the engine speed from the 1st engine speed sensor.  This may be different than SPN 190 when used in multiple engine speed sensor configurations.   In an application with only one ...
  uint16_t EngSpeed1;                         //      Bits=16.  [ 0     , 32127.5 ]  Unit:'rpm'   Factor= 0.5   

  // The engine speed as measured by speed sensor 2  Note:  This is for the engine speed from the 2nd engine speed sensor.  This may be different than SPN 190 when used in multiple engine speed sensor configurations.   In an application with multiple ...
  uint16_t EngSpeed2;                         //      Bits=16.  [ 0     , 32127.5 ]  Unit:'rpm'   Factor= 0.5   

  // The engine speed as measured by speed sensor 3.  Note:  This is for the engine speed from the 3rd engine speed sensor.  This may be different than SPN 190 when used in multiple engine speed sensor configurations.   In an application with multiple ...
  uint16_t EngSpeed3;                         //      Bits=16.  [ 0     , 32127.5 ]  Unit:'rpm'   Factor= 0.5   

  // This is the timing pattern status of the engine speed sensor signal for sensor 3.  The sensor may be sending a speed signal but the pattern may not be valid.  Since the speed is considered valid, the error indicator will not be used in the engine ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "OK" 
  // 0 - "Not OK" 

  uint8_t EngSpdSensor3TimingPatternStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This is the timing pattern status of the engine speed sensor signal for sensor 2.  The sensor may be sending a speed signal but the pattern may not be valid.  Since the speed is considered valid, the error indicator will not be used in the engine ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "OK" 
  // 0 - "Not OK" 

  uint8_t EngSpdSensor2TimingPatternStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This is the timing pattern status of the engine speed sensor signal for sensor 1.   The sensor may be sending a speed signal but the pattern may not be valid.  Since the speed is considered valid, the error indicator will not be used in the engine ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "OK" 
  // 0 - "Not OK" 

  uint8_t EngSpdSensor1TimingPatternStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} ESSI_t;

// def @MSS CAN Message (418390782)
#define MSS_IDE (1U)
#define MSS_DLC (8U)
#define MSS_CANID (0x18F022FEU)
// -- Machine Selected Speed  Message that provides the current machine selected speed, direction, and source parameters.
typedef struct
{

  // Reports the value of one of the currently available machine speeds (wheel, ground, or navigational-based) which the machine has determined to best represent the machine's speed.
  uint16_t MachineSelectedSpeed;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // Actual distance traveled by the machine based on the value of selected machine speed.  When distance exceeds 4211081.215 m, the value should be reset to zero and incremented as additional distance accrues.
  uint32_t MachineSelectedDistance;      //      Bits=32.  [ 0     , 0      ]  Unit:''     

  // Indicates the current direction of travel of the machine.    00 - Reverse  01 - Forward  10 - Error indication  11 - Not available
  // 2 - "Error indication" 
  // 1 - "Forward" 
  // 0 - "Reverse" 
  // 3 - "Not available" 

  uint8_t MachineSelectedDirection;      //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // Indicates the speed source that is currently being reported in the machine speed parameter.  000 - Wheel-based speed  001 - Ground-based speed  010 - Navigation-based speed  011 - 'Blended' speed  100 - 'Simulated' speed  101 - 110 - Reserved  111 - ...
  // 7 - "Not available" 
  // 4 - "'Simulated' speed" 
  // 3 - "'Blended' speed" 
  // 2 - "Navigation-based speed" 
  // 1 - "Ground-based speed" 
  // 0 - "Wheel-based speed" 

  uint8_t MachineSelectedSpeedSource;    //      Bits=03.  [ 0     , 0      ]  Unit:''     

  // Reports the tractor ECU's present limit status associated with a parameter whose commands are presistent  (i.e. hitch position).  000 - Not limited  001 - Operator limited/controlled (Request cannot be implemented)  010 - Limited high (only lower ...
  // 7 - "Not available" 
  // 6 - "Non-recoverable fault" 
  // 3 - "Limited low" 
  // 2 - "Limited high" 
  // 1 - "Operator limited/controlled" 
  // 0 - "Not limited" 

  uint8_t PersistentLimitStatus;         //      Bits=03.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} MSS_t;

// def @ETCC CAN Message (418393854)
#define ETCC_IDE (1U)
#define ETCC_DLC (8U)
#define ETCC_CANID (0x18F02EFEU)
// -- Engine Turbocharger Control  This PGN contains the Engine Turbocharger Wastegate Actuator 1 & 2 control, Exhaust Back Pressure Regulator and Blowoff Actuator commands.
// signal: @EngTurboWastegateActuator1Cmd
#define EngTurboWastegateActuator1Cmd_CovFactor 0.0025
#define EngTurboWastegateActuator1Cmd_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngTurboWastegateActuator2Cmd
#define EngTurboWastegateActuator2Cmd_CovFactor 0.0025
#define EngTurboWastegateActuator2Cmd_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngExhstBckPressRegulatorCtrlCmd
#define EngExhstBckPressRegulatorCtrlCmd_CovFactor 0.0025
#define EngExhstBckPressRegulatorCtrlCmd_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngTrbCmprssrBlowoffActuator1Cmd
#define EngTrbCmprssrBlowoffActuator1Cmd_CovFactor 0.0025
#define EngTrbCmprssrBlowoffActuator1Cmd_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // The command to a Turbocharger Wastegate actuator 1, normalized to percent, where 0% nominally represents fully closed (No Flow) and 100% represents fully open (Max Flow).  0xFB00 - 0xFB64 is sent to calibrate to a specific position.  The LSB ...
  uint16_t EngTurboWastegateActuator1Cmd;     //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // The command to a Turbocharger Wastegate actuator 2, normalized to percent, where 0% nominally represents fully closed (No Flow) and 100% represents fully open (Max Flow).
  uint16_t EngTurboWastegateActuator2Cmd;     //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // The control command to the Engine Exhaust Pressure Regulator, normalized to percent.  100 percent means the regulator is fully closed, providing the maximum restriction to exhaust gas flow from the engine.  Zero percent means the regulator is fully ...
  uint16_t EngExhstBckPressRegulatorCtrlCmd;  //      Bits=16.  [ 0     , 100    ]  Unit:'%'     Factor= 0.0025

  // The command to blow off actuator 1, normalized to percent, where 0% nominally represents fully closed (No Flow) and 100% represents fully open (Max Flow). The purpose of Blow-off value is similar to that of Compressor bypass valve, however the ...
  uint16_t EngTrbCmprssrBlowoffActuator1Cmd;  //      Bits=16.  [ 0     , 100    ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} ETCC_t;

// def @AT1IG3 CAN Message (418441726)
#define AT1IG3_IDE (1U)
#define AT1IG3_DLC (8U)
#define AT1IG3_CANID (0x18F0E9FEU)
#define AT1IG3_CYC (50U)
// -- Aftertreatment 1 Intake Gas 3  The purpose of this PGN is to group the aftertreatment intake sensor data for bank 1.  These values include the NOx, %O2, Status of the sensors with respect to the power being supplied and the heating element, errors ...
// signal: @SCRInNOx2
#define SCRInNOx2_CovFactor 0.05
#define SCRInNOx2_CovS(x) ((int32_t)((x / 0.05) + 4000))
// signal: @PercentO22
#define PercentO22_CovFactor 0.000514
#define PercentO22_CovS(x) ((int32_t)((x / 0.000514) + 23346))
typedef struct
{

  // The second measurement of the amount of combined NO and NO2 in the exhaust entering the aftertreatment system measured by a NOx sensor at the aftertreatment intake, represented in NOx molecule parts per million non-NOx molecules in exhaust bank 1 ...
  int32_t SCRInNOx2;                     //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  

  // The second measurement of the actual oxidation factor (Percent Oxygen) of the gas within the exhaust stream. For positive values, the parameter represents the percent oxygen in excess of the amount required for stoichiometric combustion. For ...
  int32_t PercentO22;                    //      Bits=16.  [ -12   , 21.02707 ]  Unit:'%'     Offset= -12       Factor= 0.000514

  // Indicates that the second measurement of power supplied to the aftertreatment intake gas sensor, either NOx or O2, is within the manufacturer?s specification in exhaust bank 1.  This parameter reports the status as reported by the sensor.  00 - Not ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 

  uint8_t Snsr2PwrInRange;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the heater element of the aftertreatment intake gas second sensor, either NOx or O2, is within the manufacturer?s specified range for accurate measurements in exhaust bank 1.  00 - Not in range  01 - In range  10 - Error  11 - Not ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 

  uint8_t Snsr2AtTemp;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the NOx reading of the aftertreatment intake NOx second sensor is stable as determined by the manufacturer?s control software in exhaust bank 1.    00 - Not stable  01 - Stable  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t SCRInNOx2ReadingStable;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the second measurement of the percent oxygen reading of the aftertreatment intake gas sensor, either NOx or O2, is stable as determined by the manufacturer's control software in exhaust bank 1.  00 - Not stable  01 - Stable  10 - ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t WRPercentO22ReadingStable;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the second applicable J1939-73 FMI detected in the heater of the intake exhaust gas sensor, either NOx or O2, by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of ...
  uint8_t Snsr2HtrPreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the heater status in the warm-up process.  Upon receiving a power-up command, the second gas sensor ramps up according to a manufacturer defined profile.  The Preheat 1, Preheat 2, and Automatic messages are regions within this profile in ...
  // 3 - "Heater off" 
  // 2 - "Preheat 1" 
  // 1 - "Preheat 2" 
  // 0 - "Automatic" 

  uint8_t Snsr2HtrCtrl;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment intake NOx second sensor by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of multiple failures the ...
  uint8_t SCRInNOxSnsr2PreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Self-diagnosis result status for the second NOx sensor ATI1 (Aftertreatment Intake Bank 1)  000 Diagnosis not active  001 NOx Sensor ATI1 Self Diagnosis active flag  010 NOx Sensor ATI1 Self Diagnosis Result Complete  011 NOx Sensor ATI1 Self ...
  // 7 - "Not Supported" 
  // 4 - "NOx Sensor ATI1 Self Diagnosis not possible" 
  // 3 - "NOx Sensor ATI1 Self Diagnosis aborted" 
  // 2 - "NOx Sensor ATI1 Self Diagnosis Result Complete" 
  // 1 - "NOx Sensor ATI1 Self Diagnosis active flag" 
  // 0 - "Diagnosis not active" 

  uint8_t NOxSnsr2SelfDiagStatus;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the second applicable J1939-73 FMI detected in the aftertreatment intake oxygen sensor by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of multiple failures the ...
  uint8_t O2Snsr2PreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT1IG3_t;

// def @AT1OG3 CAN Message (418441982)
#define AT1OG3_IDE (1U)
#define AT1OG3_DLC (8U)
#define AT1OG3_CANID (0x18F0EAFEU)
#define AT1OG3_CYC (50U)
// -- Aftertreatment 1 Outlet Gas 3  The purpose of this PGN is to group the aftertreatment outlet sensor data for bank 1.  These values include the NOx, %O2, Status of the sensors with respect to the power being supplied and the heating element, errors ...
// signal: @NOx2
#define NOx2_CovFactor 0.05
#define NOx2_CovS(x) ((int32_t)((x / 0.05) + 4000))
// signal: @PercentO22
#define PercentO22_CovFactor 0.000514
#define PercentO22_CovS(x) ((int32_t)((x / 0.000514) + 23346))
typedef struct
{

  // The second measurement of the amount of combined NO and NO2 in the exhaust exiting the aftertreatment system measured by a NOx sensor at the aftertreatment outlet, represented in NOx molecule parts per million non-NOx molecules in exhaust bank 1.
  int32_t NOx2;                          //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  

  // The second measurement of the actual oxidation factor (percent oxygen) of the gas within the exhaust stream.  For positive values, the parameter represents the percent oxygen in excess of the amount required for stoichiometric combustion.  For ...
  int32_t PercentO22;                    //      Bits=16.  [ -12   , 21.02707 ]  Unit:'%'     Offset= -12       Factor= 0.000514

  // Indicates that the second measurement of power supplied to the aftertreatment outlet gas sensor, either NOx or O2, is within the manufacturer?s specification in exhaust bank 1. This parameter reports the status as reported by the sensor.  00 - Not ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 

  uint8_t Snsr2PwrInRange;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the heater element of the aftertreatment outlet gas second sensor, either NOx or O2, is within the manufacturer?s specified range for accurate measurements in exhaust bank 1.  00 - Not in range  01 - In range  10 - Error  11 - Not ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 

  uint8_t Snsr2AtTemp;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the NOx reading of the aftertreatment outlet NOx second sensor is stable as determined by the manufacturer?s control software in exhaust bank 1.    00 - Not stable  01 - Stable  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t NOx2ReadingStable;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the percent oxygen reading of the aftertreatment outlet gas second sensor, either NOx or O2, is stable as determined by the manufacturer's control software in exhaust bank 1.  00 - Not stable  01 - Stable  10 - Error  11 - Not ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t WRPercentO22ReadingStable;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the heater of the outlet exhaust gas second sensor, either NOx or O2, by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of ...
  uint8_t Snsr2HtrPreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the heater status in the warm-up process.  Upon receiving a power-up command, the gas second sensor ramps up according to a manufacturer defined profile.  The Preheat 1, Preheat 2, and Automatic messages are regions within this profile in ...
  // 3 - "Heater off" 
  // 2 - "Preheat 1" 
  // 1 - "Preheat 2" 
  // 0 - "Automatic" 

  uint8_t Snsr2HtrCtrl;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment outlet NOx second sensor by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of multiple failures the ...
  uint8_t NOxSnsr2PreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Self-diagnosis result status for NOx second sensor ATO1 (Aftertreatment Outlet Bank 1)  000 Diagnosis not active  001 NOx Sensor ATO1 Self Diagnosis active flag  010 NOx Sensor ATO1 Self Diagnosis Result Complete  011 NOx Sensor ATO1 Self Diagnosis ...
  // 7 - "Not Supported" 
  // 4 - "NOx Sensor ATO1 Self Diagnosis not possible" 
  // 3 - "NOx Sensor ATO1 Self Diagnosis aborted" 
  // 2 - "NOx Sensor ATO1 Self Diagnosis Result Complete" 
  // 1 - "NOx Sensor ATO1 Self Diagnosis active flag" 
  // 0 - "Diagnosis not active" 

  uint8_t NOxSnsr2SelfDiagStatus;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment outlet oxygen second sensor by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of multiple failures the ...
  uint8_t O2Snsr2PreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT1OG3_t;

// def @AT2IS2 CAN Message (418442238)
#define AT2IS2_IDE (1U)
#define AT2IS2_DLC (8U)
#define AT2IS2_CANID (0x18F0EBFEU)
#define AT2IS2_CYC (50U)
// -- Aftertreatment 2 Intake Sensor 2  The purpose of this PGN is to group the aftertreatment intake sensor data for bank 2.  These values include the NOx, %O2, status of the sensors with respect to the power being supplied and the heating element, ...
// signal: @SCRInNOx2
#define SCRInNOx2_CovFactor 0.05
#define SCRInNOx2_CovS(x) ((int32_t)((x / 0.05) + 4000))
// signal: @PercentO22
#define PercentO22_CovFactor 0.000514
#define PercentO22_CovS(x) ((int32_t)((x / 0.000514) + 23346))
typedef struct
{

  // The amount of combined NO and NO2 in the exhaust entering the aftertreatment system measured by the second NOx sensor at the aftertreatment intake, represented in NOx molecule parts per million non-NOx molecules in exhaust bank 2.  For a single ...
  int32_t SCRInNOx2;                     //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  

  // The actual oxidation factor (percent oxygen) of the gas within the exhaust stream.  For positive values, the parameter represents the percent oxygen in excess of the amount required for stoichiometric combustion.  For negative values, the parameter ...
  int32_t PercentO22;                    //      Bits=16.  [ -12   , 21.02707 ]  Unit:'%'     Offset= -12       Factor= 0.000514

  // Indicates that the power supplied to the aftertreatment intake gas second sensor, either NOx or O2, is within the manufacturer?s specification in exhaust bank 2.  For a single exhaust bank system, refer to parameters in PGNs 61454, 61455, 64946, ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 

  uint8_t GasSnsr2PwrInRange;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the heater element of the aftertreatment intake gas second sensor, either NOx or O2, is within the manufacturer?s specified range for accurate measurements in exhaust bank 2.  For a single exhaust bank system, refer to parameters in ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 

  uint8_t GasSnsr2AtTemp;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the NOx reading of the aftertreatment intake NOx second sensor is stable as determined by the manufacturer?s control software in exhaust bank 2.  For a single exhaust bank system, refer to parameters in PGNs 61454, 61455, 64946, ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t SCRInNOx2ReadingStable;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the percent oxygen reading of the aftertreatment intake gas second sensor, either NOx or O2, is stable as determined by the manufacturer's control software in exhaust bank 2.  For a single exhaust bank system, refer to parameters in ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t WRPercentO22ReadingStable;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the heater of the intake exhaust gas second sensor, either NOx or O2, by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of ...
  uint8_t GasSnsr2HtrPreliminaryFMI;     //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the heater status in the warm-up process.  Upon receiving a power-up command, the second gas sensor ramps up according to a manufacturer defined profile.  The Preheat 1, Preheat 2, and Automatic messages are regions within this profile in ...
  // 3 - "Heater off" 
  // 2 - "Preheat 1" 
  // 1 - "Preheat 2" 
  // 0 - "Automatic" 

  uint8_t GasSnsr2HtrCtrl;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment intake NOx second sensor by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of multiple failures the ...
  uint8_t SCRInNOxSnsr2PreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Self-diagnosis result status for NOx second sensor ATI2 (Aftertreatment Intake Bank 2)  000 Diagnosis not active  001 NOx Sensor ATI2 Self Diagnosis active flag  010 NOx Sensor ATI2 Self Diagnosis Result Complete  011 NOx Sensor ATI2 Self Diagnosis ...
  // 7 - "Not Supported" 
  // 4 - "NOx Sensor ATI2 Self Diagnosis not possible" 
  // 3 - "NOx Sensor ATI2 Self Diagnosis aborted" 
  // 2 - "NOx Sensor ATI2 Self Diagnosis Result Complete" 
  // 1 - "NOx Sensor ATI2 Self Diagnosis active flag" 
  // 0 - "Diagnosis not active" 

  uint8_t NOxSnsr2SelfDiagStatus;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment intake oxygen second sensor by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of multiple failures the ...
  uint8_t O2Snsr2PreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT2IS2_t;

// def @AT2OS2 CAN Message (418442494)
#define AT2OS2_IDE (1U)
#define AT2OS2_DLC (8U)
#define AT2OS2_CANID (0x18F0ECFEU)
#define AT2OS2_CYC (50U)
// -- Aftertreatment 2 Outlet Sensor 2  The purpose of this PGN is to group the aftertreatment outlet sensor data for bank 2.  These values include the NOx, %O2, status of the sensors with respect to the power being supplied and the heating element, ...
// signal: @NOx2
#define NOx2_CovFactor 0.05
#define NOx2_CovS(x) ((int32_t)((x / 0.05) + 4000))
// signal: @PercentO22
#define PercentO22_CovFactor 0.000514
#define PercentO22_CovS(x) ((int32_t)((x / 0.000514) + 23346))
typedef struct
{

  // The amount of combined NO and NO2 in the exhaust entering the aftertreatment system measured by the second NOx sensor at the aftertreatment outlet, represented in NOx molecule parts per million non-NOx molecules in exhaust bank 2.  For a single ...
  int32_t NOx2;                          //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  

  // The actual oxidation factor (percent oxygen) of the gas within the exhaust stream.  For positive values, the parameter represents the percent oxygen in excess of the amount required for stoichiometric combustion.  For negative values, the parameter ...
  int32_t PercentO22;                    //      Bits=16.  [ -12   , 21.02707 ]  Unit:'%'     Offset= -12       Factor= 0.000514

  // Indicates that the power supplied to the aftertreatment outlet gas second sensor, either NOx or O2, is within the manufacturer?s specification in exhaust bank 2.  For a single exhaust bank system, refer to parameters in PGNs 61454, 61455, 64946, ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 

  uint8_t GasSnsr2PwrInRange;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the heater element of the aftertreatment outlet gas second sensor, either NOx or O2, is within the manufacturer?s specified range for accurate measurements in exhaust bank 2.  For a single exhaust bank system, refer to parameters in ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "In range" 
  // 0 - "Not in range" 

  uint8_t GasSnsr2AtTemp;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the NOx reading of the aftertreatment outlet NOx second sensor is stable as determined by the manufacturer?s control software in exhaust bank 2.  For a single exhaust bank system, refer to parameters in PGNs 61454, 61455, 64946, ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t NOx2ReadingStable;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the percent oxygen reading of the aftertreatment outlet gas second sensor, either NOx or O2, is stable as determined by the manufacturer's control software in exhaust bank 2.  For a single exhaust bank system, refer to parameters in ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Stable" 
  // 0 - "Not stable" 

  uint8_t WRPercentO22ReadingStable;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the heater of the outlet exhaust gas second sensor, either NOx or O2, by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of ...
  uint8_t GasSnsr2HtrPreliminaryFMI;     //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Indicates the heater status in the warm-up process.  Upon receiving a power-up command, the gas second sensor ramps up according to a manufacturer defined profile.  The Preheat 1, Preheat 2, and Automatic messages are regions within this profile in ...
  // 3 - "Heater off" 
  // 2 - "Preheat 1" 
  // 1 - "Preheat 2" 
  // 0 - "Automatic" 

  uint8_t GasSnsr2HtrCtrl;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment outlet NOx second sensor by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of multiple failures the ...
  uint8_t NOxSnsr2PreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Self-diagnosis result status for second NOx sensor ATO2 (Aftertreatment Outlet Bank 2)  000 Diagnosis not active  001 NOx Sensor ATO2 Self Diagnosis active flag  010 NOx Sensor ATO2 Self Diagnosis Result Complete  011 NOx Sensor ATO2 Self Diagnosis ...
  // 0 - "Diagnosis not active" 
  // 7 - "Not Supported" 
  // 4 - "NOx Sensor ATO2 Self Diagnosis not possible" 
  // 3 - "NOx Sensor ATO2 Self Diagnosis aborted" 
  // 2 - "NOx Sensor ATO2 Self Diagnosis Result Complete" 
  // 1 - "NOx Sensor ATO2 Self Diagnosis active flag" 

  uint8_t NOxSnsr2SelfDiagStatus;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment outlet oxygen second sensor by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of multiple failures the ...
  uint8_t O2Snsr2PreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT2OS2_t;

// def @ADASIS1 CAN Message (418445054)
#define ADASIS1_IDE (1U)
#define ADASIS1_DLC (8U)
#define ADASIS1_CANID (0x18F0F6FEU)
// -- Advanced Driver Assistance Systems Interface Specification 1  Advanced Driver Assistance Systems Interface Specification (ADASIS) defines parameters that describe the upcoming vehicle's environment, including the attributes about the current ...
typedef struct
{
  uint32_t framecnt;
} ADASIS1_t;

// def @ADASIS2 CAN Message (418445310)
#define ADASIS2_IDE (1U)
#define ADASIS2_DLC (8U)
#define ADASIS2_CANID (0x18F0F7FEU)
// -- Advanced Driver Assistance Systems Interface Specification 2  Refer to ADASIS for specific message and parameter  definitions. See ADASIS1 (PGN 61686) for more information.
typedef struct
{
  uint32_t framecnt;
} ADASIS2_t;

// def @ADASIS3 CAN Message (418445566)
#define ADASIS3_IDE (1U)
#define ADASIS3_DLC (8U)
#define ADASIS3_CANID (0x18F0F8FEU)
// -- Advanced Driver Assistance Systems Interface Specification 3  Refer to ADASIS for specific message and parameter definitions. See the ADASIS1  (PGN xxx) for more information.
typedef struct
{
  uint32_t framecnt;
} ADASIS3_t;

// def @TGFI CAN Message (419172862)
#define TGFI_IDE (1U)
#define TGFI_DLC (8U)
#define TGFI_CANID (0x18FC11FEU)
// -- Total Gaseous Fuel Information  Reports the total fuel information of systems using gaseous fuel.
// signal: @EngTotalGasFuelVolumeUsed
#define EngTotalGasFuelVolumeUsed_CovFactor 0.5
#define EngTotalGasFuelVolumeUsed_CovS(x) ((uint32_t)((x / 0.5)))
// signal: @EngTotalGasIdleFuelVolumeUsed
#define EngTotalGasIdleFuelVolumeUsed_CovFactor 0.5
#define EngTotalGasIdleFuelVolumeUsed_CovS(x) ((uint32_t)((x / 0.5)))
typedef struct
{

  // Accumulated volume of engine gaseous fuel used during vehicle operation, in standard cubic meters.    See SPN 1040 for alternate units.
  uint32_t EngTotalGasFuelVolumeUsed;      //      Bits=32.  [ 0     , 2105540607.5 ]  Unit:'m?'    Factor= 0.5   

  // Accumulated volume of engine gaseous fuel used during vehicle operation under idle conditions, in standard cubic meters.
  uint32_t EngTotalGasIdleFuelVolumeUsed;  //      Bits=32.  [ 0     , 2105540607.5 ]  Unit:'m?'    Factor= 0.5   
  uint32_t framecnt;
} TGFI_t;

// def @VEP3 CAN Message (419173630)
#define VEP3_IDE (1U)
#define VEP3_DLC (8U)
#define VEP3_CANID (0x18FC14FEU)
#define VEP3_CYC (100U)
// -- Vehicle Electrical Power #3  This contains high resolution/range parameters reported from the alternator or power generation components.
// signal: @AltCurrent
#define AltCurrent_CovFactor 0.05
#define AltCurrent_CovS(x) ((int32_t)((x / 0.05) + 32000))
// signal: @NetBatteryCurrent
#define NetBatteryCurrent_CovFactor 0.05
#define NetBatteryCurrent_CovS(x) ((int32_t)((x / 0.05) + 32000))
// signal: @SLIBattery2NetCurrent
#define SLIBattery2NetCurrent_CovFactor 0.05
#define SLIBattery2NetCurrent_CovS(x) ((int32_t)((x / 0.05) + 32000))
typedef struct
{

  // This parameter indicates the amount of electrical current output from the alternator of the main vehicle.  Alternator Current (SPN 115) has a lower range and resolution.
  int32_t AltCurrent;                    //      Bits=16.  [ -1600 , 1612.75 ]  Unit:'A'     Offset= -1600     Factor= 0.05  

  // Net flow of electrical current into/out of the first battery or first set of batteries used for starting the engine, for lighting, and for ignition (SLI). See SPN 114 for alternate range and resolution.
  int32_t NetBatteryCurrent;             //      Bits=16.  [ -1600 , 1612.75 ]  Unit:'A'     Offset= -1600     Factor= 0.05  

  // Net flow of electrical current into/out of the second battery or second set of batteries used for starting the engine, for lighting, and for ignition (SLI).
  int32_t SLIBattery2NetCurrent;         //      Bits=16.  [ -1600 , 1612.75 ]  Unit:'A'     Offset= -1600     Factor= 0.05  
  uint32_t framecnt;
} VEP3_t;

// def @PLST2 CAN Message (419174654)
#define PLST2_IDE (1U)
#define PLST2_DLC (8U)
#define PLST2_CANID (0x18FC18FEU)
#define PLST2_CYC (5000U)
// -- Payload System Totals 2  Payload measurement system accumulators.
typedef struct
{

  // The accumulated number of completed payload delivery transactions over the life of the product.  If transaction status monitoring is supported via Payload Delivery Transaction Status (SPN 7702) then total payload transaction count may increment when ...
  uint32_t TotalPayloadTransactionCount;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     
  uint32_t framecnt;
} PLST2_t;

// def @PLST1 CAN Message (419174910)
#define PLST1_IDE (1U)
#define PLST1_DLC (8U)
#define PLST1_CANID (0x18FC19FEU)
#define PLST1_CYC (5000U)
// -- Payload System Totals 1  Payload measurement system accumulators related to the haul cycle productivity.
// signal: @TotalDeliveredPayloadWeight
#define TotalDeliveredPayloadWeight_CovFactor 100
#define TotalDeliveredPayloadWeight_CovS(x) ((uint32_t)((x / 100)))
typedef struct
{

  // The accumulated delivered payload mass over the life of the product.  This should be a monotonically increasing number that sums delivered payload weights (SPN 6849) If transactions are supported (Payload Delivery Transaction Status, SPN 7702) then ...
  uint32_t TotalDeliveredPayloadWeight;  //      Bits=32.  [ 0     , 421108121500 ]  Unit:'kg'    Factor= 100   

  // The total accumulated number of haul cycles over the life of the product.  This should be a monotonically increasing number that sums Haul Cycle Count (SPN 6847). If transactions are supported via Payload Delivery Transaction Status (SPN 7702) then ...
  uint32_t TotalHaulCycleCount;          //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     
  uint32_t framecnt;
} PLST1_t;

// def @LFC2 CAN Message (419177470)
#define LFC2_IDE (1U)
#define LFC2_DLC (8U)
#define LFC2_CANID (0x18FC23FEU)
// -- Fuel Consumption (Liquid) 2  Engine fuel consumption accumulators.
// signal: @EngTotalDieselFuelDemand
#define EngTotalDieselFuelDemand_CovFactor 0.5
#define EngTotalDieselFuelDemand_CovS(x) ((uint32_t)((x / 0.5)))
typedef struct
{

  // Accumulated amount of liquid fuel that would have been used during engine operation, including actual diesel fuel used and the diesel fuel that was displaced by gaseous fuel.    This is the cumulative value of SPN 7596.
  uint32_t EngTotalDieselFuelDemand;     //      Bits=32.  [ 0     , 2105540607.5 ]  Unit:'L'     Factor= 0.5   
  uint32_t framecnt;
} LFC2_t;

// def @A2DEFT1 CAN Message (419177726)
#define A2DEFT1_IDE (1U)
#define A2DEFT1_DLC (8U)
#define A2DEFT1_CANID (0x18FC24FEU)
#define A2DEFT1_CYC (1000U)
// -- Aftertreatment 2 Diesel Exhaust Fluid Tank 1 Information 2  This message contains diesel exhaust fluid tank 1 information for aftertreatment system 2 (or bank 2).  The first tank for the aftertreatment sytem is primary reagent storage tank.
// signal: @CtrlTemp
#define CtrlTemp_CovFactor 1
#define CtrlTemp_CovS(x) ((int16_t)(x + 40))
// signal: @Volume2
#define Volume2_CovFactor 0.4
#define Volume2_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @Ctrl2Temp
#define Ctrl2Temp_CovFactor 1
#define Ctrl2Temp_CovS(x) ((int16_t)(x + 40))
// signal: @Temp2
#define Temp2_CovFactor 1
#define Temp2_CovS(x) ((int16_t)(x + 40))
// signal: @Htr2
#define Htr2_CovFactor 0.4
#define Htr2_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Temperature of the diesel exhaust fluid at the aftertreatment 2 diesel exhaust fluid controller.
  int16_t CtrlTemp;                      //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Second measurement of the ratio of volume of diesel exhaust fluid to the total volume of the diesel exhaust fluid storage container for aftertreatment system 2 (exhaust bank 2).  0% is empty and 100% is full.  See SPN 4426 and SPN 4428 for alternate ...
  uint8_t Volume2;                       //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Temperature of the diesel exhaust fluid at the aftertreatment 2 diesel exhaust fluid controller 2.
  int16_t Ctrl2Temp;                     //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The second temperature of aftertreatment 2 diesel exhaust fluid in the storage tank.
  int16_t Temp2;                         //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Percentage of heating applied to the second diesel exhaust fluid tank heater on aftertreatment 2. A value of 0% means no heating applied, a value of 100% means full heating applied. The diesel exhaust fluid tank heater warms the diesel exhaust fluid ...
  uint8_t Htr2;                          //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} A2DEFT1_t;

// def @AT1T1I2 CAN Message (419177982)
#define AT1T1I2_IDE (1U)
#define AT1T1I2_DLC (8U)
#define AT1T1I2_CANID (0x18FC25FEU)
#define AT1T1I2_CYC (1000U)
// -- Aftertreatment 1 Diesel Exhaust Fluid Tank 1 Information 2  Contains information on various tank levels
// signal: @Volume2
#define Volume2_CovFactor 0.4
#define Volume2_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @Temp2
#define Temp2_CovFactor 1
#define Temp2_CovS(x) ((int16_t)(x + 40))
// signal: @Htr2
#define Htr2_CovFactor 0.4
#define Htr2_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Second measurement of the ratio of volume of diesel exhaust fluid to the total volume of the diesel exhaust fluid storage container for aftertreatment system 1 (exhaust bank 1).  0% is empty and 100% is full.  See SPN 1761 and SPN 3517 for alternate ...
  uint8_t Volume2;                       //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The second temperature of aftertreatment 1 diesel exhaust fluid in the storage tank.
  int16_t Temp2;                         //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Percentage of heating applied to the second diesel exhaust fluid tank heater on aftertreatment 1. A value of 0% means no heating applied, a value of 100% means full heating applied. The diesel exhaust fluid tank heater warms the diesel exhaust fluid ...
  uint8_t Htr2;                          //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} AT1T1I2_t;

// def @A1DEFI2 CAN Message (419178494)
#define A1DEFI2_IDE (1U)
#define A1DEFI2_DLC (8U)
#define A1DEFI2_CANID (0x18FC27FEU)
#define A1DEFI2_CYC (1000U)
// -- Aftertreatment 1 Diesel Exhaust Fluid Information 2  Sensor Information which measures temperature, concentration, and conductivity of the diesel exhaust fluid of the aftertreatment 1 system.
// signal: @Ctrl1Temp
#define Ctrl1Temp_CovFactor 1
#define Ctrl1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @Ctrl2Temp
#define Ctrl2Temp_CovFactor 1
#define Ctrl2Temp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Temperature of the diesel exhaust fluid at the aftertreatment 1 diesel exhaust fluid controller.  For controllers that have more exhaust emissions control functions than only diesel exhaust fluid control, see SPN 5486 - exhaust emission control ECU ...
  int16_t Ctrl1Temp;                     //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of the diesel exhaust fluid at the aftertreatment 1 diesel exhaust fluid controller 2.
  int16_t Ctrl2Temp;                     //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} A1DEFI2_t;

// def @FLI3 CAN Message (419179006)
#define FLI3_IDE (1U)
#define FLI3_DLC (8U)
#define FLI3_CANID (0x18FC29FEU)
#define FLI3_CYC (100U)
// -- Forward Lane Image 3  Forward Lane Image message 3 for computing results outside the optical sensor (e.g., data fusion)
// signal: @LftDstncTLnMrkFromVehiclesMiddle
#define LftDstncTLnMrkFromVehiclesMiddle_CovFactor 0.02
#define LftDstncTLnMrkFromVehiclesMiddle_CovS(x) ((uint8_t)((x / 0.02)))
// signal: @RghtDstncTLnMrkFrmVehiclesMiddle
#define RghtDstncTLnMrkFrmVehiclesMiddle_CovFactor 0.02
#define RghtDstncTLnMrkFrmVehiclesMiddle_CovS(x) ((uint8_t)((x / 0.02)))
// signal: @RoadCurvatureBasedOnLaneMarks
#define RoadCurvatureBasedOnLaneMarks_CovFactor 0.0078125
#define RoadCurvatureBasedOnLaneMarks_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @LaneDepartureAngleLeft
#define LaneDepartureAngleLeft_CovFactor 0.1
#define LaneDepartureAngleLeft_CovS(x) ((int16_t)((x / 0.1) + 125))
// signal: @LaneDepartureAngleRight
#define LaneDepartureAngleRight_CovFactor 0.1
#define LaneDepartureAngleRight_CovS(x) ((int16_t)((x / 0.1) + 125))
typedef struct
{

  // Distance between middle of the vehicle front and the inner/right edge of the nearest lane mark on the left side as measured from the Forward Lane Imager. The value represents the lane width at camera position. Measured values greater than 5 m ...
  // 255 - "not available or not installed" 
  // 254 - "error" 
  // 253 - "reserved / not used" 
  // 252 - "not reliable" 
  // 251 - "not in range" 

  uint8_t LftDstncTLnMrkFromVehiclesMiddle;   //      Bits=08.  [ 0     , 5      ]  Unit:'m'     Factor= 0.02  

  // Distance between middle of the vehicle front and the inner/left edge of the nearest lane mark on the right side as measured from the Forward Lane Imager. The value represents the lane width at camera position. Measured values greater than 5 m ...
  // 255 - "not available or not installed" 
  // 254 - "error" 
  // 253 - "reserved / not used" 
  // 252 - "not reliable" 
  // 251 - "not in range" 

  uint8_t RghtDstncTLnMrkFrmVehiclesMiddle;   //      Bits=08.  [ 0     , 5      ]  Unit:'m'     Factor= 0.02  

  // The road curvature parameter is based on lane marks as measured by the FLI.  It is the mean value of the road curvature of the lane marks on the left and right side of the lane. In case one of the lane mark is not recognized anymore, the value is ...
  int32_t RoadCurvatureBasedOnLaneMarks;      //      Bits=16.  [ -250  , 251.992 ]  Unit:'1/km'  Offset= -250      Factor= 0.0078125

  // Angle between left lane mark and vehicle driving direction. The angle is positive while vehicle is moving towards the lane marks, and negative if not. Measured values outside the limits are represented by signal value 251.  Parameter specific values ...
  // 255 - "not available or not installed" 
  // 254 - "error" 
  // 253 - "reserved / not used" 
  // 252 - "not reliable" 
  // 251 - "not in range" 

  int16_t LaneDepartureAngleLeft;             //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // Angle between right lane mark and vehicle driving direction. The angle is positive while vehicle is moving towards the lane marks, and negative if not. Measured values outside the limits are represented by signal value 251.  Parameter specific ...
  // 255 - "not available or not installed" 
  // 254 - "error" 
  // 253 - "reserved / not used" 
  // 252 - "not reliable" 
  // 251 - "not in range" 

  int16_t LaneDepartureAngleRight;            //      Bits=08.  [ -12.5 , 12.5   ]  Unit:'deg'   Offset= -12.5     Factor= 0.1   

  // The quality of the nearest lane mark on the left side of the vehicle.  000 = no lane marks detected  001 = low reliablity of detected lane marks  010 = good reliablity of detected lane marks  011 = perfect recognition of lane marks  100 - 101 = ...
  // 7 - "not available or not installed" 
  // 6 - "error" 
  // 3 - "perfect recognition of lane marks" 
  // 2 - "good reliablity of detected lane marks" 
  // 1 - "low reliablity of detected lane marks" 
  // 0 - "no lane marks detected" 

  uint8_t LaneMarkQualityOnTheLeftSide;       //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The quality of the nearest lane mark on the right side of the vehicle.  000 = no lane marks detected  001 = low reliablity of detected lane marks  010 = good reliablity of detected lane marks  011 = perfect recognition of lane marks  100 - 101 = ...
  // 7 - "not available or not installed" 
  // 6 - "error" 
  // 3 - "perfect recognition of lane marks" 
  // 2 - "good reliablity of detected lane marks" 
  // 1 - "low reliablity of detected lane marks" 
  // 0 - "no lane marks detected" 

  uint8_t LaneMarkQualityOnTheRightSide;      //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} FLI3_t;

// def @OII CAN Message (419179262)
#define OII_IDE (1U)
#define OII_DLC (8U)
#define OII_CANID (0x18FC2AFEU)
#define OII_CYC (10000U)
// -- Operator Inducement Information  Contains parameters related to operator inducement.
typedef struct
{

  // This is the first torque derate that will be applied to the engine operation due to operator inducement.  The torque derate indicated in this parameter will be applied when the value in Operator Inducement Time to Torque Derate Level 1 (SPN 7426) ...
  uint8_t OprtrIndcementTorqueDerateLevel1;   //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // This parameter provides the time until Operator Inducement Torque Derate Level 1 (SPN 7425) is activated.  When operator inducement is not active (SPN 5826 is 000), this parameter will be set to 0xFB00.  If this parameter decrements to 0, it will ...
  uint16_t OprtrIndcmntTmTTrqueDerateLevel1;  //      Bits=16.  [ 0     , 64255  ]  Unit:'min'  

  // The next torque derate that will be applied to the engine operation due to operator inducement after the torque derate specified in Operator Inducement Torque Derate Level 1 (SPN 7425) becomes active.  This parameter is a percentage of how much the ...
  uint8_t OprtrIndcementTorqueDerateLevel2;   //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // This parameter provides the time until Operator Inducement Torque Derate Level 2 (SPN 7427) is activated.  When operator inducement is not active (SPN 5826 is 000), this parameter will be set to 0xFB00.  If this parameter decrements to 0, it will ...
  uint16_t OprtrIndcmntTmTTrqueDerateLevel2;  //      Bits=16.  [ 0     , 64255  ]  Unit:'min'  

  // Indicates the time until the inducement strategy enforces the final level of engine emissions operator inducement. The final level of inducement can include derating the engine, shutting down the engine, or restricting the engine to low idle.  See ...
  uint16_t TimeToFinalIndAction;              //      Bits=16.  [ 0     , 64255  ]  Unit:'min'  
  uint32_t framecnt;
} OII_t;

// def @CCVS4 CAN Message (419179518)
#define CCVS4_IDE (1U)
#define CCVS4_DLC (8U)
#define CCVS4_CANID (0x18FC2BFEU)
#define CCVS4_CYC (1000U)
// -- Cruise Control / Vehicle Speed 4  Cruise Control / Vehicle Speed 4
// signal: @AppliedVehicleSpeedLimit
#define AppliedVehicleSpeedLimit_CovFactor 0.00390625
#define AppliedVehicleSpeedLimit_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @CruiseCtrlAdjustedMaxSpeed
#define CruiseCtrlAdjustedMaxSpeed_CovFactor 0.00390625
#define CruiseCtrlAdjustedMaxSpeed_CovS(x) ((uint16_t)((x / 0.00390625)))
typedef struct
{

  // The vehicle speed limit in effect.    See SPN 2595 for alternate resolution.    Note:  If a maximum vehicle speed limit is not selected, then the first byte of this parameter will be equal to 0xFB.
  uint16_t AppliedVehicleSpeedLimit;     //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/h'  Factor= 0.00390625

  // Present maximum vehicle velocity at which cruise can be set. This parameter is expected to change during run-time due to functionality that could influence the behavior of the cruise control algorithm. This functionality may include, but is not ...
  uint16_t CruiseCtrlAdjustedMaxSpeed;   //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/h'  Factor= 0.00390625
  uint32_t framecnt;
} CCVS4_t;

// def @BCLC CAN Message (419179774)
#define BCLC_IDE (1U)
#define BCLC_DLC (8U)
#define BCLC_CANID (0x18FC2CFEU)
#define BCLC_CYC (1000U)
// -- Brake Caliper Lining Clearance  Refers to disc brake caliper lining clearance condition.
typedef struct
{

  // Brake caliper lining clearance for left brake on tractor axle 1.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrctrBrkClprLnngClranceAxle1Left;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for right brake on tractor axle 1.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrctrBrkClprLnngClrnceAxle1Right;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for left brake on tractor axle 2.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrctrBrkClprLnngClranceAxle2Left;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for right brake on tractor axle 2.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrctrBrkClprLnngClrnceAxle2Right;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for left brake on tractor axle 3.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrctrBrkClprLnngClranceAxle3Left;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for right brake on tractor axle 3.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrctrBrkClprLnngClrnceAxle3Right;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for left brake on tractor axle 4.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrctrBrkClprLnngClranceAxle4Left;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for right brake on tractor axle 4.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrctrBrkClprLnngClrnceAxle4Right;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for left brake on tractor axle 5.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrctrBrkClprLnngClranceAxle5Left;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for right brake on tractor axle 5.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrctrBrkClprLnngClrnceAxle5Right;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for left brake on trailer axle 1.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrlrBrkClprLnngClaranceAxle1Left;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for right brake on trailer axle 1.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrlrBrkClprLnngClranceAxle1Right;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for left brake on trailer axle 2.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrlrBrkClprLnngClaranceAxle2Left;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for right brake on trailer axle 2.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrlrBrkClprLnngClranceAxle2Right;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for left brake on trailer axle 3.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrlrBrkClprLnngClaranceAxle3Left;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for right brake on trailer axle 3.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrlrBrkClprLnngClranceAxle3Right;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for left brake on trailer axle 4.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrlrBrkClprLnngClaranceAxle4Left;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for right brake on trailer axle 4.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrlrBrkClprLnngClranceAxle4Right;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for left brake on trailer axle 5.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrlrBrkClprLnngClaranceAxle5Left;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Brake caliper lining clearance for right brake on trailer axle 5.    00 - Caliper lining clearance is adequate  01 - Caliper lining clearance is low  10 - Error  11 - Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Error" 
  // 1 - "Caliper lining clearance is low" 
  // 0 - "Caliper lining clearance is adequate" 

  uint8_t TrlrBrkClprLnngClranceAxle5Right;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} BCLC_t;

// def @AF5 CAN Message (419180030)
#define AF5_IDE (1U)
#define AF5_DLC (8U)
#define AF5_CANID (0x18FC2DFEU)
#define AF5_CYC (500U)
// -- Alternate Fuel 5  Information on alternate fuel.
// signal: @LNGTank1VaporPress
#define LNGTank1VaporPress_CovFactor 0.1
#define LNGTank1VaporPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @LNGTank2VaporPress
#define LNGTank2VaporPress_CovFactor 0.1
#define LNGTank2VaporPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngFl2InjectorMeteringRail1Temp2
#define EngFl2InjectorMeteringRail1Temp2_CovFactor 1
#define EngFl2InjectorMeteringRail1Temp2_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Gage pressure of the vapor in the first tank in a multi-tank system (or unique tank if single-tank system).
  uint16_t LNGTank1VaporPress;                //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Gage pressure of the vapor in the second tank in a multi-tank system.
  uint16_t LNGTank2VaporPress;                //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The second temperature of fuel 2 measured by first rail temperature sensor in the primary, or first, metering rail as delivered from the supply pump to the injector metering intake.
  int16_t EngFl2InjectorMeteringRail1Temp2;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} AF5_t;

// def @ETCC3 CAN Message (419180286)
#define ETCC3_IDE (1U)
#define ETCC3_DLC (8U)
#define ETCC3_CANID (0x18FC2EFEU)
#define ETCC3_CYC (500U)
// -- Engine Turbocharger Control 3  Contains command signals to Turbocharger Compressor Blowoff, Wastegate, Cylinder Head Bypass  and Throttle Valve actuators.
typedef struct
{

  // Command to disable power to motor in the actuator to prevent unnecessary load on the component.    00 - Do Not Disable  01 - Disable  10 - Reserved  11 - Don't Care/Take No Action
  // 3 - "Don't Care/Take No Action" 
  // 2 - "Reserved" 
  // 1 - "Disable" 
  // 0 - "Do Not Disable" 

  uint8_t EngTrbCmprssrBlwffActtr1MtrCrrnt;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to disable power to motor in the actuator to prevent unnecessary load on the component.    00 - Do Not Disable  01 - Disable  10 - Reserved  11 - Don't Care/Take No Action
  // 3 - "Don't Care/Take No Action" 
  // 2 - "Reserved" 
  // 1 - "Disable" 
  // 0 - "Do Not Disable" 

  uint8_t EngTrbWstgtActtr1MtrCrrntDisable;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to disable power to motor in the actuator to prevent unnecessary load on the component.    00 - Do Not Disable  01 - Disable  10 - Reserved  11 - Don't Care/Take No Action
  // 3 - "Don't Care/Take No Action" 
  // 2 - "Reserved" 
  // 1 - "Disable" 
  // 0 - "Do Not Disable" 

  uint8_t EngCylHdBypssActtr1MtrCrrntDsble;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to disable power to motor in the actuator to prevent unnecessary load on the component.    00 - Do Not Disable  01 - Disable  10 - Reserved  11 - Don't Care/Take No Action
  // 3 - "Don't Care/Take No Action" 
  // 2 - "Reserved" 
  // 1 - "Disable" 
  // 0 - "Do Not Disable" 

  uint8_t EngThrttlVlv1MotorCurrentDisable;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to disable power to motor in bypass actuator 1 to prevent unnecessary load on the component.    00 - Do Not Disable  01 - Disable  10 - Reserved  11 - Don't Care/Take No Action
  // 3 - "Don't Care/Take No Action" 
  // 2 - "Reserved" 
  // 1 - "Disable" 
  // 0 - "Do Not Disable" 

  uint8_t CompressorBypassAct1MotorCurDis;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to disable power to motor in bypass actuator 2 to prevent unnecessary load on the component.    00 - Do Not Disable  01 - Disable  10 - Reserved  11 - Don't Care/Take No Action
  // 3 - "Don't Care/Take No Action" 
  // 2 - "Reserved" 
  // 1 - "Disable" 
  // 0 - "Do Not Disable" 

  uint8_t CompressorBypassAct2MotorCurDis;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to disable power to motor in wastegate actuator 2 to prevent unnecessary load on the component.    00 - Do Not Disable  01 - Disable  10 - Reserved  11 - Don't Care/Take No Action
  // 3 - "Don't Care/Take No Action" 
  // 2 - "Reserved" 
  // 1 - "Disable" 
  // 0 - "Do Not Disable" 

  uint8_t WastegateAct2MotorCurDis;           //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} ETCC3_t;

// def @ASI CAN Message (419181054)
#define ASI_IDE (1U)
#define ASI_DLC (8U)
#define ASI_CANID (0x18FC31FEU)
#define ASI_CYC (1000U)
// -- Aftertreatment System Information  The state of the aftertreatment system.
// signal: @AAT
#define AAT_CovFactor 0.03125
#define AAT_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @DEFTankVolume
#define DEFTankVolume_CovFactor 0.4
#define DEFTankVolume_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DEFTankTemp
#define DEFTankTemp_CovFactor 1
#define DEFTankTemp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Indicates whether Aftertreatment Thermal Management process is active.  Aftertreatment Thermal Management indicates that the exhaust temperatures have been controlled for the normal functioning of the aftertreatment system - This is not just limited ...
  // 3 - "Not available" 
  // 2 - "Reserved for SAE assignment" 
  // 1 - "Active" 
  // 0 - "Not active" 

  uint8_t ThermalManagementStatus;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The state of aftertreatment active regeneration inhibition due to low exhaust pressure.  Aftertreatment Regeneration is a process of increasing the temperature at the exhaust and thereby removing the deposits on aftertreatment components such as DPF ...
  // 3 - "Not Available" 
  // 2 - "Reserved for SAE assignment" 
  // 1 - "Inhibited" 
  // 0 - "Not Inhibited" 

  uint8_t ActiveRegenInhibitedDueToLowEP;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the aftertreatment desires engine speed control in order to increase the engine speed. This is meant to notify the operator that the aftertreatment is requesting an increase in engine speed for thermal purposes.  The operator is ...
  // 3 - "Not Available" 
  // 2 - "Urgent Aftertreatment Engine Speed Control Desired" 
  // 1 - "Aftertreatment Engine Speed Control Desired" 
  // 0 - "No Request" 

  uint8_t EngSpdIncreaseReq;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the aftertreatment desires engine load to be applied. This is meant to notify the operator that the aftertreatment is requesting engine load for thermal purposes.  The operator is expected to add load to the engine to satisfy this ...
  // 3 - "Not Available" 
  // 2 - "Urgent Aftertreatment Engine Load Desired" 
  // 1 - "Aftertreatment Engine Load Desired" 
  // 0 - "No Request" 

  uint8_t EngLoadReq;                       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Temperature of ambient air near the aftertreatment components such as DEF tank and DEF lines.
  int32_t AAT;                              //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // The status of the circuit breaker that is used to heat the diesel exhaust fluid.    00 off  01 on  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t DEFHtrCircuitBreaker;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The derived diesel exhaust fluid tank volume in applications with multiple level sensors in a single tank. The SPN data will be derived from all level sensors in the tank.  Note: This SPN can be derived from any of the aftertreatment tank level ...
  uint8_t DEFTankVolume;                    //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The derived diesel exhaust fluid tank temperature in applications with multiple temperature sensors in a single tank. The SPN data will be derived from all temperature sensors in the tank.  Note: This SPN can be derived from any of the ...
  int16_t DEFTankTemp;                      //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} ASI_t;

// def @AT2P1I CAN Message (419182078)
#define AT2P1I_IDE (1U)
#define AT2P1I_DLC (8U)
#define AT2P1I_CANID (0x18FC35FEU)
#define AT2P1I_CYC (500U)
// -- Aftertreatment 2 Diesel Exhaust Fluid Pump 1 Information  Contains information on diesel exhaust fluid pumps for aftertreatment system 2.
// signal: @Htr
#define Htr_CovFactor 0.4
#define Htr_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TwoMotorSpd
#define TwoMotorSpd_CovFactor 0.5
#define TwoMotorSpd_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // Percentage of heating applied to the aftertreatment 2 diesel exhaust fluid pump heater.  A value of 0% means no heating applied, a value of 100% means full heating applied. The diesel exhaust fluid pump heater warms the diesel exhaust fluid in the ...
  uint8_t Htr;                           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Rotational speed of the motor driving the second pump for the diesel exhaust fluid used in aftertreatment system 2 (exhaust bank 2).
  uint16_t TwoMotorSpd;                  //      Bits=16.  [ 0     , 32127.5 ]  Unit:'rpm'   Factor= 0.5   
  uint32_t framecnt;
} AT2P1I_t;

// def @EEBT3 CAN Message (419183614)
#define EEBT3_IDE (1U)
#define EEBT3_DLC (8U)
#define EEBT3_CANID (0x18FC3BFEU)
#define EEBT3_CYC (1000U)
// -- Engine End Bearing Temperature 3  Used to transmit temperature values at end bearings for connecting rods in the engine cylinder
// signal: @EngEndBearing17Temp
#define EngEndBearing17Temp_CovFactor 1
#define EngEndBearing17Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing18Temp
#define EngEndBearing18Temp_CovFactor 1
#define EngEndBearing18Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing19Temp
#define EngEndBearing19Temp_CovFactor 1
#define EngEndBearing19Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing20Temp
#define EngEndBearing20Temp_CovFactor 1
#define EngEndBearing20Temp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Temperature of end bearing of the connecting rod for cylinder 17 on the engine
  int16_t EngEndBearing17Temp;           //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 18 on the engine
  int16_t EngEndBearing18Temp;           //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 19 on the engine
  int16_t EngEndBearing19Temp;           //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 20 on the engine
  int16_t EngEndBearing20Temp;           //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} EEBT3_t;

// def @EEBT2 CAN Message (419183870)
#define EEBT2_IDE (1U)
#define EEBT2_DLC (8U)
#define EEBT2_CANID (0x18FC3CFEU)
#define EEBT2_CYC (1000U)
// -- Engine End Bearing Temperature 2  Used to transmit temperature values at end bearings for connecting rods in the engine cylinder
// signal: @EngEndBearing9Temp
#define EngEndBearing9Temp_CovFactor 1
#define EngEndBearing9Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing10Temp
#define EngEndBearing10Temp_CovFactor 1
#define EngEndBearing10Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing11Temp
#define EngEndBearing11Temp_CovFactor 1
#define EngEndBearing11Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing12Temp
#define EngEndBearing12Temp_CovFactor 1
#define EngEndBearing12Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing13Temp
#define EngEndBearing13Temp_CovFactor 1
#define EngEndBearing13Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing14Temp
#define EngEndBearing14Temp_CovFactor 1
#define EngEndBearing14Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing15Temp
#define EngEndBearing15Temp_CovFactor 1
#define EngEndBearing15Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing16Temp
#define EngEndBearing16Temp_CovFactor 1
#define EngEndBearing16Temp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Temperature of end bearing of the connecting rod for cylinder 9 on the engine
  int16_t EngEndBearing9Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 10 on the engine
  int16_t EngEndBearing10Temp;           //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 11 on the engine
  int16_t EngEndBearing11Temp;           //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 12 on the engine
  int16_t EngEndBearing12Temp;           //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 13 on the engine
  int16_t EngEndBearing13Temp;           //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 14 on the engine
  int16_t EngEndBearing14Temp;           //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 15 on the engine
  int16_t EngEndBearing15Temp;           //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 16 on the engine
  int16_t EngEndBearing16Temp;           //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} EEBT2_t;

// def @EEBT1 CAN Message (419184126)
#define EEBT1_IDE (1U)
#define EEBT1_DLC (8U)
#define EEBT1_CANID (0x18FC3DFEU)
#define EEBT1_CYC (1000U)
// -- Engine End Bearing Temperature 1  Used to transmit temperature values at end bearings for connecting rods in the engine cylinder
// signal: @EngEndBearing1Temp
#define EngEndBearing1Temp_CovFactor 1
#define EngEndBearing1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing2Temp
#define EngEndBearing2Temp_CovFactor 1
#define EngEndBearing2Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing3Temp
#define EngEndBearing3Temp_CovFactor 1
#define EngEndBearing3Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing4Temp
#define EngEndBearing4Temp_CovFactor 1
#define EngEndBearing4Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing5Temp
#define EngEndBearing5Temp_CovFactor 1
#define EngEndBearing5Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing6Temp
#define EngEndBearing6Temp_CovFactor 1
#define EngEndBearing6Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing7Temp
#define EngEndBearing7Temp_CovFactor 1
#define EngEndBearing7Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngEndBearing8Temp
#define EngEndBearing8Temp_CovFactor 1
#define EngEndBearing8Temp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Temperature of end bearing of the connecting rod for cylinder 1 on the engine
  int16_t EngEndBearing1Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 2 on the engine
  int16_t EngEndBearing2Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 3 on the engine
  int16_t EngEndBearing3Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 4 on the engine
  int16_t EngEndBearing4Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 5 on the engine
  int16_t EngEndBearing5Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 6 on the engine
  int16_t EngEndBearing6Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 7 on the engine
  int16_t EngEndBearing7Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of end bearing of the connecting rod for cylinder 8 on the engine
  int16_t EngEndBearing8Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} EEBT1_t;

// def @HEDPI CAN Message (419184382)
#define HEDPI_IDE (1U)
#define HEDPI_DLC (8U)
#define HEDPI_CANID (0x18FC3EFEU)
#define HEDPI_CYC (1000U)
// -- Heat Exchanger Debris Purge Information  Contains information about purging debris from the heat exchanger.
typedef struct
{

  // Indicates whether the system is currently purging debris from the heat exchanger.    00    Inactive  01    Active  10    SAE reserved  11    Not available
  // 3 - "Not available" 
  // 2 - "SAE reserved" 
  // 1 - "Active" 
  // 0 - "Inactive" 

  uint8_t HeatExchangerDebrisPurgeStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status signal which indicates that purging the debris from the heat exchanger is imminent.    00     Not approaching  01     Approaching  10     SAE reserved  11     Not available
  // 3 - "Not available" 
  // 2 - "SAE reserved" 
  // 1 - "Approaching" 
  // 0 - "Not approaching" 

  uint8_t HtExchngerDebrisPurgeApproaching;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} HEDPI_t;

// def @ETCC2 CAN Message (419184638)
#define ETCC2_IDE (1U)
#define ETCC2_DLC (8U)
#define ETCC2_CANID (0x18FC3FFEU)
// -- Engine Turbocharger Control 2  This PGN contains information on turbocharger commands.
// signal: @EngStagedTurboSolenoidStatus
#define EngStagedTurboSolenoidStatus_CovFactor 0.4
#define EngStagedTurboSolenoidStatus_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Current state of the staged turbocharger solenoid, normalized to percent, 0% represents not actuated and 100% represents fully actuated.
  uint8_t EngStagedTurboSolenoidStatus;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} ETCC2_t;

// def @EHF2PC CAN Message (419184894)
#define EHF2PC_IDE (1U)
#define EHF2PC_DLC (8U)
#define EHF2PC_CANID (0x18FC40FEU)
#define EHF2PC_CYC (500U)
// -- Engine Hydraulic Fuel 2 Pump Status  Hydraulically driven engine fuel 2 pump messages.
// signal: @EngFuel2PumpHydFlowCtrlValve
#define EngFuel2PumpHydFlowCtrlValve_CovFactor 0.4
#define EngFuel2PumpHydFlowCtrlValve_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngFuel2PumpHydSwashPlateAngle
#define EngFuel2PumpHydSwashPlateAngle_CovFactor 0.4
#define EngFuel2PumpHydSwashPlateAngle_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngFuel2PumpHydDirectionalValve
#define EngFuel2PumpHydDirectionalValve_CovFactor 0.4
#define EngFuel2PumpHydDirectionalValve_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngFuel2PumpHydPress
#define EngFuel2PumpHydPress_CovFactor 2
#define EngFuel2PumpHydPress_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // Position of hydraulic pump flow control valve opening; 0% = fully closed, 100% = fully open.
  uint8_t EngFuel2PumpHydFlowCtrlValve;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Position of hydraulic swash plate angle within hydraulic pump.  0% represents the lowest possible flow, 100% represents the maximum flow.
  uint8_t EngFuel2PumpHydSwashPlateAngle;    //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Position of hydraulic directional valve to control application of hydraulic oil flow.  0% is no flow to the appliance; 100% is full flow to the appliance.
  uint8_t EngFuel2PumpHydDirectionalValve;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Hydraulic pressure in the lines of the hydraulically driven fuel 2 pump.
  uint16_t EngFuel2PumpHydPress;             //      Bits=16.  [ 0     , 128510 ]  Unit:'kPa'   Factor= 2     
  uint32_t framecnt;
} EHF2PC_t;

// def @AF4 CAN Message (419185150)
#define AF4_IDE (1U)
#define AF4_DLC (8U)
#define AF4_CANID (0x18FC41FEU)
#define AF4_CYC (500U)
// -- Alternate Fuel 4
// signal: @EngFl2InjectorMeteringRail1Press
#define EngFl2InjectorMeteringRail1Press_CovFactor 2
#define EngFl2InjectorMeteringRail1Press_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngFl2InjectorMeteringRail2Press
#define EngFl2InjectorMeteringRail2Press_CovFactor 2
#define EngFl2InjectorMeteringRail2Press_CovS(x) ((uint16_t)((x / 2)))
// signal: @EngFel2InjectorMeteringRail1Temp
#define EngFel2InjectorMeteringRail1Temp_CovFactor 1
#define EngFel2InjectorMeteringRail1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngFel2InjectorMeteringRail2Temp
#define EngFel2InjectorMeteringRail2Temp_CovFactor 1
#define EngFel2InjectorMeteringRail2Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngFl2InjctorMeteringRail1Press2
#define EngFl2InjctorMeteringRail1Press2_CovFactor 2
#define EngFl2InjctorMeteringRail1Press2_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // The pressure of fuel 2 measured by first rail pressure sensor in the primary, or first, metering rail as delivered from the supply pump to the injector metering intake.
  uint16_t EngFl2InjectorMeteringRail1Press;  //      Bits=16.  [ 0     , 128510 ]  Unit:'kPa'   Factor= 2     

  // The pressure of fuel 2 measured by first rail pressure sensor in the metering rail 2 as delivered from the supply pump to the injector metering intake.
  uint16_t EngFl2InjectorMeteringRail2Press;  //      Bits=16.  [ 0     , 128510 ]  Unit:'kPa'   Factor= 2     

  // The temperature of fuel 2 measured by first rail temperature sensor in the primary, or first, metering rail as delivered from the supply pump to the injector metering intake.
  int16_t EngFel2InjectorMeteringRail1Temp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The temperature of fuel 2 measured by first rail temperature sensor in the metering rail 2 as delivered from the supply pump to the injector metering intake.
  int16_t EngFel2InjectorMeteringRail2Temp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The second pressure of fuel 2 measured by first rail pressure sensor in the primary, or first, metering rail as delivered from the supply pump to the injector metering intake.
  uint16_t EngFl2InjctorMeteringRail1Press2;  //      Bits=16.  [ 0     , 128510 ]  Unit:'kPa'   Factor= 2     
  uint32_t framecnt;
} AF4_t;

// def @TIRE2 CAN Message (419185406)
#define TIRE2_IDE (1U)
#define TIRE2_DLC (8U)
#define TIRE2_CANID (0x18FC42FEU)
#define TIRE2_CYC (10000U)
// -- Tire Condition Message 2  Tire Condition Message 2  NOTE ? Multiple instances of this message will be required to transmit data for all tire locations.  When reporting data for multiple tire locations, each successive message, which provides data ...
typedef struct
{

  // Identifies which tire is associated with the parametric data in PGN 64578. Refer to SPN 929 for further details and examples. The low order 4 bits represent a position number, counting left to right when facing in the direction of normal vehicle ...
  uint8_t TireLocation;                  //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Pressure at which air is contained in cavity formed by tire and rim. See SPN 241 for alternate tire pressure with a lower range and coarser resolution.
  uint16_t TirePress;                    //      Bits=16.  [ 0     , 64255  ]  Unit:'kPa'  

  // The required tire pressure at which air is contained in cavity formed by tire and rim.    This pressure of the tire is compensated to meet the specific physical environmental conditions (temperature) of the vehicle.
  uint16_t RequiredTirePress;            //      Bits=16.  [ 0     , 64255  ]  Unit:'kPa'  
  uint32_t framecnt;
} TIRE2_t;

// def @TCSI CAN Message (419185662)
#define TCSI_IDE (1U)
#define TCSI_DLC (8U)
#define TCSI_CANID (0x18FC43FEU)
// -- Tire Configuration Status Information  Details the attributes for the tire monitoring configuration status of the tires.  NOTE ? Multiple instances of this message will be required to transmit data for all tire locations.  When reporting data for ...
// signal: @UnderPressPercentageThreshold
#define UnderPressPercentageThreshold_CovFactor 0.5
#define UnderPressPercentageThreshold_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @ExtrmUndrPrssPercentageThreshold
#define ExtrmUndrPrssPercentageThreshold_CovFactor 0.5
#define ExtrmUndrPrssPercentageThreshold_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @OverPressPercentageThreshold
#define OverPressPercentageThreshold_CovFactor 0.5
#define OverPressPercentageThreshold_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @OverTemp
#define OverTemp_CovFactor 1
#define OverTemp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // The location of monitored tire on the vehicle.  The high order 4 bits indicate the vehicle axle position of the tire sensor, counting front to back on the vehicle, with the value 0 representing the front axle on the vehicle.  The low order 4 bits ...
  uint8_t TireLocation;                       //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The cold inflation pressure of the tire. Cold inflation pressure is the default/reference inflation pressure suggested by the manufacturer for a specific tire.
  uint16_t ColdInflationPress;                //      Bits=16.  [ 0     , 64255  ]  Unit:'kPa'  

  // The percentage deviation from the set cold inflation pressure, for the under tire pressure alert.
  uint8_t UnderPressPercentageThreshold;      //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Factor= 0.5   

  // The percentage deviation from the set cold inflation pressure, for the extreme under tire pressure alert.
  uint8_t ExtrmUndrPrssPercentageThreshold;   //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Factor= 0.5   

  // The percentage deviation from the set cold inflation pressure, for the over tire pressure alert.
  uint8_t OverPressPercentageThreshold;       //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Factor= 0.5   

  // The temperature above which the over temperature alert will trigger.
  int16_t OverTemp;                           //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} TCSI_t;

// def @TWSSI CAN Message (419186174)
#define TWSSI_IDE (1U)
#define TWSSI_DLC (8U)
#define TWSSI_CANID (0x18FC45FEU)
// -- Tire Wireless Signal Strength Indicator  The tire wireless signal strength indicator for each monitored tire. If there are multiple tire sensors with multiple antennas to report, the message format will be ...
// signal: @TrWrelessSignalStrengthIndicator
#define TrWrelessSignalStrengthIndicator_CovFactor 0.5
#define TrWrelessSignalStrengthIndicator_CovS(x) ((int16_t)((x / 0.5) + 250))
typedef struct
{

  // Total count of antennas used in the specified vehicle system.
  uint8_t TotalNumberOfAntennasUsed;          //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Number of the antenna used to communicate signal strength of a group of sensors.  If a single antenna is used this will default to 0x01. When multiple antennas are used, the first antenna will have a value of 1, 2nd antenna will be 2, 3rd antenna ...
  uint8_t AntennaNumber;                      //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Total number of tire sensors monitored for the specified antenna in this instance of the parameter group.
  uint8_t TtalNumberOfTireSensorsMonitored;   //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // The number of the monitored tire sensor that corresponds with the tire wireless signal strength indicator. The location of the numbered tire is reported in the tire sensor location SPN (SPN 6965). The value 0xFF indicates this SPN is not used.
  uint8_t TireSensorNumber;                   //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // The location of monitored tire on the vehicle.  The high order 4 bits indicate the vehicle axle position of the tire sensor, counting front to back on the vehicle, with the value 0 representing the front axle on the vehicle.  The low order 4 bits ...
  uint8_t TireLocation;                       //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The wireless signal strength between the tire pressure sensor and the specified antenna, for the tire specified in the tire sensor number or tire sensor Location.
  int16_t TrWrelessSignalStrengthIndicator;   //      Bits=08.  [ -125  , 0      ]  Unit:'dBm'   Offset= -125      Factor= 0.5   
  uint32_t framecnt;
} TWSSI_t;

// def @TSIS CAN Message (419186430)
#define TSIS_IDE (1U)
#define TSIS_DLC (8U)
#define TSIS_CANID (0x18FC46FEU)
// -- Tire Sensor Identification Status  The tire sensor identification number for each monitored tire.  Since there are multiple tire sensors to report, the message format will be a,b,c,d,b,c,d,b,c,d,b,c,d,...etc. where  a = Number of Tire Sensors  b = ...
typedef struct
{

  // Total count of monitored tire sensor identification numbers represented in this instance of the parameter group.
  uint8_t NumberOfTireSensors;              //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // The number of the monitored tire that corresponds with the Tire Sensor Identification Number (SPN 6966).  In order to specify the monitored tire by location, use the Tire Location SPN 6965.    The value 0xFF indicates this SPN is not used.
  uint8_t TireSensorTireNumber;             //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // The location of monitored tire that corresponds with the Tire Sensor Identification Number (SPN 6966). In order to specify the monitored tire by tire number, use the Tire Number SPN 6964.  The high order 4 bits indicate the vehicle axle position of ...
  uint8_t TireSensorLocation;               //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // The identification number of the tire specified in the tire number (SPN 6964) or tire location (SPN 6965).
  uint8_t TireSensorIdentificationNumber;   //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} TSIS_t;

// def @MTI CAN Message (419186686)
#define MTI_IDE (1U)
#define MTI_DLC (8U)
#define MTI_CANID (0x18FC47FEU)
// -- Monitored Tire Information  Used by the tire monitoring system to report the number of tires, number of axles and number of tires on each axle it is monitoring on a specific vehicle. The axle number increments from front to rear of the vehicle per ...
typedef struct
{

  // The number of axles monitored for tire parameters. A maximum of 12 axles is defined.
  uint8_t NumberOfAxlesOnTheVehicle;     //      Bits=04.  [ 0     , 13     ]  Unit:''     

  // The total number of tires monitored for tire parameters. A maximum of 250 tires is defined.
  uint8_t NumberOfTiresOnTheVehicle;     //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // The number of tires on Axle 1 which are monitored by the tire monitor controller. The axle number increments from front to rear of the vehicle when facing the vehicle in the forward vehicle travel orientation. If the axle is not monitored by the ...
  uint8_t Axle1MonitoredTireCount;       //      Bits=04.  [ 0     , 13     ]  Unit:''     

  // The number of tires on Axle 2 which are monitored by the tire monitor controller. The axle number increments from front to rear of the vehicle when facing the vehicle in the forward vehicle travel orientation. If the axle is not monitored by the ...
  uint8_t Axle2MonitoredTireCount;       //      Bits=04.  [ 0     , 13     ]  Unit:''     

  // The number of tires on Axle 3 which are monitored by the tire monitor controller. The axle number increments from front to rear of the vehicle when facing the vehicle in the forward vehicle travel orientation. If the axle is not monitored by the ...
  uint8_t Axle3MonitoredTireCount;       //      Bits=04.  [ 0     , 13     ]  Unit:''     

  // The number of tires on Axle 4 which are monitored by the tire monitor controller. The axle number increments from front to rear of the vehicle when facing the vehicle in the forward vehicle travel orientation. If the axle is not monitored by the ...
  uint8_t Axle4MonitoredTireCount;       //      Bits=04.  [ 0     , 13     ]  Unit:''     

  // The number of tires on Axle 5 which are monitored by the tire monitor controller. The axle number increments from front to rear of the vehicle when facing the vehicle in the forward vehicle travel orientation. If the axle is not monitored by the ...
  uint8_t Axle5MonitoredTireCount;       //      Bits=04.  [ 0     , 13     ]  Unit:''     

  // The number of tires on Axle 6 which are monitored by the tire monitor controller. The axle number increments from front to rear of the vehicle when facing the vehicle in the forward vehicle travel orientation. If the axle is not monitored by the ...
  uint8_t Axle6MonitoredTireCount;       //      Bits=04.  [ 0     , 13     ]  Unit:''     

  // The number of tires on Axle 7 which are monitored by the tire monitor controller. The axle number increments from front to rear of the vehicle when facing the vehicle in the forward vehicle travel orientation. If the axle is not monitored by the ...
  uint8_t Axle7MonitoredTireCount;       //      Bits=04.  [ 0     , 13     ]  Unit:''     

  // The number of tires on Axle 8 which are monitored by the tire monitor controller. The axle number increments from front to rear of the vehicle when facing the vehicle in the forward vehicle travel orientation. If the axle is not monitored by the ...
  uint8_t Axle8MonitoredTireCount;       //      Bits=04.  [ 0     , 13     ]  Unit:''     

  // The number of tires on Axle 9 which are monitored by the tire monitor controller. The axle number increments from front to rear of the vehicle when facing the vehicle in the forward vehicle travel orientation. If the axle is not monitored by the ...
  uint8_t Axle9MonitoredTireCount;       //      Bits=04.  [ 0     , 13     ]  Unit:''     

  // The number of tires on Axle 10 which are monitored by the tire monitor controller. The axle number increments from front to rear of the vehicle when facing the vehicle in the forward vehicle travel orientation. If the axle is not monitored by the ...
  uint8_t Axle10MonitoredTireCount;      //      Bits=04.  [ 0     , 13     ]  Unit:''     

  // The number of tires on Axle 11 which are monitored by the tire monitor controller. The axle number increments from front to rear of the vehicle when facing the vehicle in the forward vehicle travel orientation. If the axle is not monitored by the ...
  uint8_t Axle11MonitoredTireCount;      //      Bits=04.  [ 0     , 13     ]  Unit:''     

  // The number of tires on Axle 12 which are monitored by the tire monitor controller. The axle number increments from front to rear of the vehicle when facing the vehicle in the forward vehicle travel orientation. If the axle is not monitored by the ...
  uint8_t Axle12MonitoredTireCount;      //      Bits=04.  [ 0     , 13     ]  Unit:''     
  uint32_t framecnt;
} MTI_t;

// def @AT2HI2 CAN Message (419186942)
#define AT2HI2_IDE (1U)
#define AT2HI2_DLC (8U)
#define AT2HI2_CANID (0x18FC48FEU)
// -- Aftertreatment 2 Historical Information 2  Contains information about the history of the aftertreatment 2 system
// signal: @SCRSysAvgDistBetweenCleanEvents
#define SCRSysAvgDistBetweenCleanEvents_CovFactor 0.125
#define SCRSysAvgDistBetweenCleanEvents_CovS(x) ((uint32_t)((x / 0.125)))
typedef struct
{

  // Total amount of time that a cleaning event has been active in the SCR system in bank 2 over the lifetime of the device.
  uint32_t SCRSysTotalSysCleanTime;          //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Total number of cleaning events that have occurred on the SCR system in bank 2 over the lifetime of the device.
  uint32_t SCRSysTotalSysCleanEvents;        //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     

  // Total number of cleaning inhibit requests on the SCR system in bank 2 by the operator over the lifetime of the device.
  uint32_t SCRSysTotalSysCleanInhReq;        //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     

  // Total number of manual cleaning requests on the SCR system in bank 2 by the operator over the lifetime of the device.
  uint32_t SCRSysTotalSysCleanManReq;        //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     

  // Indicates the average time since last reset between cleaning events for the SCR system in bank 2.    If the manufacturer allows this parameter to be reset, this time is the average since last reset.
  uint32_t SCRSysAvgTimeBetweenCleanEvents;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Indicates the average distance since last reset between cleaning events for the SCR system in bank 2.    If the manufacturer allows this parameter to be reset, this distance is the average since last reset.
  uint32_t SCRSysAvgDistBetweenCleanEvents;  //      Bits=32.  [ 0     , 526385151.875 ]  Unit:'km'    Factor= 0.125 
  uint32_t framecnt;
} AT2HI2_t;

// def @AT1HI2 CAN Message (419187198)
#define AT1HI2_IDE (1U)
#define AT1HI2_DLC (8U)
#define AT1HI2_CANID (0x18FC49FEU)
// -- Aftertreatment 1 Historical Information 2  Contains information about the history of the aftertreatment 1 system
// signal: @SCRSysAvgDistBetweenCleanEvents
#define SCRSysAvgDistBetweenCleanEvents_CovFactor 0.125
#define SCRSysAvgDistBetweenCleanEvents_CovS(x) ((uint32_t)((x / 0.125)))
typedef struct
{

  // Total amount of time that a cleaning event has been active in the SCR system in bank 1 over the lifetime of the device.
  uint32_t SCRSysTotalCleanTime;             //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Total number of cleaning events that have occurred on the SCR system in bank 1 over the lifetime of the device.
  uint32_t SCRSysTotalSysCleanEvents;        //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     

  // Total number of cleaning inhibit requests on the SCR system in bank 1 by the operator over the lifetime of the device.
  uint32_t SCRSysTotalSysCleanInhReq;        //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     

  // Total number of manual cleaning requests on the SCR system in bank 1 by the operator over the lifetime of the device.
  uint32_t SCRSysTotalSysCleanManReq;        //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     

  // Indicates the average time since last reset between cleaning events for the SCR system in bank 1.     If the manufacturer allows this parameter to be reset, this time is the average since last reset.
  uint32_t SCRSysAvgTimeBetweenCleanEvents;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Indicates the average distance since last reset between cleaning events for the SCR system in bank 1.    If the manufacturer allows this parameter to be reset, this distance is the average since last reset.
  uint32_t SCRSysAvgDistBetweenCleanEvents;  //      Bits=32.  [ 0     , 526385151.875 ]  Unit:'km'    Factor= 0.125 
  uint32_t framecnt;
} AT1HI2_t;

// def @SCRSC CAN Message (419187454)
#define SCRSC_IDE (1U)
#define SCRSC_DLC (8U)
#define SCRSC_CANID (0x18FC4AFEU)
#define SCRSC_CYC (1000U)
// -- SCR System Cleaning  Contains information about cleaning the SCR system in the aftertreatment system.  If there are aftertreatment systems on two banks, this PGN represents the composite information from both banks.  NOTE: This message will be ...
typedef struct
{

  // Command to control the SCR system cleaning lamp.  000 Off  001 On - solid  010 reserved for SAE assignment  011 reserved for SAE assignment  100 On - fast blink (1 HZ)  101 reserved for SAE assignment  110 reserved for SAE assignment  111 not ...
  // 7 - "not available" 
  // 6 - "reserved for SAE assignment" 
  // 5 - "reserved for SAE assignment" 
  // 4 - "On, fast blink" 
  // 3 - "reserved for SAE assignment" 
  // 2 - "reserved for SAE assignment " 
  // 1 - "On, solid" 
  // 0 - "Off" 

  uint8_t SCRSystemCleaningLampCmd;           //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Indicates the state of SCR system cleaning.  This is an aggregate of bank 1 and bank 2.  It is a system status and not individual bank status.  00 not active  01 active  10 SCR system cleaning is needed - automatically initiated SCR system cleaning ...
  // 3 - "not available" 
  // 2 - "SCR system cleaning is needed" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t SCRSystemCleaningStatus;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning inhibition.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the SCR system cleaning event not being initiated or being exited prior to ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystemCleaningInhibitedStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning inhibition due to the SCR system cleaning Inhibit Switch.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the SCR system cleaning event ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystmClnngInhbtdDTInhbtSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning event inhibition due to the clutch being disengaged.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the SCR system cleaning event not ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystmClnngInhbtdDTCltchDsnggd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning inhibition due to the service brake being active.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the SCR system cleaning event not being ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystmClnngInhbtdDTSrvcBrkActv;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning inhibition due to the PTO being active.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the SCR system cleaning event not being initiated ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystmClnngInhbtdDeToPTOActive;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning inhibition due to the accelerator pedal being off idle.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the SCR system cleaning event not ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystmClnngInhbtdDTAcclPdlOffI;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning inhibition due to the accelerator pedal being out of neutral.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the SCR system cleaning ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystmClnngInhbtdDTOtOfNeutral;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning inhibition due to the vehicle speed being above an allowed limit.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the SCR system cleaning ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystmClnngInhbtdDTVhclSpdAbvA;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning inhibition due to the parking brake being not set.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the SCR system cleaning event not ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystmClnngInhbtdDTPrkngBrkNtS;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning inhibition due to the exhaust temperature being too low.  This implies that the SCR system is too cold for cleaning.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystmClnngInhbtdDTLwExhstTemp;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning inhibition due to a system fault being active.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the SCR system cleaning event not being ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystmClnngInhbtdDTSystmFltAct;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning inhibition due to a system timeout.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the SCR system cleaning event not being initiated or ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystmClnngInhbtdDTSystmTmeout;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning inhibition due to a temporary system lockout.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the SCR system cleaning event not being ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystmClnngInhbtdDTTmprrySystm;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning inhibition due to a permanent system lockout.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the SCR system cleaning event not being ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystmClnngInhbtdDTPrmnntSystm;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning inhibition due to the engine not being warmed up.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the SCR system cleaning event not being ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystmClnngInhbtdDTEngNtWrmdUp;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of SCR system cleaning inhibition due to the vehicle speed being less than the allowed vehicle speed.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the SCR ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t SCRSystmClnngInhbtdDTVhclSpdBlwA;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the configuration of SCR system cleaning automatic initiation.    00 not enabled  01 enabled  10 reserved for SAE assignment  11 not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "enabled" 
  // 0 - "not enabled" 

  uint8_t SCRSystmClnngAtmtcIntationConfig;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the forced execution status of SCR system cleaning.  000 Not Active  001 Active - Forced by Switch (See SPN 3696)  010 Active - Forced by Service Tool  011 Reserved for SAE Assignment  100 Reserved for SAE Assignment  101 Reserved for SAE ...
  // 7 - "not available" 
  // 6 - "Reserved for SAE Assignment" 
  // 5 - "Reserved for SAE Assignment" 
  // 4 - "Reserved for SAE Assignment" 
  // 3 - "Reserved for SAE Assignment" 
  // 2 - "Active, Forced by Service Tool " 
  // 1 - "Active, Forced by Switch" 
  // 0 - "Not Active" 

  uint8_t SCRSystemCleaningForcedStatus;      //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} SCRSC_t;

// def @EEC17 CAN Message (419187710)
#define EEC17_IDE (1U)
#define EEC17_DLC (8U)
#define EEC17_CANID (0x18FC4BFEU)
// -- Electronic Engine Controller 17  This message includes some parameters that are used to support PEMS.  Manufacturers that support this PGN shall support both PEMS Engine Fuel Mass Flow Rate (SPN 6893) and Vehicle Fuel Rate (SPN 6894) even if the ...
// signal: @PEMSEngFuelMassFlowRate
#define PEMSEngFuelMassFlowRate_CovFactor 0.02
#define PEMSEngFuelMassFlowRate_CovS(x) ((uint16_t)((x / 0.02)))
// signal: @VehicleFuelRate
#define VehicleFuelRate_CovFactor 0.02
#define VehicleFuelRate_CovS(x) ((uint16_t)((x / 0.02)))
// signal: @EngExhaustFlowRate
#define EngExhaustFlowRate_CovFactor 0.2
#define EngExhaustFlowRate_CovS(x) ((uint16_t)((x / 0.2)))
// signal: @CylFuelRate
#define CylFuelRate_CovFactor 0.03125
#define CylFuelRate_CovS(x) ((uint16_t)((x / 0.03125)))
typedef struct
{

  // PEMS Engine Fuel Mass Flow Rate shall indicate the amount of fuel consumed by the engine per unit of time (does not include fuel injected directly into the aftertreatment system, but does include fuel injected into the engine cylinders for the ...
  uint16_t PEMSEngFuelMassFlowRate;      //      Bits=16.  [ 0     , 1285.1 ]  Unit:'g/s'   Factor= 0.02  

  // Vehicle Fuel Rate shall indicate the amount of fuel consumed by the engine and fuel injected directly into the aftertreatment system per unit of time, in grams per second.  Vehicle Fuel Rate shall be calculated as the sum of the fuel consumed over ...
  uint16_t VehicleFuelRate;              //      Bits=16.  [ 0     , 1285.1 ]  Unit:'g/s'   Factor= 0.02  

  // Engine Exhaust Flow Rate shall indicate the measured/calculated exhaust gas mass flow upstream of the aftertreatment system.  Engine Exhaust Flow Rate shall be calculated as the average exhaust flow rate over the last 1000 milliseconds prior to the ...
  uint16_t EngExhaustFlowRate;           //      Bits=16.  [ 0     , 12851  ]  Unit:'kg/h'  Factor= 0.2   

  // Cylinder fuel rate shall indicate the amount of fuel injected into the cylinder for combustion during the most recent intake stroke of the engine.    NOTE: Cylinder fuel rate shall indicate zero mg/stroke when the engine is not running.
  uint16_t CylFuelRate;                  //      Bits=16.  [ 0     , 2007.96875 ]  Unit:'mg/stroke' Factor= 0.03125
  uint32_t framecnt;
} EEC17_t;

// def @SCROII3 CAN Message (419187966)
#define SCROII3_IDE (1U)
#define SCROII3_DLC (8U)
#define SCROII3_CANID (0x18FC4CFEU)
// -- SCR Operator Inducement Information 3  Contains parameters related to overriding the operator inducement.
typedef struct
{

  // Indicates if an operator inducement derate is allowed to be overridden.    Note: Inducement override is only allowed under certain conditions approved by EPA/ARB.    00 Override not allowed  01 Override allowed  10 SAE Reserved  11 Not available
  // 3 - "Not available" 
  // 2 - "SAE Reserved" 
  // 1 - "Override allowed" 
  // 0 - "Override not allowed" 

  uint8_t SCROprtrInducementOverrideEnable;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate the time remaining during an operator inducement override event.  See also SPN 7344 for an alternate SLOT.  When an operator inducement is not active, this parameter indicates the maximum time that an operator ...
  uint16_t SCROprtrIndcmntOvrrdTmeRemaining;  //      Bits=16.  [ 0     , 64255  ]  Unit:'s'    

  // During an operator inducement event, the operator may be able to override the inducement multiple times. This parameter indicates the remaining number of times that the currently active inducement can be overridden during an operator inducement ...
  uint8_t NmbrOfSCROprtrIndcmntOvrrdEvntsR;   //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Indicates total number of operator inducement override events activated throughout the lifetime of engine operation.  This number will remain at the maximum value once it is reached.  See EU Commission directive 2012/46/EU. Appendix 1 Section 5.5 ...
  uint16_t TtlNmbrOfSCROprtrIndcmntOvrrdEvn;  //      Bits=16.  [ 0     , 64255  ]  Unit:''     
  uint32_t framecnt;
} SCROII3_t;

// def @A2SCRDSI3 CAN Message (419188222)
#define A2SCRDSI3_IDE (1U)
#define A2SCRDSI3_DLC (8U)
#define A2SCRDSI3_CANID (0x18FC4DFEU)
#define A2SCRDSI3_CYC (500U)
// -- Aftertreatment 2 SCR Dosing System Information 3  This message contains additional  SCR dosing system information for aftertreatment system 2 (or bank 2).
// signal: @DEFDosingPress
#define DEFDosingPress_CovFactor 4
#define DEFDosingPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @DEFDoser2AbsPress
#define DEFDoser2AbsPress_CovFactor 8
#define DEFDoser2AbsPress_CovS(x) ((uint8_t)((x / 8)))
// signal: @DEFDosing2Temp
#define DEFDosing2Temp_CovFactor 1
#define DEFDosing2Temp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // The SCR dosing diesel exhaust fluid gage pressure (measured closest to dosing valve) for aftertreatment system 2 (exhaust bank 2). This is the gage equivalent to SPN 4387.
  uint8_t DEFDosingPress;                //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // The SCR doser 2 diesel exhaust fluid absolute pressure (measured closest to dosing valve) for aftertreatment system 2 (exhaust bank 2).
  uint8_t DEFDoser2AbsPress;             //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // The temperature (measured closest to dosing valve) of the second DEF dosing unit for aftertreatment system 2 (exhaust bank 2).
  int16_t DEFDosing2Temp;                //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} A2SCRDSI3_t;

// def @A1SCRDSI3 CAN Message (419188478)
#define A1SCRDSI3_IDE (1U)
#define A1SCRDSI3_DLC (8U)
#define A1SCRDSI3_CANID (0x18FC4EFEU)
#define A1SCRDSI3_CYC (500U)
// -- Aftertreatment 1 SCR Dosing System Information 3  This message contains additional  SCR dosing system information for aftertreatment system 1 (or bank 1).
// signal: @DEFDosingPress
#define DEFDosingPress_CovFactor 4
#define DEFDosingPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @DEFDoser2AbsPress
#define DEFDoser2AbsPress_CovFactor 8
#define DEFDoser2AbsPress_CovS(x) ((uint8_t)((x / 8)))
// signal: @DEFDoser2Temp
#define DEFDoser2Temp_CovFactor 1
#define DEFDoser2Temp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // The SCR dosing diesel exhaust fluid gage pressure (measured closest to dosing valve) for aftertreatment system 1 (exhaust bank 1). This is the gage equivalent to SPN 4334.
  uint8_t DEFDosingPress;                //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // The SCR doser 2 diesel exhaust fluid absolute pressure (measured closest to dosing valve) for aftertreatment system 1 (exhaust bank 1).
  uint8_t DEFDoser2AbsPress;             //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // The temperature (measured closest to dosing valve) of the second DEF dosing unit for aftertreatment system 1 (exhaust bank 1).
  int16_t DEFDoser2Temp;                 //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} A1SCRDSI3_t;

// def @PWSI CAN Message (419188734)
#define PWSI_IDE (1U)
#define PWSI_DLC (8U)
#define PWSI_CANID (0x18FC4FFEU)
#define PWSI_CYC (1000U)
// -- Payload Weight Sensor Information  Staus Information on each Payload sensor in a payload measurement system
typedef struct
{

  // Status of the payload system sensor 1 measurement.    00 = Sensor fully functional  01 = Sensor degraded  10 = Error (Sensor failed)  11 = Not available
  // 2 - "Error" 
  // 1 - "Sensor degraded" 
  // 0 - "Sensor fully functional" 
  // 3 - "Not available" 

  uint8_t PayloadWeightSensor1Status;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the payload system sensor 2 measurement.    00 = Sensor fully functional  01 = Sensor degraded  10 = Error (Sensor failed)  11 = Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Sensor degraded" 
  // 0 - "Sensor fully functional" 

  uint8_t PayloadWeightSensor2Status;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the payload system sensor 3 measurement.    00 = Sensor fully functional  01 = Sensor degraded  10 = Error (Sensor failed)  11 = Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Sensor degraded" 
  // 0 - "Sensor fully functional" 

  uint8_t PayloadWeightSensor3Status;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the payload system sensor 4 measurement.    00 = Sensor fully functional  01 = Sensor degraded  10 = Error (Sensor failed)  11 = Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Sensor degraded" 
  // 0 - "Sensor fully functional" 

  uint8_t PayloadWeightSensor4Status;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the payload system sensor 5 measurement.    00 = Sensor fully functional  01 = Sensor degraded  10 = Error (Sensor failed)  11 = Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Sensor degraded" 
  // 0 - "Sensor fully functional" 

  uint8_t PayloadWeightSensor5Status;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the payload system sensor 6 measurement.    00 = Sensor fully functional  01 = Sensor degraded  10 = Error (Sensor failed)  11 = Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Sensor degraded" 
  // 0 - "Sensor fully functional" 

  uint8_t PayloadWeightSensor6Status;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the payload system sensor 7 measurement.    00 = Sensor fully functional  01 = Sensor degraded  10 = Error (Sensor failed)  11 = Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Sensor degraded" 
  // 0 - "Sensor fully functional" 

  uint8_t PayloadWeightSensor7Status;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the payload system sensor 8 measurement.    00 = Sensor fully functional  01 = Sensor degraded  10 = Error (Sensor failed)  11 = Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Sensor degraded" 
  // 0 - "Sensor fully functional" 

  uint8_t PayloadWeightSensor8Status;    //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} PWSI_t;

// def @PLSS CAN Message (419188990)
#define PLSS_IDE (1U)
#define PLSS_DLC (8U)
#define PLSS_CANID (0x18FC50FEU)
#define PLSS_CYC (1000U)
// -- Payload System Status  Status Information for Payload Measurement Systems.     This provides the last haul cycle payload information to the operator.
// signal: @DeliveredPayloadWeight
#define DeliveredPayloadWeight_CovFactor 2
#define DeliveredPayloadWeight_CovS(x) ((uint32_t)((x / 2)))
// signal: @DeliveredPayloadConfidence
#define DeliveredPayloadConfidence_CovFactor 0.5
#define DeliveredPayloadConfidence_CovS(x) ((uint8_t)((x / 0.5)))
typedef struct
{

  // A counter incremented by 1 with each instance of a new haul cycle, defined as a dump to dump cycle. The counter shall increment from 0 to 64255, rolling over to 0 on the next increment after 64255.
  uint16_t HaulCycleCount;               //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // The current operating state of the haul cycle.  0000 - Not in Haul Mode  0001 - Loading -- Payload is being added to the machine  0010 - Approaching Loaded -- Machine is near its maximum capacity  0011 - Loaded -- Loading operation has been ...
  // 15 - "Not Available" 
  // 14 - "Error" 
  // 5 - "Unloaded" 
  // 4 - "Unloading" 
  // 3 - "Loaded" 
  // 2 - "Approaching Loaded" 
  // 1 - "Loading" 
  // 0 - "Not in Haul Mode" 

  uint8_t HaulModeStatus;                //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The current state of the payload delivery transaction.  When a transaction is in progress, a receiving node may monitor Haul Cycle Count (SPN 6847) and Delivered Payload Weight (SPN 6849) in order to track the progress of a transaction, where the ...
  // 15 - "Not Available" 
  // 14 - "Error" 
  // 2 - "Transaction Complete" 
  // 1 - "Transaction In Progress" 
  // 0 - "Transaction Not In Progress" 

  uint8_t DeliveryTransactionStatus;     //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The delivered payload mass during the last haul cycle. This is the amount of material moved and delivered by a machine is a key work cycle parameter.  Delivered payload weight is defined as the last loaded weight less the carry back weight (material ...
  uint32_t DeliveredPayloadWeight;       //      Bits=24.  [ 0     , 32899070 ]  Unit:'kg'    Factor= 2     

  // The level of confidence of the delivered payload weight measurement. Higher confidence values indicate greater probability the delivered payload weight is the actual weight and providing feedback on the potential for improving system accuracy.
  uint8_t DeliveredPayloadConfidence;    //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.5   
  uint32_t framecnt;
} PLSS_t;

// def @EGLI CAN Message (419189758)
#define EGLI_IDE (1U)
#define EGLI_DLC (8U)
#define EGLI_CANID (0x18FC53FEU)
#define EGLI_CYC (500U)
// -- Engine Gaseous Leakage Information  Used to transmit the gaseous fuel leakage information determined by the engine monitoring system.
// signal: @GasFuelLeakage1Concentration
#define GasFuelLeakage1Concentration_CovFactor 0.5
#define GasFuelLeakage1Concentration_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @GasFuelLeakage2Concentration
#define GasFuelLeakage2Concentration_CovFactor 0.5
#define GasFuelLeakage2Concentration_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @GasFuelLeakage3Concentration
#define GasFuelLeakage3Concentration_CovFactor 0.5
#define GasFuelLeakage3Concentration_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @GasLeakageDetection1Press
#define GasLeakageDetection1Press_CovFactor 4
#define GasLeakageDetection1Press_CovS(x) ((uint8_t)((x / 4)))
// signal: @GasLeakageDetection2Press
#define GasLeakageDetection2Press_CovFactor 4
#define GasLeakageDetection2Press_CovS(x) ((uint8_t)((x / 4)))
// signal: @GasLeakageDetection3Press
#define GasLeakageDetection3Press_CovFactor 4
#define GasLeakageDetection3Press_CovS(x) ((uint8_t)((x / 4)))
typedef struct
{

  // Percentage of detected gaseous fuel leak compared to the lower explosion limit (LEL). 100% means the measured value is on the lower explosion limit. 0% means no detected gaseous fuel in measurement point. The measurement point is typically in the ...
  uint8_t GasFuelLeakage1Concentration;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.5   

  // Percentage of detected gaseous fuel leak compared to the lower explosion limit (LEL). 100% means the measured value is on the lower explosion limit. 0% means no detected gaseous fuel in measurement point. The second  measurement point is either ...
  uint8_t GasFuelLeakage2Concentration;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.5   

  // Percentage of detected gaseous fuel leak compared to the lower explosion limit (LEL). 100% means the measured value is on the lower explosion limit. 0% means no detected gaseous fuel in measurement point. The third measurement point is in a separate ...
  uint8_t GasFuelLeakage3Concentration;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.5   

  // Pressure measured in gas leakage detection point 1. Measured media is of the gas, meaning it could be air, inert gas, fuel air mixture or charge air mixture, depending on the failure mode detected. The measurement point is typically in the engine ...
  uint8_t GasLeakageDetection1Press;      //      Bits=08.  [ 0     , 100    ]  Unit:'kPa'   Factor= 4     

  // Pressure measured in gas leakage detection point 2. Measured media is of the gas, meaning it could be air, inert gas, fuel air mixture or charge air mixture, depending on the failure mode detected. The second measurement point is either another ...
  uint8_t GasLeakageDetection2Press;      //      Bits=08.  [ 0     , 100    ]  Unit:'kPa'   Factor= 4     

  // Pressure measured in gas leakage detection point 3. Measured media is of the gas, meaning it could be air, inert gas, fuel air mixture or charge air mixture, depending on the failure mode detected. The third measurement point is in a separate leak ...
  uint8_t GasLeakageDetection3Press;      //      Bits=08.  [ 0     , 100    ]  Unit:'kPa'   Factor= 4     
  uint32_t framecnt;
} EGLI_t;

// def @SCROII2 CAN Message (419190526)
#define SCROII2_IDE (1U)
#define SCROII2_DLC (8U)
#define SCROII2_CANID (0x18FC56FEU)
#define SCROII2_CYC (10000U)
// -- SCR Operator Inducement Information 2  Contains parameters that are related to SCR inducement.
typedef struct
{

  // Indicates the amount of time an error condition has been active due to a malfunction in the Aftertreatment SCR system.  The source of the malfunction condition could be a component failure, detection of tampering, or other reason that prevents ...
  uint32_t AFTSCRMalfunctionTime;           //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Indicates the time that operator inducement has been active. This will accumulate over the life of the product and will never be reset.
  uint32_t SCROperatorInducementTotalTime;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    
  uint32_t framecnt;
} SCROII2_t;

// def @SCROII1 CAN Message (419190782)
#define SCROII1_IDE (1U)
#define SCROII1_DLC (8U)
#define SCROII1_CANID (0x18FC57FEU)
#define SCROII1_CYC (10000U)
// -- SCR Operator Inducement Information 1  Contains timers that indicate how long specific causes for inducement have been active.
typedef struct
{

  // Indicates the time the Diesel Exhaust Fluid Tank 1 Level is indicated as empty. This will accumulate over the life of the product and will never be reset.
  uint32_t DieselExhaustFluidTank1EmptyTime;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Indicates the amount of time an error has been active due to detection of low Diesel Exhaust Fluid Quality. This will accumulate over the life of the product and will never be reset.
  uint32_t DslExhstFldQalityMalfunctionTime;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    
  uint32_t framecnt;
} SCROII1_t;

// def @TCI7 CAN Message (419191038)
#define TCI7_IDE (1U)
#define TCI7_DLC (8U)
#define TCI7_CANID (0x18FC58FEU)
#define TCI7_CYC (1000U)
// -- Turbocharger Information 7  Turbocharger Information
// signal: @EngTurbo2LubeOilPress
#define EngTurbo2LubeOilPress_CovFactor 4
#define EngTurbo2LubeOilPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @EngTurbo3LubeOilPress
#define EngTurbo3LubeOilPress_CovFactor 4
#define EngTurbo3LubeOilPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @EngTurbo4LubeOilPress
#define EngTurbo4LubeOilPress_CovFactor 4
#define EngTurbo4LubeOilPress_CovS(x) ((uint8_t)((x / 4)))
typedef struct
{

  // Gage pressure of oil in the lubrication system for the 2nd turbocharger.
  uint8_t EngTurbo2LubeOilPress;         //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Gage pressure of oil in the lubrication system for the 3rd turbocharger.
  uint8_t EngTurbo3LubeOilPress;         //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Gage pressure of oil in the lubrication system for the 4th turbocharger.
  uint8_t EngTurbo4LubeOilPress;         //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     
  uint32_t framecnt;
} TCI7_t;

// def @AFT1PSI2 CAN Message (419204094)
#define AFT1PSI2_IDE (1U)
#define AFT1PSI2_DLC (8U)
#define AFT1PSI2_CANID (0x18FC8BFEU)
#define AFT1PSI2_CYC (200U)
// -- Aftertreatment 1 Particulate Sensor Information 2  This message contains information for the particulate sensor in bank 1 of a 2 bank system or the particulate sensor in a single bank system.    This sensor is downstream of the DPF.
// signal: @Temp
#define Temp_CovFactor 0.03125
#define Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @MaxRes
#define MaxRes_CovFactor 250
#define MaxRes_CovS(x) ((uint16_t)((x / 250)))
// signal: @HtrRes
#define HtrRes_CovFactor 0.1
#define HtrRes_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Detection status of the particulate sensor  0000 - Initialization for particulate matter detection  0001 - Waiting for dew point (see SPN 6784)  0010 - Particulate matter detection  0011 - Heater is active for particulate sensor regeneration  0100 - ...
  // 15 - "Not supported" 
  // 8 - "Halt particulate matter detection" 
  // 7 - "Sensor regeneration did not complete due to system parameters out of range" 
  // 6 - "Relearning particulate sensor resistance after particulate sensor regeneration" 
  // 5 - "Heater diagnostics test" 
  // 4 - "Cooling after particulate sensor regeneration" 
  // 3 - "Heater is active for particulate sensor regeneration" 
  // 2 - "Particulate matter detection" 
  // 1 - "Waiting for dew point" 
  // 0 - "Initialization for particulate matter detection" 

  uint8_t DetectionStatus;               //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // State signal which indicates when the Aftertreatment 1 particulate sensor has power applied to it. Note that this is referring to the power supplied to the sensor, not the power supplied to the controller connected to the sensor.  00 - Off  01 - On   ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t PwrSupply;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This is the number of times that the particulate sensor regeneration process has been attempted but failed to complete this power cycle.
  uint8_t RegenFailedCount;              //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Temperature of the particulate sensor.
  int32_t Temp;                          //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // This is the maximum resistance that the particulate sensor can measure.
  uint16_t MaxRes;                       //      Bits=16.  [ 0     , 62500  ]  Unit:'kohm'  Factor= 250   

  // The resistance of the particulate sensor heater.
  uint16_t HtrRes;                       //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   
  uint32_t framecnt;
} AFT1PSI2_t;

// def @AFT1PSI1 CAN Message (419204350)
#define AFT1PSI1_IDE (1U)
#define AFT1PSI1_DLC (8U)
#define AFT1PSI1_CANID (0x18FC8CFEU)
#define AFT1PSI1_CYC (200U)
// -- Aftertreatment 1 Particulate Sensor Information 1  This message contains information for the particulate sensor in bank 1 of a 2 bank system or the particulate sensor in a single bank system.    This sensor is downstream of the DPF.
// signal: @ActiveAccumulationTime
#define ActiveAccumulationTime_CovFactor 6
#define ActiveAccumulationTime_CovS(x) ((uint16_t)((x / 6)))
// signal: @TimeBetweenRegens
#define TimeBetweenRegens_CovFactor 6
#define TimeBetweenRegens_CovS(x) ((uint16_t)((x / 6)))
typedef struct
{

  // This sensor is located in the exhaust stream somewhere after the DPF, but not necessarily immediately after the DPF.  It provides a resistance value that can be used to determine particulate matter in the exhaust stream. The value in this parameter ...
  uint16_t Res;                          //      Bits=16.  [ 0     , 62500  ]  Unit:'kohm' 

  // The states of the particulate sensor heater.  The heater will change states from 11 to 10, 10 to 01, and 01 to 00 in a typical heating event.  00 - Heater is in closed loop control  01 - Heater is being held at a specified level  10 - Heater is in ...
  // 3 - "Heater is off" 
  // 2 - "Heater is in ramp up mode" 
  // 1 - "Heater is being held at a specified level" 
  // 0 - "Heater is in closed loop control" 

  uint8_t HtrSt;                         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The status of the most recent attempt of this power cycle to activate the particulate sensor regeneration process. This will not be updated until the regeneration is no longer active, as indicated by SPN 6774.  Power cycle refers to the time that ...
  // 3 - "not available" 
  // 2 - "Regeneration failed" 
  // 1 - "Regeneration was successful" 
  // 0 - "Regeneration attempt has not occurred during this operational cycle" 

  uint8_t RegenStatus;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates if the particulate sensor regeneration is currently active, and if so, the reason for the regeneration.  0000 - Regeneration is not active  0001 - Regneration is active and has been initiated by request via SPN 6783  0010 - Regeneration is ...
  // 15 - "Not Available" 
  // 3 - "Regeneration is active and has been initiated due to time based conditions" 
  // 2 - "Regeneration is active and has been initiated because of sensor conditions" 
  // 1 - "Regneration is active and has been initiated by request via SPN 6783" 
  // 0 - "Regeneration is not active" 

  uint8_t RegenSt;                       //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // This is the amount of time since the last successful regeneration completed.  The sensor has been accumulating particulate matter since that time.
  uint16_t ActiveAccumulationTime;       //      Bits=16.  [ 0     , 385530 ]  Unit:'s'     Factor= 6     

  // This is the time between the last two successful regenerations of the particulate sensor for the current power cycle. This parameter reflects the time when the engine was running, not a duration based on a real time clock. If two successful ...
  uint16_t TimeBetweenRegens;            //      Bits=16.  [ 0     , 385530 ]  Unit:'s'     Factor= 6     
  uint32_t framecnt;
} AFT1PSI1_t;

// def @PII CAN Message (419204606)
#define PII_IDE (1U)
#define PII_DLC (8U)
#define PII_CANID (0x18FC8DFEU)
// -- Product Identification Information  Used by a Control Function to provide information in which product the Control Function is mounted.
typedef struct
{

  // The Product Identification Code as assigned by the manufacturer corresponds with the identification number on the type plate of a product. For vehicles this number may be the same as the VIN (Vehicle Identification Number) . For stand alone systems ...
  uint8_t ProductIdentificationCode;     //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The Product Identification Brand specifies the brand of a product.     The combination of the Product Identification Code and the Product Identification Brand shall make the product unique in the world.
  uint8_t ProductIdentificationBrand;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The Product Identification Model specifies a unique product within a Brand.    Examples of Models are:  For Electronic components: SG2600, BT, ICC 230.  For Balers: Big Baler 230AB, XC 130 CV.  For Sprayers: 238i, 1962i, Explorer D.  Etc.
  uint8_t ProductIdentificationModel;    //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} PII_t;

// def @CFF CAN Message (419204862)
#define CFF_IDE (1U)
#define CFF_DLC (8U)
#define CFF_CANID (0x18FC8EFEU)
// -- Control Function Functionalities  This message identifies all the functionalities, functionality generation and functionality options, supported by this control function.
typedef struct
{
  uint32_t framecnt;
} CFF_t;

// def @EEN CAN Message (419205630)
#define EEN_IDE (1U)
#define EEN_DLC (8U)
#define EEN_CANID (0x18FC91FEU)
// -- Engine Exhaust NOx  This PGN provides cumulative Exhaust NOx information for engines using multiple sensors.
// signal: @EngExhaustNOx
#define EngExhaustNOx_CovFactor 0.05
#define EngExhaustNOx_CovS(x) ((int32_t)((x / 0.05) + 4000))
// signal: @EngExhaustDesiredNOx
#define EngExhaustDesiredNOx_CovFactor 0.05
#define EngExhaustDesiredNOx_CovS(x) ((int32_t)((x / 0.05) + 4000))
typedef struct
{

  // Calculated NOx concentration for the total engine exhaust, prior to any aftertreatment of the exhaust.  This parameter is primarily intended for engines that have separate NOx sensors in separate exhaust manifolds, but the engine does not have an ...
  int32_t EngExhaustNOx;                 //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  

  // Desired NOx concentration in the engine exhaust, prior to any aftertreatment of the exhaust.
  int32_t EngExhaustDesiredNOx;          //      Bits=16.  [ -200  , 3012.75 ]  Unit:'ppm'   Offset= -200      Factor= 0.05  
  uint32_t framecnt;
} EEN_t;

// def @AFR CAN Message (419205886)
#define AFR_IDE (1U)
#define AFR_DLC (8U)
#define AFR_CANID (0x18FC92FEU)
// -- Air Fuel Ratio  This PGN provides Air Fuel Ratio Information
// signal: @EngMainChamberAirFuelRatio
#define EngMainChamberAirFuelRatio_CovFactor 0.001
#define EngMainChamberAirFuelRatio_CovS(x) ((uint16_t)((x / 0.001)))
// signal: @EngMinChamberDesiredAirFuelRatio
#define EngMinChamberDesiredAirFuelRatio_CovFactor 0.001
#define EngMinChamberDesiredAirFuelRatio_CovS(x) ((uint16_t)((x / 0.001)))
// signal: @EngPrechamberAirFuelRatio
#define EngPrechamberAirFuelRatio_CovFactor 0.001
#define EngPrechamberAirFuelRatio_CovS(x) ((uint16_t)((x / 0.001)))
// signal: @EngPrechamberDesiredAirFuelRatio
#define EngPrechamberDesiredAirFuelRatio_CovFactor 0.001
#define EngPrechamberDesiredAirFuelRatio_CovS(x) ((uint16_t)((x / 0.001)))
typedef struct
{

  // Actual air to fuel ratio of the charge entering the cylinder main chamber.
  uint16_t EngMainChamberAirFuelRatio;        //      Bits=16.  [ 0     , 64.255 ]  Unit:''      Factor= 0.001 

  // Desired air to fuel ratio of the charge entering the cylinder main chamber.
  uint16_t EngMinChamberDesiredAirFuelRatio;  //      Bits=16.  [ 0     , 64.255 ]  Unit:''      Factor= 0.001 

  // Actual air to fuel ratio of the charge entering the cylinder prechamber.
  uint16_t EngPrechamberAirFuelRatio;         //      Bits=16.  [ 0     , 64.255 ]  Unit:''      Factor= 0.001 

  // Desired air to fuel ratio of the charge entering the cylinder prechamber.
  uint16_t EngPrechamberDesiredAirFuelRatio;  //      Bits=16.  [ 0     , 64.255 ]  Unit:''      Factor= 0.001 
  uint32_t framecnt;
} AFR_t;

// def @GFP2 CAN Message (419206142)
#define GFP2_IDE (1U)
#define GFP2_DLC (8U)
#define GFP2_CANID (0x18FC93FEU)
// -- Gaseous Fuel Pressure 2  Information on Gas fuel pressure
// signal: @EngMainChamberFuelAbsPress
#define EngMainChamberFuelAbsPress_CovFactor 0.1
#define EngMainChamberFuelAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngMinChamberFuelDesiredAbsPress
#define EngMinChamberFuelDesiredAbsPress_CovFactor 0.1
#define EngMinChamberFuelDesiredAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngPrechamberFuelAbsPress
#define EngPrechamberFuelAbsPress_CovFactor 0.1
#define EngPrechamberFuelAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngPrechamberFuelDesiredAbsPress
#define EngPrechamberFuelDesiredAbsPress_CovFactor 0.1
#define EngPrechamberFuelDesiredAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Absolute pressure of the gaseous fuel for the main chamber of the cylinder. This parameter is intended for applications, which use a pre and main chamber fuel systems, which report the pressure of more than one type of fuel.
  uint16_t EngMainChamberFuelAbsPress;        //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Desired absolute pressure of the gaseous fuel for the main chamber of the cylinder. This parameter is intended for applications with pre and main chamber fuel systems, which report the pressure of more than one type of fuel.Engine
  uint16_t EngMinChamberFuelDesiredAbsPress;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Absolute pressure of the gaseous fuel for the separate cylinder pre-chamber rail. This parameter is intended for applications, which use a pre and main chamber fuel systems, which report the pressure of more than one type of fuel.
  uint16_t EngPrechamberFuelAbsPress;         //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Desired absolute pressure of the gaseous fuel in the separate cylinder pre-chamber rail. This parameter is intended for applications with pre and main chamber fuel systems, which report the pressure of more than one type of fuel.
  uint16_t EngPrechamberFuelDesiredAbsPress;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} GFP2_t;

// def @ASAI CAN Message (419206398)
#define ASAI_IDE (1U)
#define ASAI_DLC (8U)
#define ASAI_CANID (0x18FC94FEU)
#define ASAI_CYC (1000U)
// -- Aftertreatment System Abuse Information  Current status of aftertreatment system cooldown and purge routines.
typedef struct
{

  // Non-volatile record of the number of interrupted cooldown routines since the last clear event.  The counter shall be reset by PGN 56832 request.
  uint16_t DEFDoserCldnInterruptCount;      //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Non-volatile record of the number of interrupted purge routines since the last clear event.  The counter shall be reset by PGN 56832 request.
  uint16_t DEFDoserPurgeInterruptCount;     //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Indication of cooldown routine completion in the current power cycle.  \
  // 3 - "Not Supported" 
  // 2 - "Error" 
  // 1 - "Complete" 
  // 0 - "Not complete" 

  uint8_t DEFDoserCldnCompleteThisCycle;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indication of cooldown routine completion in the previous power cycle.  00 - Not complete  01 - Complete  10 - Error  11 - Not Supported  Note:  One purpose for tracking the status of the Diesel Exhaust Fluid doser purge on the previous cycle is ...
  // 3 - "Not Supported" 
  // 2 - "Error" 
  // 1 - "Complete" 
  // 0 - "Not complete" 

  uint8_t DEFDoserCldnCompleteLastCycle;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indication of purge routine completion in the current power cycle.  \
  // 3 - "Not Supported" 
  // 2 - "Error" 
  // 1 - "Complete" 
  // 0 - "Not complete" 

  uint8_t DEFDoserPurgeCompleteThisCycle;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indication of purge routine completion in the previous power cycle  00 - Not complete  01 - Complete  10 - Error  11 - Not Supported  Note:  One purpose for tracking the status of the Diesel Exhaust Fluid doser purge on the previous cycle is related ...
  // 3 - "Not Supported" 
  // 2 - "Error" 
  // 1 - "Complete" 
  // 0 - "Not complete" 

  uint8_t DEFDoserPurgeCompleteLastCycle;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indication of after-run routine completion in the current power cycle.  \
  // 3 - "Not Supported" 
  // 2 - "Error" 
  // 1 - "Complete" 
  // 0 - "Not complete" 

  uint8_t AfterrunCompleteThisCycle;        //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} ASAI_t;

// def @EI2 CAN Message (419206910)
#define EI2_IDE (1U)
#define EI2_DLC (8U)
#define EI2_CANID (0x18FC96FEU)
#define EI2_CYC (100U)
// -- Engine Information 2  Second PGN conveying engine information.
// signal: @EngExhaustPress1ExRange
#define EngExhaustPress1ExRange_CovFactor 0.125
#define EngExhaustPress1ExRange_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @EngPreFilterOilPress
#define EngPreFilterOilPress_CovFactor 0.1
#define EngPreFilterOilPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @CommonRailOilPress
#define CommonRailOilPress_CovFactor 4
#define CommonRailOilPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @CommonRailOilAbsPress
#define CommonRailOilAbsPress_CovFactor 4
#define CommonRailOilAbsPress_CovS(x) ((uint8_t)((x / 4)))
typedef struct
{

  // Gage pressure of the exhaust gasses as measured at the turbine intake of the turbocharger. This SPN to be used for inline engines or exhaust bank 1 of multiple bank engines.      See SPN 1209 for alternate resolution.
  uint16_t EngExhaustPress1ExRange;      //      Bits=16.  [ 0     , 8031.875 ]  Unit:'kPa'   Factor= 0.125 

  // Gage pressure of the engine oil before the oil reaches the oil filter. See SPN 1208 for alternate resolution.
  uint16_t EngPreFilterOilPress;         //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Gage pressure of oil in common rail's lubrication system as provided by oil pump.
  uint8_t CommonRailOilPress;            //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Absolute pressure of oil in common rail's lubrication system as provided by oil pump.
  uint8_t CommonRailOilAbsPress;         //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     
  uint32_t framecnt;
} EI2_t;

// def @ESC2 CAN Message (419207166)
#define ESC2_IDE (1U)
#define ESC2_DLC (8U)
#define ESC2_CANID (0x18FC97FEU)
#define ESC2_CYC (500U)
// -- Electronic Steering Control 2  Group containing parameters relevant to the electronic control of an all wheel steering system, allowing the selection and actuation of different steer modes
typedef struct
{

  // Switch used as an input to the electronic steering controller to determine the operator's requested steering mode  000 - 2 Wheel Steer Mode  001 - Circle Steer Mode  011 - Crab Steer Mode  100-101 - Reserved for future use  110 - Error  111 - Not ...
  // 7 - "Not Available" 
  // 6 - "Error" 
  // 3 - "Crab Steer Mode" 
  // 1 - "Circle Steer Mode" 
  // 0 - "2 Wheel Steer Mode" 

  uint8_t SteerModeSwitch;                //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The status of the front steering axle being centered. The axle is centered if the axle's centerline is parallel to the vehicle's X-axis, where the vehicle's X-axis is as defined in SAE J670  00 - Front Axle Centered  01 - Front Axle Not Centered  10 ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Front Axle Not Centered" 
  // 0 - "Front Axle Centered" 

  uint8_t FrontSteerAxleCenteredStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The status of the rear steering axle being centered. The axle is centered if the axle's centerline is parallel to the vehicle's X-axis, where the vehicle's X-axis is as defined in SAE J670  00 - Rear Axle Centered  01 - Rear Axle Not Centered  10 - ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Rear Axle Not Centered" 
  // 0 - "Rear Axle Centered" 

  uint8_t RearSteerAxleCenteredStatus;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The current state of the actuator that control the 2 wheel steering mode    00 - 2 Wheel Steer actuator inactive  01 - 2 Wheel Steer actuator active  10 - Error  11 - Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "2 Wheel Steer actuator active" 
  // 0 - "2 Wheel Steer actuator inactive" 

  uint8_t TwoWheelSteerActuatorState;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the current state of the actuator that control the 4 wheel steering mode    00 - 4 Wheel Steer actuator inactive  01 - 4 Wheel Steer actuator active  10 - Error  11 - Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "4 Wheel Steer actuator active" 
  // 0 - "4 Wheel Steer actuator inactive" 

  uint8_t VourWheelSteerActuatorState;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the current state of the actuator that control the circle steering mode    00 - Circle Steer Mode actuator inactive  01 - Circle Steer Mode actuator active  10 - Error  11 - Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Circle Steer Mode actuator active" 
  // 0 - "Circle Steer Mode actuator inactive" 

  uint8_t CircleSteerModeActuatorState;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the current state of the actuator that control the crab steering mode    00 - Crab Steer Mode actuator inactive  01 - Crab Steer Mode actuator active  10 - Error  11 - Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Crab Steer Mode actuator active" 
  // 0 - "Crab Steer Mode actuator inactive" 

  uint8_t CrabSteerModeActuatorState;     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} ESC2_t;

// def @AUI CAN Message (419207678)
#define AUI_IDE (1U)
#define AUI_DLC (8U)
#define AUI_CANID (0x18FC99FEU)
// -- Assembly Unit Identification  Used to transmit the identification of the assemblies fitted onto a component.  NOTE - The assembly unit identification field is variable in length. An ASCII ?*? is used as a delimiter to separate multiple ...
typedef struct
{

  // Number of Assembly Unit Identification designators represented in the Assembly Unit Identification parameter group.
  uint8_t NmbrOfAssmblyUntIdntfctionFields;   //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // A combination of alphanumeric characters representing the Identification number of an assembly unit installed on a component.  Multiple assembly unit IDs can be transmitted by appropriately setting Number of Assembly Unit Identification Fields (SPN ...
  uint8_t AssemblyUnitIdentification;         //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} AUI_t;

// def @JS3LS CAN Message (419207934)
#define JS3LS_IDE (1U)
#define JS3LS_DLC (8U)
#define JS3LS_CANID (0x18FC9AFEU)
// -- Joystick 3 Lamp Status  Feedback message to report the actual status of lamps on Joystick 3
typedef struct
{

  // Report the actual value of Joystick 3 Lamp 1    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp1Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 3 Lamp 2    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp2Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 3 Lamp 3    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp3Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 3 Lamp 4    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp4Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 3 Lamp 5    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp5Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 3 Lamp 6    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp6Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 3 Lamp 7    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp7Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 3 Lamp 8    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp8Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 3 Lamp 9    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp9Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 3 Lamp 10    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick3Lamp10Status;         //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} JS3LS_t;

// def @JS2LS CAN Message (419208190)
#define JS2LS_IDE (1U)
#define JS2LS_DLC (8U)
#define JS2LS_CANID (0x18FC9BFEU)
// -- Joystick 2 Lamp Status  Feedback message to report the actual status of lamps on Joystick 2
typedef struct
{

  // Report the actual value of Joystick 2 Lamp 1    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp1Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 2 Lamp 2    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp2Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 2 Lamp 3    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp3Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 2 Lamp 4    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp4Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 2 Lamp 5    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 1 - "On" 
  // 0 - "Off" 
  // 3 - "Not available" 
  // 2 - "Flashing" 

  uint8_t Joystick2Lamp5Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 2 Lamp 6    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp6Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 2 Lamp 7    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp7Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 2 Lamp 8    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp8Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 2 Lamp 9    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp9Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 2 Lamp 10    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick2Lamp10Status;         //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} JS2LS_t;

// def @JS1LS CAN Message (419208446)
#define JS1LS_IDE (1U)
#define JS1LS_DLC (8U)
#define JS1LS_CANID (0x18FC9CFEU)
// -- Joystick 1 Lamp Status  Feedback message to report the actual status of lamps on Joystick 1
typedef struct
{

  // Report the actual value of Joystick 1 Lamp 1    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp1Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 1 Lamp 2    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp2Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 1 Lamp 3    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp3Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 1 Lamp 4    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp4Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 1 Lamp 5    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp5Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 1 Lamp 6    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp6Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 1 Lamp 7    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp7Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 1 Lamp 8    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp8Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 1 Lamp 9    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp9Status;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Report the actual value of Joystick 1 Lamp 10    00 - Off  01 - On  10 - Flashing  11 - Not available
  // 3 - "Not available" 
  // 2 - "Flashing" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Joystick1Lamp10Status;         //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} JS1LS_t;

// def @DD2 CAN Message (419209214)
#define DD2_IDE (1U)
#define DD2_DLC (8U)
#define DD2_CANID (0x18FC9FFEU)
#define DD2_CYC (1000U)
// -- Dash Display 2  Dash Display for Status Information
// signal: @EngExRangeOilFilterDiffPress
#define EngExRangeOilFilterDiffPress_CovFactor 0.0078125
#define EngExRangeOilFilterDiffPress_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @Fuel2Tank1Level
#define Fuel2Tank1Level_CovFactor 0.4
#define Fuel2Tank1Level_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @Fuel2Tank2Level
#define Fuel2Tank2Level_CovFactor 0.4
#define Fuel2Tank2Level_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @Fuel2Tank3Level
#define Fuel2Tank3Level_CovFactor 0.4
#define Fuel2Tank3Level_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @Fuel2Tank4Level
#define Fuel2Tank4Level_CovFactor 0.4
#define Fuel2Tank4Level_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Change in engine oil differential pressure measured across the oil filter element. The differential pressure is the measured as the pressure at the filter intake with respect to the pressure at the filter outlet. This differential pressure ...
  int32_t EngExRangeOilFilterDiffPress;   //      Bits=16.  [ -250  , 251.99 ]  Unit:'kPa'   Offset= -250      Factor= 0.0078125

  // Fuel level in tank 1 containing the second fuel type.  .
  uint8_t Fuel2Tank1Level;                //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Fuel level in tank 2 containing the second fuel type.
  uint8_t Fuel2Tank2Level;                //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Fuel level in tank 3 containing the second fuel type.
  uint8_t Fuel2Tank3Level;                //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Fuel level in tank 4 containing the second fuel type.
  uint8_t Fuel2Tank4Level;                //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Indicates the ECU needs the display (i.e. monitor device) to continue to remain powered after ignition key off. An ECU would use this when the ECU needs the display to remain powered after key off so the ECU can communicate to the operator while the ...
  // 3 - "Don't care" 
  // 2 - "Reserved" 
  // 1 - "Remain Powered" 
  // 0 - "OK to Shutoff" 

  uint8_t DisplayRemainPowered;           //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} DD2_t;

// def @ICMSTS CAN Message (419213822)
#define ICMSTS_IDE (1U)
#define ICMSTS_DLC (8U)
#define ICMSTS_CANID (0x18FCB1FEU)
#define ICMSTS_CYC (100U)
// -- Engine Ignition Control Module Status  Contains Operating Status, Control State, and Physical Status of the Engine Ignition Control Module
// signal: @EngIgntCtrlModule1Temp
#define EngIgntCtrlModule1Temp_CovFactor 1
#define EngIgntCtrlModule1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngIgntCtrlModule2Temp
#define EngIgntCtrlModule2Temp_CovFactor 1
#define EngIgntCtrlModule2Temp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Measured internal temperature of the Engine Ignition Control Module 1 circuitry.
  int16_t EngIgntCtrlModule1Temp;        //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Measured internal temperature of the Engine Ignition Control Module 2 circuitry.
  int16_t EngIgntCtrlModule2Temp;        //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // This parameter is used to indicate the current state of Engine Ignition Control Module 1.  000 - Disabled (by user)  001 - Shutdown (due to alarm)  010 - Stalled (waiting for timing signals)  011 - Firing Ignition in Test Mode  100 - Firing Ignition ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Reserved" 
  // 4 - "Firing Ignition in Normal Mode" 
  // 3 - "Firing Ignition in Test Mode" 
  // 2 - "Stalled" 
  // 1 - "Shutdown" 
  // 0 - "Disabled" 

  uint8_t EngIgntCtrlModule1State;       //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // This parameter is used to indicate the current state of Engine Ignition Control Module 2.  000 - Disabled (by user)  001 - Shutdown (due to alarm)  010 - Stalled (waiting for timing signals)  011 - Firing Ignition in Test Mode  100 - Firing Ignition ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Reserved" 
  // 4 - "Firing Ignition in Normal Mode" 
  // 3 - "Firing Ignition in Test Mode" 
  // 2 - "Stalled" 
  // 1 - "Shutdown" 
  // 0 - "Disabled" 

  uint8_t EngIgntCtrlModule2State;       //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} ICMSTS_t;

// def @SPOS CAN Message (419214590)
#define SPOS_IDE (1U)
#define SPOS_DLC (8U)
#define SPOS_CANID (0x18FCB4FEU)
#define SPOS_CYC (1000U)
// -- Switched Power Output Status  Switched power output status is sent by the Power Distribution Module (PDM) to indicate the status of the PDM's switched power outputs.  This message is sent once every second (1000ms) and on change of any switched ...
typedef struct
{

  // State of Switched Output #4. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput4;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #3. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput3;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #2. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput2;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #1. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput1;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #8. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput8;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #7. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput7;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #6. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput6;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #5. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput5;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #12. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput12;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #11. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput11;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #10. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput10;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #9. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput9;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #16. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput16;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #15. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 0 - "Output off" 
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 

  uint8_t SwitchedOutput15;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #14. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput14;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #13. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput13;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #20. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput20;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #19. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput19;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #18. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput18;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #17. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput17;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #24. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput24;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #23. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput23;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #22. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput22;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #21. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput21;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #28. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput28;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #27. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput27;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #26. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput26;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #25. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput25;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #32. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput32;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #31. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput31;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #30. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput30;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Switched Output #29. Used to indicate the output state.    00 - Output off  01 - Output on  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output on" 
  // 0 - "Output off" 

  uint8_t SwitchedOutput29;              //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} SPOS_t;

// def @FPOS CAN Message (419214846)
#define FPOS_IDE (1U)
#define FPOS_DLC (8U)
#define FPOS_CANID (0x18FCB5FEU)
#define FPOS_CYC (1000U)
// -- Fused Power Output Status  Fused power output status is sent by the Power Distribution Module (PDM) to indicate the state of the PDM's fused outputs.  This message is sent once every second (1000ms) and on change of any fused power output status, ...
typedef struct
{

  // State of Fused Output #4. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput4;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #3. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput3;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #2. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput2;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #1. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput1;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #8. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput8;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #7. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput7;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #6. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput6;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #5. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput5;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #12. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput12;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #11. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput11;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #10. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput10;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #9. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput9;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #16. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput16;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #15. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput15;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #14. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput14;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #13. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput13;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #20. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput20;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #19. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput19;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #18. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput18;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #17. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput17;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #24. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput24;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #23. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput23;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #22. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput22;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #21. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput21;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #28. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput28;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #27. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput27;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #26. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput26;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #25. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput25;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #32. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput32;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #31. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput31;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #30. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput30;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of Fused Output #29. Used to indicate the output state.    00 - Output not powered  01 - Output powered  10 - Reserved  11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Output powered" 
  // 0 - "Output not powered" 

  uint8_t FusedOutput29;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} FPOS_t;

// def @VEP5 CAN Message (419215102)
#define VEP5_IDE (1U)
#define VEP5_DLC (8U)
#define VEP5_CANID (0x18FCB6FEU)
#define VEP5_CYC (1000U)
// -- Vehicle Electrical Power #5  PGN containing vehicle electrical power information for the battery pack used for starting, lighting, and ignition.
// signal: @SLIBatteryPackStateOfCharge
#define SLIBatteryPackStateOfCharge_CovFactor 0.0025
#define SLIBatteryPackStateOfCharge_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @SLIBatteryPackHealth
#define SLIBatteryPackHealth_CovFactor 0.5
#define SLIBatteryPackHealth_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @SLICrnkngPrdctdMinBatteryVoltage
#define SLICrnkngPrdctdMinBatteryVoltage_CovFactor 0.2
#define SLICrnkngPrdctdMinBatteryVoltage_CovS(x) ((uint8_t)((x / 0.2)))
typedef struct
{

  // Indicates the remaining charge of the battery pack used for starting the engine, for lighting, and for ignition (SLI). 0% means no charge remaining, 100% means full capacity at the battery pack's current state of health.   See SPN 5464 for hybrid ...
  uint16_t SLIBatteryPackStateOfCharge;       //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Original or rated total reserve capacity of the battery pack used for starting the engine, for lighting, and for ignition (SLI).
  uint16_t SLIBatteryPackCapacity;            //      Bits=16.  [ 0     , 64255  ]  Unit:'Ah'   

  // Capacity of the battery pack relative to its original specification for the battery pack used for starting the engine, for lighting, and for ignition (SLI). 0% means battery pack is not capable of holding any charge, 100% means battery pack is ...
  uint8_t SLIBatteryPackHealth;               //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.5   

  // Prediction of the minimum battery voltage used for starting the engine, for lighting, and for ignition (SLI) during a crank event, under present battery conditions.
  uint8_t SLICrnkngPrdctdMinBatteryVoltage;   //      Bits=08.  [ 0     , 50     ]  Unit:'V'     Factor= 0.2   
  uint32_t framecnt;
} VEP5_t;

// def @VEP4 CAN Message (419215358)
#define VEP4_IDE (1U)
#define VEP4_DLC (8U)
#define VEP4_CANID (0x18FCB7FEU)
// -- Vehicle Electrical Power #4  Hybrid system voltage information
// signal: @HybridBatteryPackRemainingCharge
#define HybridBatteryPackRemainingCharge_CovFactor 0.0025
#define HybridBatteryPackRemainingCharge_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // Indicates the hybrid battery pack remaining charge. 0% means no charge remaining, 100% means full charge remaining.
  uint16_t HybridBatteryPackRemainingCharge;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} VEP4_t;

// def @AT2S2 CAN Message (419215614)
#define AT2S2_IDE (1U)
#define AT2S2_DLC (8U)
#define AT2S2_CANID (0x18FCB8FEU)
// -- Aftertreatment 2 Service 2  This PGN contains information about the aftertreatment 2.
typedef struct
{

  // Indicates the time to the next active regeneration event of diesel particulate filter 2.
  uint32_t DPFTimeToNextActiveRegen;          //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Indicates the time since the last cleaning event of the SCR system in bank 2.
  uint32_t SCRSysTimeSinceLastSysCleanEvent;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    
  uint32_t framecnt;
} AT2S2_t;

// def @AT1S2 CAN Message (419215870)
#define AT1S2_IDE (1U)
#define AT1S2_DLC (8U)
#define AT1S2_CANID (0x18FCB9FEU)
// -- Aftertreatment 1 Service 2  This PGN contains information about the aftertreatment 1.
typedef struct
{

  // Indicates the time to the next active regeneration event of diesel particulate filter 1.
  uint32_t DPFTimeToNextActiveRegen;          //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Indicates the time since the last cleaning event of the SCR system in bank 1.
  uint32_t SCRSysTimeSinceLastSysCleanEvent;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    
  uint32_t framecnt;
} AT1S2_t;

// def @A2ECMI CAN Message (419216126)
#define A2ECMI_IDE (1U)
#define A2ECMI_DLC (8U)
#define A2ECMI_CANID (0x18FCBAFEU)
#define A2ECMI_CYC (1000U)
// -- Aftertreatment 2 SCR Electronic Control Module Information  Information relating to SCR electronic control module of aftertreatment 2 (bank 2).
typedef struct
{

  // State signal which indicates when the DEF control module 1 relay of aftertreatment 2 is being energized. On means the ECU is powering the Aftertreatment 2 DEF dosing unit relay. Note that the ECU is external to the relay.  00 - Off  01 - On: The ECU ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the DEF dosing unit relay" 
  // 0 - "Off" 

  uint8_t DEFCtrlModule1RelayCtrl;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates when the DEF control module 1 power supply of aftertreatment 2 is being driven. On means the ECU is powering the aftertreatment 2 DEF control module 1 power supply. Note that the control module is external to the ECU.   ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the DEF dosing unit power supply" 
  // 0 - "Off" 

  uint8_t DEFCtrlModule1PwrSupply1;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates when the DEF control module 1 power supply 2 of aftertreatment 2 is being driven. On means the ECU is powering the aftertreatment 2 DEF control module 1 power supply. Note that the control module is external to the ECU.   ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the DEF dosing unit power supply" 
  // 0 - "Off" 

  uint8_t DEFCtrlModule1PwrSupply2;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates when the DEF control module 2 relay of aftertreatment 2 is being energized. On means the ECU is powering the Aftertreatment 2 DEF dosing unit relay. Note that the ECU is external to the relay.  00 - Off  01 - On: The ECU ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the DEF dosing unit relay" 
  // 0 - "Off" 

  uint8_t DEFCtrlModule2RelayCtrl;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates when the DEF control module 2 power supply of aftertreatment 2 is being driven. On means the ECU is powering the aftertreatment 2 DEF control module power supply. Note that the control module is external to the ECU.  00 ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the DEF dosing unit relay" 
  // 0 - "Off" 

  uint8_t DEFCtrlModule2PwrSupply1;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates when the DEF control module 2 power supply 2 of aftertreatment 2 is being driven. On means the ECU is powering the aftertreatment 2 DEF control module power supply. Note that the control module is external to the ECU.   ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the DEF dosing unit relay" 
  // 0 - "Off" 

  uint8_t DEFCtrlModule2PwrSupply2;      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} A2ECMI_t;

// def @A1ECMI CAN Message (419216382)
#define A1ECMI_IDE (1U)
#define A1ECMI_DLC (8U)
#define A1ECMI_CANID (0x18FCBBFEU)
#define A1ECMI_CYC (1000U)
// -- Aftertreatment 1 SCR Electronic Control Module Information  Information relating to SCR electronic control module of aftertreatment 1 (bank 1).
typedef struct
{

  // State signal which indicates when the DEF control module relay of aftertreatment 1 is being energized. On means the ECU is powering the Aftertreatment 1 DEF dosing unit relay. Note that the ECU is external to the relay.  00 - Off  01 - On: The ECU ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the DEF dosing unit relay" 
  // 0 - "Off" 

  uint8_t DEFCtrlModule1RelayCtrl;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates when the DEF control module power supply of aftertreatment 1 is being driven. On means the ECU is powering the aftertreatment 1 DEF control module power supply. Note that the control module is external to the ECU.  00 - ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the DEF dosing unit power supply" 
  // 0 - "Off" 

  uint8_t DEFCtrlModule1PwrSupply1;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates when the DEF control module 1 power supply 2 of aftertreatment 1 is being driven. On means the ECU is powering the aftertreatment 1 DEF control module 1 power supply. Note that the control module is external to the ECU.   ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the DEF dosing unit power supply" 
  // 0 - "Off" 

  uint8_t DEFCtrlModule1PwrSupply2;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The status of the circuit breaker that is used to power the diesel exhaust control module.    00 off  01 on  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t DEFCtrlModuleCircuitBreaker;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates when the DEF control module 2 relay of aftertreatment 1 is being energized. On means the ECU is powering the Aftertreatment 1 DEF dosing unit relay. Note that the ECU is external to the relay.  00 - Off  01 - On: The ECU ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the DEF dosing unit relay" 
  // 0 - "Off" 

  uint8_t DEFCtrlModule2RelayCtrl;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates when the DEF control module 2 power supply of aftertreatment 1 is being driven. On means the ECU is powering the aftertreatment 1 DEF control module power supply. Note that the control module is external to the ECU.  00 ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the DEF dosing unit power supply" 
  // 0 - "Off" 

  uint8_t DEFCtrlModule2PwrSupply1;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates when the DEF control module 2 power supply 2 of aftertreatment 1 is being driven. On means the ECU is powering the aftertreatment 1 DEF control module power supply. Note that the control module is external to the ECU.   ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the DEF dosing unit power supply" 
  // 0 - "Off" 

  uint8_t DEFCtrlModule2PwrSupply2;      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} A1ECMI_t;

// def @A2SCRSI2 CAN Message (419216638)
#define A2SCRSI2_IDE (1U)
#define A2SCRSI2_DLC (8U)
#define A2SCRSI2_CANID (0x18FCBCFEU)
// -- Aftertreatment 2 SCR Service Information 2  This message contains SCR service information for aftertreatment system 2 (or bank 2).
// signal: @TotalDEFUsed
#define TotalDEFUsed_CovFactor 0.5
#define TotalDEFUsed_CovS(x) ((uint32_t)((x / 0.5)))
typedef struct
{

  // Total amount of DEF used by aftertreatment device 2 over the lifetime of the device.
  uint32_t TotalDEFUsed;                 //      Bits=32.  [ 0     , 2105540607.5 ]  Unit:'L'     Factor= 0.5   
  uint32_t framecnt;
} A2SCRSI2_t;

// def @A1SCRSI2 CAN Message (419216894)
#define A1SCRSI2_IDE (1U)
#define A1SCRSI2_DLC (8U)
#define A1SCRSI2_CANID (0x18FCBDFEU)
// -- Aftertreatment 1 SCR Service Information 2  This message contains SCR service information for aftertreatment system 1 (or bank 1).
// signal: @TotalDEFUsed
#define TotalDEFUsed_CovFactor 0.5
#define TotalDEFUsed_CovS(x) ((uint32_t)((x / 0.5)))
// signal: @TripDEF
#define TripDEF_CovFactor 0.05
#define TripDEF_CovS(x) ((uint32_t)((x / 0.05)))
typedef struct
{

  // Total amount of DEF used by aftertreatment device 1 over the lifetime of the device.
  uint32_t TotalDEFUsed;                 //      Bits=32.  [ 0     , 2105540607.5 ]  Unit:'L'     Factor= 0.5   

  // DEF consumed during all or part of a journey.
  uint32_t TripDEF;                      //      Bits=32.  [ 0     , 210554060.75 ]  Unit:'L'     Factor= 0.05  
  uint32_t framecnt;
} A1SCRSI2_t;

// def @TRF3 CAN Message (419217918)
#define TRF3_IDE (1U)
#define TRF3_DLC (8U)
#define TRF3_CANID (0x18FCC1FEU)
#define TRF3_CYC (1000U)
// -- Transmission Fluids 3
// signal: @TransClutch2Press
#define TransClutch2Press_CovFactor 16
#define TransClutch2Press_CovS(x) ((uint8_t)((x / 16)))
// signal: @TransOilTransCoolerOutletTemp
#define TransOilTransCoolerOutletTemp_CovFactor 1
#define TransOilTransCoolerOutletTemp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Gage pressure of hydraulic actuation fluid of transmission second clutch in a dual clutch application.
  uint8_t TransClutch2Press;               //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa'   Factor= 16    

  // Temperature of transmission lubricant after it exits from the transmission cooler.
  int16_t TransOilTransCoolerOutletTemp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} TRF3_t;

// def @HSS CAN Message (419218174)
#define HSS_IDE (1U)
#define HSS_DLC (8U)
#define HSS_CANID (0x18FCC2FEU)
#define HSS_CYC (1000U)
// -- Hybrid System Status  Status information of a hybrid system.
typedef struct
{

  // Signal from a hybrid system indicating that some aspect of its operation is not functioning correctly, and as a result, hybrid system operation may be altered or restricted. The indicator is typically a lamp. Distinctions in meaning between the ...
  // 3 - "Not available" 
  // 2 - "Hybrid System Warning Indicator is flashing" 
  // 1 - "Hybrid System Warning Indicator is on continuously" 
  // 0 - "Hybrid System Warning Indicator is off" 

  uint8_t HybridSystemWarningIndicator;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal from a hybrid system indicating that at least one of its monitored temperatures is above normal acceptable limits, and as a result, hybrid system operation may be altered or restricted. The indicator is typically a lamp. Distinctions in ...
  // 3 - "Not available" 
  // 2 - "Hybrid System Temperature Indicator is flashing" 
  // 1 - "Hybrid System Temperature Indicator is on continuously" 
  // 0 - "Hybrid System Temperature Indicator is off" 

  uint8_t HybridSystemOverheatIndicator;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal from a hybrid system indicating that some aspect of its operation is not functioning correctly, and as a result, the vehicle must be stopped. The indicator is typically a lamp. Distinctions in meaning between the continuous and flashing ...
  // 3 - "Not available" 
  // 2 - "Hybrid System Stop Indicator is flashing" 
  // 1 - "Hybrid System Stop Indicator is on continuously" 
  // 0 - "Hybrid System Stop Indicator is off" 

  uint8_t HybridSystemStopIndicator;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal from hybrid system indicating the status of OBD related DTCs  00 - Hybrid System does not have an active OBD related DTC  01 - Hybrid System has an active OBD related DTC  10 - SAE Reserved  11 - Not available  See \
  // 3 - "Not available" 
  // 2 - "SAE Reserved" 
  // 1 - "Hybrid System has an active OBD related DTC" 
  // 0 - "Hybrid System does not have an active OBD related DTC" 

  uint8_t HybridSystemOBDRelatedDTCStatus;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates when the hybrid system is ready to provide or is actively providing propulsion as defined in ARB regulation 13CCR1971.1, which includes the amendments up to the Board hearing date of August 2012. This parameter is called out by the 1971.1 ...
  // 3 - "Not Available" 
  // 2 - "SAE Reserved" 
  // 1 - "Propulsion System is ready to move" 
  // 0 - "Propulsion System is not ready to move vehicle if commanded by operator" 

  uint8_t PropulsionSystemActive;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Provides the engine an indication of when the hybrid system is not mechanically assisting rotation (i.e. not motoring) the engine. When this parameter is in state 00, the engine can perform operations while free of potential hybrid system ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Hybrid system may or may not mechanically assist engine rotation" 
  // 0 - "Hybrid system is not mechanically assisting engine rotation" 

  uint8_t EngAssistStatus;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal from the hybrid system indicating that the hybrid system or one of its components requires servicing (e.g. oil change, coolant change).  00 - Hybrid Service Indicator is off  01 - Hybrid Service Indicator is on continously  10 - Hybrid ...
  // 3 - "Not Available" 
  // 2 - "Hybrid Service Indicator is flashing" 
  // 1 - "Hybrid Service Indicator is on continously" 
  // 0 - "Hybrid Service Indicator is off" 

  uint8_t HybridSystemServiceIndicator;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal from the hybrid system indicating that the hybrid system motor is exceeding maximum speed limit.  00 - Hybrid System Motor Overspeed Indicator is off  01 - Hybrid System Motor Overspeed Indicator is on continously  10 - Hybrid System Motor ...
  // 3 - "Not Available" 
  // 2 - "Hybrid System Motor Overspeed Indicator is flashing" 
  // 1 - "Hybrid System Motor Overspeed Indicator is on continously" 
  // 0 - "Hybrid System Motor Overspeed Indicator is off" 

  uint8_t HybrdSystmMtorOverspeedIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal from the hybrid system indicating that the overspeed audible alarm should be activated.    00 - Motor Overspeed Audible Alarm is off  01 - Motor Overspeed Audible Alarm is on  10 - Error  11 - Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Motor Overspeed Audible Alarm is on" 
  // 0 - "Motor Overspeed Audible Alarm is off" 

  uint8_t HybrdSystmMtrOvrspedAudibleAlarm;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal from the hybrid system indicating that the electric alternator is failed or needs servicing.  The alternator Indicator (e.g. dash lamp) is to be activated.  00 - Alternator Indicator is off  01 - Alternator Indicator is on  10 - Alternator ...
  // 3 - "Not Available" 
  // 2 - "Alternator Indicator is flashing" 
  // 1 - "Alternator Indicator is on" 
  // 0 - "Alternator Indicator is off" 

  uint8_t HybridSystemElectricAltIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal from the hybrid system indicating when regenerative braking is active.    00 - Regenerative braking is inactive  01 - Regenerative braking is active  10 - Regenerative braking is disabled or faulted   11 - Not Available
  // 3 - "Not Available" 
  // 2 - "Regenerative braking is disabled or faulted " 
  // 1 - "Regenerative braking is active" 
  // 0 - "Regenerative braking is inactive" 

  uint8_t HybrdSystmRgnrtvBrakingIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal from the hybrid system that indicates when it is initialized and ready to start the engine or other power source (e.g. fuel cell). The intent is that this would drive an indicator for the vehicle operator. If the operator attempts to start ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Hybrid System Initialization Indicator is active" 
  // 0 - "Hybrid System Initialization Indicator is not active" 

  uint8_t HybrdSystmIntializationIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the condition and state of the hybrid system high voltage exposure detection system (e.g. High  Voltage Interlock Loop [HVIL]). The high voltage exposure detection system is used to detect situations on a hybrid  vehicle where ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "System is operational and has detected a compromise" 
  // 0 - "System is operational and intact" 

  uint8_t HybrdSystmHghVltgExpsreIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} HSS_t;

// def @GFI4 CAN Message (419218430)
#define GFI4_IDE (1U)
#define GFI4_DLC (8U)
#define GFI4_CANID (0x18FCC3FEU)
#define GFI4_CYC (200U)
// -- Fuel Information 4 (Gaseous)  Gaseous fuel information 4
// signal: @SupplyGasMethanePercentage
#define SupplyGasMethanePercentage_CovFactor 0.0025
#define SupplyGasMethanePercentage_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // The percentage of methane in the gas supplied to the engine.
  uint16_t SupplyGasMethanePercentage;   //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} GFI4_t;

// def @A2SCREGT2 CAN Message (419218686)
#define A2SCREGT2_IDE (1U)
#define A2SCREGT2_DLC (8U)
#define A2SCREGT2_CANID (0x18FCC4FEU)
#define A2SCREGT2_CYC (500U)
// -- Aftertreatment 2 SCR Exhaust Gas Temperature 2  This message contains SCR catalyst gas temperature information for aftertreatment system 2 (or bank 2).
// signal: @IntmdTemp
#define IntmdTemp_CovFactor 0.03125
#define IntmdTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of engine combustion byproducts at an intermediate point in the SCR component in exhaust bank 2.
  int32_t IntmdTemp;                     //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment SCR intermediate temperature sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t IntmdTempPreliminaryFMI;       //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} A2SCREGT2_t;

// def @A1SCREGT2 CAN Message (419218942)
#define A1SCREGT2_IDE (1U)
#define A1SCREGT2_DLC (8U)
#define A1SCREGT2_CANID (0x18FCC5FEU)
#define A1SCREGT2_CYC (500U)
// -- Aftertreatment 1 SCR Exhaust Gas Temperature 2  This message contains SCR catalyst gas temperature information for aftertreatment system 1 (or bank 1).
// signal: @IntmdTemp
#define IntmdTemp_CovFactor 0.03125
#define IntmdTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of engine combustion byproducts at an intermediate point in the SCR component in exhaust bank 1.
  int32_t IntmdTemp;                     //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Used to identify the applicable J1939-73 FMI detected in the aftertreatment SCR intermediate temperature sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t IntmdTempPreliminaryFMI;       //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} A1SCREGT2_t;

// def @DM57 CAN Message (419219198)
#define DM57_IDE (1U)
#define DM57_DLC (8U)
#define DM57_CANID (0x18FCC6FEU)
// -- OBD Information
typedef struct
{

  // 3 - "Not supported or not available" 
  // 2 - "SAE reserved" 
  // 1 - "A warm-up cycle has occurred on this engine start" 
  // 0 - "A warm-up cycle has not occurred on this engine start" 

  uint8_t EngOBDWarmUpSequence;          //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} DM57_t;

// def @EEC13 CAN Message (419219710)
#define EEC13_IDE (1U)
#define EEC13_DLC (8U)
#define EEC13_CANID (0x18FCC8FEU)
#define EEC13_CYC (1000U)
// -- Electronic Engine Controller 13
// signal: @EngGasSubstitutionFuelPercentage
#define EngGasSubstitutionFuelPercentage_CovFactor 0.5
#define EngGasSubstitutionFuelPercentage_CovS(x) ((uint8_t)((x / 0.5)))
typedef struct
{

  // This parameter provides feedback to the network that SPN 5793 Desired Engine Fueling State was honored. SPN 5795 Engine Fueling Inhibit Allowed indicates the engine?s current ability to honor requests via SPN 5793 Desired Engine Fueling State.  00 = ...
  // 3 - "Not Supported" 
  // 2 - "No active request per SPN 5793 Desired Engine Fueling State or SPN 5795 Engine Fueling Inhibit Allowed = 00" 
  // 1 - "Engine will be kept running" 
  // 0 - "Fueling is or will be inhibited" 

  uint8_t FeedbackEngFuelingState;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is broadcast by the engine control system, and indicates to other devices on the network whether or not it will respond to requests to inhibit engine fueling via SPN 5793 Desired Engine Fueling State. With this information, devices ...
  // 3 - "Not Supported" 
  // 2 - "SAE Reserved" 
  // 1 - "Engine will stop fueling in response to SPN 5793 Desired Engine Fueling State" 
  // 0 - "Engine currently will not stop fueling in response to SPN 5793 Desired Engine Fueling State" 

  uint8_t EngFuelingInhibitAllowed;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // If Engine Fueling Inhibit Allowed (SPN 5795) indicates that the engine will not inhibit fueling, then this parameter will indicate the reason.  If more than one reason exists at the same time, then it is up to the manufacturer to decide which one to ...
  // 15 - "Not Supported" 
  // 12 - "Low idle governor operation required" 
  // 11 - "Engine driven fan request" 
  // 10 - "Maximum number of engine fuelling inhibit requests" 
  // 9 - "Insufficient SLI battery charge" 
  // 8 - "Engine protection" 
  // 7 - "Engine load too high" 
  // 6 - "Aftertreatment Protection" 
  // 5 - "Aftertreatment system is cold" 
  // 4 - "Service Override" 
  // 3 - "Engine is cold" 
  // 2 - "Oil Distribution in engine is incomplete" 
  // 1 - "Aftertreatment regeneration is active or preparing to be active" 
  // 0 - "Fueling inhibit allowed" 

  uint8_t EngFuelingInhibitPreventedReason;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The J1939 source address of the device currently controlling the fueling state via SPN 5793.  254 (0xFE) is used to indicate that the Source Address of Controlling Device for Fueling State parameter is supported, but no device is currently ...
  uint8_t SrcAddrssOfCntrllngDvcFrFlngStte;   //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Actual dual fuel mode, off or on.    00 = Actual dual fuel mode off  01 = Actual dual fuel mode on  10 = Reserved  11 = Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Actual dual fuel mode on" 
  // 0 - "Actual dual fuel mode off" 

  uint8_t EngDualFuelMode;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Percentage of Gaseous fuel used. 0% means no Gaseous fuel used and 100% means completely gaseous fuel is used.  Gas substitution is the process for a dual fuel engine system of substituting gas, e.g. natural gas, for some fraction of the primary ...
  uint8_t EngGasSubstitutionFuelPercentage;   //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Factor= 0.5   

  // A signal issued by the engine control system indicating the number of devices from which the engine control system has received a ?fueling not desired? request. Requests included in this count are either from an external device via SPN 5793 Desired ...
  // 3 - "More than 10 active fueling inhibit requests" 

  uint8_t EngFuelingInhibitRqCount;           //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // A signal issued by the engine control system indicating the number of devices from which the engine control system has received a ?fueling desired? request. Requests included in this count are either from an external device via SPN 5793 Desired ...
  // 3 - "More than 10 active fueling desired requests" 

  uint8_t EngFuelingDesiredRqCount;           //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} EEC13_t;

// def @EF_TVI2 CAN Message (419219966)
#define EF_TVI2_IDE (1U)
#define EF_TVI2_DLC (8U)
#define EF_TVI2_CANID (0x18FCC9FEU)
#define EF_TVI2_CYC (100U)
// -- Engine Fuel/Throttle Valve Information 2  This PGN will be used to transmit the Feedback information from the Engine Throttle and Fuel Actuator.
// signal: @EngThrottleValve1Temp
#define EngThrottleValve1Temp_CovFactor 1
#define EngThrottleValve1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngThrottleValve2Temp
#define EngThrottleValve2Temp_CovFactor 1
#define EngThrottleValve2Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngFuelValve1Temp
#define EngFuelValve1Temp_CovFactor 1
#define EngFuelValve1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngFuelValve2Temp
#define EngFuelValve2Temp_CovFactor 1
#define EngFuelValve2Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngTurboWastegateActuator2Temp
#define EngTurboWastegateActuator2Temp_CovFactor 1
#define EngTurboWastegateActuator2Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngFuelRackFuelSupplyTemp
#define EngFuelRackFuelSupplyTemp_CovFactor 1
#define EngFuelRackFuelSupplyTemp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Temperature of the engine throttle valve 1 drive circuitry (SPN 51).  Temperature excursions may affect the torque output.
  int16_t EngThrottleValve1Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of the engine throttle valve 2 drive circuitry (SPN 3673).  Temperature excursions may affect the torque output.
  int16_t EngThrottleValve2Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of the Engine Fuel Valve 1 drive circuitry. Temperature excursions may affect the torque output.
  int16_t EngFuelValve1Temp;                //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of the Engine Fuel Valve 2 drive circuitry. Temperature excursions may affect the torque output.
  int16_t EngFuelValve2Temp;                //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of the Engine Turbocharger Wastegate Actuator 2 drive circuitry.  Temperature excursions may affect the torque output.
  int16_t EngTurboWastegateActuator2Temp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of fuel in the engine fuel rack.
  int16_t EngFuelRackFuelSupplyTemp;        //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} EF_TVI2_t;

// def @EEGR2A CAN Message (419220222)
#define EEGR2A_IDE (1U)
#define EEGR2A_DLC (8U)
#define EEGR2A_CANID (0x18FCCAFEU)
#define EEGR2A_CYC (100U)
// -- Engine Exhaust Gas Recirculation 2 Actuator  Engine Exhaust Gas Recirculation 2 Actuator related parameters
// signal: @EngExhstGsRcrclton2Actuator1Temp
#define EngExhstGsRcrclton2Actuator1Temp_CovFactor 1
#define EngExhstGsRcrclton2Actuator1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngExhstGsRcrcltn2Acttr1DsredPos
#define EngExhstGsRcrcltn2Acttr1DsredPos_CovFactor 0.4
#define EngExhstGsRcrcltn2Acttr1DsredPos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngExhstGsRcrclton2Actuator2Temp
#define EngExhstGsRcrclton2Actuator2Temp_CovFactor 1
#define EngExhstGsRcrclton2Actuator2Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngExhstGsRcrcltn2Acttr2DsredPos
#define EngExhstGsRcrcltn2Acttr2DsredPos_CovFactor 0.4
#define EngExhstGsRcrcltn2Acttr2DsredPos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Used to identify the applicable J1939-73 FMI detected in the Engine Exhaust Gas Recirculation 2 Actuator 1 by the manufacturer?s software. When there is no failure FMI 31 is transmitted. When there are multiple failures, the most severe is ...
  uint8_t EngExhstGsRcrcltn2Acttr1PrlmnryF;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the status of the Engine Exhaust Gas Recirculation 2 Actuator 1 drive circuitry temperature.  Temperature excursions may affect the torque output.  000 - High Most severe  001 - High Least severe  010 - In Range  011 - Low Least ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Not Defined" 
  // 4 - "Low Most severe" 
  // 3 - "Low Least severe" 
  // 2 - "In Range " 
  // 1 - "High Least severe" 
  // 0 - "High Most severe" 

  uint8_t EngExhstGsRcrcltn2Acttr1TmpSttus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Temperature of the Engine Exhaust Gas Recirculation 2 Actuator 1 drive circuitry.  Temperature excursions may affect the torque output.
  int16_t EngExhstGsRcrclton2Actuator1Temp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The requested position of the Engine Exhaust Gas Recirculation 2 Actuator 1 by the engine ECU, where 0% represents fully closed and 100% represents fully open.    This is the position that the device is attempting to achieve.
  uint8_t EngExhstGsRcrcltn2Acttr1DsredPos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Used to identify the applicable J1939-73 FMI detected in the Engine Exhaust Gas Recirculation 2 Actuator 2 by the manufacturer?s software. When there is no failure FMI 31 is transmitted. When there are multiple failures, the most severe is ...
  uint8_t EngExhstGsRcrcltn2Acttr2PrlmnryF;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the status of the Engine Exhaust Gas Recirculation 2 Actuator 2 drive circuitry temperature.  Temperature excursions may affect the torque output.  000 - High Most severe  001 - High Least severe  010 - In Range  011 - Low Least ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Not Defined" 
  // 4 - "Low Most severe" 
  // 3 - "Low Least severe" 
  // 2 - "In Range " 
  // 1 - "High Least severe" 
  // 0 - "High Most severe" 

  uint8_t EngExhstGsRcrcltn2Acttr2TmpSttus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Temperature of the Engine Exhaust Gas Recirculation 2 Actuator 2 drive circuitry.  Temperature excursions may affect the torque output.
  int16_t EngExhstGsRcrclton2Actuator2Temp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The requested position of the Engine Exhaust Gas Recirculation 2 Actuator 2 by the engine ECU, where 0% represents fully closed and 100% represents fully open.    This is the position that the device is attempting to achieve.
  uint8_t EngExhstGsRcrcltn2Acttr2DsredPos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Used to identify the status of Exhaust Gas Recirculation 2 Actuator 1  0000 - Normal  0001 - Alarm (fully operational but needs service)  0010 - Alarm High Severity (functional but transient performance may be reduced)  0011 - Derate Active (torque ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 5 - "Uncontrolled Shutdown Active" 
  // 4 - "Controlled Shutdown Active" 
  // 3 - "Derate Active" 
  // 2 - "Alarm High Severity" 
  // 1 - "Alarm" 
  // 0 - "Normal" 

  uint8_t EngExhstGsRcrcltn2Acttr1OprtnStt;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Used to identify the status of Exhaust Gas Recirculation 2 Actuator 2  0000 - Normal  0001 - Alarm (fully operational but needs service)  0010 - Alarm High Severity (functional but transient performance may be reduced)  0011 - Derate Active (torque ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 5 - "Uncontrolled Shutdown Active" 
  // 4 - "Controlled Shutdown Active" 
  // 3 - "Derate Active" 
  // 2 - "Alarm High Severity" 
  // 1 - "Alarm" 
  // 0 - "Normal" 

  uint8_t EngExhstGsRcrcltn2Acttr2OprtnStt;   //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} EEGR2A_t;

// def @EEGR1A CAN Message (419220478)
#define EEGR1A_IDE (1U)
#define EEGR1A_DLC (8U)
#define EEGR1A_CANID (0x18FCCBFEU)
#define EEGR1A_CYC (100U)
// -- Engine Exhaust Gas Recirculation 1 Actuator  Engine Exhaust Gas Recirculation 1 Actuator related parameters
// signal: @EngExhstGsRcrclton1Actuator1Temp
#define EngExhstGsRcrclton1Actuator1Temp_CovFactor 1
#define EngExhstGsRcrclton1Actuator1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngExhstGsRcrcltn1Acttr1DsredPos
#define EngExhstGsRcrcltn1Acttr1DsredPos_CovFactor 0.4
#define EngExhstGsRcrcltn1Acttr1DsredPos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngExhstGsRcrclton1Actuator2Temp
#define EngExhstGsRcrclton1Actuator2Temp_CovFactor 1
#define EngExhstGsRcrclton1Actuator2Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngExhstGsRcrcltn1Acttr2DsredPos
#define EngExhstGsRcrcltn1Acttr2DsredPos_CovFactor 0.4
#define EngExhstGsRcrcltn1Acttr2DsredPos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Used to identify the applicable J1939-73 FMI detected in the Engine Exhaust Gas Recirculation 1 Actuator 1 by the manufacturer?s software. When there is no failure FMI 31 is transmitted. When there are multiple failures, the most severe is ...
  uint8_t EngExhstGsRcrcltn1Acttr1PrlmnryF;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the status of the Engine Exhaust Gas Recirculation 1 Actuator 1 drive circuitry temperature.  Temperature excursions may affect the torque output.  000 - High Most severe  001 - High Least severe  010 - In Range  011 - Low Least ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Not Defined" 
  // 4 - "Low Most severe" 
  // 3 - "Low Least severe" 
  // 2 - "In Range " 
  // 1 - "High Least severe" 
  // 0 - "High Most severe" 

  uint8_t EngExhstGsRcrcltn1Acttr1TmpSttus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Temperature of the Engine Exhaust Gas Recirculation 1 Actuator 1 drive circuitry.  Temperature excursions may affect the torque output.
  int16_t EngExhstGsRcrclton1Actuator1Temp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The requested position of the Engine Exhaust Gas Recirculation 1 Actuator 1 by the engine ECU, where 0% represents fully closed and 100% represents fully open.    This is the position that the device is attempting to achieve.
  uint8_t EngExhstGsRcrcltn1Acttr1DsredPos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Used to identify the applicable J1939-73 FMI detected in the Engine Exhaust Gas Recirculation 1 Actuator 2 by the manufacturer?s software. When there is no failure FMI 31 is transmitted. When there are multiple failures, the most severe is ...
  uint8_t EngExhstGsRcrcltn1Acttr2PrlmnryF;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the status of the Engine Exhaust Gas Recirculation 1 Actuator 2 drive circuitry temperature.  Temperature excursions may affect the torque output.  000 - High Most severe  001 - High Least severe  010 - In Range  011 - Low Least ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Not Defined" 
  // 4 - "Low Most severe" 
  // 3 - "Low Least severe" 
  // 2 - "In Range " 
  // 1 - "High Least severe" 
  // 0 - "High Most severe" 

  uint8_t EngExhstGsRcrcltn1Acttr2TmpSttus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Temperature of the Engine Exhaust Gas Recirculation 1 Actuator 2 drive circuitry.  Temperature excursions may affect the torque output.
  int16_t EngExhstGsRcrclton1Actuator2Temp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The requested position of the Engine Exhaust Gas Recirculation 1 Actuator 2 by the engine ECU, where 0% represents fully closed and 100% represents fully open.    This is the position that the device is attempting to achieve.
  uint8_t EngExhstGsRcrcltn1Acttr2DsredPos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Used to identify the status of Exhaust Gas Recirculation 1 Actuator 1  0000 - Normal  0001 - Alarm (fully operational but needs service)  0010 - Alarm High Severity (functional but transient performance may be reduced)  0011 - Derate Active (torque ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 5 - "Uncontrolled Shutdown Active" 
  // 4 - "Controlled Shutdown Active" 
  // 3 - "Derate Active" 
  // 2 - "Alarm High Severity" 
  // 1 - "Alarm" 
  // 0 - "Normal" 

  uint8_t EngExhstGsRcrcltn1Acttr1OprtnStt;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Used to identify the status of Exhaust Gas Recirculation 1 Actuator 2  0000 - Normal  0001 - Alarm (fully operational but needs service)  0010 - Alarm High Severity (functional but transient performance may be reduced)  0011 - Derate Active (torque ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 5 - "Uncontrolled Shutdown Active" 
  // 4 - "Controlled Shutdown Active" 
  // 3 - "Derate Active" 
  // 2 - "Alarm High Severity" 
  // 1 - "Alarm" 
  // 0 - "Normal" 

  uint8_t EngExhstGsRcrcltn1Acttr2OprtnStt;   //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} EEGR1A_t;

// def @EEC12 CAN Message (419220734)
#define EEC12_IDE (1U)
#define EEC12_DLC (8U)
#define EEC12_CANID (0x18FCCCFEU)
// -- Electronic Engine Controller 12  Engine Related Parameters
typedef struct
{

  // State signal which indicates when the Aftertreatment 1 Intake Gas Sensor driver output is being driven.  On means the ECU is powering the Aftertreatment 1 Intake Gas Sensor.  Note that the ECU is external to the sensor.  00 - Off  01 - On: The ECU ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the Aftertreatment 1 Intake Gas Sensor" 
  // 0 - "Off" 

  uint8_t AFT1InGasSnsrPwrSupply;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates when the Aftertreatment 1 Outlet Gas Sensor driver output is being driven.  On means the ECU is powering the Aftertreatment 1 Intake Gas Sensor.  Note that the ECU is external to the sensor.  00 - Off  01 - On: The ECU ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the Aftertreatment 1 Outlet Gas Sensor" 
  // 0 - "Off" 

  uint8_t AFT1OutGasSnsrPwrSupply;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates when the Aftertreatment 2 Intake Gas Sensor driver output is being driven.  On means the ECU is powering the Aftertreatment 2 Intake Gas Sensor.  Note that the ECU is external to the sensor.  00 - Off  01 - On: The ECU ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the Aftertreatment 2 Intake Gas Sensor" 
  // 0 - "Off" 

  uint8_t AFT2InGasSnsrPwrSupply;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates when the Aftertreatment 2 Outlet Gas Sensor driver output is being driven.  On means the ECU is powering the Aftertreatment 2 Intake Gas Sensor.  Note that the ECU is external to the sensor.  00 - Off  01 - On: The ECU ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On: The ECU is powering the Aftertreatment 2 Outlet Gas Sensor" 
  // 0 - "Off" 

  uint8_t AFT2OutGasSnsrPwrSupply;       //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EEC12_t;

// def @DSS CAN Message (419220990)
#define DSS_IDE (1U)
#define DSS_DLC (8U)
#define DSS_CANID (0x18FCCDFEU)
// -- Drive Strategy Status  Message from the tractor to the implement showing the current status of the Drive Strategy priority structure, which indicates the priority of the multiple powertrain functions.
typedef struct
{
  uint32_t framecnt;
} DSS_t;

// def @DSC CAN Message (419221246)
#define DSC_IDE (1U)
#define DSC_DLC (8U)
#define DSC_CANID (0x18FCCEFEU)
// -- Drive Strategy Command  Message from to the tractor used to alter the powertrain DriveStrategy priority structure, which determines the balance between fuel economy/consumption and the torque reserve of the engine.
typedef struct
{
  uint32_t framecnt;
} DSC_t;

// def @NSSR CAN Message (419221502)
#define NSSR_IDE (1U)
#define NSSR_DLC (8U)
#define NSSR_CANID (0x18FCCFFEU)
// -- NOx Sensor Self-Diagnosis Request  Request to initiate the self-diagnosis of the NOx sensors implemented in the system.  This request may be sent at any time, but should not be sent if the status parameter indicates the self-diagnosis is not ...
typedef struct
{

  // Signal to trigger the self-diagnosis of NOx sensor ATO1 (Aftertreatment Outlet Bank 1)  0000 Diagnostic mode disabled  0001 NOx Sensor ATO1 Self Diagnosis Request at Lambda=1.0  0010 NOx Sensor ATO1 Self Diagnosis Request at partial load  0011 NOx ...
  // 15 - "Not supported" 
  // 4 - "NOx Sensor ATO1 Self Diagnosis Request at After Run" 
  // 3 - "NOx Sensor ATO1 Self Diagnosis Request at fuel cut" 
  // 2 - "NOx Sensor ATO1 Self Diagnosis Request at partial load" 
  // 1 - "NOx Sensor ATO1 Self Diagnosis Request at Lambda=1.0" 
  // 0 - "Diagnostic mode disabled" 

  uint8_t AFT1OutNOxSnsrSelfDiagTrigger;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Signal to trigger the self-diagnosis of NOx sensor ATI1 (Aftertreatment Intake Bank 1)  0000 Diagnostic mode disabled  0001 NOx Sensor ATI1 Self Diagnosis Request at Lambda=1.0  0010 NOx Sensor ATI1 Self Diagnosis Request at partial load  0011 NOx ...
  // 2 - "NOx Sensor ATI1 Self Diagnosis Request at partial load" 
  // 1 - "NOx Sensor ATI1 Self Diagnosis Request at Lambda=1.0" 
  // 0 - "Diagnostic mode disabled" 
  // 15 - "Not supported" 
  // 4 - "NOx Sensor ATI1 Self Diagnosis Request at After Run" 
  // 3 - "NOx Sensor ATI1 Self Diagnosis Request at fuel cut" 

  uint8_t AFT1InNOxSnsrSelfDiagTrigger;    //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Signal to trigger the self-diagnosis of NOx sensor ATO2 (Aftertreatment Outlet Bank 2)  0000 Diagnostic mode disabled  0001 NOx Sensor ATO2 Self Diagnosis Request at Lambda=1.0  0010 NOx Sensor ATO2 Self Diagnosis Request at partial load  0011 NOx ...
  // 15 - "Not supported" 
  // 4 - "NOx Sensor ATO2 Self Diagnosis Request at After Run" 
  // 3 - "NOx Sensor ATO2 Self Diagnosis Request at fuel cut" 
  // 2 - "NOx Sensor ATO2 Self Diagnosis Request at partial load" 
  // 1 - "NOx Sensor ATO2 Self Diagnosis Request at Lambda=1.0" 
  // 0 - "Diagnostic mode disabled" 

  uint8_t AFT2OutNOxSnsrSelfDiagTrigger;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Signal to trigger the self-diagnosis of NOx sensor ATI2 (Aftertreatment Intake Bank 2)  0000 Diagnostic mode disabled  0001 NOx Sensor ATI2 Self Diagnosis Request at Lambda=1.0  0010 NOx Sensor ATI2 Self Diagnosis Request at partial load  0011 NOx ...
  // 15 - "Not supported" 
  // 4 - "NOx Sensor ATI2 Self Diagnosis Request at After Run" 
  // 3 - "NOx Sensor ATI2 Self Diagnosis Request at fuel cut" 
  // 2 - "NOx Sensor ATI2 Self Diagnosis Request at partial load" 
  // 1 - "NOx Sensor ATI2 Self Diagnosis Request at Lambda=1.0" 
  // 0 - "Diagnostic mode disabled" 

  uint8_t AFT2InNOxSnsrSelfDiagTrigger;    //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} NSSR_t;

// def @EPSI CAN Message (419221758)
#define EPSI_IDE (1U)
#define EPSI_DLC (8U)
#define EPSI_CANID (0x18FCD0FEU)
// -- Engine Particulate Sensor Information
// signal: @AFT1ParticulateSnsr
#define AFT1ParticulateSnsr_CovFactor 0.0125
#define AFT1ParticulateSnsr_CovS(x) ((uint16_t)((x / 0.0125)))
// signal: @AFT2ParticulateSnsr
#define AFT2ParticulateSnsr_CovFactor 0.0125
#define AFT2ParticulateSnsr_CovS(x) ((uint16_t)((x / 0.0125)))
// signal: @AFT1ParticulateSnsrCur
#define AFT1ParticulateSnsrCur_CovFactor 0.00390625
#define AFT1ParticulateSnsrCur_CovS(x) ((uint16_t)((x / 0.00390625)))
typedef struct
{

  // The particulate sensor measures the mass concentration of particulate matter in the exhaust downstream of the DPF in exhaust bank 1.
  uint16_t AFT1ParticulateSnsr;          //      Bits=16.  [ 0     , 803.1875 ]  Unit:'mg/m?' Factor= 0.0125

  // The particulate sensor measures the mass concentration of particulate matter in the exhaust downstream of the DPF in exhaust bank 2.
  uint16_t AFT2ParticulateSnsr;          //      Bits=16.  [ 0     , 803.1875 ]  Unit:'mg/m?' Factor= 0.0125

  // Raw aftertreatment 1 PM sensor electical current reading.
  uint16_t AFT1ParticulateSnsrCur;       //      Bits=16.  [ 0     , 127    ]  Unit:'?A'    Factor= 0.00390625
  uint32_t framecnt;
} EPSI_t;

// def @XCP_ID CAN Message (419222782)
#define XCP_ID_IDE (1U)
#define XCP_ID_DLC (8U)
#define XCP_ID_CANID (0x18FCD4FEU)
// -- XCP Get Slave ID  Used by the XCP master (tool) to identify all XCP slaves on the network.
typedef struct
{
  uint32_t framecnt;
} XCP_ID_t;

// def @AT1P1I CAN Message (419223038)
#define AT1P1I_IDE (1U)
#define AT1P1I_DLC (8U)
#define AT1P1I_CANID (0x18FCD5FEU)
#define AT1P1I_CYC (500U)
// -- Aftertreatment 1 Diesel Exhaust Fluid Pump 1 Information  Contains information on Diesel Exhaust Fluid Pumps
// signal: @Htr
#define Htr_CovFactor 0.4
#define Htr_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TwoMotorSpd
#define TwoMotorSpd_CovFactor 0.5
#define TwoMotorSpd_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // Percentage of heating applied to the aftertreatment 1 diesel exhaust fluid pump heater. A value of 0% means no heating applied, a value of 100% means full heating applied. The diesel exhaust fluid pump heater warms the diesel exhaust fluid in the ...
  uint8_t Htr;                           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Rotational speed of the motor driving the second pump for the diesel exhaust fluid used in aftertreatment system 1 (exhaust bank 1).
  uint16_t TwoMotorSpd;                  //      Bits=16.  [ 0     , 32127.5 ]  Unit:'rpm'   Factor= 0.5   
  uint32_t framecnt;
} AT1P1I_t;

// def @AT1DPF2S5 CAN Message (419223294)
#define AT1DPF2S5_IDE (1U)
#define AT1DPF2S5_DLC (8U)
#define AT1DPF2S5_CANID (0x18FCD6FEU)
#define AT1DPF2S5_CYC (1000U)
// -- Aftertreatment 1 Diesel Particulate Filter 2 Soot 5  Diesel particulate filter soot parameters for the aftertreatment 1 diesel particulate filter 2.
// signal: @SnsrAnalysisFreq3
#define SnsrAnalysisFreq3_CovFactor 0.1
#define SnsrAnalysisFreq3_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SnsrFreq3SootSignal
#define SnsrFreq3SootSignal_CovFactor 0.0025
#define SnsrFreq3SootSignal_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @SnsrAnalysisFreq4
#define SnsrAnalysisFreq4_CovFactor 0.1
#define SnsrAnalysisFreq4_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SnsrFreq4SootSignal
#define SnsrFreq4SootSignal_CovFactor 0.0025
#define SnsrFreq4SootSignal_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // The analysis frequency associated with the frequency 3 soot signal for the diesel particulate filter 2 soot sensor.  See SPN 5646.
  uint16_t SnsrAnalysisFreq3;            //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   

  // The soot signal attenuation measurement for analysis frequency 3 for the diesel particulate filter 2 soot sensor.  See SPN 5646.
  uint16_t SnsrFreq3SootSignal;          //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // The analysis frequency associated with the frequency 4 soot signal for the diesel particulate filter 2 soot sensor.  See SPN 5647.
  uint16_t SnsrAnalysisFreq4;            //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   

  // The soot signal attenuation measurement for analysis frequency 4 for the diesel particulate filter 2 soot sensor.  See SPN 5647.
  uint16_t SnsrFreq4SootSignal;          //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} AT1DPF2S5_t;

// def @AT1DPF2S4 CAN Message (419223550)
#define AT1DPF2S4_IDE (1U)
#define AT1DPF2S4_DLC (8U)
#define AT1DPF2S4_CANID (0x18FCD7FEU)
#define AT1DPF2S4_CYC (1000U)
// -- Aftertreatment 1 Diesel Particulate Filter 2 Soot 4  This message is used report the analysis frequency and associated soot sensor signal data for two of the requested analysis frequencies for aftertreatment 1 diesel particulate filter 2.
// signal: @SnsrAnalysisFreq1
#define SnsrAnalysisFreq1_CovFactor 0.1
#define SnsrAnalysisFreq1_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SnsrFreq1SootSignal
#define SnsrFreq1SootSignal_CovFactor 0.0025
#define SnsrFreq1SootSignal_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @SnsrAnalysisFreq2
#define SnsrAnalysisFreq2_CovFactor 0.1
#define SnsrAnalysisFreq2_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SnsrFreq2SootSignal
#define SnsrFreq2SootSignal_CovFactor 0.0025
#define SnsrFreq2SootSignal_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // The analysis frequency associated with the frequency 1 soot signal for the diesel particulate filter 2 soot sensor.  See SPN 5644.
  uint16_t SnsrAnalysisFreq1;            //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   

  // The soot signal attenuation measurement for analysis frequency 1 for the diesel particulate filter 2 soot sensor.  See SPN 5644.
  uint16_t SnsrFreq1SootSignal;          //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // The analysis frequency associated with the frequency 2 soot signal for the diesel particulate filter 2 soot sensor.  See SPN 5645.
  uint16_t SnsrAnalysisFreq2;            //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   

  // The soot signal attenuation measurement for analysis frequency 2 for the diesel particulate filter 2 soot sensor.  See SPN 5645.
  uint16_t SnsrFreq2SootSignal;          //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} AT1DPF2S4_t;

// def @AT1DPF2S3 CAN Message (419223806)
#define AT1DPF2S3_IDE (1U)
#define AT1DPF2S3_DLC (8U)
#define AT1DPF2S3_CANID (0x18FCD8FEU)
#define AT1DPF2S3_CYC (1000U)
// -- Aftertreatment 1 Diesel Particulate Filter 2 Soot 3  This message is used to specify up to 4 soot sensor analysis frequencies to request the soot sensor signal data associated with those analysis frequencies for aftertreatment 1 diesel particulate ...
// signal: @SnsrAnalysisReqFreq1
#define SnsrAnalysisReqFreq1_CovFactor 0.1
#define SnsrAnalysisReqFreq1_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SnsrAnalysisReqFreq2
#define SnsrAnalysisReqFreq2_CovFactor 0.1
#define SnsrAnalysisReqFreq2_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SnsrAnalysisReqFreq3
#define SnsrAnalysisReqFreq3_CovFactor 0.1
#define SnsrAnalysisReqFreq3_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SnsrAnalysisReqFreq4
#define SnsrAnalysisReqFreq4_CovFactor 0.1
#define SnsrAnalysisReqFreq4_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // First requested analysis frequency for the diesel particulate filter 2 soot sensor.
  uint16_t SnsrAnalysisReqFreq1;         //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   

  // Second requested analysis frequency for the diesel particulate filter 2 soot sensor.
  uint16_t SnsrAnalysisReqFreq2;         //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   

  // Third requested analysis frequency for the diesel particulate filter 2 soot sensor.
  uint16_t SnsrAnalysisReqFreq3;         //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   

  // Fourth requested analysis frequency for the diesel particulate filter 2 soot sensor.
  uint16_t SnsrAnalysisReqFreq4;         //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   
  uint32_t framecnt;
} AT1DPF2S3_t;

// def @AT1DPF1S5 CAN Message (419224062)
#define AT1DPF1S5_IDE (1U)
#define AT1DPF1S5_DLC (8U)
#define AT1DPF1S5_CANID (0x18FCD9FEU)
#define AT1DPF1S5_CYC (1000U)
// -- Aftertreatment 1 Diesel Particulate Filter 1 Soot 5  This message is used report the analysis frequency and associated soot sensor signal data for two of the requested analysis frequencies for the aftertreatment 1 diesel particulate filter 1.
// signal: @SnsrAnalysisFreq3
#define SnsrAnalysisFreq3_CovFactor 0.1
#define SnsrAnalysisFreq3_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SnsrFreq3SootSignal
#define SnsrFreq3SootSignal_CovFactor 0.0025
#define SnsrFreq3SootSignal_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @SnsrAnalysisFreq4
#define SnsrAnalysisFreq4_CovFactor 0.1
#define SnsrAnalysisFreq4_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SnsrFreq4SootSignal
#define SnsrFreq4SootSignal_CovFactor 0.0025
#define SnsrFreq4SootSignal_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // The analysis frequency associated with the frequency 3 soot signal for the diesel particulate filter 1 soot sensor.  See SPN 5634.
  uint16_t SnsrAnalysisFreq3;            //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   

  // The soot signal attenuation measurement for analysis frequency 3 for the diesel particulate filter 1 soot sensor.  See SPN 5634.
  uint16_t SnsrFreq3SootSignal;          //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // The analysis frequency associated with the frequency 4 soot signal for the diesel particulate filter 1 soot sensor.  See SPN 5635.
  uint16_t SnsrAnalysisFreq4;            //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   

  // The soot signal attenuation measurement for analysis frequency 4 for the diesel particulate filter 1 soot sensor.  See SPN 5635.
  uint16_t SnsrFreq4SootSignal;          //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} AT1DPF1S5_t;

// def @AT1DPF1S4 CAN Message (419224318)
#define AT1DPF1S4_IDE (1U)
#define AT1DPF1S4_DLC (8U)
#define AT1DPF1S4_CANID (0x18FCDAFEU)
#define AT1DPF1S4_CYC (1000U)
// -- Aftertreatment 1 Diesel Particulate Filter 1 Soot 4  This message is used report the analysis frequency and associated soot sensor signal data for two of the requested analysis frequencies for the aftertreatment 1 diesel particulate filter 1.
// signal: @SnsrAnalysisFreq1
#define SnsrAnalysisFreq1_CovFactor 0.1
#define SnsrAnalysisFreq1_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SnsrFreq1SootSignal
#define SnsrFreq1SootSignal_CovFactor 0.0025
#define SnsrFreq1SootSignal_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @SnsrAnalysisFreq2
#define SnsrAnalysisFreq2_CovFactor 0.1
#define SnsrAnalysisFreq2_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SnsrFreq2SootSignal
#define SnsrFreq2SootSignal_CovFactor 0.0025
#define SnsrFreq2SootSignal_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // The analysis frequency associated with the frequency 1 soot signal for the diesel particulate filter 1 soot sensor.  See SPN 5632.
  uint16_t SnsrAnalysisFreq1;            //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   

  // The soot signal attenuation measurement for analysis frequency 1 for the diesel particulate filter 1 soot sensor.  See SPN 5632.
  uint16_t SnsrFreq1SootSignal;          //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // The analysis frequency associated with the frequency 2 soot signal for the diesel particulate filter 1 soot sensor.  See SPN 5633.
  uint16_t SnsrAnalysisFreq2;            //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   

  // The soot signal attenuation measurement for analysis frequency 2 for the diesel particulate filter 1 soot sensor.  See SPN 5633.
  uint16_t SnsrFreq2SootSignal;          //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} AT1DPF1S4_t;

// def @AT1DPF1S3 CAN Message (419224574)
#define AT1DPF1S3_IDE (1U)
#define AT1DPF1S3_DLC (8U)
#define AT1DPF1S3_CANID (0x18FCDBFEU)
#define AT1DPF1S3_CYC (1000U)
// -- Aftertreatment 1 Diesel Particulate Filter 1 Soot 3  This message is used to specify up to 4 soot sensor analysis frequencies to request the soot sensor signal data associated with those analysis frequencies for aftertreatment 1 diesel particulate ...
// signal: @SnsrAnalysisReqFreq1
#define SnsrAnalysisReqFreq1_CovFactor 0.1
#define SnsrAnalysisReqFreq1_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SnsrAnalysisReqFreq2
#define SnsrAnalysisReqFreq2_CovFactor 0.1
#define SnsrAnalysisReqFreq2_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SnsrAnalysisReqFreq3
#define SnsrAnalysisReqFreq3_CovFactor 0.1
#define SnsrAnalysisReqFreq3_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SnsrAnalysisReqFreq4
#define SnsrAnalysisReqFreq4_CovFactor 0.1
#define SnsrAnalysisReqFreq4_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // First requested analysis frequency for the diesel particulate filter 1 soot sensor.
  uint16_t SnsrAnalysisReqFreq1;         //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   

  // Second requested analysis frequency for the diesel particulate filter 1 soot sensor.
  uint16_t SnsrAnalysisReqFreq2;         //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   

  // Third requested analysis frequency for the diesel particulate filter 1 soot sensor.
  uint16_t SnsrAnalysisReqFreq3;         //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   

  // Fourth requested analysis frequency for the diesel particulate filter 1 soot sensor.
  uint16_t SnsrAnalysisReqFreq4;         //      Bits=16.  [ 0     , 6425.5 ]  Unit:'MHz'   Factor= 0.1   
  uint32_t framecnt;
} AT1DPF1S3_t;

// def @CCVS3 CAN Message (419224830)
#define CCVS3_IDE (1U)
#define CCVS3_DLC (8U)
#define CCVS3_CANID (0x18FCDCFEU)
#define CCVS3_CYC (1000U)
// -- Cruise Control / Vehicle Speed 3  Cruise Control / Vehicle Speed 3
// signal: @CruiseCtrlSetSpeed
#define CruiseCtrlSetSpeed_CovFactor 0.00390625
#define CruiseCtrlSetSpeed_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @CruiseCtrlSpeed
#define CruiseCtrlSpeed_CovFactor 0.00390625
#define CruiseCtrlSpeed_CovS(x) ((uint16_t)((x / 0.00390625)))
typedef struct
{

  // This parameter is used to indicate an application's state of readiness for responding to commands from an adaptive cruise control system controller.  00 - Off -- Cruise Control System is not configured to accept commands from an adaptive cruise ...
  // 3 - "Not Available/Not Supported" 
  // 2 - "Error Condition" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t AdptiveCruiseCtrlReadinessStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the current state of the cruise control system due to the Cruise Control System Commands, which include Cruise Control Disable Command (SPN 5603), Cruise Control Resume Command (SPN 5604), and Cruise Control Pause Command (SPN 5605).  000 ...
  // 7 - "Not Supported" 
  // 4 - "Cruise control device has received a Cruise Control Resume Command" 
  // 3 - "Cruise control has been re-activated by Cruise Control Resume Command" 
  // 2 - "Cruise control  has been disabled by Cruise Control Pause Command" 
  // 1 - "Cruise control has been disabled by Cruise Control Disable Command" 
  // 0 - "No Cruise Control System Command" 

  uint8_t CruiseCtrlSystemCmdState;           //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // This parameter indicates if the cruise control algorithm is currently adding the value in Predictive Cruise Control Set Speed Offset (SPN 7316) to the Cruise Control Set Speed (SPN 86 or SPN 6809) for its set point. The final set point will be ...
  // 3 - "Not available" 
  // 2 - "SAE Reserved" 
  // 1 - "Cruise Control Speed, SPN 7319) includes Predictive Cruise Control Set Speed Offset" 
  // 0 - "Cruise Control Speed, SPN 7319) does not include Predictive Cruise Control Set Speed Offset" 

  uint8_t PrdctvCrsCtrlStSpeedOffsetStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The source address of the SAE J1939 device that is currently sending the Cruise Control Disable Command (SPN 5603).  If there are multiple devices sending Cruise Control Disable Command with a value of 01, then the value transmitted for this ...
  uint8_t SrcAddrssOfCntrllngDvcFrDsblngCr;   //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // The source address of the SAE J1939 device that is currently sending the Cruise Control Pause Command (SPN 5605).  If there are multiple devices sending Cruise Control Pause Command with a value of 01, then the value transmitted for this parameter ...
  uint8_t SrcAddrssOfCntrllngDvcFrPsngCrsC;   //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Advanced emergency braking systems (AEBS) will limit the engine torque via TSC1 during warning and braking phases. Therefore the engine controller gives a feedback to the AEBS if it is configured and able to obey these limitation commands.  00 - Off ...
  // 3 - "Not Available/Not Supported" 
  // 2 - "Condition exists that prevents system from responding to AEBS commands even though it is configured" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t AEBSReadinessState;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Value of set (chosen) velocity of velocity control system. See SPN 86 for an alternate resolution.  If an algorithm that can modify the cruise control set point exists in the system, such as Predictive Cruise Control or Adaptive Cruise Control, then ...
  uint16_t CruiseCtrlSetSpeed;                //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/h'  Factor= 0.00390625

  // This parameter is the vehicle speed that the cruise control algorithm is currently using as its cruise control set point.  Cruise Control Speed (SPN 7319) will include the effects of other algorithms, such as Predictive Cruise Control, Adaptive ...
  uint16_t CruiseCtrlSpeed;                   //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/h'  Factor= 0.00390625
  uint32_t framecnt;
} CCVS3_t;

// def @AT2AC3 CAN Message (419225086)
#define AT2AC3_IDE (1U)
#define AT2AC3_DLC (8U)
#define AT2AC3_CANID (0x18FCDDFEU)
#define AT2AC3_CYC (500U)
// -- Aftertreatment 2 Air Control 3  This PGN contains information about the Aftertreatment 2 Air Control.  NOTE: This message will be transmitted by the engine or aftertreatment controller. Other aftertreatment air control information could be added in ...
// signal: @SecondAirAbsPress
#define SecondAirAbsPress_CovFactor 0.1
#define SecondAirAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Absolute pressure of the secondary air for aftertreatment 2. Secondary air is air provided to the exhaust system (per SAE J2403).    For gage pressure, see SPN 3838.
  uint16_t SecondAirAbsPress;            //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} AT2AC3_t;

// def @AT1AC3 CAN Message (419225342)
#define AT1AC3_IDE (1U)
#define AT1AC3_DLC (8U)
#define AT1AC3_CANID (0x18FCDEFEU)
#define AT1AC3_CYC (500U)
// -- Aftertreatment 1 Air Control 3  This PGN contains information about the Aftertreatment 1 Air Control.  NOTE: This message will be transmitted by the engine or aftertreatment controller. Other aftertreatment air control information could be added in ...
// signal: @SecondAirAbsPress
#define SecondAirAbsPress_CovFactor 0.1
#define SecondAirAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Absolute pressure of the secondary air for aftertreatment 1. Secondary air is air provided to the exhaust system (per SAE J2403).    For gage pressure, see SPN 3837.
  uint16_t SecondAirAbsPress;            //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} AT1AC3_t;

// def @EFL_P12 CAN Message (419225598)
#define EFL_P12_IDE (1U)
#define EFL_P12_DLC (8U)
#define EFL_P12_CANID (0x18FCDFFEU)
#define EFL_P12_CYC (500U)
// -- Engine Fluid Level/Pressure 12  12th PGN which identifies parameters that are either measuring various pressures within the engine or identifying engine fluid levels
// signal: @EngFuelDeliveryAbsPress
#define EngFuelDeliveryAbsPress_CovFactor 4
#define EngFuelDeliveryAbsPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @EngFilteredFuelDeliveryPress
#define EngFilteredFuelDeliveryPress_CovFactor 4
#define EngFilteredFuelDeliveryPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @EngFilteredFuelDeliveryAbsPress
#define EngFilteredFuelDeliveryAbsPress_CovFactor 4
#define EngFilteredFuelDeliveryAbsPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @EngFuelReturnPress
#define EngFuelReturnPress_CovFactor 1.64
#define EngFuelReturnPress_CovS(x) ((int16_t)((x / 1.64) + 4))
// signal: @ThrottleVlv2DiffPress
#define ThrottleVlv2DiffPress_CovFactor 0.1
#define ThrottleVlv2DiffPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngFuelSupplyPumpIntakeAbsPress
#define EngFuelSupplyPumpIntakeAbsPress_CovFactor 5
#define EngFuelSupplyPumpIntakeAbsPress_CovS(x) ((uint8_t)((x / 5)))
typedef struct
{

  // Absolute pressure of fuel in system as delivered from supply pump to the injection pump.  See also SPN 94 for Fuel Delivery Pressure (Gage).
  uint8_t EngFuelDeliveryAbsPress;           //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Gage pressure of fuel in system as delivered from supply pump to the injection pump after the pressure side fuel filter.  See SPN 5580 for absolute pressure of fuel in system after the pressure side fuel filter.
  uint8_t EngFilteredFuelDeliveryPress;      //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Absolute pressure of fuel in system as delivered from supply pump to the injection pump after the pressure side fuel filter.  See SPN 5579 for gage pressure of fuel in system after the pressure side fuel filter.
  uint8_t EngFilteredFuelDeliveryAbsPress;   //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // The estimated percentage relative to the useful life of the engine fuel filter.  This is not a calculation of the physical restriction of the filter.  0% is typical of a new filter.  100% is typical of an end of life filter, the filter should be ...
  uint8_t EngFuelFilterDegradation;          //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Used to read fuel (or gas) pressure passing through the return line.
  int16_t EngFuelReturnPress;                //      Bits=08.  [ -7    , 403    ]  Unit:'kPa'   Offset= -7        Factor= 1.64  

  // The differential pressure between the intake and outlet of the throttle valve 2 (SPN 3673). The differential pressure is measured from the intake with respect to the outlet of the throttle valve.
  uint16_t ThrottleVlv2DiffPress;            //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Absolute pressure of fuel at the fuel supply pump intake. See Figures SPN16_A & SPN16_B. See SPN 1381 for alternate resolution.    Engine Fuel Supply Pump Intake Absolute Pressure (Extended Range)
  uint8_t EngFuelSupplyPumpIntakeAbsPress;   //      Bits=08.  [ 0     , 1250   ]  Unit:'kPa'   Factor= 5     
  uint32_t framecnt;
} EFL_P12_t;

// def @DPFC2 CAN Message (419225854)
#define DPFC2_IDE (1U)
#define DPFC2_DLC (8U)
#define DPFC2_CANID (0x18FCE0FEU)
#define DPFC2_CYC (100U)
// -- Diesel Particulate Filter Control 2  The purpose of this PGN is to group parameters about the diesel particulate filter regeneration control.
// signal: @AFT1DPFInTempSetPoint
#define AFT1DPFInTempSetPoint_CovFactor 0.03125
#define AFT1DPFInTempSetPoint_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @RelativeUnburnedFuelMassFromEng
#define RelativeUnburnedFuelMassFromEng_CovFactor 0.0025
#define RelativeUnburnedFuelMassFromEng_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @AFT1FuelMassRate
#define AFT1FuelMassRate_CovFactor 0.05
#define AFT1FuelMassRate_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @AFT2FuelMassRate
#define AFT2FuelMassRate_CovFactor 0.05
#define AFT2FuelMassRate_CovS(x) ((uint16_t)((x / 0.05)))
typedef struct
{

  // Set point temperature for the particulate filter (DPF) regeneration at the intake to the DPF for Exhaust bank 1.
  int32_t AFT1DPFInTempSetPoint;             //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // The unburned amount of diesel fuel coming out of the engine. This fuel increases the temperature while oxidated in the DOC. Therefore, this amount of fuel also needs to be taken into account of the HCD temperature controller.
  uint16_t RelativeUnburnedFuelMassFromEng;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Mass rate of total fuel being delivered to aftertreatment 1 for DPF regeneration.
  uint16_t AFT1FuelMassRate;                 //      Bits=16.  [ 0     , 3212.75 ]  Unit:'g/min' Factor= 0.05  

  // Mass rate of total fuel being delivered to Atertreatment 2 for DPF regeneration.
  uint16_t AFT2FuelMassRate;                 //      Bits=16.  [ 0     , 3212.75 ]  Unit:'g/min' Factor= 0.05  
  uint32_t framecnt;
} DPFC2_t;

// def @LFE2 CAN Message (419226110)
#define LFE2_IDE (1U)
#define LFE2_DLC (8U)
#define LFE2_CANID (0x18FCE1FEU)
#define LFE2_CYC (100U)
// -- Fuel Economy 2 (Liquid)
// signal: @HighResolutionEngFuelRate
#define HighResolutionEngFuelRate_CovFactor 0.001
#define HighResolutionEngFuelRate_CovS(x) ((uint32_t)((x / 0.001)))
// signal: @EngDieselFuelDemandRate
#define EngDieselFuelDemandRate_CovFactor 0.05
#define EngDieselFuelDemandRate_CovS(x) ((uint16_t)((x / 0.05)))
typedef struct
{

  // Amount of fuel consumed by engine per unit of time.      NOTE - See SPN 183 for alternate resolution.
  uint32_t HighResolutionEngFuelRate;    //      Bits=32.  [ 0     , 4211081.215 ]  Unit:'L/h'   Factor= 0.001 

  // Amount of diesel fuel that would be consumed by an engine per unit of time if it were not substituting gaseous fuel.  This parameter is the sum of SPN 183 and the amount of diesel fuel that is being displaced by gaseous fuel.  If the engine is not ...
  uint16_t EngDieselFuelDemandRate;      //      Bits=16.  [ 0     , 3212.75 ]  Unit:'L/h'   Factor= 0.05  
  uint32_t framecnt;
} LFE2_t;

// def @SFS CAN Message (419226366)
#define SFS_IDE (1U)
#define SFS_DLC (8U)
#define SFS_CANID (0x18FCE2FEU)
#define SFS_CYC (1000U)
// -- Supplemental Fan Status  The status of Supplemental Fan. This is a supplemental fan used for additional cooling beyond that of the primary cooling fan system. For example, this fan could be used to provide additional cooling to an aftertreatment ...
// signal: @SupplementalFanCtrlECUTemp
#define SupplementalFanCtrlECUTemp_CovFactor 1
#define SupplementalFanCtrlECUTemp_CovS(x) ((int16_t)(x + 40))
// signal: @SupplementalFanSpeed
#define SupplementalFanSpeed_CovFactor 0.5
#define SupplementalFanSpeed_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @SupplementalFanCurrent
#define SupplementalFanCurrent_CovFactor 1
#define SupplementalFanCurrent_CovS(x) ((int16_t)(x + 125))
// signal: @SupplementalFanPower
#define SupplementalFanPower_CovFactor 0.5
#define SupplementalFanPower_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // Enable/Disable Status of Supplemental Fan.    00   Disabled  01   Enabled  10   Error  11   Not available/Not installed
  // 3 - "Not available/Not installed" 
  // 2 - "Error" 
  // 1 - "Enabled" 
  // 0 - "Disabled" 

  uint8_t SupplementalFanEnableStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Rotational Direction of Supplemental Fan. Fan could be spinning forward or reverse.    00   Forward  01   Reverse  10   Error  11   Not available/Not installed
  // 3 - "Not available/Not installed" 
  // 2 - "Error" 
  // 1 - "Reverse" 
  // 0 - "Forward" 

  uint8_t SupplementalFanDirectionStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the rotational velocity of Supplemental Fan. Used to indicate if the fan is spinning at the desired speed. If fan is not able to obtain the commanded speed, velocity error is indicated. If fan is unable to spin, the fan is in Fan Stall ...
  // 3 - "Fan Spin Down" 
  // 2 - "Fan Spin Up" 
  // 1 - "Velocity Error " 
  // 0 - "At Velocity" 
  // 15 - "Not available" 
  // 14 - "Error" 
  // 4 - "Fan Stall" 

  uint8_t SupplementalFanVelocityStatus;    //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Internal Controller Temperature Status of Supplemental Fan.    000   High most severe   001   High Least severe   010   In Range   011   Low Least severe   100   Low Most severe   101   Not Defined   110   Error   111   Not available
  // 7 - "Not available" 
  // 6 - "Error " 
  // 5 - "Not Defined " 
  // 4 - "Low Most severe " 
  // 3 - "Low Least severe " 
  // 2 - "In Range " 
  // 1 - "High Least severe " 
  // 0 - "High most severe " 

  uint8_t SupplementalFanCtrlTempStatus;    //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The drive status of the Supplemental Fan. This status parameter indicates the overall health of the fan drive. It will indicate that the fan is working OK or if there is an internal fault such as open winding or internal short circuit.  0000 ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 5 - "Uncontrolled Shutdown Active = Actuator current is off so it is limp" 
  // 4 - "Controlled Shutdown Active = Driving to the default position" 
  // 3 - "Derate Active = Torque output reduced due to environmental conditions" 
  // 2 - "Alarm High Severity = Functional but transient performance may be reduced" 
  // 1 - "Alarm = Fully operational but needs service" 
  // 0 - "Normal = OK" 

  uint8_t SupplementalFanDriveStatus;       //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Measured temperature of Supplemental Fan Controller ECU.
  int16_t SupplementalFanCtrlECUTemp;       //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Measured speed of supplemental fan.
  uint16_t SupplementalFanSpeed;            //      Bits=16.  [ 0     , 32127.5 ]  Unit:'rpm'   Factor= 0.5   

  // Measured electrical current of supplemental fan drive.
  int16_t SupplementalFanCurrent;           //      Bits=08.  [ -125  , 125    ]  Unit:'A'     Offset= -125     

  // Estimated Power output of Supplemental Fan
  uint16_t SupplementalFanPower;            //      Bits=16.  [ 0     , 32127.5 ]  Unit:'W'     Factor= 0.5   
  uint32_t framecnt;
} SFS_t;

// def @EFP CAN Message (419226878)
#define EFP_IDE (1U)
#define EFP_DLC (8U)
#define EFP_CANID (0x18FCE4FEU)
#define EFP_CYC (30000U)
// -- Engine Fuel Properties  Engine Fuel Properties
// signal: @EngFuelDynamicViscosity
#define EngFuelDynamicViscosity_CovFactor 0.015625
#define EngFuelDynamicViscosity_CovS(x) ((uint16_t)((x / 0.015625)))
// signal: @EngFuelDensity
#define EngFuelDensity_CovFactor 3.052E-05
#define EngFuelDensity_CovS(x) ((uint16_t)((x / 3.052E-05)))
// signal: @EngFuelDielectricity
#define EngFuelDielectricity_CovFactor 0.0001220703125
#define EngFuelDielectricity_CovS(x) ((uint16_t)((x / 0.0001220703125)))
// signal: @EngFuelTemp
#define EngFuelTemp_CovFactor 0.03125
#define EngFuelTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Dynamic viscosity of engine fuel
  uint16_t EngFuelDynamicViscosity;      //      Bits=16.  [ 0     , 1003.984375 ]  Unit:'Cp'    Factor= 0.015625

  // Density of engine fuel
  uint16_t EngFuelDensity;               //      Bits=16.  [ 0     , 1.961  ]  Unit:'g/cc'  Factor= 3.052E-05

  // Engine fuel relative dielectricity.
  uint16_t EngFuelDielectricity;         //      Bits=16.  [ 0     , 7.844  ]  Unit:''      Factor= 0.0001220703125

  // Engine Fuel Temperature of the first fuel type. See also SPNs 174 or 3468 for alternate resolution.
  int32_t EngFuelTemp;                   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} EFP_t;

// def @HOP CAN Message (419227134)
#define HOP_IDE (1U)
#define HOP_DLC (8U)
#define HOP_CANID (0x18FCE5FEU)
#define HOP_CYC (30000U)
// -- Hydraulic Oil Properties  Hydraulic Oil Properties.  This hydraulic fluid is for the entire hydraulics system of a piece of equipment.
// signal: @HydOilDynamicViscosity
#define HydOilDynamicViscosity_CovFactor 0.015625
#define HydOilDynamicViscosity_CovS(x) ((uint16_t)((x / 0.015625)))
// signal: @HydOilDensity
#define HydOilDensity_CovFactor 3.052E-05
#define HydOilDensity_CovS(x) ((uint16_t)((x / 3.052E-05)))
// signal: @HydOilRelativeDielectricity
#define HydOilRelativeDielectricity_CovFactor 0.0001220703125
#define HydOilRelativeDielectricity_CovS(x) ((uint16_t)((x / 0.0001220703125)))
// signal: @HydOilTemp
#define HydOilTemp_CovFactor 0.03125
#define HydOilTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Dynamic viscosity of hydraulic oil.  This hydraulic fluid is for the entire hydraulics system of a piece of equipment.
  uint16_t HydOilDynamicViscosity;       //      Bits=16.  [ 0     , 1003.984375 ]  Unit:'Cp'    Factor= 0.015625

  // Density of hydraulic oil.  This hydraulic fluid is for the entire hydraulics system of a piece of equipment.
  uint16_t HydOilDensity;                //      Bits=16.  [ 0     , 1.961  ]  Unit:'g/cc'  Factor= 3.052E-05

  // Hydraulic oil relative dielectricity used to describe the hydraulic oil quality.  This hydraulic fluid is for the entire hydraulics system of a piece of equipment.
  uint16_t HydOilRelativeDielectricity;  //      Bits=16.  [ 0     , 7.844  ]  Unit:''      Factor= 0.0001220703125

  // Hydraulic Oil Temperature.  This hydraulic fluid is for the entire hydraulics system of a piece of equipment.
  int32_t HydOilTemp;                    //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} HOP_t;

// def @VLS2 CAN Message (419227390)
#define VLS2_IDE (1U)
#define VLS2_DLC (8U)
#define VLS2_CANID (0x18FCE6FEU)
#define VLS2_CYC (500U)
// -- Vehicle/Chassis Lubrication System 2  Reports vehicle/chassis lubrication systems status
typedef struct
{

  // Reports status of the ability to change the lubrication cycle mode.  Locking the lubrication mode would prevent the changing of the lubrication cycle mode, perhaps by an operator    00 - Not Locked  01 - Locked  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Locked" 
  // 0 - "Not Locked" 

  uint8_t LubricationCycleModeLockStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports the current lubrication cycle mode of the lubrication system  000 - Cycle mode # 1 (Lowest Lubrication Frequency)  001 - Cycle mode # 2  010 - Cycle mode # 3 (Highest Lubrication Frequency)  011 to 101 - Reserved  110 - Error  111 - Not ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 2 - "Cycle mode # 3" 
  // 1 - "Cycle mode # 2" 
  // 0 - "Cycle mode # 1" 

  uint8_t LubricationCycleModeStatus;       //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Reports the current operational mode status of the lubrication system.  Automatic is the normal operation mode of lubrication system. In this mode the operator has the privilege to change duty cycle mode, if the lubrication mode in not locked.  In ...
  // 7 - "Not Available" 
  // 6 - "Error" 
  // 5 - "Reserved" 
  // 4 - "Test Mode # 3" 
  // 3 - "Test Mode # 2" 
  // 2 - "Test Mode # 1" 
  // 1 - "Manual Service Mode" 
  // 0 - "Automatic Mode" 

  uint8_t LubricationOperationModeStatus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Reports the operational status of the lubrication system pump.  In the disabled state, the lubrication pump will not run a lubrication cycle.  In the enabled state, the lubrication system will perform normal operations.  00 - Disabled  01 - Enabled   ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Enabled" 
  // 0 - "Disabled" 

  uint8_t LubricationPumpEnableStatus;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports the status of the lubrication system reservior level.  The lubrication reservoir stores the grease for the lubrication system. The lubrication pump draws grease from this reservoir and pushes it into the vehicle/chassis joints  00 - ...
  // 3 - "Not available or not installed" 
  // 2 - "Error " 
  // 1 - "Reservoir Low" 
  // 0 - "Reservoir Not Low" 

  uint8_t LubricationReservoirLevel;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports the status of the lubrication activation clock.  00 - Paused  01 - Enabled  10 - Error  11 - Not available or not installed  Note:  In some vehicles or machines, lubrication is only required when the vehicle or machine is in certain state e ...
  // 3 - "Not available or not installed" 
  // 2 - "Error " 
  // 1 - "Enabled" 
  // 0 - "Paused " 

  uint8_t LubricationTimingCycleStatus;     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} VLS2_t;

// def @EC3 CAN Message (419227646)
#define EC3_IDE (1U)
#define EC3_DLC (8U)
#define EC3_CANID (0x18FCE7FEU)
#define EC3_CYC (5000U)
// -- Engine Configuration 3  The EC3 message contains a static engine friction torque map consisting of torque points that correspond to the speed points in the EC1 message.  A net brake torque map for the engine can be calculated by subtracting the ...
// signal: @EngFrctnPrcentTorqueAtIdlePoint1
#define EngFrctnPrcentTorqueAtIdlePoint1_CovFactor 1
#define EngFrctnPrcentTorqueAtIdlePoint1_CovS(x) ((int16_t)(x + 125))
// signal: @EngFrictionPercentTorquePoint2
#define EngFrictionPercentTorquePoint2_CovFactor 1
#define EngFrictionPercentTorquePoint2_CovS(x) ((int16_t)(x + 125))
// signal: @EngFrictionPercentTorquePoint3
#define EngFrictionPercentTorquePoint3_CovFactor 1
#define EngFrictionPercentTorquePoint3_CovS(x) ((int16_t)(x + 125))
// signal: @EngFrictionPercentTorquePoint4
#define EngFrictionPercentTorquePoint4_CovFactor 1
#define EngFrictionPercentTorquePoint4_CovS(x) ((int16_t)(x + 125))
// signal: @EngFrictionPercentTorquePoint5
#define EngFrictionPercentTorquePoint5_CovFactor 1
#define EngFrictionPercentTorquePoint5_CovS(x) ((int16_t)(x + 125))
// signal: @EngFrictionPercentTorquePoint6
#define EngFrictionPercentTorquePoint6_CovFactor 1
#define EngFrictionPercentTorquePoint6_CovS(x) ((int16_t)(x + 125))
// signal: @EngFrictionPercentTorquePoint7
#define EngFrictionPercentTorquePoint7_CovFactor 1
#define EngFrictionPercentTorquePoint7_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // The static portion of the friction torque at speed point 1 (SPN 188) of the engine torque map in the engine configuration message.  This parameter does not include Estimated Pumping - Percent Torque (SPN 5398) and is expected to change with ...
  int16_t EngFrctnPrcentTorqueAtIdlePoint1;   //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Offset= -125     

  // The static portion of the friction torque at speed point 2 (SPN 528) of the engine torque map in the engine configuration message.  This parameter does not include Estimated Pumping - Percent Torque (SPN 5398) and is expected to change with ...
  int16_t EngFrictionPercentTorquePoint2;     //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Offset= -125     

  // The static portion of the friction torque at speed point 3 (SPN 529) of the engine torque map in the engine configuration message.  This parameter does not include Estimated Pumping - Percent Torque (SPN 5398) and is expected to change with ...
  int16_t EngFrictionPercentTorquePoint3;     //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Offset= -125     

  // The static portion of the friction torque at speed point 4 (SPN 530) of the engine torque map in the engine configuration message.  This parameter does not include Estimated Pumping - Percent Torque (SPN 5398) and is expected to change with ...
  int16_t EngFrictionPercentTorquePoint4;     //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Offset= -125     

  // The static portion of the friction torque at speed point 5 (SPN 531) of the engine torque map in the engine configuration message.  This parameter does not include Estimated Pumping - Percent Torque (SPN 5398) and is expected to change with ...
  int16_t EngFrictionPercentTorquePoint5;     //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Offset= -125     

  // For engine configuration map modes 1 and 2, this is the static portion of the friction torque at speed point 6 (SPN 532) of the engine torque map.  For engine configuration map mode 3, this parameter is the static portion of the friction torque at ...
  int16_t EngFrictionPercentTorquePoint6;     //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Offset= -125     

  // The static portion of the friction torque at speed point 7 (SPN 533) of the engine torque map in the engine configuration message.  This parameter does not include Estimated Pumping - Percent Torque (SPN 5398) and is expected to change with ...
  int16_t EngFrictionPercentTorquePoint7;     //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Offset= -125     
  uint32_t framecnt;
} EC3_t;

// def @IVAC CAN Message (419227902)
#define IVAC_IDE (1U)
#define IVAC_DLC (8U)
#define IVAC_CANID (0x18FCE8FEU)
#define IVAC_CYC (500U)
// -- Intake Valve Actuation Control  Contains information about the intake valve actuation system control.
typedef struct
{

  // Indicates the current command to the solenoid that controls the intake valve actuation system oil pressure 1 valve. This valve opens or closes a connection from the intake valve actuation oil rail to tank.  00 off  01 on  10 reserved for SAE ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t IntkVlvActtnSystmOlPrss1SlndCtrl;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the current command to the solenoid that controls the intake valve actuation system oil pressure 2 valve. This valve opens or closes a connection from the intake valve actuation oil rail to tank.  00 off  01 on  10 reserved for SAE ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t IntkVlvActtnSystmOlPrss2SlndCtrl;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} IVAC_t;

// def @ARMSWIMC CAN Message (419228158)
#define ARMSWIMC_IDE (1U)
#define ARMSWIMC_DLC (8U)
#define ARMSWIMC_CANID (0x18FCE9FEU)
#define ARMSWIMC_CYC (100U)
// -- Armrest Switch Matrix Commands  Operator commands sent via the Armrest Switch Matrices.
typedef struct
{

  // Status of the first switch located in armrest 1.    00: Off  01: On  10: Reserved  11: Don't care/take no action
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Armrest1Switch1;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the second switch located in armrest 1.    00: Off  01: On  10: Reserved  11: Don't care/take no action
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Armrest1Switch2;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the first switch located in armrest 2.    00: Off  01: On  10: Reserved  11: Don't care/take no action
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Armrest2Switch1;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the second switch located in armrest 2.    00: Off  01: On  10: Reserved  11: Don't care/take no action
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t Armrest2Switch2;               //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} ARMSWIMC_t;

// def @AFT2NAI CAN Message (419228670)
#define AFT2NAI_IDE (1U)
#define AFT2NAI_DLC (8U)
#define AFT2NAI_CANID (0x18FCEBFEU)
#define AFT2NAI_CYC (1000U)
// -- Aftertreatment 2 NOx Adsorber Information  This message contains NOx adsorber information for aftertreatment system 2 (or bank 2).
typedef struct
{

  // Indicates whether the NOx adsorber regeneration in the second aftertreatment system is active or inactive    00  Inactive  01  Active  10  Error indicator  11  Not available
  // 3 - "Not available" 
  // 2 - "Error indicator" 
  // 1 - "Active" 
  // 0 - "Inactive" 

  uint8_t RegenStatus;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the NOx adsorber desulfation regeneration in the second aftertreatment system is active or inactive    00  Inactive  01  Active  10  Error indicator  11  Not available
  // 3 - "Not available" 
  // 2 - "Error indicator" 
  // 1 - "Active" 
  // 0 - "Inactive" 

  uint8_t DesulfationStatus;             //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} AFT2NAI_t;

// def @AFT1NAI CAN Message (419228926)
#define AFT1NAI_IDE (1U)
#define AFT1NAI_DLC (8U)
#define AFT1NAI_CANID (0x18FCECFEU)
#define AFT1NAI_CYC (1000U)
// -- Aftertreatment 1 NOx Adsorber Information  This message contains NOx adsorber information for aftertreatment system 1 (or bank 1).
typedef struct
{

  // Indicates whether the NOx adsorber regeneration in the first aftertreatment system is active or inactive.    00  Inactive  01  Active  10  Error indicator  11  Not available
  // 3 - "Not available" 
  // 2 - "Error indicator" 
  // 1 - "Active" 
  // 0 - "Inactive" 

  uint8_t RegenStatus;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the NOx adsorber desulfation regeneration in the first aftertreatment system is active or inactive    00  Inactive  01  Active  10  Error indicator  11  Not available
  // 3 - "Not available" 
  // 2 - "Error indicator" 
  // 1 - "Active" 
  // 0 - "Inactive" 

  uint8_t DesulfationStatus;             //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} AFT1NAI_t;

// def @AT2WUDOC CAN Message (419229182)
#define AT2WUDOC_IDE (1U)
#define AT2WUDOC_DLC (8U)
#define AT2WUDOC_CANID (0x18FCEDFEU)
#define AT2WUDOC_CYC (500U)
// -- Aftertreatment 2 Warm Up Diesel Oxidation Catalyst Information  This PGN contains information for the warm up oxidation catalytic converter in exhaust bank 2.
// signal: @InTemp
#define InTemp_CovFactor 0.03125
#define InTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @OutTemp
#define OutTemp_CovFactor 0.03125
#define OutTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of engine combustion byproducts entering the warm up Diesel Oxidation Catalyst in exhaust bank 2.  This diesel parameter should be used with engines fueled by diesel fuel (not gaseous fuel like natural gas or propane).  A separate ...
  int32_t InTemp;                        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of engine combustion byproducts leaving the warm up Diesel Oxidation Catalyst in exhaust bank 2.  This diesel parameter should be used with engines fueled by diesel fuel (not gaseous fuel like natural gas or propane).  A separate ...
  int32_t OutTemp;                       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} AT2WUDOC_t;

// def @EFS2 CAN Message (419229950)
#define EFS2_IDE (1U)
#define EFS2_DLC (8U)
#define EFS2_CANID (0x18FCF0FEU)
#define EFS2_CYC (500U)
// -- Engine Fuel/lube systems 2  Contains information on the engine fuel and lube system
// signal: @EngFuelFilterIntakeAbsPress
#define EngFuelFilterIntakeAbsPress_CovFactor 2
#define EngFuelFilterIntakeAbsPress_CovS(x) ((uint8_t)((x / 2)))
// signal: @FuelTankTransferPumpPress
#define FuelTankTransferPumpPress_CovFactor 0.1
#define FuelTankTransferPumpPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Absolute pressure of fuel at the intake of the fuel filter (suction side) located between the fuel tank and the fuel supply pump.  See Figures SPN16_A & SPN16_B.
  uint8_t EngFuelFilterIntakeAbsPress;   //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // The estimated percentage relative to the useful life of the engine fuel filter on the suction side which is located betwee the fuel tank and the fuel supply pump.  Note:  This is not a calculation of the physical restriction of the filter. 0% is ...
  uint8_t EngFuelFilterDegradation;      //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Operating state of the fuel tank transfer pump. The fuel tank transfer pump transfers fuel from the secondary fuel tank to the primary fuel tank.    00 = Off  01 = On  10 = Error  11 = Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t FuelTankTransferPump;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Gage pressure of the fuel in the system as delivered by the transfer pump.
  uint16_t FuelTankTransferPumpPress;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} EFS2_t;

// def @ETWAI CAN Message (419230206)
#define ETWAI_IDE (1U)
#define ETWAI_DLC (8U)
#define ETWAI_CANID (0x18FCF1FEU)
#define ETWAI_CYC (100U)
// -- Engine Turbocharger Wastegate Actuator and Exhaust Back Pressure Regulator Information  This PGN will be used to transmit  the Engine Turbocharger Wastegate and Exhaust Back Pressure Regulator Information.
// signal: @EngExhaustBackPressRegulatorPos
#define EngExhaustBackPressRegulatorPos_CovFactor 0.4
#define EngExhaustBackPressRegulatorPos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngTurboWastegateActuator1Temp
#define EngTurboWastegateActuator1Temp_CovFactor 1
#define EngTurboWastegateActuator1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngExhstBckPrssActtor1DesiredPos
#define EngExhstBckPrssActtor1DesiredPos_CovFactor 0.4
#define EngExhstBckPrssActtor1DesiredPos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngExhaustBackPressActuator1Temp
#define EngExhaustBackPressActuator1Temp_CovFactor 1
#define EngExhaustBackPressActuator1Temp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Used to identify the applicable J1939-73 FMI detected in the Engine Turbocharger Wastegate Actuator 2 by the manufacturers software. When there is no failure FMI 31 is transmitted. When there is multiple failures, the most severe is transmitted
  uint8_t EngTrbWstgtActtor2PreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the status of the Engine Turbocharger Wastegate Actuator 2 drive circuitry temperature.  Temperature excursions may affect the torque output.  000 - High most severe  001 - High Least severe  010 - In Range  011 - Low Least severe   ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Not Defined" 
  // 4 - "Low Most severe" 
  // 3 - "Low Least severe" 
  // 2 - "In Range" 
  // 1 - "High Least severe" 
  // 0 - "High most severe" 

  uint8_t EngTrbWstgateActuator2TempStatus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the status of Engine Turbocharger Wastegate Actuator 1.  0000 - Normal  0001 - Alarm (fully operational but needs service)  0010 - Alarm High Severity (functional but transient performance may be reduced)  0011 - Derate Active ...
  // 14 - "Error" 
  // 6 - "Calibration in Progress" 
  // 5 - "Uncontrolled Shutdown Active" 
  // 4 - "Controlled Shutdown Active" 
  // 3 - "Derate Active" 
  // 2 - "Alarm High Severity" 
  // 1 - "Alarm" 
  // 0 - "Normal" 

  uint8_t EngTrbWstgtActtr1OperationStatus;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Used to identify the status of Engine Turbocharger Wastegate Actuator 2.  0000 - Normal  0001 - Alarm (fully operational but needs service)  0010 - Alarm High Severity (functional but transient performance may be reduced)  0011 - Derate Active ...
  // 14 - "Error" 
  // 5 - "Uncontrolled Shutdown Active" 
  // 4 - "Controlled Shutdown Active" 
  // 3 - "Derate Active" 
  // 2 - "Alarm High Severity" 
  // 1 - "Alarm" 
  // 0 - "Normal" 

  uint8_t EngTrbWstgtActtr2OperationStatus;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The position of the Exhaust Pressure Regulator (EPR) expressed as a percentage of full travel.  One hundred percent means the regulator is fully closed, providing the maximum restriction to exhaust gas flow from the engine.  Zero percent means the ...
  uint8_t EngExhaustBackPressRegulatorPos;    //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Used to identify the applicable J1939-73 FMI detected in the Engine Exhaust Pressure Regulator (EPR) by the manufacturers software. When there is no failure, FMI 31 is transmitted. When there are multiple failures, the most severe is transmitted.
  uint8_t EngExhstBckPrssRgltrPrlminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the status of the Engine Exhaust Pressure Regulator (EPR) drive circuitry temperature. Temperature excursions may affect the torque output.  000 - High most severe  001 - High Least severe  010 - In Range  011 - Low Least severe   ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Not Defined" 
  // 4 - "Low Most severe" 
  // 3 - "Low Least severe" 
  // 2 - "In Range" 
  // 1 - "High Least severe" 
  // 0 - "High most severe" 

  uint8_t EngExhstBckPrssRglatorTempStatus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the status of Engine Exhaust Pressure Regulator.  0000 - Normal  0001 - Alarm (fully operational but needs service)  0010 - Alarm High Severity (functional but transient performance may be reduced)  0011 - Derate Active (torque ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 5 - "Uncontrolled Shutdown Active" 
  // 4 - "Controlled Shutdown Active" 
  // 3 - "Derate Active" 
  // 2 - "Alarm High Severity" 
  // 1 - "Alarm" 
  // 0 - "Normal" 

  uint8_t EngExhstBckPrssRgltrCtrlOprtnStt;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Temperature of the Engine Turbocharger Wastegate Actuator 1 drive circuitry.  Temperature excursions may affect the torque output.
  int16_t EngTurboWastegateActuator1Temp;     //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The requested position of the Engine Exhaust Pressure Actuator 1 by the engine ECU, where 0% represents fully closed and 100% represents fully open.    This is the position that the device is attempting to achieve.
  uint8_t EngExhstBckPrssActtor1DesiredPos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Temperature of the Engine Exhaust Pressure Actuator 1 drive circuitry.  Temperature excursions may affect the torque output.
  int16_t EngExhaustBackPressActuator1Temp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} ETWAI_t;

// def @EFTVI1 CAN Message (419230462)
#define EFTVI1_IDE (1U)
#define EFTVI1_DLC (8U)
#define EFTVI1_CANID (0x18FCF2FEU)
#define EFTVI1_CYC (100U)
// -- Engine Fuel/Throttle Valve Information 1  This PGN will be used to transmit the Feedback information from the Engine Throttle and Fuel Actuator.
// signal: @EngDesiredThrottleValve1Pos
#define EngDesiredThrottleValve1Pos_CovFactor 0.4
#define EngDesiredThrottleValve1Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngDesiredThrottleValve2Pos
#define EngDesiredThrottleValve2Pos_CovFactor 0.4
#define EngDesiredThrottleValve2Pos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // The desired position of the Throttle valve 1 (SPN 51) that is regulating the fluid, usually air/fuel mixture to the engine as commanded by the Engine Control unit.  0% represents no supply and 100% is full supply.  This is the position that the ...
  uint8_t EngDesiredThrottleValve1Pos;        //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Used to identify the applicable J1939-73 FMI detected in the engine throttle valve 1 (SPN 51) by the manufacturers software. When there is no failure FMI 31 is transmitted. When there is multiple failures, the most severe is transmitted.
  uint8_t EngThrottleValve1PreliminaryFMI;    //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the status of the engine throttle valve 1 (SPN 51) drive circuitry temperature.  Temperature excursions may affect the torque output.  000 - High most severe  001 - High Least severe  010 - In Range  011 - Low Least severe  100 - ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Not Defined" 
  // 4 - "Low Most severe" 
  // 3 - "Low Least severe" 
  // 2 - "In Range" 
  // 1 - "High Least severe" 
  // 0 - "High most severe" 

  uint8_t EngThrottleValve1TempStatus;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The desired position of the engine throttle valve 2 (SPN 3673) that is regulating the fluid, usually air/fuel mixture to the engine as commanded by the Engine Control Unit.  0% represents no supply and 100% is full supply.  This is the position that ...
  uint8_t EngDesiredThrottleValve2Pos;        //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Used to identify the applicable J1939-73 FMI detected in the engine throttle valve 2 (SPN 3673) by the manufacturers software. When there is no failure FMI 31 is transmitted. When there is multiple failures, the most severe is transmitted.
  uint8_t EngThrottleValve2PreliminaryFMI;    //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the status of the Engine throttle valve 2 (SPN 3673) drive circuitry temperature.  Temperature excursions may affect the torque output.  000 - High Most severe  001 - High Least severe  010 - In Range  011 - Low Least severe  100 - ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Not Defined" 
  // 4 - "Low Most severe" 
  // 3 - "Low Least severe" 
  // 2 - "In Range" 
  // 1 - "High Least severe" 
  // 0 - "High Most severe" 

  uint8_t EngThrottleValve2TempStatus;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the Engine Fuel Valve 1 by the manufacturers software. When there is no failure FMI 31 is transmitted. When there is multiple failures, the most severe is transmitted.
  uint8_t EngFuelValve1PreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the status of the Engine Fuel valve 1 drive circuitry temperature.  Temperature excursions may affect the torque output.  000 - High Most severe  001 - High Least severe  010 - In Range  011 - Low Least severe  100 - Low Most severe   ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Not Defined" 
  // 4 - "Low Most severe" 
  // 3 - "Low Least severe" 
  // 2 - "In Range" 
  // 1 - "High Least severe" 
  // 0 - "High Most severe" 

  uint8_t EngFuelValve1TempStatus;            //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the Engine Fuel Valve 2 by the manufacturers software. When there is no failure FMI 31 is transmitted. When there is multiple failures, the most severe is transmitted.
  uint8_t EngFuelValve2PreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the status of the Engine Fuel valve 2 drive circuitry temperature.  Temperature excursions may affect the torque output.  000 - High most severe  001 - High Least severe  010 - In Range  011 - Low Least severe  100 - Low Most severe   ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Not Defined" 
  // 4 - "Low Most severe" 
  // 3 - "Low Least severe" 
  // 2 - "In Range" 
  // 1 - "High Least severe" 
  // 0 - "High most severe" 

  uint8_t EngFuelValve2TempStatus;            //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the status of engine throttle valve 1 (SPN 51).  0000 - Normal  0001 - Alarm (fully operational but needs service)  0010 - Alarm High Severity (functional but transient performance may be reduced)  0011 - Derate Active (torque ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 6 - "Calibration in Progress" 
  // 5 - "Uncontrolled Shutdown Active" 
  // 4 - "Controlled Shutdown Active" 
  // 3 - "Derate Active" 
  // 2 - "Alarm High Severity" 
  // 1 - "Alarm" 
  // 0 - "Normal" 

  uint8_t EngThrottleValve1OperationStatus;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Used to identify the status of engine throttle valve 2 (SPN 3673).  0000 - Normal  0001 - Alarm (fully operational but needs service)  0010 - Alarm High Severity (functional but transient performance may be reduced)  0011 - Derate Active (torque ...
  // 14 - "Error" 
  // 5 - "Uncontrolled Shutdown Active" 
  // 4 - "Controlled Shutdown Active" 
  // 3 - "Derate Active" 
  // 2 - "Alarm High Severity" 
  // 1 - "Alarm" 
  // 0 - "Normal" 

  uint8_t EngThrottleValve2OperationStatus;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Used to identify the status of Engine Fuel Valve 1.  0000 - Normal  0001 - Alarm (fully operational but needs service)  0010 - Alarm High Severity (functional but transient performance may be reduced)  0011 - Derate Active (torque output reduced due ...
  // 14 - "Error" 
  // 6 - "Test Mode Active" 
  // 5 - "Uncontrolled Shutdown Active" 
  // 4 - "Controlled Shutdown Active" 
  // 3 - "Derate Active" 
  // 2 - "Alarm High Severity" 
  // 1 - "Alarm" 
  // 0 - "Normal" 

  uint8_t EngFuelValve1OperationStatus;       //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Used to identify the status of Engine Fuel Valve 2.  0000 - Normal  0001 - Alarm (fully operational but needs service)  0010 - Alarm High Severity (functional but transient performance may be reduced)  0011 - Derate Active (torque output reduced due ...
  // 14 - "Error" 
  // 6 - "Test Mode Active" 
  // 5 - "Uncontrolled Shutdown Active" 
  // 4 - "Controlled Shutdown Active" 
  // 3 - "Derate Active" 
  // 2 - "Alarm High Severity" 
  // 1 - "Alarm" 
  // 0 - "Normal" 

  uint8_t EngFuelValve2OperationStatus;       //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} EFTVI1_t;

// def @ETCBI CAN Message (419230718)
#define ETCBI_IDE (1U)
#define ETCBI_DLC (8U)
#define ETCBI_CANID (0x18FCF3FEU)
#define ETCBI_CYC (100U)
// -- Engine Turbocharger Compressor Bypass Information  This PGN will contain the Engine Turbocharger Compressor Bypass information
// signal: @EngTrbCmprssorBypassActuator2Pos
#define EngTrbCmprssorBypassActuator2Pos_CovFactor 0.4
#define EngTrbCmprssorBypassActuator2Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngDsrdTrbCmprssrBypssActtor2Pos
#define EngDsrdTrbCmprssrBypssActtor2Pos_CovFactor 0.4
#define EngDsrdTrbCmprssrBypssActtor2Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngTrbCmprssrBypassActuator1Temp
#define EngTrbCmprssrBypassActuator1Temp_CovFactor 1
#define EngTrbCmprssrBypassActuator1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngTrbCmprssrBypassActuator2Temp
#define EngTrbCmprssrBypassActuator2Temp_CovFactor 1
#define EngTrbCmprssrBypassActuator2Temp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Measures the position of the turbocharger compressor bypass actuator 2, where 0% represents bypass fully closed and 100% represents bypass fully open. Typically, the compressor bypass is used to lower the compressor outlet pressure and/or intake ...
  uint8_t EngTrbCmprssorBypassActuator2Pos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The desired position of the Engine Turbocharger Compressor Bypass actuator 2 by the engine ECU, where 0% represents bypass fully closed and 100% represents bypass fully open.    This is the position that the device is attempting to achieve.
  uint8_t EngDsrdTrbCmprssrBypssActtor2Pos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Used to identify the applicable J1939-73 FMI detected in the Engine Turbocharger Compressor Bypass Actuator 1 by the manufacturers software. When there is no failure FMI 31 is transmitted. When there is multiple failures, the most severe is ...
  uint8_t EngTrbCmprssrBypssActtr2PrlmnryF;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the status of the Engine Turbocharger Compresssor Bypass Actuator 2 drive circuitry temperature.  Temperature excursions may affect the torque output.  000 - High most severe  001 - High Least severe  010 - In Range  011 - Low Least ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Not Defined" 
  // 4 - "Low Most severe" 
  // 3 - "Low Least severe" 
  // 2 - "In Range" 
  // 1 - "High Least severe" 
  // 0 - "High most severe" 

  uint8_t EngTrbCmprssrBypssActtr2TmpSttus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the status of Engine Turbocharger Compressor Bypass Actuator 1.  0000 - Normal  0001 - Alarm (fully operational but needs service)  0010 - Alarm High Severity (functional but transient performance may be reduced)  0011 - Derate ...
  // 14 - "Error" 
  // 5 - "Uncontrolled Shutdown Active" 
  // 4 - "Controlled Shutdown Active" 
  // 3 - "Derate Active" 
  // 2 - "Alarm High Severity" 
  // 1 - "Alarm" 
  // 0 - "Normal" 

  uint8_t EngTrbCmprssrBypssActtr1OprtnStt;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Used to identify the status of Engine Turbocharger Compressor Bypass Actuator 2.  0000 - Normal  0001 - Alarm (fully operational but needs service)  0010 - Alarm High Severity (functional but transient performance may be reduced)  0011 - Derate ...
  // 14 - "Error" 
  // 5 - "Uncontrolled Shutdown Active" 
  // 4 - "Controlled Shutdown Active" 
  // 3 - "Derate Active" 
  // 2 - "Alarm High Severity" 
  // 1 - "Alarm" 
  // 0 - "Normal" 

  uint8_t EngTrbCmprssrBypssActtr2OprtnStt;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Temperature of the Engine Turbocharger Compressor Bypass Actuator 1 drive circuitry.    Temperature excursions may affect the torque output.
  int16_t EngTrbCmprssrBypassActuator1Temp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of the Engine Turbocharger Compressor Bypass Actuator 2 drive circuitry.    Temperature excursions may affect the torque output.
  int16_t EngTrbCmprssrBypassActuator2Temp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} ETCBI_t;

// def @CAC2 CAN Message (419230974)
#define CAC2_IDE (1U)
#define CAC2_DLC (8U)
#define CAC2_CANID (0x18FCF4FEU)
#define CAC2_CYC (1000U)
// -- Charge Air Cooler 2  Engine bank 2 Charge Air Cooler parameters
// signal: @EngChargeAirCooler2IntakeTemp
#define EngChargeAirCooler2IntakeTemp_CovFactor 0.03125
#define EngChargeAirCooler2IntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngChargeAirCooler2OutletTemp
#define EngChargeAirCooler2OutletTemp_CovFactor 0.03125
#define EngChargeAirCooler2OutletTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngChrgeAirCooler2AmbientAirTemp
#define EngChrgeAirCooler2AmbientAirTemp_CovFactor 0.03125
#define EngChrgeAirCooler2AmbientAirTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngChargeAirCooler2Efficiency
#define EngChargeAirCooler2Efficiency_CovFactor 0.4
#define EngChargeAirCooler2Efficiency_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Temperature of the combustion air measured at the charge air cooler 2 Intake.
  int32_t EngChargeAirCooler2IntakeTemp;      //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of combustion air after it exits from the Charge Air Cooler 2 but before any mixing of recirculated exhaust gas.
  int32_t EngChargeAirCooler2OutletTemp;      //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the air surrounding charge air cooler 2.
  int32_t EngChrgeAirCooler2AmbientAirTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Engine charge air cooler 2 (CAC2) is an indication of the CAC?s ability to reduce the temperature of the combustion air that is being routed through the CAC. 0% = no reduction in temperature, 100% = maximum cooling. The CAC2 efficiency is calculated ...
  uint8_t EngChargeAirCooler2Efficiency;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} CAC2_t;

// def @CAC2P CAN Message (419231230)
#define CAC2P_IDE (1U)
#define CAC2P_DLC (8U)
#define CAC2P_CANID (0x18FCF5FEU)
#define CAC2P_CYC (1000U)
// -- Charge Air Cooler 2 Precooler  Engine bank 2 CAC precooler parameters
// signal: @EngChrgArClr2PrecoolerIntakeTemp
#define EngChrgArClr2PrecoolerIntakeTemp_CovFactor 0.03125
#define EngChrgArClr2PrecoolerIntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngChrgArClr2PrecoolerOutletTemp
#define EngChrgArClr2PrecoolerOutletTemp_CovFactor 0.03125
#define EngChrgArClr2PrecoolerOutletTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngChrgArClr2PrecoolerEfficiency
#define EngChrgArClr2PrecoolerEfficiency_CovFactor 0.4
#define EngChrgArClr2PrecoolerEfficiency_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Temperature of the combustion air measured at the charge air cooler 2 precooler Intake.
  int32_t EngChrgArClr2PrecoolerIntakeTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the combustion air measured at the charge air cooler 2 precooler outlet.
  int32_t EngChrgArClr2PrecoolerOutletTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Engine charge air cooler 2 (CAC2) precooler efficiency is an indication of the precooler?s ability to reduce the temperature of the gas that is being routed through the precooler. 0% = no reduction in temperature, 100% = maximum cooling. The CAC2 ...
  uint8_t EngChrgArClr2PrecoolerEfficiency;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} CAC2P_t;

// def @CAC1 CAN Message (419231486)
#define CAC1_IDE (1U)
#define CAC1_DLC (8U)
#define CAC1_CANID (0x18FCF6FEU)
#define CAC1_CYC (1000U)
// -- Charge Air Cooler 1  Engine bank 1 Charge Air Cooler parameters
// signal: @EngChargeAirCooler1IntakeTemp
#define EngChargeAirCooler1IntakeTemp_CovFactor 0.03125
#define EngChargeAirCooler1IntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngChrgeAirCooler1AmbientAirTemp
#define EngChrgeAirCooler1AmbientAirTemp_CovFactor 0.03125
#define EngChrgeAirCooler1AmbientAirTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngChargeAirCooler1Efficiency
#define EngChargeAirCooler1Efficiency_CovFactor 0.4
#define EngChargeAirCooler1Efficiency_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Temperature of the combustion air measured at the CAC 1 Intake.
  int32_t EngChargeAirCooler1IntakeTemp;      //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the air surrounding charge air cooler 1.
  int32_t EngChrgeAirCooler1AmbientAirTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Engine charge air cooler 1(CAC1) efficiency is an indication of the CAC?s ability to reduce the temperature of the combustion air that is being routed through the CAC1. 0% = no reduction in temperature, 100% = maximum cooling. The CAC1 efficiency is ...
  uint8_t EngChargeAirCooler1Efficiency;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} CAC1_t;

// def @CAC1P CAN Message (419231742)
#define CAC1P_IDE (1U)
#define CAC1P_DLC (8U)
#define CAC1P_CANID (0x18FCF7FEU)
#define CAC1P_CYC (1000U)
// -- Charge Air Cooler 1 Precooler  Engine bank 1 CAC precooler parameters
// signal: @EngChrgArClr1PrecoolerIntakeTemp
#define EngChrgArClr1PrecoolerIntakeTemp_CovFactor 0.03125
#define EngChrgArClr1PrecoolerIntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngChrgArClr1PrecoolerOutletTemp
#define EngChrgArClr1PrecoolerOutletTemp_CovFactor 0.03125
#define EngChrgArClr1PrecoolerOutletTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngChrgArClr1PrecoolerEfficiency
#define EngChrgArClr1PrecoolerEfficiency_CovFactor 0.4
#define EngChrgArClr1PrecoolerEfficiency_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Temperature of the combustion air measured at the charge air cooler 1 precooler intake.
  int32_t EngChrgArClr1PrecoolerIntakeTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the combustion air measured at the charge air cooler 1 precooler outlet.
  int32_t EngChrgArClr1PrecoolerOutletTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Engine charge air cooler 1 (CAC1) precooler efficiency is an indication of the precooler?s ability to reduce the temperature of the combustion air that is being routed through the precooler. 0% = no reduction in temperature, 100% = maximum cooling ...
  uint8_t EngChrgArClr1PrecoolerEfficiency;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} CAC1P_t;

// def @DPF2S2 CAN Message (419231998)
#define DPF2S2_IDE (1U)
#define DPF2S2_DLC (8U)
#define DPF2S2_CANID (0x18FCF8FEU)
#define DPF2S2_CYC (1000U)
// -- Diesel Particulate Filter 2 Soot 2  Additional diesel particulate filter soot parameters for diesel particulate filter 2.
// signal: @AFT2DPFSootSignalStdDeviation
#define AFT2DPFSootSignalStdDeviation_CovFactor 0.0025
#define AFT2DPFSootSignalStdDeviation_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @AFT2DPFSootSignalMax
#define AFT2DPFSootSignalMax_CovFactor 0.0025
#define AFT2DPFSootSignalMax_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @AFT2DPFSootSignalMin
#define AFT2DPFSootSignalMin_CovFactor 0.0025
#define AFT2DPFSootSignalMin_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // Standard deviation of the soot measurement from diesel particulate filter 2 soot sensor.
  uint16_t AFT2DPFSootSignalStdDeviation;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Maximum output signal level of the current soot measurement from diesel particulate filter 2 soot sensor.  This is a statistical value, not the maximum sensing capability of the sensor.
  uint16_t AFT2DPFSootSignalMax;           //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Minimum output signal level of the current soot measurement from diesel particulate filter 2 soot sensor.  This is a statistical value, not the minimum sensing capability of the sensor.
  uint16_t AFT2DPFSootSignalMin;           //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} DPF2S2_t;

// def @DPF1S2 CAN Message (419232254)
#define DPF1S2_IDE (1U)
#define DPF1S2_DLC (8U)
#define DPF1S2_CANID (0x18FCF9FEU)
#define DPF1S2_CYC (1000U)
// -- Diesel Particulate Filter 1 Soot 2  Additional diesel particulate filter soot parameters for diesel particulate filter 1.
// signal: @AFT1DPFSootSignalStdDeviation
#define AFT1DPFSootSignalStdDeviation_CovFactor 0.0025
#define AFT1DPFSootSignalStdDeviation_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @AFT1DPFSootSignalMax
#define AFT1DPFSootSignalMax_CovFactor 0.0025
#define AFT1DPFSootSignalMax_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @AFT1DPFSootSignalMin
#define AFT1DPFSootSignalMin_CovFactor 0.0025
#define AFT1DPFSootSignalMin_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // Standard deviation of the soot measurement from diesel particulate filter 1 soot sensor.
  uint16_t AFT1DPFSootSignalStdDeviation;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Maximum output signal level of the current soot measurement from diesel particulate filter 1 soot sensor.  This is a statistical value, not the maximum sensing capability of the sensor.
  uint16_t AFT1DPFSootSignalMax;           //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Minimum output signal level of the current soot measurement from diesel particulate filter 1 soot sensor.  This is a statistical value, not the minimum sensing capability of the sensor.
  uint16_t AFT1DPFSootSignalMin;           //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} DPF1S2_t;

// def @ET5 CAN Message (419233790)
#define ET5_IDE (1U)
#define ET5_DLC (8U)
#define ET5_CANID (0x18FCFFFEU)
#define ET5_CYC (1000U)
// -- Engine Temperature 5  Engine related parameters
// signal: @EngExhaustGasRecirculation2Temp
#define EngExhaustGasRecirculation2Temp_CovFactor 0.03125
#define EngExhaustGasRecirculation2Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhstGsRcrcltn2MxerIntakeTemp
#define EngExhstGsRcrcltn2MxerIntakeTemp_CovFactor 0.03125
#define EngExhstGsRcrcltn2MxerIntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of Recirculated Exhaust Gas of EGR2
  int32_t EngExhaustGasRecirculation2Temp;    //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // The temperature of the EGR gas entering the intake of EGR2 system mixer.
  int32_t EngExhstGsRcrcltn2MxerIntakeTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} ET5_t;

// def @LVDS CAN Message (419234302)
#define LVDS_IDE (1U)
#define LVDS_DLC (8U)
#define LVDS_CANID (0x18FD01FEU)
#define LVDS_CYC (500U)
// -- Low Voltage Disconnect  Status  Status of the Low-Voltage Disconnect (LVD) device.
// signal: @LowVoltageDisconnectTemp
#define LowVoltageDisconnectTemp_CovFactor 1
#define LowVoltageDisconnectTemp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // State of the Manual Disconnect hardwired input to the LVD.  Manual Disconnect is used to override the LVD's normal activlty and dicconnect all of the LVD outputs.  Manual Disconnect is lower in priority than the Manual Connect hardwired input, but ...
  // 3 - "Not installed" 
  // 2 - "Error" 
  // 1 - "Input on" 
  // 0 - "Input off" 

  uint8_t LwVltgDscnnctMnalDisconnectState;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of the Manual Connect hardwired input to the LVD.  Manual Connect is used to override the LVD's normal activlty and connect all of the LVD outputs.  Manual Connect has priority over the Manual Dicsonnect hardwired input and all LVD Set ...
  // 3 - "Not installed" 
  // 2 - "Error" 
  // 1 - "Input on" 
  // 0 - "Input off" 

  uint8_t LwVltgDscnnectManualConnectState;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Current operating mode of the LVD.  The current mode is dependent on the state of the Manual Disconnect/Connect hardwired inputs and on the most-recent received LVD Set Desired Operating Mode message.  The hardwired inputs have priority over the LVD ...
  // 15 - "Not available" 
  // 9 - "Manual Connect via hardwired input" 
  // 8 - "Manual Disconnect via hardwired input" 
  // 5 - "Manual Connect via J1939 request" 
  // 4 - "Manual Disconnect via J1939 request" 
  // 0 - "Automatic" 

  uint8_t LwVltgDscnnctCrrentOperatingMode;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // State of the Output #3 from the LVD.  Output #3 controls an external load or relay.  This external load could be independent of the main output, and may apply to an application specific circuit or zone.  If the LVD supports prioritization, this ...
  // 15 - "Not available or not installed" 
  // 14 - "Output fault" 
  // 4 - "Connect pending" 
  // 3 - "Disconnect pending" 
  // 2 - "Disconnect alarm expired" 
  // 1 - "Output on or connected" 
  // 0 - "Output off or disconnected" 

  uint8_t LowVoltageDisconnectOutput3State;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // State of the Output #2 from the LVD.  Output #2 controls an external load or relay.  This external load could be independent of the main output, and may apply to an application specific circuit or zone.  If the LVD supports prioritization, this ...
  // 14 - "Output fault" 
  // 4 - "Connect pending" 
  // 3 - "Disconnect pending" 
  // 2 - "Disconnect alarm expired" 
  // 1 - "Output on or connected" 
  // 0 - "Output off or disconnected" 
  // 15 - "Not available or not installed" 

  uint8_t LowVoltageDisconnectOutput2State;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // State of the Output #1 from the LVD.  Output #1 controls an external load or relay.  This external load could be independent of the main output, and may apply to an application specific circuit or zone.  If the LVD supports prioritization, this ...
  // 15 - "Not available or not installed" 
  // 14 - "Output fault" 
  // 4 - "Connect pending" 
  // 3 - "Disconnect pending" 
  // 2 - "Disconnect alarm expired" 
  // 1 - "Output on or connected" 
  // 0 - "Output off or disconnected" 

  uint8_t LowVoltageDisconnectOutput1State;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // State of the Vout Output from the LVD.  Vout is the LVD's main internal, controllable, high-current output.  If the LVD supports prioritization, this circuit will be the last to disconnect and the first to reconnect.  0000 - Output off or ...
  // 15 - "Not available or not installed" 
  // 14 - "Output fault" 
  // 4 - "Connect pending" 
  // 3 - "Disconnect pending" 
  // 2 - "Disconnect alarm expired" 
  // 1 - "Output on or connected" 
  // 0 - "Output off or disconnected" 

  uint8_t LwVltgeDisconnectVoutOutputState;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Internal temperature of the LVD.
  int16_t LowVoltageDisconnectTemp;           //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} LVDS_t;

// def @AISO CAN Message (419234558)
#define AISO_IDE (1U)
#define AISO_DLC (8U)
#define AISO_CANID (0x18FD02FEU)
// -- All Implements Stop Operations Switch State  This message may be sent by any ECU connected to the implement bus on forestry or agriculture implements providing the current state of the 'all implements stop operations' switch to connected systems.
typedef struct
{

  // Indicates the number of transitions from Permit (01) to Stop (00) since power up of the Stop all implement operations parameter. The parameter resets to zero on the next transition after reporting the maximum value.
  uint8_t StpAllImplmntOprtnsTrnstonNumber;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // State of a switch or other operator input for stopping the operation of a connected system.    00  All implements stop operations switch OFF  01  All implements stop operations switch ON  10  Error indication  11  Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "All implements stop operations switch ON" 
  // 0 - "All implements stop operations switch OFF" 

  uint8_t AllImplmntStpOprtngOprtnsSwtchSt;   //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AISO_t;

// def @IOS CAN Message (419234814)
#define IOS_IDE (1U)
#define IOS_DLC (8U)
#define IOS_CANID (0x18FD03FEU)
// -- Implement Operating State Command  Message sent by the tractor ECU on the implement bus on forestry or agriculture implements providing to connected systems the current commanded implement operating state.
typedef struct
{

  // Command for setting the operating state of a connected implement system.    00  Set implement to field working state  01  Set implement to transport state  10  Set implement to park state  11  Take no action
  // 3 - "Take no action" 
  // 2 - "Set implement to park state" 
  // 1 - "Set implement to transport state" 
  // 0 - "Set implement to field working state" 

  uint8_t ImplementOperatingStateCmd;    //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} IOS_t;

// def @DLCD2 CAN Message (419235070)
#define DLCD2_IDE (1U)
#define DLCD2_DLC (8U)
#define DLCD2_CANID (0x18FD04FEU)
#define DLCD2_CYC (1000U)
// -- Direct Lamp Control Data 2  This message will be transmitted by the controller that is illuminating the lamps.    It is not required to be used with PGN 64774.
typedef struct
{

  // This parameter provides measured data from the Vehicle Battery Voltage Low Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t VehicleBatteryVoltageLowLampData;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Vehicle Fuel Level Low Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t VehicleFuelLevelLowLampData;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Vehicle Air Pressure Low Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t VehicleAirPressLowLampData;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Vehicle HVAC Recirculation Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t VehicleHVACRecirculationLampData;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Vehicle Battery Charging Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t VehicleBatteryChargingLampData;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This message will be transmitted by the controller that is illuminating the lamps.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t HillHolderLampData;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} DLCD2_t;

// def @DLCD1 CAN Message (419235326)
#define DLCD1_IDE (1U)
#define DLCD1_DLC (8U)
#define DLCD1_CANID (0x18FD05FEU)
#define DLCD1_CYC (1000U)
// -- Direct Lamp Control Data 1  This message will be transmitted by the controller that is illuminating the lamps.    It is not required to be used with PGN 64775.
typedef struct
{

  // This parameter provides measured data from the Engine Protect Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t EngProtectLampData;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Engine Amber Warning Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t EngAmberWarningLampData;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Engine Red Stop Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t EngRedStopLampData;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the OBD Malfunction Indicator Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t OBDMalfunctionIndicatorLampData;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Engine Brake Active Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t EngBrakeActiveLampData;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Compression Brake Enable Switch Indicator Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t CmprssnBrkEnblSwtchIndctrLmpData;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Engine Oil Pressure Low Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t EngOilPressLowLampData;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Engine Coolant Temperature High Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t EngCoolantTempHighLampData;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Engine Coolant Level Low Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t EngCoolantLevelLowLampData;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Engine Idle Management Active Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t EngIdleManagementActiveLampData;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Engine Air Filter Restriction Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t EngAirFilterRestrictionLampData;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Engine Fuel Filter Restricted Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t EngFuelFilterRestrictedLampData;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Engine Control Module 1 Ready for Use Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t EngCtrlMdule1ReadyForUseLampData;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Engine Control Module 2 Ready for Use Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t EngCtrlMdule2ReadyForUseLampData;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Engine Control Module 3 Ready for Use Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t EngCtrlMdule3ReadyForUseLampData;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Engine Speed High Warning Lamp.    00 - Lamp Deactivated (Off)  01 - Lamp Activated (On)  10 - Error  11 - Not available
  // 0 - "Lamp Deactivated" 
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp Activated" 

  uint8_t EngSpeedHighLampData;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Engine Speed Very High Warning Lamp.    00 - Lamp Deactivated (Off)  01 - Lamp Activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp Activated" 
  // 0 - "Lamp Deactivated" 

  uint8_t EngSpeedVeryHighLampData;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Vehicle Acceleration Rate Limit Lamp.    00 - Lamp deactivated (Off)  01 - Lamp activated (On)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp activated" 
  // 0 - "Lamp deactivated" 

  uint8_t VhclAcclerationRateLimitLampData;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the Engine Wait To Start Lamp.  See SPN 1081 for the command.    00 - Lamp deactived (off)  01 - Lamp actived (on)  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Lamp actived" 
  // 0 - "Lamp deactived" 

  uint8_t EngWaitToStartLampData;             //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} DLCD1_t;

// def @DLCC2 CAN Message (419235582)
#define DLCC2_IDE (1U)
#define DLCC2_DLC (8U)
#define DLCC2_CANID (0x18FD06FEU)
#define DLCC2_CYC (1000U)
// -- Direct Lamp Control Command 2  Message that directly controls the driver indicator lamps.   See also PGN 64775 for additional lamps and PGN 64772 for the feedback information about these lamps.  Note: Since this message is direct lamp control, it is ...
typedef struct
{

  // Command signal directly controlling the Vehicle Battery Voltage Low Lamp.    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t VehicleBatteryVoltageLowLampCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Vehicle Fuel Level Low Lamp.    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t VehicleFuelLevelLowLampCmd;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Vehicle Air Pressure Low Lamp.    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t VehicleAirPressLowLampCmd;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Vehicle HVAC Recirculation Lamp.    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t VehicleHVACRecirculationLampCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Vehicle Battery Charging Lamp.    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t VehicleBatteryChargingLampCmd;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling Hill Holder Lamp.    00 - Lamp Off  01 - Lamp On  10 - Lamp Flash (1 Hz)  11 - Not available
  // 3 - "Not available" 
  // 2 - "Lamp Flash" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t HillHolderLampCmd;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} DLCC2_t;

// def @DLCC1 CAN Message (419235838)
#define DLCC1_IDE (1U)
#define DLCC1_DLC (8U)
#define DLCC1_CANID (0x18FD07FEU)
#define DLCC1_CYC (1000U)
// -- Direct Lamp Control Command 1  Message that directly controls the driver indicator lamps.  See also PGN 64774 for additional lamps and PGN 64773 for the feedback information about these lamps.  Note: Since this message is direct lamp control, it is ...
typedef struct
{

  // Command signal directly controlling the Engine Protect Lamp    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available    Note:  SPN 987 should be used for reporting diagnostics of the Engine Protect Lamp.
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t EngProtectLampCmd;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Engine Amber Warning Lamp    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available    Note:  SPN 624 should be used for reporting diagnostics of the Engine Amber Warning Lamp.
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t EngAmberWarningLampCmd;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Engine Red Stop Lamp    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available    Note:  SPN 623 should be used for reporting diagnostics of the Engine Red Stop Lamp.
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t EngRedStopLampCmd;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the OBD Malfunction Indicator Lamp    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available    Note:  SPN 1213 should be used for reporting diagnostics of the OBD Malfunction Indicator Lamp.
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t OBDMalfunctionIndicatorLampCmd;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Engine Brake Active Lamp. This is used for engine based retarders.    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t EngBrakeActiveLampCmd;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling Compression Brake Enable Switch Indicator Lamp.  The compression brake switch indicator signals the status of the compression brake enable switch to the operator.  00 - Lamp OFF  01 - Lamp ON  10 - Reserved  11 - ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp ON" 
  // 0 - "Lamp OFF" 

  uint8_t CmprssnBrkEnblSwtchIndctrLampCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Engine Oil Pressure Low Lamp    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t EngOilPressLowLampCmd;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Engine Coolant Temperature High Lamp    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t EngCoolantTempHighLampCmd;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Engine Coolant Level Low Lamp    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t EngCoolantLevelLowLampCmd;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Engine Idle Management Active Lamp    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available    Note:  SPN 1661 should be used for reporting diagnostics of the Engine Idle Management Active Lamp.
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t EngIdleManagementActiveLampCmd;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Engine Air Filter Restriction Lamp.    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t EngAirFilterRestrictionLampCmd;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Engine Fuel Filter Restricted Lamp.    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t EngFuelFilterRestrictedLampCmd;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Engine Control Module 1 Ready for use Lamp. This lamp is used to indicate whether ECM 1 can control the operation of the engine. In case of a failure in ECM 1, lamp will be turned OFF.  00 - Lamp Off  01 - ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t EngCtrlModule1ReadyForUseLampCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Engine Control Module 2 Ready for Use Lamp. This lamp is used to indicate whether ECM 2 can control the operation of the engine. In case of a failure in ECM 2, lamp will be turned OFF.  00 - Lamp Off  01 - ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t EngCtrlModule2ReadyForUseLampCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Engine Control Module 3 Ready for Use Lamp. This lamp is used to indicate whether ECM 3 can control the operation of the engine. In case of a failure in ECM 3, lamp will be turned OFF.  00 - Lamp Off  01 - ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t EngCtrlModule3ReadyForUseLampCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Engine Speed High Warning lamp.    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t EngSpeedHighLampCmd;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Engine Speed Very High Warning lamp.    00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t EngSpeedVeryHighLampCmd;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal directly controlling the Vehicle Acceleration Rate Limit Lamp.  00 - Lamp Off  01 - Lamp On  10 - Reserved  11 - Not available  NOTE: SPN 2979 is the original parameter used to provide vehicle acceleration rate limit status.  This ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Lamp On" 
  // 0 - "Lamp Off" 

  uint8_t VhclAccelerationRateLimitLampCmd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} DLCC1_t;

// def @HRLFC CAN Message (419236350)
#define HRLFC_IDE (1U)
#define HRLFC_DLC (8U)
#define HRLFC_CANID (0x18FD09FEU)
#define HRLFC_CYC (1000U)
// -- High Resolution Fuel Consumption (Liquid)  Engine fuel consumption accumulators.  See PGN 65257 for alternate resolution.
// signal: @HighResolutionEngTripFuel
#define HighResolutionEngTripFuel_CovFactor 0.001
#define HighResolutionEngTripFuel_CovS(x) ((uint32_t)((x / 0.001)))
// signal: @HighResolutionEngTotalFuelUsed
#define HighResolutionEngTotalFuelUsed_CovFactor 0.001
#define HighResolutionEngTotalFuelUsed_CovS(x) ((uint32_t)((x / 0.001)))
typedef struct
{

  // Fuel consumed during all or part of a journey.   High resolution used for calculations and fleet management systems.  See SPN 182 for alternate resolution.
  uint32_t HighResolutionEngTripFuel;       //      Bits=32.  [ 0     , 4211081.215 ]  Unit:'L'     Factor= 0.001 

  // Accumulated amount of fuel used during vehicle operation.  High resolution used for calculations and fleet management systems.  See SPN 250 for alternate resolution.
  uint32_t HighResolutionEngTotalFuelUsed;  //      Bits=32.  [ 0     , 4211081.215 ]  Unit:'L'     Factor= 0.001 
  uint32_t framecnt;
} HRLFC_t;

// def @MSI1 CAN Message (419238654)
#define MSI1_IDE (1U)
#define MSI1_DLC (8U)
#define MSI1_CANID (0x18FD12FEU)
#define MSI1_CYC (500U)
// -- Magnet Status Information 1  This message carries data related to the status of the magnetic material handling system, possibly including the generator that provides power to the magnet.
typedef struct
{

  // The Status of Generator being Overheated.    00 = Not Overheat  01 = Overheat  10 = Error  11 = Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Overheat" 
  // 0 - "Not Overheat" 

  uint8_t GeneratorOverheatStatus;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of generator voltage in or out of desired operating range.    00 = Out of Range   01 = In Range  10 = Error  11 = Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "In Range" 
  // 0 - "Out of Range " 

  uint8_t GnstSystmOtputVoltageRangeStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This is a switch that can be used to select either the Grapple or Magnet function of the material handler machine.    00 = Grapple Selected  01 = Magnet Selected  10 = Error  11 = Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Magnet Selected" 
  // 0 - "Grapple Selected" 

  uint8_t Grapple_MagnetSelectionSwitch;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The Genset Softstart Active Status refers to the status of the genset softstart relay. The moment the Genset System is started, this relay is activated. As a result, the hydraulic power is hold on for a short period of time, and this relay will be ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t GensetSoftstartActiveStatus;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The operator setting for the Reverse Current. The setting defines the maximum reverse current. The actual current limits are specific to the application.  00000 = 1  00001 = 2  00010 = 3  00011 = 4  00100 = 5  00101 = 6  00110 = 7  00111 = 8  01000 ...
  // 31 - "Not Available" 
  // 30 - "Error" 
  // 15 - "16" 
  // 14 - "15" 
  // 13 - "14" 
  // 12 - "13" 
  // 11 - "12" 
  // 10 - "11" 
  // 9 - "10" 
  // 8 - "9" 
  // 7 - "8" 
  // 6 - "7" 
  // 5 - "6" 
  // 4 - "5" 
  // 3 - "4" 
  // 2 - "3" 
  // 1 - "2" 
  // 0 - "1" 

  uint8_t ReverseCurrentRangeSetting;         //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Status of the Genset Enable Relay that enables or disables the Genset.    00 = Not Enabled  01 = Enabled  10 = Error  11 = Not Avaialble
  // 3 - "Not Avaialble" 
  // 2 - "Error" 
  // 1 - "Enabled" 
  // 0 - "Not Enabled" 

  uint8_t GensetEnableActiveStatus;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of Voltage Monitor Relay. When it is activated, the Generator Voltage Monitor is connected to the generator output line so that the generator output voltage range could be monitored.  00 = Monitor is Off  01 = Monitor is On  10 = Error  11 = ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Monitor is On" 
  // 0 - "Monitor is Off" 

  uint8_t VoltageMonitorActiveStatus;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The status of the duty cycle of the generator usage, indicating if the generator has been on for too much time within a defined time window.  The duty cycle is the ratio of the time the generator is on and the time the generator is off within a time ...
  // 3 - "Not Avaiable" 
  // 2 - "Error" 
  // 1 - "Duty Cycle Exceed" 
  // 0 - "Duty Cycle Not Exceed" 

  uint8_t GeneratorDutyCycleExceededStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} MSI1_t;

// def @MSCI CAN Message (419238910)
#define MSCI_IDE (1U)
#define MSCI_DLC (8U)
#define MSCI_CANID (0x18FD13FEU)
// -- Magnet System Configuration Information  This message carries data related to the configuration of the magnetic material handling system, possibly including the generator that provides power to the magnet.
// signal: @MagnetBoostTime
#define MagnetBoostTime_CovFactor 0.25
#define MagnetBoostTime_CovS(x) ((uint8_t)((x / 0.25)))
// signal: @MagnetRatedPower
#define MagnetRatedPower_CovFactor 0.5
#define MagnetRatedPower_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // The duration of time after the activation of the magnet circuit that a relatively high current is sent to the magnet for material pick up operations. This time is called boost time. After the boost time expires, a lower operation current is sent to ...
  uint8_t MagnetBoostTime;               //      Bits=08.  [ 0     , 62.5   ]  Unit:'s'     Factor= 0.25  

  // The rated power that the magnet can accept during material holding operations.  Note that the magnet may experience more power over short intervals, such as during initial activation of the magnet circuit to pick up material.
  uint16_t MagnetRatedPower;             //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kW'    Factor= 0.5   
  uint32_t framecnt;
} MSCI_t;

// def @BCH2 CAN Message (419239166)
#define BCH2_IDE (1U)
#define BCH2_DLC (8U)
#define BCH2_CANID (0x18FD14FEU)
#define BCH2_CYC (1000U)
// -- Battery Charger 2  Parameters for the battery charger connected to the auxiliary battery.
// signal: @BatteryCharger2OutputVoltage
#define BatteryCharger2OutputVoltage_CovFactor 0.05
#define BatteryCharger2OutputVoltage_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @BatteryCharger2OutputCurrent
#define BatteryCharger2OutputCurrent_CovFactor 0.05
#define BatteryCharger2OutputCurrent_CovS(x) ((int32_t)((x / 0.05) + 32000))
typedef struct
{

  // A state of the offline battery charger connected to the auxiliary battery.  0 - Idling. The power line or the battery is disconnected from the charger.  1 - Charging the battery.  2 - Stand-by or maintaining the battery charge.  3 to 12 - Reserved   ...
  // 13 - "Battery failure" 
  // 2 - "Stand-by or maintaining the battery charge." 
  // 1 - "Charging the battery." 
  // 0 - "Idling" 
  // 15 - "Not available." 
  // 14 - "Charger failure" 

  uint8_t BatteryCharger2State;            //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // A state of the battery charger connection to the power line for the charger connected to the auxiliary battery.  0 - Disconnected. The power line is disconnected from the charger.  1 - Connected. The power line is connected to the charger.  2 - ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Connected" 
  // 0 - "Disconnected" 

  uint8_t BatteryCharger2PowerLineState;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Output voltage measured on the battery terminals of the offline battery charger connected to the auxiliary battery.
  uint16_t BatteryCharger2OutputVoltage;   //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  

  // Output current of the battery charger connected to the main battery. If positive, this parameter shows the charging current of the battery charger connected to the main battery.  Otherwise, if the charger hardware permits, this parameter represents ...
  int32_t BatteryCharger2OutputCurrent;    //      Bits=16.  [ -1600 , 1612.75 ]  Unit:'A'     Offset= -1600     Factor= 0.05  
  uint32_t framecnt;
} BCH2_t;

// def @BCH1 CAN Message (419239422)
#define BCH1_IDE (1U)
#define BCH1_DLC (8U)
#define BCH1_CANID (0x18FD15FEU)
#define BCH1_CYC (1000U)
// -- Battery Charger 1  Parameters for the battery charger connected to the main battery.
// signal: @BatteryCharger1OutputVoltage
#define BatteryCharger1OutputVoltage_CovFactor 0.05
#define BatteryCharger1OutputVoltage_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @BatteryCharger1OutputCurrent
#define BatteryCharger1OutputCurrent_CovFactor 0.05
#define BatteryCharger1OutputCurrent_CovS(x) ((int32_t)((x / 0.05) + 32000))
typedef struct
{

  // A state of the battery charger connected to the main battery.  0 - Idling. The power line or the battery is disconnected from the charger.  1 - Charging the battery.  2 - Stand-by or maintaining the battery charge.  3 to 12 - Reserved  13 - Battery ...
  // 15 - "Not available." 
  // 14 - "Charger failure" 
  // 13 - "Battery failure" 
  // 2 - "Stand-by or maintaining the battery charge." 
  // 1 - "Charging the battery." 
  // 0 - "Idling" 

  uint8_t BatteryCharger1State;            //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // A state of the battery charger connection to the power line for the charger connected to the main battery.  0 - Disconnected. The power line is disconnected from the charger.  1 - Connected. The power line is connected to the charger.  2 - Error  3 ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Connected" 
  // 0 - "Disconnected" 

  uint8_t BatteryCharger1PowerLineState;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Output voltage measured on the battery terminals of the battery charger connected to the main battery.
  uint16_t BatteryCharger1OutputVoltage;   //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  

  // Output current of the battery charger connected to the main battery. If positive, this parameter shows the charging current of the battery charger connected to the main battery.  Otherwise, if the charger hardware permits, this parameter represents ...
  int32_t BatteryCharger1OutputCurrent;    //      Bits=16.  [ -1600 , 1612.75 ]  Unit:'A'     Offset= -1600     Factor= 0.05  
  uint32_t framecnt;
} BCH1_t;

// def @AT1WUDOC CAN Message (419240702)
#define AT1WUDOC_IDE (1U)
#define AT1WUDOC_DLC (8U)
#define AT1WUDOC_CANID (0x18FD1AFEU)
#define AT1WUDOC_CYC (500U)
// -- Aftertreatment 1 Warm Up Diesel Oxidation Catalyst Information  This PGN contains information for the warm up oxidation catalytic converter in exhaust bank 1.
// signal: @InTemp
#define InTemp_CovFactor 0.03125
#define InTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @OutTemp
#define OutTemp_CovFactor 0.03125
#define OutTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // This is the temperature measured at the intake of the warm up oxidation catalytic converter in exhaust bank 1.
  int32_t InTemp;                        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // This is the temperature measured at the outlet of the warm up oxidation catalytic converter in exhaust bank 1.
  int32_t OutTemp;                       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} AT1WUDOC_t;

// def @DPF2S CAN Message (419240958)
#define DPF2S_IDE (1U)
#define DPF2S_DLC (8U)
#define DPF2S_CANID (0x18FD1BFEU)
#define DPF2S_CYC (1000U)
// -- Diesel Particulate Filter 2 Soot  Diesel particulate filter soot parameters for diesel particulate filter 2.
// signal: @AFT2DPFSootMass
#define AFT2DPFSootMass_CovFactor 4
#define AFT2DPFSootMass_CovS(x) ((uint8_t)((x / 4)))
// signal: @AFT2DPFSootDensity
#define AFT2DPFSootDensity_CovFactor 0.08
#define AFT2DPFSootDensity_CovS(x) ((uint8_t)((x / 0.08)))
// signal: @AFT2DPFMeanSootSignal
#define AFT2DPFMeanSootSignal_CovFactor 0.0025
#define AFT2DPFMeanSootSignal_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @AFT2DPFMedianSootSignal
#define AFT2DPFMedianSootSignal_CovFactor 0.0025
#define AFT2DPFMedianSootSignal_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @DslPrtcltFltr2StSnsrECUIntrnlTmp
#define DslPrtcltFltr2StSnsrECUIntrnlTmp_CovFactor 1
#define DslPrtcltFltr2StSnsrECUIntrnlTmp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Soot mass in diesel particulate filter 2.
  uint8_t AFT2DPFSootMass;                    //      Bits=08.  [ 0     , 1000   ]  Unit:'g'     Factor= 4     

  // Soot density in diesel particulate filter 2.
  uint8_t AFT2DPFSootDensity;                 //      Bits=08.  [ 0     , 20     ]  Unit:'g/L'   Factor= 0.08  

  // Mean output signal level from diesel particulate filter 2 soot sensor.
  uint16_t AFT2DPFMeanSootSignal;             //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Median output signal level from diesel particulate filter 2 soot sensor.
  uint16_t AFT2DPFMedianSootSignal;           //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Used to identify the applicable J1939-73 FMI detected in the soot sensor signal by the manufacturer?s sensor control software in diesel particulate filter 2. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe ...
  uint8_t AFT2DPFSootSnsrPreliminaryFMI;      //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Internal temperature of the diesel particulate filter 2 soot sensor ECU.
  int16_t DslPrtcltFltr2StSnsrECUIntrnlTmp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} DPF2S_t;

// def @DPF1S CAN Message (419241214)
#define DPF1S_IDE (1U)
#define DPF1S_DLC (8U)
#define DPF1S_CANID (0x18FD1CFEU)
#define DPF1S_CYC (1000U)
// -- Diesel Particulate Filter 1 Soot  Diesel particulate filter soot parameters for diesel particulate filter 1.
// signal: @AFT1DPFSootMass
#define AFT1DPFSootMass_CovFactor 4
#define AFT1DPFSootMass_CovS(x) ((uint8_t)((x / 4)))
// signal: @AFT1DPFSootDensity
#define AFT1DPFSootDensity_CovFactor 0.08
#define AFT1DPFSootDensity_CovS(x) ((uint8_t)((x / 0.08)))
// signal: @AFT1DPFMeanSootSignal
#define AFT1DPFMeanSootSignal_CovFactor 0.0025
#define AFT1DPFMeanSootSignal_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @AFT1DPFMedianSootSignal
#define AFT1DPFMedianSootSignal_CovFactor 0.0025
#define AFT1DPFMedianSootSignal_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @DslPrtcltFltr1StSnsrECUIntrnlTmp
#define DslPrtcltFltr1StSnsrECUIntrnlTmp_CovFactor 1
#define DslPrtcltFltr1StSnsrECUIntrnlTmp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Soot mass in diesel particulate filter 1.
  uint8_t AFT1DPFSootMass;                    //      Bits=08.  [ 0     , 1000   ]  Unit:'g'     Factor= 4     

  // Soot density in diesel particulate filter 1.
  uint8_t AFT1DPFSootDensity;                 //      Bits=08.  [ 0     , 20     ]  Unit:'g/L'   Factor= 0.08  

  // Mean output signal level from diesel particulate filter 1 soot sensor.
  uint16_t AFT1DPFMeanSootSignal;             //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Median output signal level from diesel particulate filter 1 soot sensor.
  uint16_t AFT1DPFMedianSootSignal;           //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Used to identify the applicable J1939-73 FMI detected in the soot sensor signal by the manufacturer?s sensor control software in diesel particulate filter 1. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe ...
  uint8_t AFT1DPFSootSnsrPreliminaryFMI;      //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Internal temperature of the diesel particulate filter 1 soot sensor ECU.
  int16_t DslPrtcltFltr1StSnsrECUIntrnlTmp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} DPF1S_t;

// def @ATDT2 CAN Message (419241470)
#define ATDT2_IDE (1U)
#define ATDT2_DLC (8U)
#define ATDT2_CANID (0x18FD1DFEU)
// -- Aftertreatment Differential Temperature 2   The purpose of this PGN is to group the aftertreatment differential temperature data. These values include the differential temperature measure between the intake and outlet of aftertreatment components.
// signal: @OneTWCDiffTemp
#define OneTWCDiffTemp_CovFactor 0.03125
#define OneTWCDiffTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TwoTWCDiffTemp
#define TwoTWCDiffTemp_CovFactor 0.03125
#define TwoTWCDiffTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // The differential engine combustion byproducts gas temperature measured between the intake and outlet of the three way catalyst for exhaust bank 1.
  int32_t OneTWCDiffTemp;                //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // The differential engine combustion byproducts gas temperature measured between the intake and outlet of the three way catalyst for exhaust bank 2.
  int32_t TwoTWCDiffTemp;                //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} ATDT2_t;

// def @ATDT1 CAN Message (419241726)
#define ATDT1_IDE (1U)
#define ATDT1_DLC (8U)
#define ATDT1_CANID (0x18FD1EFEU)
// -- Aftertreatment Differential Temperature 1   The purpose of this PGN is to group the aftertreatment differential temperature data. These values include the differential temperature measure between the intake and outlet of aftertreatment components.
// signal: @OneGOCDiffTemp
#define OneGOCDiffTemp_CovFactor 0.03125
#define OneGOCDiffTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TwoGOCDiffTemp
#define TwoGOCDiffTemp_CovFactor 0.03125
#define TwoGOCDiffTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // The differential engine combustion byproducts gas temperature measured between the intake and outlet of the gas oxidation catalyst for exhaust bank 1.  This parameter should be used with engine fueled by gaseous fuel like natural gas or propane ...
  int32_t OneGOCDiffTemp;                //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // The differential engine combustion byproducts gas temperature measured between the intake and outlet of the gas oxidation catalyst for exhaust bank 2.  This parameter should be used with engine fueled by gaseous fuel like natural gas or propane ...
  int32_t TwoGOCDiffTemp;                //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} ATDT1_t;

// def @A2DOC CAN Message (419241982)
#define A2DOC_IDE (1U)
#define A2DOC_DLC (8U)
#define A2DOC_CANID (0x18FD1FFEU)
#define A2DOC_CYC (500U)
// -- Aftertreatment 2 Diesel Oxidation Catalyst  The purpose of this PGN is to group the aftertreatment diesel oxidation catalyst data for bank 2. These values include the intake temperature, outlet temperature and differential pressure as well as the ...
// signal: @InTemp
#define InTemp_CovFactor 0.03125
#define InTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @OutTemp
#define OutTemp_CovFactor 0.03125
#define OutTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @DiffPress
#define DiffPress_CovFactor 0.5
#define DiffPress_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // Temperature of engine combustion byproducts entering the diesel oxidation catalyst in exhaust bank 2.  This parameter should be used with engines fueled by diesel fuel (not gaseous fuel like natural gas or propane).  A separate parameter has been ...
  int32_t InTemp;                        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of engine combustion byproducts leaving the diesel oxidation catalyst exhaust in exhaust bank 2.  This parameter should be used with engines fueled by diesel fuel (not gaseous fuel like natural gas or propane).  A separate parameter has ...
  int32_t OutTemp;                       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Exhaust differential pressure measured between the intake and exhaust of a diesel oxidation catalyst in exhaust bank 2.  This parameter should be used with engines fueled by diesel fuel (not gaseous fuel like natural gas or propane).  A separate ...
  uint16_t DiffPress;                    //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // Used to identify the applicable J1939-73 FMI detected in the diesel oxidation catalyst intake temperature sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t InTempPreliminaryFMI;          //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel oxidation catalyst outlet gas temperature sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t OutTempPreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel oxidation catalyst differential pressure sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t DiffPressPreliminaryFMI;       //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} A2DOC_t;

// def @A1DOC CAN Message (419242238)
#define A1DOC_IDE (1U)
#define A1DOC_DLC (8U)
#define A1DOC_CANID (0x18FD20FEU)
#define A1DOC_CYC (500U)
// -- Aftertreatment 1 Diesel Oxidation Catalyst  The purpose of this PGN is to group the aftertreatment diesel oxidation catalyst data for bank 1. These values include the intake temperature, outlet temperature and differential pressure as well as the ...
// signal: @InTemp
#define InTemp_CovFactor 0.03125
#define InTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @OutTemp
#define OutTemp_CovFactor 0.03125
#define OutTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @DiffPress
#define DiffPress_CovFactor 0.1
#define DiffPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Temperature of engine combustion byproducts entering the diesel oxidation catalyst in exhaust bank 1.  This parameter should be used with engines fueled by diesel fuel (not gaseous fuel like natural gas or propane).  A separate parameter has been ...
  int32_t InTemp;                        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of engine combustion byproducts leaving the diesel oxidation catalyst exhaust in exhaust bank 1.  This parameter should be used with engines fueled by diesel fuel (not gaseous fuel like natural gas or propane).  A separate parameter has ...
  int32_t OutTemp;                       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Exhaust differential pressure measured between the intake and exhaust of a diesel oxidation catalyst in exhaust bank 1.  This parameter should be used with engines fueled by diesel fuel (not gaseous fuel like natural gas or propane).  A separate ...
  uint16_t DiffPress;                    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Used to identify the applicable J1939-73 FMI detected in the diesel oxidation catalyst intake temperature sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t InTempPreliminaryFMI;          //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel oxidation catalyst outlet gas temperature sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t OutTempPreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel oxidation catalyst differential pressure sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t DiffPressPreliminaryFMI;       //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} A1DOC_t;

// def @A2GOC CAN Message (419242494)
#define A2GOC_IDE (1U)
#define A2GOC_DLC (8U)
#define A2GOC_CANID (0x18FD21FEU)
#define A2GOC_CYC (500U)
// -- Aftertreatment 2 Gas Oxidation Catalyst  The purpose of this PGN is to group the aftertreatment gas oxidation catalyst data for bank 2. These values include the intake temperature, outlet temperature and differential pressure as well as the ...
// signal: @InTemp
#define InTemp_CovFactor 0.03125
#define InTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @OutTemp
#define OutTemp_CovFactor 0.03125
#define OutTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @DiffPress
#define DiffPress_CovFactor 0.1
#define DiffPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Temperature of engine combustion byproducts entering the gas oxidation catalyst in exhaust bank 2.  This parameter should be used with engines fueled by gaseous fuel like natural gas or propane.  A separate parameter has been defined for diesel ...
  int32_t InTemp;                        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of engine combustion byproducts leaving the gas oxidation catalyst in exhaust bank 2.  This parameter should be used with engines fueled by gaseous fuel like natural gas or propane.  A separate parameter has been defined for diesel ...
  int32_t OutTemp;                       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Exhaust differential pressure measured between the intake and exhaust of the gas oxidation catalyst in exhaust bank 2.  This parameter should be used with engines fueled by gaseous fuel like natural gas or propane.  A separate parameter has been ...
  uint16_t DiffPress;                    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Used to identify the applicable J1939-73 FMI detected in the gas oxidation catalyst intake gas temperature sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t InTempPreliminaryFMI;          //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the gas oxidation catalyst outlet gas temperature sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t OutTempPreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the gas oxidation catalyst differential pressure sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t DiffPressPreliminaryFMI;       //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} A2GOC_t;

// def @A1GOC CAN Message (419242750)
#define A1GOC_IDE (1U)
#define A1GOC_DLC (8U)
#define A1GOC_CANID (0x18FD22FEU)
#define A1GOC_CYC (500U)
// -- Aftertreatment 1 Gas Oxidation Catalyst  The purpose of this PGN is to group the aftertreatment gas oxidation catalyst data for bank 1. These values include the intake temperature, outlet temperature and differential pressure as well as the ...
// signal: @InTemp
#define InTemp_CovFactor 0.03125
#define InTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @OutTemp
#define OutTemp_CovFactor 0.03125
#define OutTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @DiffPress
#define DiffPress_CovFactor 0.1
#define DiffPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Temperature of engine combustion byproducts entering the gas oxidation catalyst in exhaust bank 1.  This parameter should be used with engines fueled by gaseous fuel like natural gas or propane.  A separate parameter has been defined for diesel ...
  int32_t InTemp;                        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of engine combustion byproducts leaving the gas oxidation catalyst in exhaust bank 1.  This parameter should be used with engines fueled by gaseous fuel like natural gas or propane.  A separate parameter has been defined for diesel ...
  int32_t OutTemp;                       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Exhaust differential pressure measured between the intake and exhaust of the gas oxidation catalyst in exhaust bank 1.  This parameter should be used with engines fueled by gaseous fuel like natural gas or propane.  A separate parameter has been ...
  uint16_t DiffPress;                    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Used to identify the applicable J1939-73 FMI detected in the gas oxidation catalyst intake temperature sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures ...
  uint8_t InTempPreliminaryFMI;          //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the gas oxidation catalyst outlet temperature sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures ...
  uint8_t OutTempPreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the gas oxidation catalyst differential pressure sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t DiffPressPreliminaryFMI;       //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} A1GOC_t;

// def @FD2 CAN Message (419246590)
#define FD2_IDE (1U)
#define FD2_DLC (8U)
#define FD2_CANID (0x18FD31FEU)
#define FD2_CYC (1000U)
// -- Fan Drive #2  This parameter group transfers status and measured information for a second engine coolant fan.  For systems with a single or the primary fan, see PGN 65213.
// signal: @EstPercentFan2Speed
#define EstPercentFan2Speed_CovFactor 0.4
#define EstPercentFan2Speed_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @Fan2Speed
#define Fan2Speed_CovFactor 0.125
#define Fan2Speed_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @HydFan2MotorPress
#define HydFan2MotorPress_CovFactor 0.5
#define HydFan2MotorPress_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @Fan2DriveBypassCmdStatus
#define Fan2DriveBypassCmdStatus_CovFactor 0.4
#define Fan2DriveBypassCmdStatus_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Estimated fan speed as a ratio of the fan drive (current speed) to the fully engaged fan drive (maximum fan speed).  A two state fan (off/on) will use 0% and 100% respectively.  A three state fan (off/intermediate/on) will use 0%, 50% and 100% ...
  uint8_t EstPercentFan2Speed;           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // This parameter is used to indicate the current state or mode of operation by the second fan drive.  0000 Fan off  0001 Engine system-General  0010 Excessive engine air temperature  0011 Excessive engine oil temperature  0100 Excessive engine coolant ...
  // 15 - "Not available" 
  // 14 - "Other" 
  // 13 - "Engine brake" 
  // 12 - "Timer" 
  // 11 - "A/C system" 
  // 10 - "Transmission retarder" 
  // 9 - "Manual control" 
  // 8 - "Reverse Operation" 
  // 7 - "Default Operation" 
  // 6 - "Excessive hydraulic oil temperature" 
  // 5 - "Excessive transmission oil temperature" 
  // 4 - "Excessive engine coolant temperature" 
  // 3 - "Excessive engine oil temperature" 
  // 2 - "Excessive engine air temperature" 
  // 1 - "Engine system-General" 
  // 0 - "Fan off" 

  uint8_t Fan2DriveState;                //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The speed of the second fan associated with engine coolant system.
  uint16_t Fan2Speed;                    //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // The hydraulic pressure used to drive the second fan system, sensed before the hydraulic fan motor.
  uint16_t HydFan2MotorPress;            //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // Status of the Fan Drive Bypass Command for the second fan as being commanded by the ECU.  The fan drive bypass diverts pump pressure away from the hydraulic motor to maintain the fan drive pressure.  0% is defined as no bypass (i.e. diverting no fan ...
  uint8_t Fan2DriveBypassCmdStatus;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} FD2_t;

// def @TBD CAN Message (419246846)
#define TBD_IDE (1U)
#define TBD_DLC (8U)
#define TBD_CANID (0x18FD32FEU)
// -- Reserved for ISOBUS ECU diagnostic protocol  The ECU level 1 diagnostic protocol message identifies the diagnostic protocol required by a service tool to troubleshoot a fault.
typedef struct
{
  uint32_t framecnt;
} TBD_t;

// def @A2DEFSI CAN Message (419247102)
#define A2DEFSI_IDE (1U)
#define A2DEFSI_DLC (8U)
#define A2DEFSI_CANID (0x18FD33FEU)
#define A2DEFSI_CYC (1000U)
// -- Aftertreatment 2 Diesel Exhaust Fluid Supply Information  This message contains diesel exhaust fluid supply information for aftertreatment system 2 (or bank 2).
// signal: @Pump1MotorSpd
#define Pump1MotorSpd_CovFactor 0.5
#define Pump1MotorSpd_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @PumpDrivePercentage
#define PumpDrivePercentage_CovFactor 0.4
#define PumpDrivePercentage_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DosingUnit1DiverterVlv
#define DosingUnit1DiverterVlv_CovFactor 0.4
#define DosingUnit1DiverterVlv_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TankFillVlvCmd
#define TankFillVlvCmd_CovFactor 0.4
#define TankFillVlvCmd_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TankDrainVlvCmd
#define TankDrainVlvCmd_CovFactor 0.4
#define TankDrainVlvCmd_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DosingUnit2DiverterVlv
#define DosingUnit2DiverterVlv_CovFactor 0.4
#define DosingUnit2DiverterVlv_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Rotational speed of the motor driving the first or only pump for the diesel exhaust fluid used in aftertreatment system 2 (exhaust bank 2).
  uint16_t Pump1MotorSpd;                //      Bits=16.  [ 0     , 32127.5 ]  Unit:'rpm'   Factor= 0.5   

  // The percent (command) sent to the motor to control the speed of  the diesel exhaust fluid pump.
  uint8_t PumpDrivePercentage;           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Command to the valve which determines whether the diesel exhaust fluid of dosing unit 1 is delivered to the injector or is routed back to the diesel exhaust fluid tank. Zero directs all diesel exhaust fluid flow to the injector, 100% sends all ...
  uint8_t DosingUnit1DiverterVlv;        //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Commanded percentage of maximum Aftertreatment 2 Diesel Exhaust Fluid Tank Fill Valve opening. 100% means the fill valve is fully open providing maximum flow of diesel exhaust fluid into the diesel exhaust fluid tank.
  uint8_t TankFillVlvCmd;                //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // State of Aftertreatment 2 Diesel Exhaust Fluid dosing pump.    00  pump operational  01  pump error  10  reserved for SAE assignment  11 not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "pump error" 
  // 0 - "pump operational" 

  uint8_t PumpSt;                        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Commanded percentage of maximum Aftertreatment 2 Diesel Exhaust Fluid Tank Drain Valve opening. 100% means the the drain valve is fully open providing maximum flow of diesel exhaust fluid out of  the diesel exhaust fluid tank.
  uint8_t TankDrainVlvCmd;               //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Command to the valve which determines whether the diesel exhaust fluid of dosing unit 2 is delivered to the injector or is routed back to the diesel exhaust fluid tank. Zero directs all diesel exhaust fluid flow to the injector, 100% sends all ...
  uint8_t DosingUnit2DiverterVlv;        //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} A2DEFSI_t;

// def @A2SCRRT2I CAN Message (419247358)
#define A2SCRRT2I_IDE (1U)
#define A2SCRRT2I_DLC (8U)
#define A2SCRRT2I_CANID (0x18FD34FEU)
#define A2SCRRT2I_CYC (1000U)
// -- Aftertreatment 2 SCR Reagant Tank 2 Information  This message contains SCR reagent tank 2 information for aftertreatment system 2 (or bank 2).  The second tank for the aftertreatment system is usually a smaller quick-thaw reagent tank located in ...
// signal: @DEFQuickThawTankVolume
#define DEFQuickThawTankVolume_CovFactor 0.4
#define DEFQuickThawTankVolume_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DEFQuickThawTemp
#define DEFQuickThawTemp_CovFactor 1
#define DEFQuickThawTemp_CovS(x) ((int16_t)(x + 40))
// signal: @DEFQuickThawTankLvl
#define DEFQuickThawTankLvl_CovFactor 0.1
#define DEFQuickThawTankLvl_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @DEFQuickThawHtr
#define DEFQuickThawHtr_CovFactor 0.4
#define DEFQuickThawHtr_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Ratio of volume of diesel exhaust fluid to the total volume of diesel exhaust fluid storage container for aftertreatment system 2 (exhaust bank 2).  0% is empty and 100% is full.  An alternative to this SPN is SPN 4435.  Parameter Specific ...
  uint8_t DEFQuickThawTankVolume;           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The diesel exhaust fluid quick thaw tank temperature for aftertreatment system 2 (exhaust bank 2).
  int16_t DEFQuickThawTemp;                 //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The diesel exhaust fluid level height in mm in the diesel exhaust fluid quick thaw tank for aftertreatment system 2 (exhaust bank 2).  See SPN 4433 for alternate measurement.  Parameter Specific Indicator:  A value of 0xFB indicates conditions are ...
  uint16_t DEFQuickThawTankLvl;             //      Bits=16.  [ 0     , 6425.5 ]  Unit:'mm'    Factor= 0.1   

  // Used to identify the applicable J1939-73 FMI detected for the fluid level height of the diesel exhaust fluid quick thaw tank for aftertreatment system 2 (exhaust bank 2), as detected by the manufacturer's control software.  This FMI is applicable to ...
  uint8_t DEFQuickThawLvlPreliminaryFMI;    //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected for the diesel exhaust fluid quick thaw tank temperature for aftertreatment system 2 (exhaust bank 2), as detected by the manufacturer?s control software. When there is no failure, FMI 31 is ...
  uint8_t DEFQuickThawTempPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The diesel exhaust fluid quick thaw tank heater percentage for aftertreatment system 2 (exhaust bank 2). 0% is off. See SPN 5415 for the command for this tank heater.
  uint8_t DEFQuickThawHtr;                  //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Used to identify the applicable J1939-73 FMI detected for the heater of the diesel exhaust fluid quick thaw tank for aftertreatment system 2 (exhaust bank 2), as detected by the manufacturer's control software.  When there is no failure, FMI 31 is ...
  uint8_t DEFQuickThawHtrPreliminaryFMI;    //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} A2SCRRT2I_t;

// def @A2DEFT1I1 CAN Message (419247614)
#define A2DEFT1I1_IDE (1U)
#define A2DEFT1I1_DLC (8U)
#define A2DEFT1I1_CANID (0x18FD35FEU)
#define A2DEFT1I1_CYC (1000U)
// -- Aftertreatment 2 Diesel Exhaust Fluid Tank 1 Information 1  This message contains diesel exhaust fluid tank 1 information for aftertreatment system 2 (or bank 2).  The first tank for the aftertreatment sytem is primary reagent storage tank.
// signal: @Volume
#define Volume_CovFactor 0.4
#define Volume_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @Temp1
#define Temp1_CovFactor 1
#define Temp1_CovS(x) ((int16_t)(x + 40))
// signal: @Lvl
#define Lvl_CovFactor 0.1
#define Lvl_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Htr
#define Htr_CovFactor 0.4
#define Htr_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Ratio of volume of diesel exhaust fluid to the total volume of the diesel exhaust fluid storage container for aftertreatment system 2 (exhaust bank 2).  0% is empty and 100% is full.  See SPN 4428 and SPN 7531 for alternate measurements.  Parameter ...
  uint8_t Volume;                        //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Temperature of the diesel exhaust fluid in the storage tank.
  int16_t Temp1;                         //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The diesel exhaust fluid level height in mm in the diesel exhaust fluid storage container for aftertreatment system 2 (exhaust bank 2).  See SPN 4426 and SPN 7531 for alternate measurements.  Parameter Specific Indicator:  A value of 0xFB indicates ...
  uint16_t Lvl;                          //      Bits=16.  [ 0     , 6425.5 ]  Unit:'mm'    Factor= 0.1   

  // Used to identify the applicable J1939-73 FMI detected in the diesel exhaust fluid tank level sensor by the manufacturer's sensor control software.  This FMI is applicable to either the diesel exhaust fluid tank level or diesel exhaust fluid tank ...
  uint8_t LvlVolPreliminaryFMI;          //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected for the diesel exhaust fluid tank temperature for aftertreatment system 2 (exhaust bank 2), as detected by the manufacturer?s control software. When there is no failure, FMI 31 is sent. In the ...
  uint8_t TempPreliminaryFMI;            //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Percentage of heating applied to the aftertreatment 2 diesel exhaust fluid tank heater.  A value of 0% means no heating applied, a value of 100% means full heating applied.  The diesel exhaust fluid tank heater warms the diesel exhaust fluid in the ...
  uint8_t Htr;                           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Used to identify the applicable J1939-73 FMI detected for the heater of the diesel exhaust fluid tank for aftertreatment system 2 (exhaust bank 2), as detected by the manufacturer's control software.  When there is no failure, FMI 31 is sent. In the ...
  uint8_t HtrPreliminaryFMI;             //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} A2DEFT1I1_t;

// def @A2DEFI1 CAN Message (419247870)
#define A2DEFI1_IDE (1U)
#define A2DEFI1_DLC (8U)
#define A2DEFI1_CANID (0x18FD36FEU)
#define A2DEFI1_CYC (1000U)
// -- Aftertreatment 2 Diesel Exhaust Fluid Information 1  Sensor Information which measures temperature, concentration, and conductivity of the diesel exhaust fluid of the aftertreatment 2 system.
// signal: @Temp2
#define Temp2_CovFactor 1
#define Temp2_CovS(x) ((int16_t)(x + 40))
// signal: @Concentration
#define Concentration_CovFactor 0.25
#define Concentration_CovS(x) ((uint8_t)((x / 0.25)))
// signal: @Conductivity
#define Conductivity_CovFactor 5
#define Conductivity_CovS(x) ((uint8_t)((x / 5)))
typedef struct
{

  // Temperature of the diesel exhaust fluid at the device measuring diesel exhaust fluid quality
  int16_t Temp2;                         //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // A measure of the concentration of urea in water.  Zero percent means that the tank contains no urea.  A 32.5% value indicates that the reagent is of the proper concentration.  The 32.5% value indicates that the concentration is highest quality.   ...
  uint8_t Concentration;                 //      Bits=08.  [ 0     , 62.5   ]  Unit:'%'     Factor= 0.25  

  // A measure of the conductivity of the diesel exhaust fluid at the sensor.  The conductivity is an indication of the diesel exhaust fluid's chemical make up.
  uint8_t Conductivity;                  //      Bits=08.  [ 0     , 1250   ]  Unit:'?Siemens/mm' Factor= 5     

  // Used to identify the applicable J1939-73 FMI that applies to the most significant failure of the diesel exhaust fluid temperature sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t Temp2PreliminaryFMI;           //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI that applies to the most significant failure of the diesel exhaust fluid properties sensor.  This may be used for indicating failures of the diesel exhaust fluid concentration, diesel exhaust fluid ...
  uint8_t PropertiesPreliminaryFMI;      //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // This parameter indicates the property of the fluid compound in the tank.  A value of 0011 indicates uncontaminated Diesel Exhaust Fluid.  0000 - Urea concentration too high  0001 - Urea concentration too low  0010 - Fluid is diesel  0011 - Diesel ...
  // 15 - "Not available" 
  // 14 - "Error with diesel exhaust fluid property detection" 
  // 13 - "Not able to determine fluid property" 
  // 12 - "Diesel exhaust fluid" 
  // 3 - "Diesel exhaust fluid is proper mixture" 
  // 2 - "Fluid is diesel" 
  // 1 - "Urea concentration too low" 
  // 0 - "Urea concentration too high" 

  uint8_t TypeProperty;                  //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} A2DEFI1_t;

// def @A2SCREGT1 CAN Message (419248382)
#define A2SCREGT1_IDE (1U)
#define A2SCREGT1_DLC (8U)
#define A2SCREGT1_CANID (0x18FD38FEU)
#define A2SCREGT1_CYC (500U)
// -- Aftertreatment 2 SCR Exhaust Gas Temperature 1  This message contains SCR catalyst intake and outlet exhaust gas temperature information for aftertreatment system 2 (or bank 2).
// signal: @InTemp
#define InTemp_CovFactor 0.03125
#define InTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @OutTemp
#define OutTemp_CovFactor 0.03125
#define OutTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of engine combustion byproducts entering the SCR in exhaust bank 2.
  int32_t InTemp;                        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Used to identify the applicable J1939-73 FMI detected in the SCR intake temperature sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is ...
  uint8_t InTempPreliminaryFMI;          //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Temperature of engine combustion byproducts leaving the SCR exhaust in exhaust bank 2.
  int32_t OutTemp;                       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Used to identify the applicable J1939-73 FMI detected in the SCR outlet temperature sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is ...
  uint8_t OutTempPreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} A2SCREGT1_t;

// def @A2SCREGP CAN Message (419248638)
#define A2SCREGP_IDE (1U)
#define A2SCREGP_DLC (8U)
#define A2SCREGP_CANID (0x18FD39FEU)
#define A2SCREGP_CYC (500U)
// -- Aftertreatment 2 SCR Exhaust Gas Pressures  This message contains SCR catalyst exhaust gas pressure information for aftertreatment system 2 (or bank 2).
// signal: @DiffPress
#define DiffPress_CovFactor 0.1
#define DiffPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @InPress
#define InPress_CovFactor 0.1
#define InPress_CovS(x) ((int32_t)((x / 0.1) + 32126))
// signal: @InAbsPress
#define InAbsPress_CovFactor 0.1
#define InAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Differential pressure measured between the intake and exhaust of an SCR component in exhaust bank 2.
  uint16_t DiffPress;                    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Used to identify the applicable J1939-73 FMI detected in the SCR differential pressure sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe ...
  uint8_t DiffPressPreliminaryFMI;       //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The gage pressure at the intake of the selective catalytic reduction system of Aftertreatment 2.
  int32_t InPress;                       //      Bits=16.  [ -3212.7, 3212.8 ]  Unit:'kPa'   Offset= -3212.7   Factor= 0.1   

  // Used to read the pressure at the catalyst intake of the selective catalytic reduction system of aftertreatment 2.
  uint16_t InAbsPress;                   //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} A2SCREGP_t;

// def @A2SCRDSI2 CAN Message (419249150)
#define A2SCRDSI2_IDE (1U)
#define A2SCRDSI2_DLC (8U)
#define A2SCRDSI2_CANID (0x18FD3BFEU)
#define A2SCRDSI2_CYC (500U)
// -- Aftertreatment 2 SCR Dosing System Information 2  This message contains SCR dosing system information for aftertreatment system 2 (or bank 2).  See PGN 61478 for more information.
// signal: @AirAssistAbsPress
#define AirAssistAbsPress_CovFactor 8
#define AirAssistAbsPress_CovS(x) ((uint8_t)((x / 8)))
// signal: @AirAssistVlv
#define AirAssistVlv_CovFactor 0.4
#define AirAssistVlv_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DEFDoser1Temp
#define DEFDoser1Temp_CovFactor 1
#define DEFDoser1Temp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // The SCR dosing system air assist absolute pressure for aftertreatment system 2 (exhaust bank 2).  The air assist system is used to improve the dosed reagent atomization.
  uint8_t AirAssistAbsPress;             //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // The position of the valve used to regulate the air supply of an air assist SCR dosing system for an engine. 0% represents no supply and 100% is full supply.
  uint8_t AirAssistVlv;                  //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The temperature (measured closest to dosing valve) of the first or only DEF doser for aftertreatment system 2 (exhaust bank 2).
  int16_t DEFDoser1Temp;                 //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Protection request for the dosing valve of the SCR-system to prevent overheating  000:    no request  001:    reduction request stage 1  010:    reduction request stage 2  011:    reserved for future assignment by SAE  100:    reserved for future ...
  // 7 - "not available" 
  // 6 - "error" 
  // 5 - "reserved for future assignment by SAE" 
  // 4 - "reserved for future assignment by SAE" 
  // 3 - "reserved for future assignment by SAE" 
  // 2 - "reduction request stage 2" 
  // 1 - "reduction request stage 1" 
  // 0 - "no request " 

  uint8_t VlvExhTempReductionReq;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The SCR feedback control status (open/closed loop) for aftertreatment system 2 (exhaust bank 2).  000 open loop control active  001 closed loop control active  010 reserved for future assignment by SAE  011 reserved for future assignment by SAE  100 ...
  // 7 - "not available" 
  // 6 - "error " 
  // 5 - "reserved for future assignment by SAE " 
  // 4 - "reserved for future assignment by SAE " 
  // 3 - "reserved for future assignment by SAE " 
  // 2 - "reserved for future assignment by SAE " 
  // 1 - "closed loop control active " 
  // 0 - "open loop control active " 

  uint8_t FeedbackCtrlStatus;            //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The diesel exhaust fluid line heater 1 state for aftertreatment system 2 (exhaust bank 2).    00 heater inactive   01 heater active   10 error   11 not available
  // 3 - "not available" 
  // 2 - "error " 
  // 1 - "heater active " 
  // 0 - "heater inactive " 

  uint8_t DEFLineHtr1St;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel exhaust fluid line heater 1, by the manufacturer?s control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is ...
  uint8_t DEFLineHtr1PreliminaryFMI;     //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The diesel exhaust fluid line heater 2 state for aftertreatment system 2 (exhaust bank 2).    00 heater inactive   01 heater active   10 error   11 not available
  // 3 - "not available" 
  // 2 - "error " 
  // 1 - "heater active " 
  // 0 - "heater inactive " 

  uint8_t DEFLineHtr2St;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel exhaust fluid line heater 2, by the manufacturer?s control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is ...
  uint8_t DEFLineHtr2PreliminaryFMI;     //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The diesel exhaust fluid line heater 3 state for aftertreatment system 2 (exhaust bank 2).    00 heater inactive   01 heater active   10 error   11 not available
  // 3 - "not available" 
  // 2 - "error " 
  // 1 - "heater active " 
  // 0 - "heater inactive " 

  uint8_t DEFLineHtr3St;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel exhaust fluid line heater 3, by the manufacturer?s control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is ...
  uint8_t DEFLineHtr3PreliminaryFMI;     //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The diesel exhaust fluid line heater 4 state for aftertreatment system 2 (exhaust bank 2).    00 heater inactive   01 heater active   10 error   11 not available
  // 3 - "not available" 
  // 2 - "error " 
  // 1 - "heater active " 
  // 0 - "heater inactive " 

  uint8_t DEFLineHtr4St;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel exhaust fluid line heater 4, by the manufacturer?s control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is ...
  uint8_t DEFLineHtr4PreliminaryFMI;     //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} A2SCRDSI2_t;

// def @A1DEFSI CAN Message (419249406)
#define A1DEFSI_IDE (1U)
#define A1DEFSI_DLC (8U)
#define A1DEFSI_CANID (0x18FD3CFEU)
#define A1DEFSI_CYC (1000U)
// -- Aftertreatment 1 Diesel Exhaust Fluid Supply Information  This message contains diesel exhaust fluid supply information for aftertreatment system 1 (or bank 1).
// signal: @Pump1MotorSpd
#define Pump1MotorSpd_CovFactor 0.5
#define Pump1MotorSpd_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @PumpDrivePercentage
#define PumpDrivePercentage_CovFactor 0.4
#define PumpDrivePercentage_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DosingUnit1DiverterVlv
#define DosingUnit1DiverterVlv_CovFactor 0.4
#define DosingUnit1DiverterVlv_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TankFillVlvCmd
#define TankFillVlvCmd_CovFactor 0.4
#define TankFillVlvCmd_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TankDrainVlvCmd
#define TankDrainVlvCmd_CovFactor 0.4
#define TankDrainVlvCmd_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DosingUnit2DiverterVlv
#define DosingUnit2DiverterVlv_CovFactor 0.4
#define DosingUnit2DiverterVlv_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Rotational speed of the motor driving the first or only pump for the diesel exhaust fluid used in aftertreatment system 1 (exhaust bank 1).
  uint16_t Pump1MotorSpd;                //      Bits=16.  [ 0     , 32127.5 ]  Unit:'rpm'   Factor= 0.5   

  // The percent (command) sent to the motor to control the speed of the diesel exhaust fluid pump.
  uint8_t PumpDrivePercentage;           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Command to the valve which determines whether the diesel exhaust fluid on dosing unit 1 is delivered to the injector or is routed back to the diesel exhaust fluid tank. Zero directs all diesel exhaust fluid flow to the injector, 100% sends all ...
  uint8_t DosingUnit1DiverterVlv;        //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Commanded percentage of maximum Aftertreatment 1 Diesel Exhaust Fluid Tank Fill Valve opening. 100% means the fill valve is fully open providing maximum flow of diesel exhaust fluid into the diesel exhaust fluid tank.
  uint8_t TankFillVlvCmd;                //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // State of the aftertreatment 1 Diesel Exhaust Fluid dosing pump.  Indicates whether or not the pump is operational.    00  pump operational  01  pump error  10  reserved for SAE assignment  11 not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "pump error" 
  // 0 - "pump operational" 

  uint8_t PumpSt;                        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The state of the aftertreatment 1 diesel exhaust fluid pump power relay.    00 not active - no power is being applied to the relay  01 active - power is being applied to the relay  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t PumpPwrRelay;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of the aftertreatment 1 Diesel Exhaust Fluid dosing pump.  Indicates if the pump is currently active (pumping).  00 off  01 on  10 error  11 not available  The aftertreatment 1 Diesel Exhaust Fluid dosing pump is a device that delivers a ...
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t Pump;                          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Commanded percentage of maximum Aftertreatment 1 Diesel Exhaust Fluid Tank Drain Valve opening. 100% means the drain valve is fully open providing maximum flow of diesel exhaust fluid out of the diesel exhaust fluid tank.
  uint8_t TankDrainVlvCmd;               //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Command to the valve which determines whether the diesel exhaust fluid on dosing unit 2 is delivered to the injector or is routed back to the diesel exhaust fluid tank. Zero directs all diesel exhaust fluid flow to the injector, 100% sends all ...
  uint8_t DosingUnit2DiverterVlv;        //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} A1DEFSI_t;

// def @A1SCRRT2I CAN Message (419249662)
#define A1SCRRT2I_IDE (1U)
#define A1SCRRT2I_DLC (8U)
#define A1SCRRT2I_CANID (0x18FD3DFEU)
#define A1SCRRT2I_CYC (1000U)
// -- Aftertreatment 1 SCR Reagant Tank 2 Information  This message contains SCR reagent tank 2 information for aftertreatment system 1 (or bank 1).  The second tank for the aftertreatment system is usually a smaller quick-thaw reagent tank located in ...
// signal: @DEFQuickThawTankVolume
#define DEFQuickThawTankVolume_CovFactor 0.4
#define DEFQuickThawTankVolume_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DEFQuickThawTemp
#define DEFQuickThawTemp_CovFactor 1
#define DEFQuickThawTemp_CovS(x) ((int16_t)(x + 40))
// signal: @DEFQuickThawTankLvl
#define DEFQuickThawTankLvl_CovFactor 0.1
#define DEFQuickThawTankLvl_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @DEFQuickThawHtr
#define DEFQuickThawHtr_CovFactor 0.4
#define DEFQuickThawHtr_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Ratio of volume of diesel exhaust fluid to the total volume of the diesel exhaust fluid quick thaw tank for aftertreatment system 1 (exhaust bank 1).  0% is empty and 100% is full.  See SPN 4369 for an alternate measurement.  Parameter Specific ...
  uint8_t DEFQuickThawTankVolume;             //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The diesel exhaust fluid quick thaw tank temperature for aftertreatment system 1 (exhaust bank 1).
  int16_t DEFQuickThawTemp;                   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The diesel exhaust fluid level height in mm in the diesel exhaust fluid quick thaw tank for aftertreatment system 1 (exhaust bank 1). See SPN 4367 for alternate measurement.  Parameter Specific Indicator:  A value of 0xFB indicates conditions are ...
  uint16_t DEFQuickThawTankLvl;               //      Bits=16.  [ 0     , 6425.5 ]  Unit:'mm'    Factor= 0.1   

  // Used to identify the applicable J1939-73 FMI detected for the fluid level height of the diesel exhaust fluid quick thaw tank for aftertreatment system 1 (exhaust bank 1), as detected by the manufacturer's control software.  This FMI is applicable to ...
  uint8_t DEFQuickThawLvlVolPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected for the diesel exhaust fluid quick thaw tank temperature for aftertreatment system 1 (exhaust bank 1), as detected by the manufacturer?s control software. When there is no failure, FMI 31 is ...
  uint8_t DEFQuickThawTempPreliminaryFMI;     //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The diesel exhaust fluid quick thaw tank heater percentage for aftertreatment system 1 (exhaust bank 1). 0% is off. See SPN 5414 for the command for this tank heater.
  uint8_t DEFQuickThawHtr;                    //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Used to identify the applicable J1939-73 FMI detected for the heater of the diesel exhaust fluid quick thaw tank for aftertreatment system 1 (exhaust bank 1), as detected by the manufacturer's control software.  When there is no failure, FMI 31 is ...
  uint8_t DEFQuickThawHtrPreliminaryFMI;      //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} A1SCRRT2I_t;

// def @A1SCREGP CAN Message (419250174)
#define A1SCREGP_IDE (1U)
#define A1SCREGP_DLC (8U)
#define A1SCREGP_CANID (0x18FD3FFEU)
#define A1SCREGP_CYC (500U)
// -- Aftertreatment 1 SCR Exhaust Gas Pressures  This message contains SCR catalyst exhaust gas pressure information for aftertreatment system 1 (or bank 1).
// signal: @DiffPress
#define DiffPress_CovFactor 0.1
#define DiffPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @InPress
#define InPress_CovFactor 0.1
#define InPress_CovS(x) ((int32_t)((x / 0.1) + 32126))
// signal: @InAbsPress
#define InAbsPress_CovFactor 0.1
#define InAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Differential pressure measured between the intake and outlet of an SCR component in exhaust bank 1.
  uint16_t DiffPress;                    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Used to identify the applicable J1939-73 FMI detected in the SCR differential pressure sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe ...
  uint8_t DiffPressPreliminaryFMI;       //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The gage pressure at the intake of the selective catalytic reduction system of Aftertreatment 1.
  int32_t InPress;                       //      Bits=16.  [ -3212.7, 3212.8 ]  Unit:'kPa'   Offset= -3212.7   Factor= 0.1   

  // Used to read the pressure at the catalyst intake of the selective catalytic reduction system of aftertreatment 1.
  uint16_t InAbsPress;                   //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} A1SCREGP_t;

// def @A1SCRDSR2 CAN Message (419250430)
#define A1SCRDSR2_IDE (1U)
#define A1SCRDSR2_DLC (8U)
#define A1SCRDSR2_CANID (0x18FD40FEU)
#define A1SCRDSR2_CYC (500U)
// -- Aftertreatment 1 SCR Dosing System Requests 2  This message contains SCR dosing system request information for aftertreatment system 1 (or bank 1).  See PGN 61476 for more information.
// signal: @DEFTankHtrCmd
#define DEFTankHtrCmd_CovFactor 0.4
#define DEFTankHtrCmd_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DEFQuickThawHtrCmd
#define DEFQuickThawHtrCmd_CovFactor 0.4
#define DEFQuickThawHtrCmd_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DEFPumpHtrCmd
#define DEFPumpHtrCmd_CovFactor 0.4
#define DEFPumpHtrCmd_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Used if external devices can warn of conditions that require suppression of potential faults in the doser due to environmental conditions.    00    Error suppression off  01    Error suppression on  10    Reserved  11    Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Error suppression on" 
  // 0 - "Error suppression off" 

  uint8_t DEFDoserFaultSuppressionReq;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used if multiple heater modes are available in the Doser.    000   Heater off  001   Heater economy mode  010   Heater automatic mode  011   Heater on  100 - 110    Reserved  111   Not available
  // 7 - "Not available" 
  // 3 - "Heater on" 
  // 2 - "Heater automatic mode" 
  // 1 - "Heater economy mode" 
  // 0 - "Heater off" 

  uint8_t DEFDoserHeatingModeReq;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The diesel exhaust fluid line heater 1 request for aftertreatment system 1 (exhaust bank 1).     00 request for heater to be inactive   01 request for heater to be active   10 reserved for future assignment by SAE   11 not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE " 
  // 1 - "request for heater to be active " 
  // 0 - "request for heater to be inactive " 

  uint8_t DEFLineHtr1;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 2 request for aftertreatment system 1 (exhaust bank 1).     00 request for heater to be inactive   01 request for heater to be active   10 reserved for future assignment by SAE   11 not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE " 
  // 1 - "request for heater to be active " 
  // 0 - "request for heater to be inactive " 

  uint8_t DEFLineHtr2;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 3 request for aftertreatment system 1 (exhaust bank 1).     00 request for heater to be inactive   01 request for heater to be active   10 reserved for future assignment by SAE   11 not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE " 
  // 1 - "request for heater to be active " 
  // 0 - "request for heater to be inactive " 

  uint8_t DEFLineHtr3;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 4 request for aftertreatment system 1 (exhaust bank 1).     00 request for heater to be inactive   01 request for heater to be active   10 reserved for future assignment by SAE   11 not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE " 
  // 1 - "request for heater to be active " 
  // 0 - "request for heater to be inactive " 

  uint8_t DEFLineHtr4;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command for the Aftertreatment 1 Diesel Exhaust Fluid Tank Heater.  A value of 0% means no heating applied, a value of 100% means full heating applied.  See SPN 3363 for the measured value of the Aftertreatment 1 Diesel Exhaust Fluid Tank Heater.
  uint8_t DEFTankHtrCmd;                 //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The command for the heater of the diesel exhaust fluid quick thaw tank for aftertreatment system 1 (exhaust bank 1).  See SPN 4372 for the measured heater percentage for the heater of this same tank.
  uint8_t DEFQuickThawHtrCmd;            //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Command for the Aftertreatment 1 Diesel Exhaust Fluid Pump Heater. A value of 0% means no heating commanded, a value of 100% means full heating commanded. See SPN 5706 for the measured value of the Aftertreatment 1 Diesel Exhaust Fluid Heater.
  uint8_t DEFPumpHtrCmd;                 //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The Aftertreatment Diesel Exhaust Fluid Line Heater Relay 1 is used to energize one or more DEF line heaters.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t DEFLineHtrRelay1;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The Aftertreatment Diesel Exhaust Fluid Line Heater Relay 2 is used to energize one or more DEF line heaters.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t DEFLineHtrRelay2;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The aftertreatment diesel exhaust fluid line heater relay 3 is used to energize one or more DEF line heaters.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t DEFLineHtrRelay3;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 5 request for aftertreatment system 1 (exhaust bank 1).    00 = request for heater to be inactive  01 = request for heater to be active  10 = reserved for future assignment by SAE  11 = not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE" 
  // 1 - "request for heater to be active" 
  // 0 - "request for heater to be inactive" 

  uint8_t DEFLineHtr5;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 6 request for aftertreatment system 1 (exhaust bank 1).    00 = request for heater to be inactive  01 = request for heater to be active  10 = reserved for future assignment by SAE  11 = not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE" 
  // 1 - "request for heater to be active" 
  // 0 - "request for heater to be inactive" 

  uint8_t DEFLineHtr6;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 7 request for aftertreatment system 1 (exhaust bank 1).    00 = request for heater to be inactive  01 = request for heater to be active  10 = reserved for future assignment by SAE  11 = not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE" 
  // 1 - "request for heater to be active" 
  // 0 - "request for heater to be inactive" 

  uint8_t DEFLineHtr7;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 8 request for aftertreatment system 1 (exhaust bank 1).    00 = request for heater to be inactive  01 = request for heater to be active  10 = reserved for future assignment by SAE  11 = not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE" 
  // 1 - "request for heater to be active" 
  // 0 - "request for heater to be inactive" 

  uint8_t DEFLineHtr8;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 9 request for aftertreatment system 1 (exhaust bank 1).    00 = request for heater to be inactive  01 = request for heater to be active  10 = reserved for future assignment by SAE  11 = not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE" 
  // 1 - "request for heater to be active" 
  // 0 - "request for heater to be inactive" 

  uint8_t DEFLineHtr9;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The diesel exhaust fluid line heater 10 request for aftertreatment system 1 (exhaust bank 1).    00 = request for heater to be inactive  01 = request for heater to be active  10 = reserved for future assignment by SAE  11 = not available
  // 3 - "not available" 
  // 2 - "reserved for future assignment by SAE" 
  // 1 - "request for heater to be active" 
  // 0 - "request for heater to be inactive" 

  uint8_t DEFLineHtr10;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} A1SCRDSR2_t;

// def @A1SCRDSI2 CAN Message (419250686)
#define A1SCRDSI2_IDE (1U)
#define A1SCRDSI2_DLC (8U)
#define A1SCRDSI2_CANID (0x18FD41FEU)
#define A1SCRDSI2_CYC (500U)
// -- Aftertreatment 1 SCR Dosing System Information 2  This message contains SCR dosing system information for aftertreatment system 1 (or bank 1).  See PGN 61475 for more information.
// signal: @AirAssistAbsPress
#define AirAssistAbsPress_CovFactor 8
#define AirAssistAbsPress_CovS(x) ((uint8_t)((x / 8)))
// signal: @AirAssistVlv
#define AirAssistVlv_CovFactor 0.4
#define AirAssistVlv_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @DEFDoser1Temp
#define DEFDoser1Temp_CovFactor 1
#define DEFDoser1Temp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // The SCR dosing system air assist absolute pressure for aftertreatment system 1 (exhaust bank 1).  The air assist system is used to improve the dosed reagent atomization.
  uint8_t AirAssistAbsPress;             //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // The position of the valve used to regulate the air supply of an air assist SCR dosing system for an engine. 0% represents no supply and 100% is full supply.
  uint8_t AirAssistVlv;                  //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The temperature (measured closest to dosing valve) of the first or only DEF dosing unit for aftertreatment system 1 (exhaust bank 1).
  int16_t DEFDoser1Temp;                 //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Protection request for the dosing valve of the SCR-system to prevent overheating  000:    no request  001:    reduction request stage 1  010:    reduction request stage 2  011:    reserved for future assignment by SAE  100:    reserved for future ...
  // 7 - "not available" 
  // 6 - "error" 
  // 5 - "reserved for future assignment by SAE" 
  // 4 - "reserved for future assignment by SAE" 
  // 3 - "reserved for future assignment by SAE" 
  // 2 - "reduction request stage 2" 
  // 1 - "reduction request stage 1" 
  // 0 - "no request " 

  uint8_t VlvExhTempReductionReq;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The SCR feedback control status (open/closed loop) for aftertreatment system 1 (exhaust bank 1).  000 open loop control active  001 closed loop control active  010 reserved for future assignment by SAE  011 reserved for future assignment by SAE  100 ...
  // 7 - "not available" 
  // 6 - "error " 
  // 5 - "reserved for future assignment by SAE " 
  // 4 - "reserved for future assignment by SAE " 
  // 3 - "reserved for future assignment by SAE " 
  // 2 - "reserved for future assignment by SAE " 
  // 1 - "closed loop control active " 
  // 0 - "open loop control active " 

  uint8_t FeedbackCtrlStatus;            //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The diesel exhaust fluid line heater 1 state for aftertreatment system 1 (exhaust bank 1).     00 heater inactive   01 heater active   10 error   11 not available
  // 3 - "not available" 
  // 2 - "error " 
  // 1 - "heater active " 
  // 0 - "heater inactive " 

  uint8_t DEFLineHtr1St;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel exhaust fluid line heater 1, by the manufacturer?s control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is ...
  uint8_t DEFLineHtr1PreliminaryFMI;     //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The diesel exhaust fluid line heater 2 state for aftertreatment system 1 (exhaust bank 1).      00 heater inactive   01 heater active   10 error   11 not available
  // 3 - "not available" 
  // 2 - "error " 
  // 1 - "heater active " 
  // 0 - "heater inactive " 

  uint8_t DEFLineHtr2St;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel exhaust fluid line heater 2, by the manufacturer?s control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is ...
  uint8_t DEFLineHtr2PreliminaryFMI;     //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The diesel exhaust fluid line heater 3 state for aftertreatment system 1 (exhaust bank 1).     00 heater inactive   01 heater active   10 error   11 not available
  // 3 - "not available" 
  // 2 - "error " 
  // 1 - "heater active " 
  // 0 - "heater inactive " 

  uint8_t DEFLineHtr3St;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel exhaust fluid line heater 3, by the manufacturer?s control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is ...
  uint8_t DEFLineHtr3PreliminaryFMI;     //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The diesel exhaust fluid line heater 4 state for aftertreatment system 1 (exhaust bank 1).     00 heater inactive   01 heater active   10 error   11 not available
  // 3 - "not available" 
  // 2 - "error " 
  // 1 - "heater active " 
  // 0 - "heater inactive " 

  uint8_t DEFLineHtr4St;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel exhaust fluid line heater 4, by the manufacturer?s control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is ...
  uint8_t DEFLineHtr4PreliminaryFMI;     //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} A1SCRDSI2_t;

// def @ICC CAN Message (419250942)
#define ICC_IDE (1U)
#define ICC_DLC (8U)
#define ICC_CANID (0x18FD42FEU)
// -- ISOBUS compliance certification  This message reports the compliance certification status of a specific electronic control unit.
typedef struct
{

  // Year of the compliance test protocol to which the certification test was performed.
  uint8_t ISOBUSCmplianceCertificationYear;   //      Bits=06.  [ 0     , 0      ]  Unit:''     

  // Revision of the ISOBUS compliance test performed.  In years where there are multiple revisions of the test protocol, an alphabetic suffix is used in addition to the certification year.  000 - First Revision (No Suffix)  001 - Second Revision (Suffix ...
  // 7 - "Not available" 
  // 3 - "Fourth Revision" 
  // 2 - "Third Revision" 
  // 1 - "Second Revision" 
  // 0 - "First Revision" 

  uint8_t ISOBUSCmplnceCertificateRevision;   //      Bits=03.  [ 0     , 0      ]  Unit:''     

  // Approving body for the certification laboratory.    000 - Non-certified laboratory/ self certification  001 - EU certified laboratory  010 - NA certified laboratory  011 - 110 - Reserved  111 - Not available (Not certified)
  // 7 - "Not available" 
  // 2 - "NA certified laboratory" 
  // 1 - "EU certified laboratory" 
  // 0 - "Non-certified laboratory/ self certification" 

  uint8_t ISOBUSCmplncCrtfctLaboratoryType;   //      Bits=03.  [ 0     , 0      ]  Unit:''     

  // Manufacturer code of the laboratory that performed the compliance test.  In the case of a self-certified ECU, this matches the manufacturer code contained in the address claim PGN.  See ISO 11783 Part 1 Annex B Table B6.
  uint16_t ISOBUSCmplncCrtfctonLaboratoryID;  //      Bits=11.  [ 0     , 0      ]  Unit:''     

  // Parameter used to indicate the type of compliance test performed.    0    Not certified   1    Certified
  uint8_t ISOBUSCmplncCrtfctnTypVTWrkngStM;   //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // Parameter used to indicate the type of compliance test performed.    0    Not certified   1    Certified
  uint8_t ISOBUSCmplncCrtfctnTypVTWrkn4323;   //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // Parameter used to indicate the type of compliance test performed.    0    Not certified   1    Certified
  uint8_t ISOBUSCmplncCrtfctnTypVrtlTrmnal;   //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // Parameter used to indicate the type of compliance test performed.    0    Not certified   1    Certified
  uint8_t ISOBUSCmplncCrtfctnTypeClass3ECU;   //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // Parameter used to indicate the type of compliance test performed.    0    Not certified   1    Certified
  uint8_t ISOBUSCmplncCrtfctnTypTECUClass3;   //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // Parameter used to indicate the type of compliance test performed.    0    Not certified   1    Certified
  uint8_t ISOBUSCmplncCrtfctnTypTECUClass2;   //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // Parameter used to indicate the type of compliance test performed.    0    Not certified   1    Certified
  uint8_t ISOBUSCmplncCrtfctnTypTECUClass1;   //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // Parameter used to indicate the type of compliance test performed.    0    Not certified   1    Certified
  uint8_t ISOBUSCmplncCrtfcationTypeMinECU;   //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // Parameter used to indicate the type of compliance test performed.    0    Not certified   1    Certified
  uint8_t ISOBUSCmplncCrtfctnTypGPSRceiver;   //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // Parameter used to indicate the type of compliance test performed.    0    Not certified   1    Certified
  uint8_t ISOBUSCmplncCrtfctnTypFileServer;   //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // Parameter used to indicate the type of compliance test performed.    0    Not certified   1    Certified
  uint8_t ISOBUSCmplncCrtfctnTypTCWrkngStM;   //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // Parameter used to indicate the type of compliance test performed.    0    Not certified   1    Certified
  uint8_t ISOBUSCmplncCrtfctnTypTCWrkn4326;   //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // Parameter used to indicate the type of compliance test performed.    0    Not certified   1    Certified
  uint8_t ISOBUSCmplncCrtfctonTypeTaskCtrl;   //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // This parameter distinguishes the format ISOBUS Compliance Certification message in the 2nd edition from the format in the 3rd edition (and later).    0   Format of message in 2nd edition  1   Post-2nd edition message revision
  uint8_t ISOBUSCmplncCrtfctnMssgeRevision;   //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // Certificate reference number assigned by Certification laboratory.  Uniquely identifies the test file from the Certification laboratory when use with the Certification laboratory ID and the ECU manufacturer ID.
  uint16_t ISOBUSCmplncCrtfctnRfrenceNumber;  //      Bits=16.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} ICC_t;

// def @MSSC CAN Message (419251198)
#define MSSC_IDE (1U)
#define MSSC_DLC (8U)
#define MSSC_CANID (0x18FD43FEU)
// -- Machine Selected Speed Command  Message that provides the control of the machine speed and direction.
typedef struct
{

  // Commanded set point value of the machine speed as measured by the selected source.
  uint16_t MachineSelectedSpeedSetpointCmd;   //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The machine's maximum allowed speed communicated to the tractor.
  uint16_t MchineSelectedSpeedSetpointLimit;  //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Vehicle Speed control unit cannot currently accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of ...
  uint8_t MchnSelectedSpeedExit_reasonCode;   //      Bits=06.  [ 0     , 0      ]  Unit:''     

  // Commanded direction of travel of the machine.    00 - Reverse  01 - Forward  10 - Reserved  11 - Don't care, take no action
  // 3 - "Don't care" 
  // 2 - "Reserved" 
  // 1 - "Forward" 
  // 0 - "Reverse" 

  uint8_t MachineSelectedDirectionCmd;        //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} MSSC_t;

// def @AT2FC2 CAN Message (419251454)
#define AT2FC2_IDE (1U)
#define AT2FC2_DLC (8U)
#define AT2FC2_CANID (0x18FD44FEU)
#define AT2FC2_CYC (500U)
// -- Aftertreatment 2 Fuel Control 2  Contains information about the aftertreatment 2 fuel system. See also PGN 64928.
// signal: @Press2
#define Press2_CovFactor 0.1
#define Press2_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Press2Ctrl
#define Press2Ctrl_CovFactor 0.0025
#define Press2Ctrl_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // Second fuel pressure measurement for the aftertreatment 2 system.
  uint16_t Press2;                       //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Indicates how the device is controlling the aftertreatment 2 fuel pump relay.    00 off  01 on  10 reserved for SAE assignment  11 not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t PumpRelayCtrl;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates how the device is controlling the aftertreatment 2 fuel flow diverter valve. When this valve is on it diverts fuel flow from the Aftertreatment 2 Regeneration Device.    00 off  01 on  10 reserved for SAE assignment  11 not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t FlowDiverterVlvCtrl;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates how the device is controlling the aftertreatment 2 fuel pressure 2 regulating control valve.   0% = fully closed, 100%=fully open.
  uint16_t Press2Ctrl;                   //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} AT2FC2_t;

// def @AT2TWC CAN Message (419251710)
#define AT2TWC_IDE (1U)
#define AT2TWC_DLC (8U)
#define AT2TWC_CANID (0x18FD45FEU)
#define AT2TWC_CYC (500U)
// -- Aftertreatment 2 Three Way Catalyst  The purpose of this PGN is to group the aftertreatment Three Way Catalyst data for bank 2. These values include the intake temperature, outlet temperature and differential pressure as well as the associated ...
// signal: @InTemp
#define InTemp_CovFactor 0.03125
#define InTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @OutTemp
#define OutTemp_CovFactor 0.03125
#define OutTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @DiffPress
#define DiffPress_CovFactor 0.1
#define DiffPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Temperature of engine combustion byproducts entering the Three Way Catalyst in exhaust bank 2.    (For a single exhaust bank system, refer to parameters in PGN 64838.)
  int32_t InTemp;                        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of engine combustion byproducts leaving the Three Way Catalyst in exhaust bank 2.      (For a single exhaust bank system, refer to parameters in PGN 64838.)
  int32_t OutTemp;                       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Exhaust differential pressure measured between the intake and exhaust of a Three Way Catalyst in exhaust bank 2.    (For a single exhaust bank system, refer to parameters in PGN 64838.)
  uint16_t DiffPress;                    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Used to identify the applicable J1939-73 FMI detected in the Three Way Catalyst intake temperature sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple failures the ...
  uint8_t InTempPreliminaryFMI;          //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the Three Way Catalyst outlet temperature sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple failures the ...
  uint8_t OutTempPreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the Three Way Catalytic Converter differential pressure sensor by the manufacturer?s sensor control software in exhaust bank 2. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t DiffPressPreliminaryFMI;       //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT2TWC_t;

// def @AT1TWC CAN Message (419251966)
#define AT1TWC_IDE (1U)
#define AT1TWC_DLC (8U)
#define AT1TWC_CANID (0x18FD46FEU)
#define AT1TWC_CYC (500U)
// -- Aftertreatment 1 Three Way Catalyst  The purpose of this PGN is to group the aftertreatment Three Way Catalyst data for bank 1. These values include the intake temperature, outlet temperature and differential pressure as well as the associated ...
// signal: @InTemp
#define InTemp_CovFactor 0.03125
#define InTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @OutTemp
#define OutTemp_CovFactor 0.03125
#define OutTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @DiffPress
#define DiffPress_CovFactor 0.1
#define DiffPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Temperature of engine combustion byproducts entering the Three Way Catalyst in exhaust bank 1.
  int32_t InTemp;                        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of engine combustion byproducts leaving the Three Way Catalyst in exhaust bank 1.
  int32_t OutTemp;                       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Exhaust differential pressure measured between the intake and exhaust of a Three Way Catalyst in exhaust bank 1.
  uint16_t DiffPress;                    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Used to identify the applicable J1939-73 FMI detected in the Three Way Catalyst intake temperature sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures the ...
  uint8_t InTempPreliminaryFMI;          //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the Three Way Catalyst outlet temperature sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple failures the ...
  uint8_t OutTempPreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the Three Way Catalytic Converter differential pressure sensor by the manufacturer?s sensor control software in exhaust bank 1. When there is no failure FMI 31 is sent. In the case of multiple ...
  uint8_t DiffPressPreliminaryFMI;       //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT1TWC_t;

// def @O2FT2 CAN Message (419252478)
#define O2FT2_IDE (1U)
#define O2FT2_DLC (8U)
#define O2FT2_CANID (0x18FD48FEU)
// -- Engine Exhaust Bank 2 O2 Fuel Trim  Provides bank 2 short-term and long-term fuel trim values
// signal: @LongtermFuelTrimBank2
#define LongtermFuelTrimBank2_CovFactor 0.1
#define LongtermFuelTrimBank2_CovS(x) ((int32_t)((x / 0.1) + 1000))
// signal: @ShorttermFuelTrimBank2
#define ShorttermFuelTrimBank2_CovFactor 0.1
#define ShorttermFuelTrimBank2_CovS(x) ((int32_t)((x / 0.1) + 1000))
typedef struct
{

  // This parameter is the long-term percent change in fueling based on the O2 sensor feedback for cylinder bank 2, based on the operating point in the nominal fuel map.
  int32_t LongtermFuelTrimBank2;              //      Bits=16.  [ -100  , 100    ]  Unit:'%'     Offset= -100      Factor= 0.1   

  // This parameter is the short-term percent change in fueling based on the O2 sensor feedback for cylinder bank 2, based on the operating point in the nominal fuel map.
  int32_t ShorttermFuelTrimBank2;             //      Bits=16.  [ -100  , 100    ]  Unit:'%'     Offset= -100      Factor= 0.1   

  // This parameter indicates the status of the bank 2 O2 sensor feedback closed loop operation  0000 = Open loop - has not yet satisfied conditions to go closed loop  0001 = Closed loop - using oxygen sensor(s) as feedback for fuel control  0010 = Open ...
  // 15 - "not supported" 
  // 4 - "Closed loop,  but fault with at least one oxygen sensor" 
  // 3 - "Open loop, due to detected system fault " 
  // 2 - "Open loop due to driving conditions" 
  // 1 - "Closed loop, using oxygen sensor(s) as feedback for fuel control" 
  // 0 - "Open loop, has not yet satisfied conditions to go closed loop" 

  uint8_t EngExhstGsOxygnSnsrClsdLpOprtnBn;   //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} O2FT2_t;

// def @O2FT1 CAN Message (419252734)
#define O2FT1_IDE (1U)
#define O2FT1_DLC (8U)
#define O2FT1_CANID (0x18FD49FEU)
// -- Engine Exhaust Bank 1 O2 Fuel Trim  Provides bank 1 short-term and long-term fuel trim values
// signal: @LongtermFuelTrimBank1
#define LongtermFuelTrimBank1_CovFactor 0.1
#define LongtermFuelTrimBank1_CovS(x) ((int32_t)((x / 0.1) + 1000))
// signal: @ShorttermFuelTrimBank1
#define ShorttermFuelTrimBank1_CovFactor 0.1
#define ShorttermFuelTrimBank1_CovS(x) ((int32_t)((x / 0.1) + 1000))
typedef struct
{

  // This parameter is the long-term percent change in fueling based on the O2 sensor feedback for cylinder bank 1, based on the operating point in the nominal fuel map.
  int32_t LongtermFuelTrimBank1;              //      Bits=16.  [ -100  , 100    ]  Unit:'%'     Offset= -100      Factor= 0.1   

  // This parameter is the short-term percent change in fueling based on the O2 sensor feedback for cylinder bank 1, based on the operating point in the nominal fuel map.    Note:  This is similar to SPN 1695, but with higher resolution.
  int32_t ShorttermFuelTrimBank1;             //      Bits=16.  [ -100  , 100    ]  Unit:'%'     Offset= -100      Factor= 0.1   

  // This parameter indicates the status of the bank 1 O2 sensor feedback closed loop operation  0000 = Open loop - has not yet satisfied conditions to go closed loop  0001 = Closed loop - using oxygen sensor(s) as feedback for fuel control  0010 = Open ...
  // 15 - "not supported" 
  // 4 - "Closed loop,  but fault with at least one oxygen sensor" 
  // 3 - "Open loop, due to detected system fault " 
  // 2 - "Open loop due to driving conditions" 
  // 1 - "Closed loop, using oxygen sensor(s) as feedback for fuel control" 
  // 0 - "Open loop, has not yet satisfied conditions to go closed loop" 

  uint8_t EngExhstGsOxygnSnsrClsdLpOprtnBn;   //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} O2FT1_t;

// def @GPM211 CAN Message (419252990)
#define GPM211_IDE (1U)
#define GPM211_DLC (8U)
#define GPM211_CANID (0x18FD4AFEU)
// -- General Purpose Message #2/11  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-3.
typedef struct
{
  uint32_t framecnt;
} GPM211_t;

// def @GPM210 CAN Message (419253246)
#define GPM210_IDE (1U)
#define GPM210_DLC (8U)
#define GPM210_CANID (0x18FD4BFEU)
// -- General Purpose Message #2/10  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-3.
typedef struct
{
  uint32_t framecnt;
} GPM210_t;

// def @GPM29 CAN Message (419253502)
#define GPM29_IDE (1U)
#define GPM29_DLC (8U)
#define GPM29_CANID (0x18FD4CFEU)
// -- General Purpose Message #2/9  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-3.
typedef struct
{
  uint32_t framecnt;
} GPM29_t;

// def @GPM28 CAN Message (419253758)
#define GPM28_IDE (1U)
#define GPM28_DLC (8U)
#define GPM28_CANID (0x18FD4DFEU)
// -- General Purpose Message #2/8  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-3.
typedef struct
{
  uint32_t framecnt;
} GPM28_t;

// def @GPM27 CAN Message (419254014)
#define GPM27_IDE (1U)
#define GPM27_DLC (8U)
#define GPM27_CANID (0x18FD4EFEU)
// -- General Purpose Message #2/7  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-3.
typedef struct
{
  uint32_t framecnt;
} GPM27_t;

// def @GPM26 CAN Message (419254270)
#define GPM26_IDE (1U)
#define GPM26_DLC (8U)
#define GPM26_CANID (0x18FD4FFEU)
// -- General Purpose Message #2/6  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-3.
typedef struct
{
  uint32_t framecnt;
} GPM26_t;

// def @GPM19 CAN Message (419254526)
#define GPM19_IDE (1U)
#define GPM19_DLC (8U)
#define GPM19_CANID (0x18FD50FEU)
// -- General Purpose Message #1/9  Message to transmit data of the towing vehicle to the towed vehicle. See ISO 11992-3.
typedef struct
{
  uint32_t framecnt;
} GPM19_t;

// def @DM40 CAN Message (419258622)
#define DM40_IDE (1U)
#define DM40_DLC (8U)
#define DM40_CANID (0x18FD60FEU)
// -- Harmonized B1 Failure Counts (HB1C)  HB1C provides the system specific individual B1 failure counters, when supported by the system.
// signal: @FailureSpecificB1Counter
#define FailureSpecificB1Counter_CovFactor 0.1
#define FailureSpecificB1Counter_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // This 19-bit number is used to identify the item for which diagnostics are being reported.
  uint16_t SPN1;                         //      Bits=16.  [ 0     , 65536  ]  Unit:''     

  // The FMI defines the type of failure detected in the subsystem identified by an SPN.
  // 31 - "Not available" 
  // 19 - "Received network data in error" 
  // 18 - "Below normal (moderately severe)" 
  // 17 - "Below normal (least severe)" 
  // 16 - "Above normal (moderately severe)" 
  // 15 - "Above normal (least severe)" 
  // 14 - "Special intstructions" 
  // 13 - "Out of calibration" 
  // 12 - "Bad intelligent device" 
  // 11 - "Root cause not known" 
  // 10 - "Abnormal rate of change" 
  // 9 - "Abnormal update rate" 
  // 8 - "Abnormal frequency" 
  // 7 - "Mechanical system not responding" 
  // 6 - "Current above normal" 
  // 5 - "Current below normal" 
  // 4 - "Voltage below normal" 
  // 3 - "Voltage above normal" 
  // 2 - "Data erratic" 
  // 1 - "Below normal (most severe)" 
  // 0 - "Above normal (most severe)" 

  uint8_t FailureModeIdentifier1;        //      Bits=05.  [ 0     , 0      ]  Unit:''     

  // SPN #1 (Conversion Version 4)
  uint8_t SPN1High;                      //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The Failure Specific B1 Counter provides an individual B1 counter
  uint16_t FailureSpecificB1Counter;     //      Bits=16.  [ 0     , 6425.5 ]  Unit:'hr'    Factor= 0.1   
  uint32_t framecnt;
} DM40_t;

// def @DM39 CAN Message (419258878)
#define DM39_IDE (1U)
#define DM39_DLC (8U)
#define DM39_CANID (0x18FD61FEU)
// -- Cumulative Continuous MI ? System (HCMI)   HCMI provides the system specific cumulative.
// signal: @SysCumulativeContinuousMITime
#define SysCumulativeContinuousMITime_CovFactor 0.05
#define SysCumulativeContinuousMITime_CovS(x) ((uint32_t)((x / 0.05)))
// signal: @SysGreatestB1Counter
#define SysGreatestB1Counter_CovFactor 0.1
#define SysGreatestB1Counter_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // System Cumulative Continuous MI Time
  uint32_t SysCumulativeContinuousMITime;  //      Bits=32.  [ 0     , 210554060.75 ]  Unit:'hr'    Factor= 0.05  

  // System Greatest B1 Counter
  uint16_t SysGreatestB1Counter;           //      Bits=16.  [ 0     , 6425.5 ]  Unit:'hr'    Factor= 0.1   
  uint32_t framecnt;
} DM39_t;

// def @DM38 CAN Message (419259134)
#define DM38_IDE (1U)
#define DM38_DLC (8U)
#define DM38_CANID (0x18FD62FEU)
// -- Harmonized Global Regulation Description (HGRD)  HGRD provides a description of the UN/ECE WWH OBD Global Technical Regulation (GTR) to which the sub-system or  component complies.
typedef struct
{

  // Global Technical Regulation Description
  uint8_t RegulationDescription;         //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} DM38_t;

// def @DM37 CAN Message (419259390)
#define DM37_IDE (1U)
#define DM37_DLC (8U)
#define DM37_CANID (0x18FD63FEU)
// -- Harmonized Roadworthiness ? System (HRWS)  HRWS reports subsystem (or component) roadworthiness to the VOBD function to aggregate in the HRWV message.
typedef struct
{

  // System Non-Roadworthy Component Count
  uint8_t SysNonRoadworthyCompCount;     //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // System Malfunction Indicator Status
  uint8_t SysMalIndActivationMode;       //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // System Malfunction Indicator Display
  uint8_t SysMalIndDisplayStrategy;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // System Continuous Malfunction Indicator
  uint8_t SysContinuousMalfunctionInd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // System Incomplete Monitor Count
  uint16_t SysIncompleteMonitorCount;    //      Bits=16.  [ 0     , 64512  ]  Unit:''     
  uint32_t framecnt;
} DM37_t;

// def @DM36 CAN Message (419259646)
#define DM36_IDE (1U)
#define DM36_DLC (8U)
#define DM36_CANID (0x18FD64FEU)
// -- Harmonized Roadworthiness - Vehicle (HRWV)  HRWV provides the aggregated roadworthiness from the VOBD (Vehicle On-Board Diagnostics) to a scan tool or similar inquiry device.
typedef struct
{

  // Vehicle Non-Roadworthy Component Count
  uint8_t VehicleNonRoadworthyCompCount;     //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Vehicle Malfunction Indicator Status 
  uint8_t VehicleMalfunctionIndActMode;      //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Vehicle Continuous Malfunction Indicator
  uint8_t VehicleContinuousMalfunctionInd;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Vehicle Malfunction Indicator Display Strategy 
  uint8_t VehicleMalfunctionIndStrategy;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Vehicle Incomplete Monitor Count
  uint16_t VehicleIncompleteMonitorCount;    //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Vehicle current malfunction indicator accumulated time reports the accumulated count (in minutes) that the malfunction indicator lamp (MIL) is activated (on) for the current malfunction indicator (MI) activation (or the last MI activation).  For US, ...
  uint16_t VehicleCurrentMIAccumTime;        //      Bits=16.  [ 0     , 64255  ]  Unit:'min'  
  uint32_t framecnt;
} DM36_t;

// def @AT1FC2 CAN Message (419259902)
#define AT1FC2_IDE (1U)
#define AT1FC2_DLC (8U)
#define AT1FC2_CANID (0x18FD65FEU)
#define AT1FC2_CYC (500U)
// -- Aftertreatment 1 Fuel Control 2  Contains information about the aftertreatment 1 fuel system.  See also PGN 64929.
// signal: @Press2
#define Press2_CovFactor 0.1
#define Press2_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Press2ActCtrl
#define Press2ActCtrl_CovFactor 0.0025
#define Press2ActCtrl_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @HydrocarbonDoserInFuelTemp
#define HydrocarbonDoserInFuelTemp_CovFactor 1
#define HydrocarbonDoserInFuelTemp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Second fuel pressure measurement for the aftertreatment 1 system
  uint16_t Press2;                       //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Indicates how the device is controlling the aftertreatment 1 fuel pump relay.    00 off  01 on  10 reserved for SAE assignment  11 not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t PumpRelayCtrl;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates how the device is controlling the aftertreatment 1 fuel flow diverter valve. When this valve is on it diverts fuel flow from the Aftertreatment 1 Regeneration Device.    00 off  01 on  10 reserved for SAE assignment  11 not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t FlowDiverterVlvCtrl;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates how the device is controlling the aftertreatment 1 fuel pressure 2 regulating control valve.   0% = fully closed, 100%=fully open.
  uint16_t Press2ActCtrl;                //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Measured temperature of the intake fuel to the hydrocarbon dosing device.
  int16_t HydrocarbonDoserInFuelTemp;    //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} AT1FC2_t;

// def @ET4 CAN Message (419260158)
#define ET4_IDE (1U)
#define ET4_DLC (8U)
#define ET4_CANID (0x18FD66FEU)
#define ET4_CYC (1000U)
// -- Engine Temperature 4  Engine temperatures
// signal: @EngCoolantTemp2
#define EngCoolantTemp2_CovFactor 1
#define EngCoolantTemp2_CovS(x) ((int16_t)(x + 40))
// signal: @EngCoolantPumpOutletTemp
#define EngCoolantPumpOutletTemp_CovFactor 1
#define EngCoolantPumpOutletTemp_CovS(x) ((int16_t)(x + 40))
// signal: @EngCoolantThermostatOpening
#define EngCoolantThermostatOpening_CovFactor 0.4
#define EngCoolantThermostatOpening_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngExhstVlvActationSystemOilTemp
#define EngExhstVlvActationSystemOilTemp_CovFactor 0.03125
#define EngExhstVlvActationSystemOilTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhstGsRcrcltn1MxerIntakeTemp
#define EngExhstGsRcrcltn1MxerIntakeTemp_CovFactor 0.03125
#define EngExhstGsRcrcltn1MxerIntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngCoolantTemp3
#define EngCoolantTemp3_CovFactor 1
#define EngCoolantTemp3_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Second temperature of liquid found in the engine cooling system.   See also SPNs 110, 4193 and 6209.
  int16_t EngCoolantTemp2;                    //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The actual value of engine coolant temperature at the coolant pump outlet.  See also SPNs 110, 4076 and 6209 for additional coolant temperature parameters.
  int16_t EngCoolantPumpOutletTemp;           //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The current position of the Thermostat used to regulate the temperature of the engine coolant.  0% represents the thermostat allows flow to completely bypass the radiator and 100% represents the flow is fully through the radiator.
  uint8_t EngCoolantThermostatOpening;        //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The temperature of the oil in the hydraulic system that powers the engine exhaust valve actuation system
  int32_t EngExhstVlvActationSystemOilTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // The temperature of the EGR gas entering the intake mixer, measured after the intake throttle when provided.
  int32_t EngExhstGsRcrcltn1MxerIntakeTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Third temperature of liquid found in the engine cooling system. See also SPNs 110, 4076 and 4193.
  int16_t EngCoolantTemp3;                    //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} ET4_t;

// def @ZNVW CAN Message (419260414)
#define ZNVW_IDE (1U)
#define ZNVW_DLC (8U)
#define ZNVW_CANID (0x18FD67FEU)
// -- Zero Net Vehicle Weight Change  Zero Net Vehicle Weight Change
typedef struct
{

  // Zero Net Vehicle Weight Change command.  A controller receiving this command will record the current Gross Combination Weight as the new Zero, and future requests for Net Vehicle Weight Change will be answered with the difference between the (then) ...
  // 3 - "Not available / Not applicable" 
  // 2 - "Reserved" 
  // 1 - "Zero Net Vehicle Weight Change" 
  // 0 - "No change to Net Vehicle Weight Change " 

  uint8_t ZeroNetVehicleWeightChange;    //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} ZNVW_t;

// def @AAGW CAN Message (419261438)
#define AAGW_IDE (1U)
#define AAGW_DLC (8U)
#define AAGW_CANID (0x18FD6BFEU)
// -- Available Axle Group Weights  Indicates which axle groups are included in the current weight calculation
typedef struct
{

  // Indicates the availability of the sole or forward-most steer axle group for purposes of weight measurement  00 = Steer axle group not present  01 = Steer axle group present  10 = Reserved  11 = Not available / not applicable  If there is only one ...
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Steer axle group present" 
  // 0 - "Steer axle group not present" 

  uint8_t SteerAxleGroupWeightAvailable;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the availability of the lift axle group for purposes of weight measurement    00 = Lift axle group not present  01 = Lift axle group present  10 = Reserved  11 = Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Lift axle group present" 
  // 0 - "Lift axle group not present" 

  uint8_t LiftAxleGroupWeightAvailable;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the availability of the sole or forward-most drive axle group for purposes of weight measurement  00 = Drive axle group not present  01 = Drive axle group present  10 = Reserved  11 = Not available / not applicable  If there is only one ...
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Drive axle group present" 
  // 0 - "Drive axle group not present" 

  uint8_t DriveAxleGroupWeightAvailable;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the availability of the tag axle group for purposes of weight measurement    00 = Tag axle group not present  01 = Tag axle group present  10 = Reserved  11 = Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Tag axle group present" 
  // 0 - "Tag axle group not present" 

  uint8_t TagAxleGroupWeightAvailable;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the availability of the additional tractor axle group for purposes of weight measurement    00 = Additional tractor axle group not present  01 = Additional tractor axle group present  10 = Reserved  11 = Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Additional tractor axle group present" 
  // 0 - "Additional tractor axle group not present" 

  uint8_t AddtnlTrctrAxlGrpWeightAvailable;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the availability of the trailer A axle group for purposes of weight measurement    00 = Trailer A axle group not present  01 = Trailer A axle group present  10 = Reserved  11 = Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Trailer A axle group present" 
  // 0 - "Trailer A axle group not present" 

  uint8_t TrailerAAxleGroupWeightAvailable;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the availability of the trailer B axle group for purposes of weight measurement    00 = Trailer B axle group not present  01 = Trailer B axle group present  10 = Reserved  11 = Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Trailer B axle group present" 
  // 0 - "Trailer B axle group not present" 

  uint8_t TrailerBAxleGroupWeightAvailable;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the availability of the trailer C axle group for purposes of weight measurement    00 = Trailer C axle group not present  01 = Trailer C axle group present  10 = Reserved  11 = Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Trailer C axle group present" 
  // 0 - "Trailer C axle group not present" 

  uint8_t TrailerCAxleGroupWeightAvailable;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the availability of the trailer D axle group for purposes of weight measurement    00 = Trailer D axle group not present  01 = Trailer D axle group present  10 = Reserved  11 = Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Trailer D axle group present" 
  // 0 - "Trailer D axle group not present" 

  uint8_t TrailerDAxleGroupWeightAvailable;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the availability of the trailer E axle group for purposes of weight measurement    00 = Trailer E axle group not present  01 = Trailer E axle group present  10 = Reserved  11 = Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Trailer E axle group present" 
  // 0 - "Trailer E axle group not present" 

  uint8_t TrailerEAxleGroupWeightAvailable;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the availability of the trailer F axle group for purposes of weight measurement    00 = Trailer F axle group not present  01 = Trailer F axle group present  10 = Reserved  11 = Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Trailer F axle group present" 
  // 0 - "Trailer F axle group not present" 

  uint8_t TrailerFAxleGroupWeightAvailable;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the availability of the trailer G axle group for purposes of weight measurement    00 = Trailer G axle group not present  01 = Trailer G axle group present  10 = Reserved  11 = Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Trailer G axle group present" 
  // 0 - "Trailer G axle group not present" 

  uint8_t TrailerGAxleGroupWeightAvailable;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the availability of the trailer H axle group for purposes of weight measurement    00 = Trailer H axle group not present  01 = Trailer H axle group present  10 = Reserved  11 = Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Trailer H axle group present" 
  // 0 - "Trailer H axle group not present" 

  uint8_t TrailerHAxleGroupWeightAvailable;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the availability of the additional trailer axle group for purposes of weight measurement    00 = Additional trailer axle group not present  01 = Additional trailer axle group present  10 = Reserved  11 = Not available / not applicable
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Additional trailer axle group present" 
  // 0 - "Additional trailer axle group not present" 

  uint8_t AddtnlTrlrAxlGrupWeightAvailable;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates if a second (or rear) steer axle group weight is available.  00 = Rear Steer axle group not present  01 = Rear Steer axle group present  10 = Reserved  11 = Not available / not applicable  Note:  If there is only one steer axle, use SPN ...
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Rear Steer axle group present" 
  // 0 - "Rear Steer axle group not present" 

  uint8_t RarSteerAxleGroupWeightAvailable;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates if a second (or rear) drive axle group weight is available.  00 = Rear drive axle group not present  01 = Rear drive axle group present  10 = Reserved  11 = Not available / not applicable  Note:  If there is only one drive axle, use SPN ...
  // 3 - "Not available / not applicable" 
  // 2 - "Reserved" 
  // 1 - "Rear drive axle group present" 
  // 0 - "Rear drive axle group not present" 

  uint8_t RarDriveAxleGroupWeightAvailable;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} AAGW_t;

// def @AT2AC2 CAN Message (419261694)
#define AT2AC2_IDE (1U)
#define AT2AC2_DLC (8U)
#define AT2AC2_CANID (0x18FD6CFEU)
#define AT2AC2_CYC (500U)
// -- Aftertreatment 2 Air Control 2  This PGN contains information about the Aftertreatment 2 Air Control.  NOTE: This message will be transmitted by the engine or aftertreatment controller.  Other aftertreatment air control information could be added in ...
// signal: @SecondAirDiffPress
#define SecondAirDiffPress_CovFactor 0.0078125
#define SecondAirDiffPress_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @SecondAirTemp
#define SecondAirTemp_CovFactor 0.03125
#define SecondAirTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @SecondAirMFR
#define SecondAirMFR_CovFactor 0.2
#define SecondAirMFR_CovS(x) ((uint16_t)((x / 0.2)))
// signal: @SecondAirPress
#define SecondAirPress_CovFactor 0.1
#define SecondAirPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Indicates the secondary air differential pressure for aftertreatment 2.  Secondary air is air provided to the exhaust system (per SAE J2403).
  int32_t SecondAirDiffPress;            //      Bits=16.  [ -250  , 251.99 ]  Unit:'kPa'   Offset= -250      Factor= 0.0078125

  // Indicates the secondary air temperature for aftertreatment 2.  Secondary air is air provided to the exhaust system (per SAE J2403).
  int32_t SecondAirTemp;                 //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Indicates the secondary air mass flow for aftertreatment 2.  Secondary air is the air provided to the exhaust system (per SAE J2403).
  uint16_t SecondAirMFR;                 //      Bits=16.  [ 0     , 12851  ]  Unit:'kg/h'  Factor= 0.2   

  // Pressure of the secondary air for aftertreatment 2.  Secondary air is air provided to the exhaust system (per SAE J2403).    For absolute pressure, see SPN 5590.
  uint16_t SecondAirPress;               //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} AT2AC2_t;

// def @AT1AC2 CAN Message (419261950)
#define AT1AC2_IDE (1U)
#define AT1AC2_DLC (8U)
#define AT1AC2_CANID (0x18FD6DFEU)
#define AT1AC2_CYC (500U)
// -- Aftertreatment 1 Air Control 2  This PGN contains information about the Aftertreatment 1 Air Control.  NOTE: This message will be transmitted by the engine or aftertreatment controller.  Other aftertreatment air control information could be added in ...
// signal: @SecondAirDiffPress
#define SecondAirDiffPress_CovFactor 0.0078125
#define SecondAirDiffPress_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @SecondAirTemp
#define SecondAirTemp_CovFactor 0.03125
#define SecondAirTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @SecondAirMFR
#define SecondAirMFR_CovFactor 0.2
#define SecondAirMFR_CovS(x) ((uint16_t)((x / 0.2)))
// signal: @SecondAirPress
#define SecondAirPress_CovFactor 0.1
#define SecondAirPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Indicates the secondary air differential pressure for aftertreatment 1.  Secondary air is air provided to the exhaust system (per SAE J2403).
  int32_t SecondAirDiffPress;            //      Bits=16.  [ -250  , 251.99 ]  Unit:'kPa'   Offset= -250      Factor= 0.0078125

  // Indicates the secondary air temperature for aftertreatment 1.  Secondary air is air provided to the exhaust system (per SAE J2403).
  int32_t SecondAirTemp;                 //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Indicates the secondary air mass flow for aftertreatment 1.  Secondary air is the air provided to the exhaust system (per SAE J2403).
  uint16_t SecondAirMFR;                 //      Bits=16.  [ 0     , 12851  ]  Unit:'kg/h'  Factor= 0.2   

  // Pressure of the secondary air for aftertreatment 1.  Secondary air is air provided to the exhaust system (per SAE J2403).    For absolute pressure, see SPN 5589.
  uint16_t SecondAirPress;               //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} AT1AC2_t;

// def @A1SCRSI1 CAN Message (419262206)
#define A1SCRSI1_IDE (1U)
#define A1SCRSI1_DLC (8U)
#define A1SCRSI1_CANID (0x18FD6EFEU)
// -- Aftertreatment 1 SCR Service Information 1  This message contains SCR service information for aftertreatment system 1 (or bank 1).
// signal: @DEFAvgConsumption
#define DEFAvgConsumption_CovFactor 0.05
#define DEFAvgConsumption_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @CommandedDEFConsumption
#define CommandedDEFConsumption_CovFactor 0.05
#define CommandedDEFConsumption_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @ConversionEfficiency
#define ConversionEfficiency_CovFactor 0.4
#define ConversionEfficiency_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Measured use of diesel exhaust fluid by a Selective Catalytic Reduction system for exhaust emission control, averaged over the previous 15 hours of engine operation.  Used to determine whether the SCR system is using an appropriate amount of diesel ...
  uint16_t DEFAvgConsumption;            //      Bits=16.  [ 0     , 3212.75 ]  Unit:'L/h'   Factor= 0.05  

  // This parameter transmits the amount of diesel exhaust fluid that the emissions control system has requested to be used, averaged over the past 15 hours of engine operation.  Used to determine whether the SCR system is using an appropriate amount of ...
  uint16_t CommandedDEFConsumption;      //      Bits=16.  [ 0     , 3212.75 ]  Unit:'L/h'   Factor= 0.05  

  // The SCR conversion efficiency percentage.  Calculated as 100 times the catalyst intake NOx minus the catalyst outlet NOx divided by the catalyst intake NOx.  The catalyst conversion efficiency number in itself does not imply emissions compliance or ...
  uint8_t ConversionEfficiency;          //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The distance traveled while SCR inducement (SPN 5246 is equal to level 1 to 5) is active.  Distance is reset once inducement is no longer active for SCR (SPN 5246 = 0).  Emission Control System Operator Inducement Severity, SPN 5826, may be active ...
  uint16_t SCROpIndActiveTraveledDist;   //      Bits=16.  [ 0     , 64255  ]  Unit:'km'   

  // Indicates the sulfur level in the SCR system for aftertreatment 1.  .  100% level could be the regeneration trigger level (and if conditions are not favorable for regeneration, sulfation loading can continue beyond 100%). During normal operation and ...
  uint8_t SysSulfationLvl;               //      Bits=08.  [ 0     , 250    ]  Unit:'%'    
  uint32_t framecnt;
} A1SCRSI1_t;

// def @EEC8 CAN Message (419262462)
#define EEC8_IDE (1U)
#define EEC8_DLC (8U)
#define EEC8_CANID (0x18FD6FFEU)
// -- Electronic Engine Controller 8  Engine related parameters
// signal: @EngExhstGsRcrculation1Valve2Ctrl
#define EngExhstGsRcrculation1Valve2Ctrl_CovFactor 0.0025
#define EngExhstGsRcrculation1Valve2Ctrl_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngExhstGsRcrcltn1ClerIntakeTemp
#define EngExhstGsRcrcltn1ClerIntakeTemp_CovFactor 0.03125
#define EngExhstGsRcrcltn1ClerIntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhstGsRcrcltn1ClrIntkGsAbsPr
#define EngExhstGsRcrcltn1ClrIntkGsAbsPr_CovFactor 0.5
#define EngExhstGsRcrcltn1ClrIntkGsAbsPr_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @EngExhstGsRcrcltn1ClerEfficiency
#define EngExhstGsRcrcltn1ClerEfficiency_CovFactor 0.4
#define EngExhstGsRcrcltn1ClerEfficiency_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Desired percentage of maximum Exhaust Gas Recirculation (EGR) valve opening for valve 2.  0% means valve is closed. 100% means maximum valve opening (full gas flow).
  uint16_t EngExhstGsRcrculation1Valve2Ctrl;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Exhaust Gas Recirculation (EGR) Temperature measured at the EGR cooler intake.  See SPN 412 for Engine EGR temperature which is typically measured at the EGR cooler outlet.
  int32_t EngExhstGsRcrcltn1ClerIntakeTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Exhaust gas recirculation absolute pressure is measured at the EGR cooler intake. See SPN 3358 for EGR pressure measured at the EGR cooler outlet before the valve.
  uint16_t EngExhstGsRcrcltn1ClrIntkGsAbsPr;  //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // Exhaust Gas Recirculation cooler efficiency is an indication of the cooler?s ability to reduce the temperature of the exhaust gas that is being recirculated back to the intake. 0% = no reduction in temperature, 100% = maximum cooling.  The EGR ...
  uint8_t EngExhstGsRcrcltn1ClerEfficiency;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} EEC8_t;

// def @DRC CAN Message (419262718)
#define DRC_IDE (1U)
#define DRC_DLC (8U)
#define DRC_CANID (0x18FD70FEU)
#define DRC_CYC (1000U)
// -- Door ramp control  This message reports the current status of door ramps
typedef struct
{

  // Retract status of ramp at doorway 1, counting from front to back on the vehicle.     00 ramp retracted  01 ramp extended  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "ramp extended" 
  // 0 - "ramp retracted" 

  uint8_t RetractStatusOfRamp1;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Enable status of ramp at doorway 1, counting from front to back on the vehicle.            00 ramp disabled          01 ramp enabled          10 error          11 not available
  // 3 - "not available" 
  // 2 - "error " 
  // 1 - "ramp enabled " 
  // 0 - "ramp disabled" 

  uint8_t EnableStatusOfRamp1;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Movement status of ramp at doorway 1, counting from front to back on the vehicle.    00 ramp not being moved  01 ramp being moved  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "ramp being moved" 
  // 0 - "ramp not being moved" 

  uint8_t MovementStatusOfRamp1;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Retract status of ramp at doorway 2, counting from front to back on the vehicle.    00 ramp retracted  01 ramp extended  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "ramp extended" 
  // 0 - "ramp retracted" 

  uint8_t RetractStatusOfRamp2;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Enable status of ramp at doorway 2, counting from front to back on the vehicle.    00 ramp disabled  01 ramp enabled   10 error   11 not available
  // 3 - "not available" 
  // 2 - "error " 
  // 1 - "ramp enabled " 
  // 0 - "ramp disabled" 

  uint8_t EnableStatusOfRamp2;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Movement status of ramp at doorway 2, counting from front to back on the vehicle.    00 ramp not being moved  01 ramp being moved  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "ramp being moved" 
  // 0 - "ramp not being moved" 

  uint8_t MovementStatusOfRamp2;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Retract status of ramp at doorway 3, counting from front to back on the vehicle.    00 ramp retracted  01 ramp extended  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "ramp extended" 
  // 0 - "ramp retracted" 

  uint8_t RetractStatusOfRamp3;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Enable status of ramp at doorway 3, counting from front to back on the vehicle.    00 ramp disabled  01 ramp enabled   10 error   11 not available
  // 3 - "not available" 
  // 2 - "error " 
  // 1 - "ramp enabled " 
  // 0 - "ramp disabled" 

  uint8_t EnableStatusOfRamp3;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Movement status of ramp at doorway 3, counting from front to back on the vehicle.    00 ramp not being moved  01 ramp being moved  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "ramp being moved" 
  // 0 - "ramp not being moved" 

  uint8_t MovementStatusOfRamp3;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Retract status of ramp at doorway 4, counting from front to back on the vehicle.     00 ramp retracted  01 ramp extended  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "ramp extended" 
  // 0 - "ramp retracted" 

  uint8_t RetractStatusOfRamp4;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Enable status of ramp at doorway 4, counting from front to back on the vehicle.    00 ramp disabled  01 ramp enabled   10 error   11 not available
  // 3 - "not available" 
  // 2 - "error " 
  // 1 - "ramp enabled " 
  // 0 - "ramp disabled" 

  uint8_t EnableStatusOfRamp4;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Movement status of ramp at doorway 4, counting from front to back on the vehicle.    00 ramp not being moved  01 ramp being moved  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "ramp being moved" 
  // 0 - "ramp not being moved" 

  uint8_t MovementStatusOfRamp4;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Retract status of ramp at doorway 5, counting from front to back on the vehicle.     00 ramp retracted  01 ramp extended  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "ramp extended" 
  // 0 - "ramp retracted" 

  uint8_t RetractStatusOfRamp5;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Enable status of ramp at doorway 5, counting from front to back on the vehicle.    00 ramp disabled  01 ramp enabled   10 error   11 not available
  // 3 - "not available" 
  // 2 - "error " 
  // 1 - "ramp enabled " 
  // 0 - "ramp disabled" 

  uint8_t EnableStatusOfRamp5;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Movement status of ramp at doorway 5, counting from front to back on the vehicle.    00 ramp not being moved  01 ramp being moved  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "ramp being moved" 
  // 0 - "ramp not being moved" 

  uint8_t MovementStatusOfRamp5;         //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} DRC_t;

// def @BSA CAN Message (419262974)
#define BSA_IDE (1U)
#define BSA_DLC (8U)
#define BSA_CANID (0x18FD71FEU)
#define BSA_CYC (1000U)
// -- Brake actuator stroke status  The Brake Stroke Alert (BSA) message will provide the brake actuator stroke status for up to 20 wheel ends.
typedef struct
{

  // Brake stroke status for left brake actuator on tractor axle 1.     000 - OK (Normal operation)    001 - Non-functioning  010 - Overstroke   011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke " 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TractorBrakeStrokeAxle1Left;    //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for right brake actuator on tractor axle 1.     000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TractorBrakeStrokeAxle1Right;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for left brake actuator on tractor axle 2.     000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TractorBrakeStrokeAxle2Left;    //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for right brake actuator on tractor axle 2.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TractorBrakeStrokeAxle2Right;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for left brake actuator on tractor axle 3.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TractorBrakeStrokeAxle3Left;    //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for right brake actuator on tractor axle 3.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 0 - "OK" 
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 

  uint8_t TractorBrakeStrokeAxle3Right;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for left brake actuator on tractor axle 4.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TractorBrakeStrokeAxle4Left;    //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for right brake actuator on tractor axle 4.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TractorBrakeStrokeAxle4Right;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for left brake actuator on tractor axle 5.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TractorBrakeStrokeAxle5Left;    //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for right brake actuator on tractor axle 5.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TractorBrakeStrokeAxle5Right;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for left brake actuator on trailerr axle 1.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TrailerBrakeStrokeAxle1Left;    //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for right brake actuator on trailer axle 1.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TrailerBrakeStrokeAxle1Right;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for left brake actuator on trailer axle 2.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TrailerBrakeStrokeAxle2Left;    //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for right brake actuator on trailer axle 2.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TrailerBrakeStrokeAxle2Right;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for left brake actuator on trailer axle 3.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TrailerBrakeStrokeAxle3Left;    //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for right brake actuator on trailer axle 3.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TrailerBrakeStrokeAxle3Right;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for left brake actuator on trailer axle 4.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TrailerBrakeStrokeAxle4Left;    //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for right brake actuator on trailer axle 4.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TrailerBrakeStrokeAxle4Right;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for left brake actuator on trailer axle 5.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TrailerBrakeStrokeAxle5Left;    //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Brake stroke status for right brake actuator on trailer axle 5.    000 - OK (Normal operation)  001 - Non-functioning  010 - Overstroke  011 - Dragging brake  100 - Reserved  101 - Reserved  110 - Sensor error  111 - Not available
  // 7 - "Not available" 
  // 6 - "Sensor error" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Dragging brake" 
  // 2 - "Overstroke" 
  // 1 - "Non-functioning" 
  // 0 - "OK" 

  uint8_t TrailerBrakeStrokeAxle5Right;   //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} BSA_t;

// def @ESV6 CAN Message (419263230)
#define ESV6_IDE (1U)
#define ESV6_DLC (8U)
#define ESV6_CANID (0x18FD72FEU)
// -- Engine Spark Voltage 6  The PGN contains information about spark voltage values for cylinders 21 through 24.  This is the secondary voltage of the combustion event.
typedef struct
{

  // The measured voltage of the spark event on Cylinder #21
  uint16_t EngSparkPlug21;               //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #22
  uint16_t EngSparkPlug22;               //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #23
  uint16_t EngSparkPlug23;               //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #24
  uint16_t EngSparkPlug24;               //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESV6_t;

// def @ESV5 CAN Message (419263486)
#define ESV5_IDE (1U)
#define ESV5_DLC (8U)
#define ESV5_CANID (0x18FD73FEU)
// -- Engine Spark Voltage 5  The PGN contains information about spark voltage values for cylinders 17 through 20.  This is the secondary voltage of the combustion event.
typedef struct
{

  // The measured voltage of the spark event on Cylinder #17
  uint16_t EngSparkPlug17;               //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #18
  uint16_t EngSparkPlug18;               //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #19
  uint16_t EngSparkPlug19;               //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #20
  uint16_t EngSparkPlug20;               //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESV5_t;

// def @ESV4 CAN Message (419263742)
#define ESV4_IDE (1U)
#define ESV4_DLC (8U)
#define ESV4_CANID (0x18FD74FEU)
// -- Engine Spark Voltage 4  The PGN contains information about spark voltage values for cylinders 13 through 16.  This is the secondary voltage of the combustion event.
typedef struct
{

  // The measured voltage of the spark event on Cylinder #13
  uint16_t EngSparkPlug13;               //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #14
  uint16_t EngSparkPlug14;               //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #15
  uint16_t EngSparkPlug15;               //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #16
  uint16_t EngSparkPlug16;               //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESV4_t;

// def @ESV3 CAN Message (419263998)
#define ESV3_IDE (1U)
#define ESV3_DLC (8U)
#define ESV3_CANID (0x18FD75FEU)
// -- Engine Spark Voltage 3  The PGN contains information about spark voltage values for cylinders 9 through 12.  This is the secondary voltage of the combustion event.
typedef struct
{

  // The measured voltage of the spark event on Cylinder #9
  uint16_t EngSparkPlug9;                //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #10
  uint16_t EngSparkPlug10;               //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #11
  uint16_t EngSparkPlug11;               //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #12
  uint16_t EngSparkPlug12;               //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESV3_t;

// def @ESV2 CAN Message (419264254)
#define ESV2_IDE (1U)
#define ESV2_DLC (8U)
#define ESV2_CANID (0x18FD76FEU)
// -- Engine Spark Voltage 2  The PGN contains information about spark voltage values for cylinders 5 through 8.  This is the secondary voltage of the combustion event.
typedef struct
{

  // The measured voltage of the spark event on Cylinder #5
  uint16_t EngSparkPlug5;                //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #6
  uint16_t EngSparkPlug6;                //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #7
  uint16_t EngSparkPlug7;                //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #8
  uint16_t EngSparkPlug8;                //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESV2_t;

// def @ESV1 CAN Message (419264510)
#define ESV1_IDE (1U)
#define ESV1_DLC (8U)
#define ESV1_CANID (0x18FD77FEU)
// -- Engine Spark Voltage 1  The PGN contains information about spark voltage values for cylinders 1 through 4.  This is the secondary voltage of the combustion event.
typedef struct
{

  // The measured voltage of the spark event on Cylinder #1
  uint16_t EngSparkPlug1;                //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #2
  uint16_t EngSparkPlug2;                //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #3
  uint16_t EngSparkPlug3;                //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The measured voltage of the spark event on Cylinder #4
  uint16_t EngSparkPlug4;                //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESV1_t;

// def @AT2S1 CAN Message (419265278)
#define AT2S1_IDE (1U)
#define AT2S1_DLC (8U)
#define AT2S1_CANID (0x18FD7AFEU)
// -- Aftertreatment 2 Service 1  This PGN contains information about the aftertreatment 2 (diesel particulate filter 2 soot and ash load).
// signal: @DPFSootLoadRegenThreshold
#define DPFSootLoadRegenThreshold_CovFactor 0.0025
#define DPFSootLoadRegenThreshold_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // Indicates the soot load percent of diesel particulate filter 2.  100% is the level at which active diesel particulate filter regeneration should be triggered.  100% level is the active regeneration trigger level (and if conditions are not favorable ...
  uint8_t DPFSootLoadPercent;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Indicates the ash load percent of diesel particulate filter 2.  100% is the level at which diesel particulate filter ash service should be performed.  100% level is the target ash service interval (and if ash service is not immediately performed, ...
  uint8_t DPFAshLoadPercent;             //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Indicates the time since the last active regeneration event of diesel particulate filter 2.
  uint32_t DPFTimeSinceLastActiveRegen;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // This parameter indicates the value that will first cause DPF regeneration in aftertreatment 2. There may be multiple parameters that cause DPF regeneration (e.g. Percent Soot Load, DPF delta pressure converted to normalized percentage, etc.).  If ...
  uint16_t DPFSootLoadRegenThreshold;    //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} AT2S1_t;

// def @AT1S1 CAN Message (419265534)
#define AT1S1_IDE (1U)
#define AT1S1_DLC (8U)
#define AT1S1_CANID (0x18FD7BFEU)
// -- Aftertreatment 1 Service 1  This PGN contains information about the aftertreatment 1 (diesel particulate filter 1 soot and ash load).
// signal: @DPFSootLoadRegenThreshold
#define DPFSootLoadRegenThreshold_CovFactor 0.0025
#define DPFSootLoadRegenThreshold_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // Indicates the soot load percent of diesel particulate filter 1.  100% is the level at which active diesel particulate filter regeneration should be triggered.  100% level is the active regeneration trigger level (and if conditions are not favorable ...
  uint8_t DPFSootLoadPercent;            //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Indicates the ash load percent of diesel particulate filter 1.  100% is the level at which diesel particulate filter ash service should be performed.  100% level is the target ash service interval (and if ash service is not immediately performed, ...
  uint8_t DPFAshLoadPercent;             //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // Indicates the time since the last active regeneration event of diesel particulate filter 1.
  uint32_t DPFTimeSinceLastActiveRegen;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // This parameter indicates the value that will first cause DPF regeneration in aftertreatment 1. There may be multiple parameters that cause DPF regeneration (e.g. Percent Soot Load, DPF delta pressure converted to normalized percentage, etc.).  If ...
  uint16_t DPFSootLoadRegenThreshold;    //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} AT1S1_t;

// def @DPFC1 CAN Message (419265790)
#define DPFC1_IDE (1U)
#define DPFC1_DLC (8U)
#define DPFC1_CANID (0x18FD7CFEU)
#define DPFC1_CYC (1000U)
// -- Diesel Particulate Filter Control 1  This PGN contains information about the diesel particulate filter regeneration control.  If there are aftertreatment systems on two banks, this PGN represents the composite information from both banks.  NOTE ...
typedef struct
{

  // Command to control the diesel particulate filter lamp.  000 Off  001 On - solid  010 reserved for SAE assignment  011 reserved for SAE assignment  100 On - fast blink (1 HZ)  101 reserved for SAE assignment  110 reserved for SAE assignment  111 not ...
  // 7 - "not available" 
  // 6 - "reserved for SAE assignment" 
  // 5 - "reserved for SAE assignment" 
  // 4 - "On, fast blink" 
  // 3 - "reserved for SAE assignment" 
  // 2 - "reserved for SAE assignment " 
  // 1 - "On, solid" 
  // 0 - "Off" 

  uint8_t DieselParticulateFilterLampCmd;     //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Indicates the state of diesel particulate filter passive regeneration.  This is an aggregate of bank 1 and bank 2.  It is a system status and not individual bank status.      00 not active  01 active  10 reserved for SAE assignment  11 not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t AFTDPFPassiveRegenStatus;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration.  This is an aggregate of bank 1 and bank 2.  It is a system status and not individual bank status.  00 not active  01 active  10 regeneration needed - automatically initiated ...
  // 3 - "not available" 
  // 2 - "regeneration needed" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t AFTDPFActiveRegenStatus;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of the diesel particulate filter regeneration need and urgency.  This is an aggregate of bank 1 and bank 2.  It is a system status and not individual bank status.  000 Regeneration not needed  001 Regeneration needed - lowest ...
  // 7 - "not available" 
  // 6 - "reserved for SAE assignment" 
  // 5 - "reserved for SAE assignment" 
  // 4 - "reserved for SAE assignment" 
  // 3 - "Regeneration needed, highest level" 
  // 2 - "Regeneration needed, moderate level" 
  // 1 - "Regeneration needed, lowest level" 
  // 0 - "Regeneration not needed" 

  uint8_t AFTDPFStatus;                       //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the diesel particulate filter regeneration not ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbtdStt;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to the Diesel Particulate Filter Regeneration Inhibit Switch.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbtdDTI;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to the clutch being disengaged.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the diesel ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbtdDTC;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to the service brake being active.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the diesel ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbtdDTS;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to the PTO being active.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the diesel particulate ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbtdDTP;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to the accelerator pedal being off idle.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbtdDTA;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to the transmission being out of neutral.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbtdDTO;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to the vehicle speed being above an allowed limit.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbtdDTV;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to the parking brake being not set.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the diesel ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbt3710;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to the exhaust temperature being too low.  This implies that the diesel particulate filter and/or oxidation catalyst are likewise too cold for active regeneration.   ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbtdDTL;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to a system fault being active.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the diesel ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbt3712;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to a system timeout.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the diesel particulate ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbt3713;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to a temporary system lockout.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the diesel ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbtdDTT;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to a permanent system lockout.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the diesel ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbt3715;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to the engine not being warmed up.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the diesel ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbtdDTE;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to vehicle speed being less than the allowed vehicle speed.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbt3717;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the configuration of diesel particulate filter active regeneration automatic initiation.    00 not enabled  01 enabled  10 reserved for SAE assignment  11 not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "enabled" 
  // 0 - "not enabled" 

  uint8_t DslPrtcltFltrAtmtcActvRgnrtnIntt;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to control the exhaust system high temperature lamp.  This lamp indicates that the exhaust system temperature is high.  000 Off  001 On - solid  010 reserved for SAE assignment  011 reserved for SAE assignment  100 reserved for SAE ...
  // 7 - "not available" 
  // 6 - "reserved for SAE assignment" 
  // 5 - "reserved for SAE assignment" 
  // 4 - "reserved for SAE assignment" 
  // 3 - "reserved for SAE assignment" 
  // 2 - "reserved for SAE assignment " 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t ExhaustSystemHighTempLampCmd;       //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Indicates the forced execution status of diesel particulate filter regeneration.  000 Not Active  001 Active - Forced by Switch (See SPN 3696)  010 Active - Forced by Service Tool  011 Reserved for SAE Assignment  100 Reserved for SAE Assignment   ...
  // 3 - "Reserved for SAE Assignment" 
  // 2 - "Active, Forced by Service Tool " 
  // 1 - "Active, Forced by Switch" 
  // 0 - "Not Active" 
  // 7 - "not available" 
  // 6 - "Reserved for SAE Assignment" 
  // 5 - "Reserved for SAE Assignment" 
  // 4 - "Reserved for SAE Assignment" 

  uint8_t DslPrtcltFltrActvRgnrtnFrcdSttus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Purging enable of the Hydrocarbon Doser (HCD).    00 Purging not enabled  01 Purging enabled - less urgent  10 Purging enabled - urgent  11 Not available
  // 3 - "Not available" 
  // 2 - "Purging enabled, urgent" 
  // 1 - "Purging enabled, less urgent" 
  // 0 - "Purging not enabled" 

  uint8_t HydrocarbonDoserPurgingEnable;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the state of diesel particulate filter active regeneration inhibition due to low exhaust pressure.  00 not inhibited  01 inhibited  10 reserved for SAE assignment  11 not available  This SPN indicates the reason for the diesel particulate ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "inhibited" 
  // 0 - "not inhibited" 

  uint8_t DslPrtcltFltrActvRgnrtnInhbt5629;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that diesel particulate filter 1 is not able to begin or continue an active regenerate event at the current engine operating conditions.  00 active DPF regeneration not inhibited  01 active DPF regeneration inhibited  10 reserved for SAE ...
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active DPF regeneration inhibited" 
  // 0 - "active DPF regeneration not inhibited" 

  uint8_t AFT1DPFCondNotMetForActiveRegen;    //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} DPFC1_t;

// def @FMS1 CAN Message (419266046)
#define FMS1_IDE (1U)
#define FMS1_DLC (8U)
#define FMS1_CANID (0x18FD7DFEU)
// -- Reserved for FMS Telltale status  Reserved for FMS Telltale Status
typedef struct
{
  uint32_t framecnt;
} FMS1_t;

// def @AFSS CAN Message (419266302)
#define AFSS_IDE (1U)
#define AFSS_DLC (8U)
#define AFSS_CANID (0x18FD7EFEU)
// -- Adaptive Front-Lighting System Status  This message reports information about the current operation mode of the Adaptive Front-Lighting System (AFS). The Message may include information about dynamic bending light and light distribution. The message ...
typedef struct
{

  // This parameter indicates whether the dynamic bending light of the left headlamp is working properly.  000   Dynamic bending light deactivated.  There is no problem but for some reasons (e.g. daylight present) the bending light is deactivated.  001 ...
  // 7 - "Not available" 
  // 3 - "Dynamic bending light failure" 
  // 2 - "Dynamic bending light fail safe position" 
  // 1 - "Dynamic bending light is working properly" 
  // 0 - "Dynamic bending light deactivated" 

  uint8_t LeftHeadlampDynamicBendingLight;    //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // This parameter indicates whether the dynamic bending light of the left headlamp is working properly.  000   Dynamic bending light deactivated.  There is no problem but for some reasons (e.g. daylight present) the bending light is deactivated.  001 ...
  // 7 - "Not available" 
  // 3 - "Dynamic bending light failure" 
  // 2 - "Dynamic bending light fail safe position" 
  // 1 - "Dynamic bending light is working properly" 
  // 0 - "Dynamic bending light deactivated" 

  uint8_t RightHeadlampDynamicBendingLight;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // This parameter indicates what kind of light distribution is set by the AFS system for the left headlamp.  0000   Light distribution town - The basic light distribution for town light is generated with a symmetrical cut-off line (Class V)  0001 ...
  // 15 - "Not available" 
  // 7 - "Different light distributions not available" 
  // 6 - "Light distribution failure" 
  // 5 - "Light distribution fail safe position" 
  // 4 - "Light distribution adverse weather" 
  // 3 - "Light distribution high beam" 
  // 2 - "Light distribution motorway" 
  // 1 - "Light distribution country" 
  // 0 - "Light distribution town" 

  uint8_t LeftHeadlampLightDistribution;      //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // This parameter indicates what kind of light distribution is set by the AFS system for the right headlamp.  0000   Light distribution town - The basic light distribution for town light is generated with a symmetrical cut-off line (Class V)  0001 ...
  // 15 - "Not available" 
  // 7 - "Different light distributions not available" 
  // 6 - "Light distribution failure" 
  // 5 - "Light distribution fail safe position" 
  // 4 - "Light distribution adverse weather" 
  // 3 - "Light distribution high beam" 
  // 2 - "Light distribution motorway" 
  // 1 - "Light distribution country" 
  // 0 - "Light distribution town" 

  uint8_t RightHeadlampLightDistribution;     //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} AFSS_t;

// def @EC2 CAN Message (419266558)
#define EC2_IDE (1U)
#define EC2_DLC (8U)
#define EC2_CANID (0x18FD7FFEU)
// -- Engine Configuration 2  Contains static information about the engine.  To be used with data that will not change during vehicle operation.  .
typedef struct
{

  // The number of cranking cycles that will be performed before ending the start attempt.  This is intended to be used in conjunction with Crank Attempt Count on Present Start Attempt, in order to give a FMI 0 diagnostic on the latter.
  uint8_t MaxCrankAttemptsPerStartAttempt;    //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Defined number of combustion cycles used for calculating average parameters of combustion in each cylinder.
  uint8_t NmbrOfCmbstionCyclesForAveraging;   //      Bits=08.  [ 1     , 250    ]  Unit:''     

  // Used to identify the hardware configuration of engine family. Each number will have a reference to set of parameters such as, but not limited to, number of cylinders, piston displacement, bore size and firing angles.
  uint16_t EngConfigIdentification;           //      Bits=16.  [ 0     , 64255  ]  Unit:''     
  uint32_t framecnt;
} EC2_t;

// def @TCI CAN Message (419267582)
#define TCI_IDE (1U)
#define TCI_DLC (8U)
#define TCI_CANID (0x18FD83FEU)
#define TCI_CYC (1000U)
// -- Transfer Case Information  Transfer Case Information
typedef struct
{

  // This parameter describes the feedback from the  transfer case controller . Used by instrument clusters,  tachographs, PTOs , etc.  000 2 wheel high (normal or `'On Highway' Range)  001 4 wheel high (normal or  'On Highway' Range  010 neutral  011 2 ...
  // 7 - "not available" 
  // 6 - "error" 
  // 5 - "Transfer Case Shift in Progress or gear not confirmed" 
  // 4 - "4 wheel low" 
  // 3 - "2 wheel low" 
  // 2 - "neutral" 
  // 1 - "4 wheel high" 
  // 0 - "2 wheel high" 

  uint8_t TransferCaseStatus;            //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} TCI_t;

// def @EFL_P9 CAN Message (419267838)
#define EFL_P9_IDE (1U)
#define EFL_P9_DLC (8U)
#define EFL_P9_CANID (0x18FD84FEU)
#define EFL_P9_CYC (500U)
// -- Engine Fluid Level/Pressure 9  This message contains Engine Intake Valve Actuation Oil Pressure information.
// signal: @EngIntkVlvActtonOilPressForCyl17
#define EngIntkVlvActtonOilPressForCyl17_CovFactor 0.1
#define EngIntkVlvActtonOilPressForCyl17_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntkVlvActtonOilPressForCyl18
#define EngIntkVlvActtonOilPressForCyl18_CovFactor 0.1
#define EngIntkVlvActtonOilPressForCyl18_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntkVlvActtonOilPressForCyl19
#define EngIntkVlvActtonOilPressForCyl19_CovFactor 0.1
#define EngIntkVlvActtonOilPressForCyl19_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntkVlvActtonOilPressForCyl20
#define EngIntkVlvActtonOilPressForCyl20_CovFactor 0.1
#define EngIntkVlvActtonOilPressForCyl20_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #17.
  uint16_t EngIntkVlvActtonOilPressForCyl17;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #18.
  uint16_t EngIntkVlvActtonOilPressForCyl18;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #19.
  uint16_t EngIntkVlvActtonOilPressForCyl19;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #20.
  uint16_t EngIntkVlvActtonOilPressForCyl20;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} EFL_P9_t;

// def @EFL_P8 CAN Message (419268094)
#define EFL_P8_IDE (1U)
#define EFL_P8_DLC (8U)
#define EFL_P8_CANID (0x18FD85FEU)
#define EFL_P8_CYC (500U)
// -- Engine Fluid Level/Pressure 8  This message contains Engine Intake Valve Actuation Oil Pressure information.
// signal: @EngIntkVlvActtonOilPressForCyl13
#define EngIntkVlvActtonOilPressForCyl13_CovFactor 0.1
#define EngIntkVlvActtonOilPressForCyl13_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntkVlvActtonOilPressForCyl14
#define EngIntkVlvActtonOilPressForCyl14_CovFactor 0.1
#define EngIntkVlvActtonOilPressForCyl14_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntkVlvActtonOilPressForCyl15
#define EngIntkVlvActtonOilPressForCyl15_CovFactor 0.1
#define EngIntkVlvActtonOilPressForCyl15_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntkVlvActtonOilPressForCyl16
#define EngIntkVlvActtonOilPressForCyl16_CovFactor 0.1
#define EngIntkVlvActtonOilPressForCyl16_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #13.
  uint16_t EngIntkVlvActtonOilPressForCyl13;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #14.
  uint16_t EngIntkVlvActtonOilPressForCyl14;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #15.
  uint16_t EngIntkVlvActtonOilPressForCyl15;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #16.
  uint16_t EngIntkVlvActtonOilPressForCyl16;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} EFL_P8_t;

// def @EFL_P7 CAN Message (419268350)
#define EFL_P7_IDE (1U)
#define EFL_P7_DLC (8U)
#define EFL_P7_CANID (0x18FD86FEU)
#define EFL_P7_CYC (500U)
// -- Engine Fluid Level/Pressure 7  This message contains Engine Intake Valve Actuation Oil Pressure information.
// signal: @EngIntkVlvActtionOilPressForCyl9
#define EngIntkVlvActtionOilPressForCyl9_CovFactor 0.1
#define EngIntkVlvActtionOilPressForCyl9_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntkVlvActtonOilPressForCyl10
#define EngIntkVlvActtonOilPressForCyl10_CovFactor 0.1
#define EngIntkVlvActtonOilPressForCyl10_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntkVlvActtonOilPressForCyl11
#define EngIntkVlvActtonOilPressForCyl11_CovFactor 0.1
#define EngIntkVlvActtonOilPressForCyl11_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntkVlvActtonOilPressForCyl12
#define EngIntkVlvActtonOilPressForCyl12_CovFactor 0.1
#define EngIntkVlvActtonOilPressForCyl12_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #9.
  uint16_t EngIntkVlvActtionOilPressForCyl9;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #10.
  uint16_t EngIntkVlvActtonOilPressForCyl10;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #11.
  uint16_t EngIntkVlvActtonOilPressForCyl11;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #12.
  uint16_t EngIntkVlvActtonOilPressForCyl12;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} EFL_P7_t;

// def @EFL_P6 CAN Message (419268606)
#define EFL_P6_IDE (1U)
#define EFL_P6_DLC (8U)
#define EFL_P6_CANID (0x18FD87FEU)
#define EFL_P6_CYC (500U)
// -- Engine Fluid Level/Pressure 6  This message contains Engine Intake Valve Actuation Oil Pressure information.
// signal: @EngIntkVlvActtionOilPressForCyl5
#define EngIntkVlvActtionOilPressForCyl5_CovFactor 0.1
#define EngIntkVlvActtionOilPressForCyl5_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntkVlvActtionOilPressForCyl6
#define EngIntkVlvActtionOilPressForCyl6_CovFactor 0.1
#define EngIntkVlvActtionOilPressForCyl6_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntkVlvActtionOilPressForCyl7
#define EngIntkVlvActtionOilPressForCyl7_CovFactor 0.1
#define EngIntkVlvActtionOilPressForCyl7_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntkVlvActtionOilPressForCyl8
#define EngIntkVlvActtionOilPressForCyl8_CovFactor 0.1
#define EngIntkVlvActtionOilPressForCyl8_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #5.
  uint16_t EngIntkVlvActtionOilPressForCyl5;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #6.
  uint16_t EngIntkVlvActtionOilPressForCyl6;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #7.
  uint16_t EngIntkVlvActtionOilPressForCyl7;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #8.
  uint16_t EngIntkVlvActtionOilPressForCyl8;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} EFL_P6_t;

// def @EFL_P5 CAN Message (419268862)
#define EFL_P5_IDE (1U)
#define EFL_P5_DLC (8U)
#define EFL_P5_CANID (0x18FD88FEU)
#define EFL_P5_CYC (500U)
// -- Engine Fluid Level/Pressure 5  This message contains Engine Intake Valve Actuation Oil Pressure information.
// signal: @EngIntkVlvActtionOilPressForCyl1
#define EngIntkVlvActtionOilPressForCyl1_CovFactor 0.1
#define EngIntkVlvActtionOilPressForCyl1_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntkVlvActtionOilPressForCyl2
#define EngIntkVlvActtionOilPressForCyl2_CovFactor 0.1
#define EngIntkVlvActtionOilPressForCyl2_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntkVlvActtionOilPressForCyl3
#define EngIntkVlvActtionOilPressForCyl3_CovFactor 0.1
#define EngIntkVlvActtionOilPressForCyl3_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntkVlvActtionOilPressForCyl4
#define EngIntkVlvActtionOilPressForCyl4_CovFactor 0.1
#define EngIntkVlvActtionOilPressForCyl4_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #1.  This intake valve pressure is at the first cylinder in the engine, while SPN 2948 reflects the intake valve pressure of the entire engine ...
  uint16_t EngIntkVlvActtionOilPressForCyl1;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #2.
  uint16_t EngIntkVlvActtionOilPressForCyl2;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #3.
  uint16_t EngIntkVlvActtionOilPressForCyl3;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #4.
  uint16_t EngIntkVlvActtionOilPressForCyl4;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} EFL_P5_t;

// def @VDS2 CAN Message (419269118)
#define VDS2_IDE (1U)
#define VDS2_DLC (8U)
#define VDS2_CANID (0x18FD89FEU)
// -- Vehicle Direction/Speed 2  Vehicle Direction/Speed 2 PGN contains the vehicle roll data.
// signal: @VehicleRoll
#define VehicleRoll_CovFactor 0.0078125
#define VehicleRoll_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
typedef struct
{

  // This parameter indicates the roll in degrees from level.  Facing the direction of travel a tip to the left would be indicated by a negative number and a tip to the right would be indicated by a positive number.
  int32_t VehicleRoll;                   //      Bits=16.  [ -90   , 90     ]  Unit:'deg'   Offset= -200      Factor= 0.0078125
  uint32_t framecnt;
} VDS2_t;

// def @AT2GP CAN Message (419269630)
#define AT2GP_IDE (1U)
#define AT2GP_DLC (8U)
#define AT2GP_CANID (0x18FD8BFEU)
#define AT2GP_CYC (500U)
// -- Aftertreatment 2 Gas Parameters  Diesel particulate filter gas parameters for system or bank 2
// signal: @DPFInPress
#define DPFInPress_CovFactor 0.1
#define DPFInPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @DPFOutPress
#define DPFOutPress_CovFactor 0.1
#define DPFOutPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // This parameter indicates the diesel particulate filter intake gage pressure 2 (bank 2).
  uint16_t DPFInPress;                   //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // This parameter indicates the diesel particulate filter outlet gage pressure 2 (bank 2).
  uint16_t DPFOutPress;                  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} AT2GP_t;

// def @AT1GP CAN Message (419269886)
#define AT1GP_IDE (1U)
#define AT1GP_DLC (8U)
#define AT1GP_CANID (0x18FD8CFEU)
#define AT1GP_CYC (500U)
// -- Aftertreatment 1 Gas Parameters  Diesel particulate filter gas parameters for system or bank 1
// signal: @DPFInPress
#define DPFInPress_CovFactor 0.1
#define DPFInPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @DPFOutPress
#define DPFOutPress_CovFactor 0.1
#define DPFOutPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // This parameter indicates the diesel particulate filter intake gage pressure 1 (bank 1).
  uint16_t DPFInPress;                   //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // This parameter indicates the diesel particulate filter outlet gage pressure 1 (bank 1).
  uint16_t DPFOutPress;                  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} AT1GP_t;

// def @UTACER CAN Message (419270142)
#define UTACER_IDE (1U)
#define UTACER_DLC (8U)
#define UTACER_CANID (0x18FD8DFEU)
#define UTACER_CYC (250U)
// -- Utility Total AC Reactive Energy  This PGN contains quantities for the cumulative AC reactive energy from the utility.
typedef struct
{

  // This parameter reports the cumulative total AC reactive energy exported from the utility.
  uint32_t UtilityTotalKVArHoursExport;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'kVArh'

  // This parameter reports the cumulative total AC reactive energy imported to the utility.
  uint32_t UtilityTotalKVArHoursImport;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'kVArh'
  uint32_t framecnt;
} UTACER_t;

// def @GTACER CAN Message (419270398)
#define GTACER_IDE (1U)
#define GTACER_DLC (8U)
#define GTACER_CANID (0x18FD8EFEU)
#define GTACER_CYC (250U)
// -- Generator Total AC Reactive Energy  This PGN contains quantities for the cumulative AC reactive energy from the generator.
typedef struct
{

  // This parameter reports the cumulative total AC reactive energy exported from the generator.
  uint32_t GeneratorTotalKVArHoursExport;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'kVArh'

  // This parameter reports the cumulative total AC reactive energy imported to the generator.
  uint32_t GeneratorTotalKVArHoursImport;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'kVArh'
  uint32_t framecnt;
} GTACER_t;

// def @GTACPP CAN Message (419270654)
#define GTACPP_IDE (1U)
#define GTACPP_DLC (8U)
#define GTACPP_CANID (0x18FD8FFEU)
#define GTACPP_CYC (250U)
// -- Generator Total AC Percent Power  This PGN contains quantities for the instantaneous AC power from the generator, as percentages of rated power
// signal: @GeneratorTotalPercentKW
#define GeneratorTotalPercentKW_CovFactor 0.0078125
#define GeneratorTotalPercentKW_CovS(x) ((int32_t)((x / 0.0078125) + 32128))
// signal: @GeneratorTotalPercentKVA
#define GeneratorTotalPercentKVA_CovFactor 0.0078125
#define GeneratorTotalPercentKVA_CovS(x) ((int32_t)((x / 0.0078125) + 32128))
// signal: @GeneratorTotalPercentKVAr
#define GeneratorTotalPercentKVAr_CovFactor 0.0078125
#define GeneratorTotalPercentKVAr_CovS(x) ((int32_t)((x / 0.0078125) + 32128))
typedef struct
{

  // This parameter reports the generator total AC power, as a percentage of rated power.
  int32_t GeneratorTotalPercentKW;       //      Bits=16.  [ -251  , 250.99 ]  Unit:'%'     Offset= -251      Factor= 0.0078125

  // This parameter reports the generator total AC apparent power, as a percentage of rated power.
  int32_t GeneratorTotalPercentKVA;      //      Bits=16.  [ -251  , 250.99 ]  Unit:'%'     Offset= -251      Factor= 0.0078125

  // This parameter reports the generator total AC reactive power, as a percentage of rated power.
  int32_t GeneratorTotalPercentKVAr;     //      Bits=16.  [ -251  , 250.99 ]  Unit:'%'     Offset= -251      Factor= 0.0078125
  uint32_t framecnt;
} GTACPP_t;

// def @ACS CAN Message (419271166)
#define ACS_IDE (1U)
#define ACS_DLC (8U)
#define ACS_CANID (0x18FD91FEU)
#define ACS_CYC (250U)
// -- AC Switching Device Status  This contains parameters indicating the status of various breakers throughout a power generation system.  These include: Generator Circuit Breaker Status, Utility Circuit Breaker Status, and Automatic Transfer Switch ...
typedef struct
{

  // This parameter indicates the measured state of the generator circuit breaker.  Bit state 000 = Open  Bit state 001 = Closed  Bit state 010 = Locked Out  Bit states 011-101 = available for SAE assignment  Bit state 110 = error  Bit state 111 = not ...
  uint8_t GeneratorCircuitBreakerStatus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // This parameter indicates the measured state of the utility circuit breaker.  Bit state 000 = Open  Bit state 001 = Closed  Bit state 010 = Locked Out  Bit states 011-101 = available for SAE assignment  Bit state 110 = error  Bit state 111 = not ...
  uint8_t UtilityCircuitBreakerStatus;     //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // This parameter indicates the measured state of the automatic transfer switch.  Bit state 000 = Normal position  Bit state 001 = Emergency position  Bit states 010-101 = available for SAE assignment  Bit state 110 = error  Bit state 111 = not ...
  uint8_t AutomaticTransferSwitchStatus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} ACS_t;

// def @EEC7 CAN Message (419271934)
#define EEC7_IDE (1U)
#define EEC7_DLC (8U)
#define EEC7_CANID (0x18FD94FEU)
#define EEC7_CYC (100U)
// -- Electronic Engine Controller 7  Engine related parameters
// signal: @EngExhstGsRecirculation1ValvePos
#define EngExhstGsRecirculation1ValvePos_CovFactor 0.0025
#define EngExhstGsRecirculation1ValvePos_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngExhstGsRcirculation1Valve2Pos
#define EngExhstGsRcirculation1Valve2Pos_CovFactor 0.0025
#define EngExhstGsRcirculation1Valve2Pos_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @CommandedEngIntakeManifoldPress
#define CommandedEngIntakeManifoldPress_CovFactor 0.125
#define CommandedEngIntakeManifoldPress_CovS(x) ((uint16_t)((x / 0.125)))
typedef struct
{

  // The position of the exhaust gas recirculation valve expressed as a percentage of full travel. Zero percent means the valve is closed and no exhaust gas is flowing into the intake air stream. One hundred percent means the valve is fully opened.
  uint16_t EngExhstGsRecirculation1ValvePos;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // The position of the second exhaust gas recirculation valve expressed as a percentage of full travel. Zero percent means the valve is closed and no exhaust gas is flowing into the intake air stream. One hundred percent means the valve is fully ...
  uint16_t EngExhstGsRcirculation1Valve2Pos;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // The speed of a rotating (centrifugal) crankcase oil separator.
  uint16_t EngCrnkcsBrtherOilSeparatorSpeed;  //      Bits=16.  [ 0     , 64255  ]  Unit:'rpm'  

  // Provides the commanded set point value for the engine intake manifold pressure.
  uint16_t CommandedEngIntakeManifoldPress;   //      Bits=16.  [ 0     , 8031.875 ]  Unit:'kPa'   Factor= 0.125 
  uint32_t framecnt;
} EEC7_t;

// def @TRF2 CAN Message (419272190)
#define TRF2_IDE (1U)
#define TRF2_DLC (8U)
#define TRF2_CANID (0x18FD95FEU)
#define TRF2_CYC (1000U)
// -- Transmission Fluids 2
// signal: @TrnsTorqueConverterOilOutletTemp
#define TrnsTorqueConverterOilOutletTemp_CovFactor 0.03125
#define TrnsTorqueConverterOilOutletTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TransOilLifeRemaining
#define TransOilLifeRemaining_CovFactor 0.4
#define TransOilLifeRemaining_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransOilTemp2
#define TransOilTemp2_CovFactor 0.03125
#define TransOilTemp2_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TransOilLevel2High_Low
#define TransOilLevel2High_Low_CovFactor 0.5
#define TransOilLevel2High_Low_CovS(x) ((int16_t)((x / 0.5) + 125))
typedef struct
{

  // This switch indicates whether the transmission oil filter is clogged.    00 - No restriction  01 - Restriction exists on oil filter  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Restriction exists on oil filter" 
  // 0 - "No restriction" 

  uint8_t TransOilFilterRestrictionSwitch;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This switch indicates whether transmission oil level is full or empty.    00 - Empty  01 - Full or not empty  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Full or not empty" 
  // 0 - "Empty" 

  uint8_t TransOilLevelSwitch;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal from transmission indicating that its fluid temperature is above normal acceptable limits, and as a result, transmission operation may be altered or restricted.  The indicator is typically a lamp.  Distinctions in meaning between the ...
  // 3 - "Not available" 
  // 2 - "Transmission Overheat Indicator is flashing" 
  // 1 - "Transmission Overheat Indicator is on continuously" 
  // 0 - "Transmission Overheat Indicator is off" 

  uint8_t TransOverheatIndicator;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Temperature of transmission torque converter outlet oil.
  int32_t TrnsTorqueConverterOilOutletTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Signal which indicates the actual oil life remaining in percent.  100% means the transmission oil is brand new, and 0% means the transmission oil is at the end of its life.
  uint8_t TransOilLifeRemaining;              //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Second instance of transmission lubricant temperature. This parameter may reflect the temperature of a second sump or oil supply. If only one instance of transmission lubricant temperature measurement exists, SPN 177 Transmission Oil Temperature 1 ...
  int32_t TransOilTemp2;                      //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Second instance of a transmission oil level indicator. Conveys the current volume of transmission sump oil compared to recommended volume. Positive values indicate overfill. Zero means the transmission fluid is filled to the recommended level. If ...
  int16_t TransOilLevel2High_Low;             //      Bits=08.  [ -62.5 , 62.5   ]  Unit:'L'     Offset= -62.5     Factor= 0.5   

  // Countdown timer for the second instance of a transmission oil level indicator. Once all vehicle conditions (such as vehicle stopped, etc) are met, some transmissions may require a ?settling time? to allow the fluid level to normalize. This parameter ...
  // 15 - "Not Available" 
  // 14 - "Error" 
  // 13 - "Thirteen minutes" 
  // 12 - "Twelve minutes" 
  // 11 - "Eleven minutes" 
  // 10 - "Ten minutes" 
  // 9 - "Nine minutes" 
  // 8 - "Eight minutes" 
  // 7 - "Seven minutes" 
  // 6 - "Six minutes" 
  // 5 - "Five minutes" 
  // 4 - "Four minutes" 
  // 3 - "Three minutes" 
  // 2 - "Two minutes" 
  // 1 - "One minute" 
  // 0 - "less than 1 minute" 

  uint8_t TransOilLevel2CountdownTimer;       //      Bits=04.  [ 0     , 13     ]  Unit:''     

  // Measurement status for the second instance of a transmission oil level indicator. Indicates if conditions are acceptable to obtain a valid transmission oil level measurement as conveyed in SPN 5914 Transmission Oil Level 2 High / Low. If conditions ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 13 - "Conditions not valid, Other" 
  // 12 - "Not defined" 
  // 11 - "Not defined" 
  // 10 - "Not defined" 
  // 9 - "Conditions not valid, No request for reading" 
  // 8 - "Conditions not valid, Engine speed too high" 
  // 7 - "Conditions not valid, Engine speed too low" 
  // 6 - "Conditions not valid, Vehicle not level" 
  // 5 - "Conditions not valid, Vehicle moving" 
  // 4 - "Conditions not valid, Transmission fluid temperature too high" 
  // 3 - "Conditions not valid, Transmission fluid temperature too low" 
  // 2 - "Conditions not valid, Transmission in gear" 
  // 1 - "Conditions not valid, Settling timer still counting down" 
  // 0 - "Conditions valid for transmission oil level measurement" 

  uint8_t TransOilLevel2MeasurementStatus;    //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} TRF2_t;

// def @LFI2 CAN Message (419272446)
#define LFI2_IDE (1U)
#define LFI2_DLC (8U)
#define LFI2_CANID (0x18FD96FEU)
#define LFI2_CYC (1000U)
// -- Fuel Information 2 (Liquid)  Message for reporting information associated with liquid fuel.
// signal: @EngFuelSupplyFlowRate
#define EngFuelSupplyFlowRate_CovFactor 0.001
#define EngFuelSupplyFlowRate_CovS(x) ((uint32_t)((x / 0.001)))
// signal: @EngFuelReturnFlowRate
#define EngFuelReturnFlowRate_CovFactor 0.001
#define EngFuelReturnFlowRate_CovS(x) ((uint32_t)((x / 0.001)))
typedef struct
{

  // The rate of fuel flowing through a fuel supply line carrying fuel from the fuel tank to the engine.
  uint32_t EngFuelSupplyFlowRate;        //      Bits=32.  [ 0     , 4211081.215 ]  Unit:'L/h'   Factor= 0.001 

  // The rate of fuel flowing through a fuel return line carrying fuel from the engine back to fuel tank.
  uint32_t EngFuelReturnFlowRate;        //      Bits=32.  [ 0     , 4211081.215 ]  Unit:'L/h'   Factor= 0.001 
  uint32_t framecnt;
} LFI2_t;

// def @LFI3 CAN Message (419272702)
#define LFI3_IDE (1U)
#define LFI3_DLC (8U)
#define LFI3_CANID (0x18FD97FEU)
#define LFI3_CYC (1000U)
// -- Fuel Information 3 (Liquid)  Message for reporting information associated with liquid fuel.
// signal: @EngFuelSupplyTemp
#define EngFuelSupplyTemp_CovFactor 1
#define EngFuelSupplyTemp_CovS(x) ((int16_t)(x + 40))
// signal: @EngFuelReturnTemp
#define EngFuelReturnTemp_CovFactor 1
#define EngFuelReturnTemp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // The temperature of the fuel flowing through a fuel supply line from the fuel tank to the engine.
  int16_t EngFuelSupplyTemp;             //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The temperature of the fuel flowing through a fuel return line from the engine back to the fuel tank.
  int16_t EngFuelReturnTemp;             //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} LFI3_t;

// def @AT1HI1 CAN Message (419272958)
#define AT1HI1_IDE (1U)
#define AT1HI1_DLC (8U)
#define AT1HI1_CANID (0x18FD98FEU)
// -- Aftertreatment 1 Historical Information 1  Contains information about the history of the aftertreatment 1 system
// signal: @TotalFuelUsed
#define TotalFuelUsed_CovFactor 0.5
#define TotalFuelUsed_CovS(x) ((uint32_t)((x / 0.5)))
// signal: @DPFAvgDistBetweenActiveRegens
#define DPFAvgDistBetweenActiveRegens_CovFactor 0.125
#define DPFAvgDistBetweenActiveRegens_CovS(x) ((uint32_t)((x / 0.125)))
typedef struct
{

  // Total amount of fuel used by aftertreatment device 1 over the lifetime of the device.
  uint32_t TotalFuelUsed;                   //      Bits=32.  [ 0     , 2105540607.5 ]  Unit:'L'     Factor= 0.5   

  // Total amount of time that aftertreatment device 1 has been regenerating over the lifetime of the device.
  uint32_t TotalRegenTime;                  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Total amount of time that aftertreatment 1 regeneration has been manually disabled.
  uint32_t TotalDisdTime;                   //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Total number of active regenerations by aftertreatment device 1 over the lifetime of the device.
  uint32_t TotalNumOfActiveRegens;          //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     

  // Total amount of time that aftertreatment 1 diesel particulate filter has been in passive regeneration over the lifetime of the device.
  uint32_t DPFTotalPassiveRegenTime;        //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Total number of passive regenerations by aftertreatment device 1 over the lifetime of the device.
  uint32_t DPFTotalNumOfPassiveRegens;      //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     

  // Total number of aftertreatment device 1 active regeneration inhibit requests by the operator over the lifetime of the device.
  uint32_t DPFTotalNumOfActiveRegenInhReq;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     

  // Total number of aftertreatment device 1 active regeneration manual requests by the operator over the lifetime of the device.
  uint32_t DPFTotalNumOfActiveRegenManReq;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     

  // Indicates the average time since last reset between active regenerations, that have not been forced to occur by manual request, for Aftertreatment device 1.  If the manufacturer allows this parameter to be reset, this time is the average since last ...
  uint32_t DPFAvgTimeBetweenActiveRegens;   //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Indicates the average distance since last reset between active regenerations, that have not been forced to occur by manual request, for aftertreatment device 1.  If the manufacturer allows this parameter to be reset, this distance is the average ...
  uint32_t DPFAvgDistBetweenActiveRegens;   //      Bits=32.  [ 0     , 526385151.875 ]  Unit:'km'    Factor= 0.125 
  uint32_t framecnt;
} AT1HI1_t;

// def @AT2HI1 CAN Message (419273214)
#define AT2HI1_IDE (1U)
#define AT2HI1_DLC (8U)
#define AT2HI1_CANID (0x18FD99FEU)
// -- Aftertreatment 2 Historical information 1  Contains information about the history of the aftertreatment 2 system
// signal: @TotalFuelUsed
#define TotalFuelUsed_CovFactor 0.5
#define TotalFuelUsed_CovS(x) ((uint32_t)((x / 0.5)))
// signal: @DPFAvgDistBetweenActiveRegens
#define DPFAvgDistBetweenActiveRegens_CovFactor 0.125
#define DPFAvgDistBetweenActiveRegens_CovS(x) ((uint32_t)((x / 0.125)))
typedef struct
{

  // Total amount of fuel used by aftertreatment device 2 over the lifetime of the device.
  uint32_t TotalFuelUsed;                   //      Bits=32.  [ 0     , 2105540607.5 ]  Unit:'L'     Factor= 0.5   

  // Total amount of time that aftertreatment device 2 has been regenerating over the lifetime of the device.
  uint32_t TotalRegenTime;                  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Total amount of time that aftertreatment 2 regeneration has been manually disabled.
  uint32_t TotalDisdTime;                   //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Total number of active regenerations by aftertreatment device 2 over the lifetime of the device.
  uint32_t TotalNumOfActiveRegens;          //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     

  // Total amount of time that Aftertreatment device 2 has been in passive regeneration over the lifetime of the device.
  uint32_t DPFTotalPassiveRegenTime;        //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Total number of passive regenerations by Aftertreatment device 2 over the lifetime of the device.
  uint32_t DPFTotalNumOfPassiveRegens;      //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     

  // Total number of Aftertreatment device 2 active regeneration inhibit requests by the operator over the lifetime of the device.
  uint32_t DPFTotalNumOfActiveRegenInhReq;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     

  // Total number of Aftertreatment device 2 active regeneration manual requests by the operator over the lifetime of the device.
  uint32_t DPFTotalNumOfActiveRegenManReq;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:''     

  // Indicates the average time since last reset between active regenerations, that have not been forced to occur by manual request, for Aftertreatment device 2.
  uint32_t DPFAvgTimeBetweenActiveRegens;   //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    

  // Indicates the average distance since last reset between active regenerations, that have not been forced to occur by manual request, for aftertreatment device 2.  If the manufacturer allows this parameter to be reset, this distance is the average ...
  uint32_t DPFAvgDistBetweenActiveRegens;   //      Bits=32.  [ 0     , 526385151.875 ]  Unit:'km'    Factor= 0.125 
  uint32_t framecnt;
} AT2HI1_t;

// def @EBS24 CAN Message (419273470)
#define EBS24_IDE (1U)
#define EBS24_DLC (8U)
#define EBS24_CANID (0x18FD9AFEU)
// -- Electronic Brake System #2/4  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-3.
typedef struct
{
  uint32_t framecnt;
} EBS24_t;

// def @A1DEFI1 CAN Message (419273726)
#define A1DEFI1_IDE (1U)
#define A1DEFI1_DLC (8U)
#define A1DEFI1_CANID (0x18FD9BFEU)
#define A1DEFI1_CYC (1000U)
// -- Aftertreatment 1 Diesel Exhaust Fluid Information 1  Sensor Information which measures temperature, concentration, and conductivity of the diesel exhaust fluid of the aftertreatment 1 system.
// signal: @Temp2
#define Temp2_CovFactor 1
#define Temp2_CovS(x) ((int16_t)(x + 40))
// signal: @Concentration
#define Concentration_CovFactor 0.25
#define Concentration_CovS(x) ((uint8_t)((x / 0.25)))
// signal: @Conductivity
#define Conductivity_CovFactor 5
#define Conductivity_CovS(x) ((uint8_t)((x / 5)))
// signal: @DieselExhaustFluidSpeedOfSound
#define DieselExhaustFluidSpeedOfSound_CovFactor 0.1
#define DieselExhaustFluidSpeedOfSound_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Temperature of the diesel exhaust fluid at the device measuring diesel exhaust fluid quality
  int16_t Temp2;                            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // A measure of the concentration of urea in water.  Zero percent means that the tank contains no urea.  A 32.5% value indicates that the diesel exhaust fluid is of the proper concentration.  The 32.5% value indicates that the concentration is highest ...
  uint8_t Concentration;                    //      Bits=08.  [ 0     , 62.5   ]  Unit:'%'     Factor= 0.25  

  // A measure of the conductivity of the diesel exhaust fluid at the sensor.  The conductivity is an indication of the diesel exhaust fluid's chemical make up.
  uint8_t Conductivity;                     //      Bits=08.  [ 0     , 1250   ]  Unit:'?Siemens/mm' Factor= 5     

  // Used to identify the applicable J1939-73 FMI that applies to the most significant failure of the diesel exhaust fluid temperature sensor.  When there is no failure FMI 31 is sent. In the case of multiple failures the most severe is communicated.
  uint8_t Temp2PreliminaryFMI;              //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI that applies to the most significant failure of the diesel exhaust fluid properties sensor.  This may be used for indicating failures of the diesel exhaust fluid concentration, diesel exhaust fluid ...
  uint8_t PropertiesPreliminaryFMI;         //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // This parameter indicates the property of the fluid compound in the tank.  A value of 0011 indicates uncontaminated Diesel Exhaust Fluid.  0000 - Urea concentration too high  0001 - Urea concentration too low  0010 - Fluid is diesel  0011 - Diesel ...
  // 15 - "Not available" 
  // 14 - "Error with diesel exhaust fluid property detection" 
  // 13 - "Not able to determine fluid property" 
  // 12 - "Diesel exhaust fluid" 
  // 3 - "Diesel exhaust fluid is proper mixture" 
  // 2 - "Fluid is diesel" 
  // 1 - "Urea concentration too low" 
  // 0 - "Urea concentration too high" 

  uint8_t Property;                         //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The speed of sound in the fluid that is in the diesel exhaust fluid tank.
  uint16_t DieselExhaustFluidSpeedOfSound;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'m/s'   Factor= 0.1   
  uint32_t framecnt;
} A1DEFI1_t;

// def @SEP2 CAN Message (419273982)
#define SEP2_IDE (1U)
#define SEP2_DLC (8U)
#define SEP2_CANID (0x18FD9CFEU)
#define SEP2_CYC (1000U)
// -- Sensor Electrical Power #2  Voltage supplies for sensors #2
// signal: @SensorSupplyVoltage5
#define SensorSupplyVoltage5_CovFactor 0.05
#define SensorSupplyVoltage5_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @SensorSupplyVoltage6
#define SensorSupplyVoltage6_CovFactor 0.05
#define SensorSupplyVoltage6_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @SensorSupplyVoltage7
#define SensorSupplyVoltage7_CovFactor 0.05
#define SensorSupplyVoltage7_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @SensorSupplyVoltage8
#define SensorSupplyVoltage8_CovFactor 0.05
#define SensorSupplyVoltage8_CovS(x) ((uint16_t)((x / 0.05)))
typedef struct
{

  // Sensor ECU supply voltage 5
  uint16_t SensorSupplyVoltage5;         //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  

  // Sensor ECU supply voltage 6
  uint16_t SensorSupplyVoltage6;         //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  

  // Sensor ECU supply voltage 7
  uint16_t SensorSupplyVoltage7;         //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  

  // Sensor ECU supply voltage 8
  uint16_t SensorSupplyVoltage8;         //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  
  uint32_t framecnt;
} SEP2_t;

// def @SEP1 CAN Message (419274238)
#define SEP1_IDE (1U)
#define SEP1_DLC (8U)
#define SEP1_CANID (0x18FD9DFEU)
#define SEP1_CYC (1000U)
// -- Sensor Electrical Power #1  Voltage supplies for sensors #1
// signal: @SensorSupplyVoltage1
#define SensorSupplyVoltage1_CovFactor 0.05
#define SensorSupplyVoltage1_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @SensorSupplyVoltage2
#define SensorSupplyVoltage2_CovFactor 0.05
#define SensorSupplyVoltage2_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @SensorSupplyVoltage3
#define SensorSupplyVoltage3_CovFactor 0.05
#define SensorSupplyVoltage3_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @SensorSupplyVoltage4
#define SensorSupplyVoltage4_CovFactor 0.05
#define SensorSupplyVoltage4_CovS(x) ((uint16_t)((x / 0.05)))
typedef struct
{

  // Sensor ECU supply voltage 1
  uint16_t SensorSupplyVoltage1;         //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  

  // Sensor ECU supply voltage 2
  uint16_t SensorSupplyVoltage2;         //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  

  // Sensor ECU supply voltage 3
  uint16_t SensorSupplyVoltage3;         //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  

  // Sensor ECU supply voltage 4
  uint16_t SensorSupplyVoltage4;         //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  
  uint32_t framecnt;
} SEP1_t;

// def @AT2AC1 CAN Message (419274494)
#define AT2AC1_IDE (1U)
#define AT2AC1_DLC (8U)
#define AT2AC1_CANID (0x18FD9EFEU)
#define AT2AC1_CYC (500U)
// -- Aftertreatment 2 Air Control 1  Contains information about the aftertreatment 2 air system
// signal: @SupplyAirPress
#define SupplyAirPress_CovFactor 0.1
#define SupplyAirPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @PurgeAirPress
#define PurgeAirPress_CovFactor 0.1
#define PurgeAirPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @PressCtrl
#define PressCtrl_CovFactor 0.0025
#define PressCtrl_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @PressActPos
#define PressActPos_CovFactor 0.4
#define PressActPos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Pressure of the supply air for aftertreatment 2.  Supply air is the air supplied from a pneumatic line for an air-assisted or pneumatic actuator.  One example is an air assisted fuel injector (the supply air assists in the atomization of fuel).
  uint16_t SupplyAirPress;               //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Pressure of the purge air supply for aftertreatment 2
  uint16_t PurgeAirPress;                //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Position that the controller is commanding the aftertreatment 2 air pressure control to maintain.  0% = fully closed, 100% = fully open
  uint16_t PressCtrl;                    //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Position of the aftertreatment 2 air pressure actuator as measured by a position feedback sensor.
  uint8_t PressActPos;                   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Indicates whether aftertreatment 2 air system relay is on or off    00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t SysRelay;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether aftertreatment 2 atomization air actuator is on or off    00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t AtomizationAirAct;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether aftertreatment 2 purge air actuator is on or off    00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t PurgeAirAct;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether aftertreatment 2 air enable actuator is on or off    00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t EnableAct;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} AT2AC1_t;

// def @AT1AC1 CAN Message (419274750)
#define AT1AC1_IDE (1U)
#define AT1AC1_DLC (8U)
#define AT1AC1_CANID (0x18FD9FFEU)
#define AT1AC1_CYC (500U)
// -- Aftertreatment 1 Air Control 1  Contains information about the aftertreatment 1 air system
// signal: @SupplyAirPress
#define SupplyAirPress_CovFactor 0.1
#define SupplyAirPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @PurgeAirPress
#define PurgeAirPress_CovFactor 0.1
#define PurgeAirPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @PressCtrl
#define PressCtrl_CovFactor 0.0025
#define PressCtrl_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @PressActPos
#define PressActPos_CovFactor 0.4
#define PressActPos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Pressure of the supply air for aftertreatment 1.  Supply air is the air supplied from a pneumatic line for an air-assisted or pneumatic actuator.  One example is an air assisted fuel injector (the supply air assists in the atomization of fuel).
  uint16_t SupplyAirPress;               //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Pressure of the purge air supply for aftertreatment 1
  uint16_t PurgeAirPress;                //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Position that the controller is commanding the aftertreatment 1 air pressure control to maintain.  0% = fully closed, 100% = fully open
  uint16_t PressCtrl;                    //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Position of the aftertreatment 1 air pressure actuator as measured by a position feedback sensor.
  uint8_t PressActPos;                   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Indicates whether aftertreatment 1 air system relay is on or off    00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t SysRelay;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether aftertreatment 1 atomization air actuator is on or off    00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t AtomizationAirAct;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether aftertreatment 1 purge air actuator is on or off    00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t PurgeAirAct;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether aftertreatment 1 air enable actuator is on or off    00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t EnableAct;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} AT1AC1_t;

// def @AT2FC1 CAN Message (419275006)
#define AT2FC1_IDE (1U)
#define AT2FC1_DLC (8U)
#define AT2FC1_CANID (0x18FDA0FEU)
#define AT2FC1_CYC (500U)
// -- Aftertreatment 2 Fuel Control 1  Contains information about the aftertreatment 2 fuel system
// signal: @Press1
#define Press1_CovFactor 0.1
#define Press1_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Rate
#define Rate_CovFactor 0.05
#define Rate_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @Press1Ctrl
#define Press1Ctrl_CovFactor 0.0025
#define Press1Ctrl_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @Injector1HtrCtrl
#define Injector1HtrCtrl_CovFactor 0.4
#define Injector1HtrCtrl_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Pressure of the fuel for Aftertreatment 2.
  uint16_t Press1;                       //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Rate of fuel being delivered to aftertreatment 2 for regeneration
  uint16_t Rate;                         //      Bits=16.  [ 0     , 3212.75 ]  Unit:'L/h'   Factor= 0.05  

  // Position that the controller is commanding the aftertreatment 2 fuel pressure control to maintain.  0% = fully closed, 100% = fully open.
  uint16_t Press1Ctrl;                   //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Indicates whether aftertreatment 2 fuel drain actuator is on or off    00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t DrainAct;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether aftertreatment 2 ignition circuit is energized by the ECU.    00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t Ignt;                          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether regeneration is active or inactive in aftertreatment 2.      00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t RegenStatus;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether aftertreatment 2 fuel enable actuator is on or off    00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 2 - "reserved for SAE assignment" 
  // 3 - "not available" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t EnableAct;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Heating level that the controller is commanding the aftertreatment 2 fuel injector 1 heater control to maintain. 0% = off, 100% = maximum.
  uint8_t Injector1HtrCtrl;              //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} AT2FC1_t;

// def @AT1FC1 CAN Message (419275262)
#define AT1FC1_IDE (1U)
#define AT1FC1_DLC (8U)
#define AT1FC1_CANID (0x18FDA1FEU)
#define AT1FC1_CYC (500U)
// -- Aftertreatment 1 Fuel Control 1  Contains information about the aftertreatment 1 fuel system
// signal: @Press1
#define Press1_CovFactor 0.1
#define Press1_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Rate
#define Rate_CovFactor 0.05
#define Rate_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @Press1Ctrl
#define Press1Ctrl_CovFactor 0.0025
#define Press1Ctrl_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @Injector1HtrCtrl
#define Injector1HtrCtrl_CovFactor 0.4
#define Injector1HtrCtrl_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // First fuel pressure measurement for the aftertreatment 1 system
  uint16_t Press1;                       //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Rate of fuel being delivered to aftertreatment 1 for regeneration
  uint16_t Rate;                         //      Bits=16.  [ 0     , 3212.75 ]  Unit:'L/h'   Factor= 0.05  

  // Position that the controller is commanding the aftertreatment 1 fuel pressure control to maintain.  0% = fully closed, 100% = fully open.
  uint16_t Press1Ctrl;                   //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Indicates whether aftertreatment 1 fuel drain actuator is on or off    00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t DrainAct;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether aftertreatment 1 ignition circuit is energized by the ECU.    00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t Ignt;                          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether regeneration is active or inactive in aftertreatment 1.      00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t RegenStatus;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether aftertreatment 1 fuel enable actuator is on or off    00   not active  01   active  10   reserved for SAE assignment  11   not available
  // 3 - "not available" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "active" 
  // 0 - "not active" 

  uint8_t EnableAct;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Heating level that the controller is commanding the aftertreatment 1 fuel injector 1 heater control to maintain. 0% = off, 100% = maximum.
  uint8_t Injector1HtrCtrl;              //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} AT1FC1_t;

// def @PTODE CAN Message (419276030)
#define PTODE_IDE (1U)
#define PTODE_DLC (8U)
#define PTODE_CANID (0x18FDA4FEU)
#define PTODE_CYC (100U)
// -- PTO Drive Engagement  Information relating to the request for engagement, consent for engagement, and status of engagement of various specific physical PTO drives.  This message may be broadcast by one or all controllers involved in the enabling of ...
typedef struct
{

  // Status of the operator?s switch or other input which indicates the desire for engaging the PTO drive mounted on the output shaft of the transfer case.  00   Enable switch off - PTO operation not desired  01   Enable switch on - PTO operation desired   ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Enable switch on" 
  // 0 - "Enable switch off" 

  uint8_t EnblSwtchTrnsfrCseOutputShaftPTO;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the operator?s switch or other input which indicates the desire for engaging the PTO drive mounted on the transmission output shaft.  00   Enable switch off - PTO operation not desired  01   Enable switch on - PTO operation desired  10 ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Enable switch on" 
  // 0 - "Enable switch off" 

  uint8_t EnableSwitchTransOutputShaftPTO;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the operator?s switch or other input which indicates the desire for engaging the second PTO drive mounted on the transmission case.   If there is only one PTO drive on the transmission case, use SPN 3452 Enable Switch - Transmission input ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Enable switch on" 
  // 0 - "Enable switch off" 

  uint8_t EnableSwitchTransInputShaftPTO2;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the operator?s switch or other input which indicates the desire for engaging the first PTO drive mounted on the transmission case.  There may be more than one PTO drive mounted on the transmission case.  00   Enable switch off - PTO ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Enable switch on" 
  // 0 - "Enable switch off" 

  uint8_t EnableSwitchTransInputShaftPTO1;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the PTO Engine Flywheel enable switch    00 Enable switch off - PTO operation not desired  01 Enable switch on - PTO operation desired   10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Enable switch on" 
  // 0 - "Enable switch off" 

  uint8_t EnableSwitchPTOEngFlywheel;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the PTO engine accessory drive 1 enable switch    00 Enable switch off - PTO operation not desired  01 Enable switch on - PTO operation desired  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Enable switch on" 
  // 0 - "Enable switch off" 

  uint8_t EnbleSwitchPTOEngAccessoryDrive1;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the PTO engine accessory drive 2 enable switch    00 Enable switch off - PTO operation not desired  01 Enable switch on - PTO operation desired  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Enable switch on" 
  // 0 - "Enable switch off" 

  uint8_t EnbleSwitchPTOEngAccessoryDrive2;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the transmission controller?s consent to engage the PTO drive connected to the transfer case output shaft.  The controller in charge of the PTO drive should monitor this parameter and only engage the drive when consent is given.  If ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Consent given" 
  // 0 - "Consent not given" 

  uint8_t EnggmntCnsntTrnsfrCsOtptShaftPTO;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the transmission controller?s consent to engage the PTO drive connected to the transmission output shaft.  The controller in charge of the PTO drive should monitor this parameter and only engage the drive when consent is given.  If consent ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Consent given" 
  // 0 - "Consent not given" 

  uint8_t EnggmntCnsentTransOutputShaftPTO;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the transmission controller?s consent to engage the second PTO drive mounted on the transmission case.  The controller in charge of the PTO drive should monitor this parameter and only engage the drive when consent is given.  If consent is ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Consent given" 
  // 0 - "Consent not given" 

  uint8_t EnggmntCnsentTransInputShaftPTO2;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the transmission controller?s consent to engage the first or sole PTO drive mounted on the transmission case.  The controller in charge of the PTO drive should monitor this parameter and only engage the drive when consent is given.  If ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Consent given" 
  // 0 - "Consent not given" 

  uint8_t EnggmntCnsentTransInputShaftPTO1;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Engagement Consent status for the PTO Engine Flywheel    00 Consent not given - PTO drive may not be engaged  01 Consent given - PTO drive may be engaged  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Consent given" 
  // 0 - "Consent not given" 

  uint8_t EngagementConsentPTOEngFlywheel;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Engagement consent status for the PTO engine accessory drive 1    00 Consent not given - PTO drive may not be engaged  01 Consent given - PTO drive may be engaged  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Consent given" 
  // 0 - "Consent not given" 

  uint8_t EnggmntCnsntPTOEngAccssoryDrive1;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Engagement Consent status for the PTO engine accessory drive 2     00 Consent not given - PTO drive may not be engaged  01 Consent given - PTO drive may be engaged  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Consent given" 
  // 0 - "Consent not given" 

  uint8_t EnggmntCnsntPTOEngAccssoryDrive2;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports if this specific PTO drive is engaged.  This parameter should be broadcast only by the controller(s) receiving feedback about the specific drive.  For example, a pressure switch may be used to determine if a PTO-driven pump has been engaged ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Drive is engaged" 
  // 0 - "Drive not engaged" 

  uint8_t EnggmntSttsTrnsfrCsOtputShaftPTO;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports if this specific PTO drive is engaged.  This parameter should be broadcast only by the controller(s) receiving feedback about the specific drive.  For example, a pressure switch may be used to determine if a PTO-driven pump has been engaged ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Drive is engaged" 
  // 0 - "Drive not engaged" 

  uint8_t EnggmntStatusTransOutputShaftPTO;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports if this specific PTO drive is engaged.  This parameter should be broadcast only by the controller(s) receiving feedback about the specific drive.  For example, a pressure switch may be used to determine if a PTO-driven pump has been engaged ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Drive is engaged" 
  // 0 - "Drive not engaged" 

  uint8_t EnggmntStatusTransInputShaftPTO2;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports if this specific PTO drive is engaged.  This parameter should be broadcast only by the controller(s) receiving feedback about the specific drive.  For example, a pressure switch may be used to determine if a PTO-driven pump has been engaged ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Drive is engaged" 
  // 0 - "Drive not engaged" 

  uint8_t EnggmntStatusTransInputShaftPTO1;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Engagement status of the PTO Engine Flywheel    00 Drive not engaged  01 Drive engaged  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Drive engaged" 
  // 0 - "Drive not engaged" 

  uint8_t EngagementStatusPTOEngFlywheel;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Engagement status of the PTO engine accessory drive 1    00 Drive not engaged  01 Drive engaged  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Drive engaged" 
  // 0 - "Drive not engaged" 

  uint8_t EnggmntSttsPTOEngAccessoryDrive1;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Engagement status of the PTO engine accessory drive 2    00 Drive not engaged  01 Drive engaged  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Drive engaged" 
  // 0 - "Drive not engaged" 

  uint8_t EnggmntSttsPTOEngAccessoryDrive2;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that at least one PTO is engaged  00 No PTO drive is engaged  01 At least one PTO drive is engaged  10 Error  11 Not available  Note:  This parameter should only be sent by the controller that has knowledge of all PTO drives on the vehicle ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "At least one PTO drive is engaged" 
  // 0 - "No PTO drive is engaged" 

  uint8_t AtLeastOnePTOEngaged;               //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} PTODE_t;

// def @DC2 CAN Message (419276286)
#define DC2_IDE (1U)
#define DC2_DLC (8U)
#define DC2_CANID (0x18FDA5FEU)
#define DC2_CYC (100U)
// -- Door Control 2  Used for door information.
typedef struct
{

  // Lock status of bus door 1    00  unlocked   01  locked  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "locked" 
  // 0 - "unlocked " 

  uint8_t LockStatusOfDoor1;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Open status of bus door 1    00  door closed  01  door opened  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door opened" 
  // 0 - "door closed" 

  uint8_t OpenStatusOfDoor1;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Enable status of bus door 1.  Enabled means the bus doors are able to be automatically opened or closed.    00  door disabled  01  door enabled  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door enabled" 
  // 0 - "door disabled" 

  uint8_t EnableStatusOfDoor1;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lock status of bus door 2    00  unlocked   01  locked  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "locked" 
  // 0 - "unlocked " 

  uint8_t LockStatusOfDoor2;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Open status of bus door 2    00  door closed  01  door opened  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door opened" 
  // 0 - "door closed" 

  uint8_t OpenStatusOfDoor2;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Enable status of bus door 2.  Enabled means the bus doors are able to be automatically opened or closed.    00  door disabled  01  door enabled  10  error  11  not available
  // 0 - "door disabled" 
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door enabled" 

  uint8_t EnableStatusOfDoor2;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lock status of bus door 3    00  unlocked   01  locked  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "locked" 
  // 0 - "unlocked " 

  uint8_t LockStatusOfDoor3;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Open status of bus door 3    00  door closed  01  door opened  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door opened" 
  // 0 - "door closed" 

  uint8_t OpenStatusOfDoor3;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Enable status of bus door 3.  Enabled means the bus doors are able to be automatically opened or closed.    00  door disabled  01  door enabled  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door enabled" 
  // 0 - "door disabled" 

  uint8_t EnableStatusOfDoor3;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lock status of bus door 4    00  unlocked   01  locked  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "locked" 
  // 0 - "unlocked " 

  uint8_t LockStatusOfDoor4;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Open status of bus door 4    00  door closed  01  door opened  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door opened" 
  // 0 - "door closed" 

  uint8_t OpenStatusOfDoor4;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Enable status of bus door 4.  Enabled means the bus doors are able to be automatically opened or closed.    00  door disabled  01  door enabled  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door enabled" 
  // 0 - "door disabled" 

  uint8_t EnableStatusOfDoor4;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lock status of bus door 5    00  unlocked   01  locked  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "locked" 
  // 0 - "unlocked " 

  uint8_t LockStatusOfDoor5;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Open status of bus door 5    00  door closed  01  door opened  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door opened" 
  // 0 - "door closed" 

  uint8_t OpenStatusOfDoor5;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Enable status of bus door 5.  Enabled means the bus doors are able to be automatically opened or closed.    00  door disabled  01  door enabled  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door enabled" 
  // 0 - "door disabled" 

  uint8_t EnableStatusOfDoor5;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lock status of bus door 6    00  unlocked   01  locked  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "locked" 
  // 0 - "unlocked " 

  uint8_t LockStatusOfDoor6;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Open status of bus door 6    00  door closed  01  door opened  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door opened" 
  // 0 - "door closed" 

  uint8_t OpenStatusOfDoor6;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Enable status of bus door 6.  Enabled means the bus doors are able to be automatically opened or closed.    00  door disabled  01  door enabled  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door enabled" 
  // 0 - "door disabled" 

  uint8_t EnableStatusOfDoor6;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lock status of bus door 7    00  unlocked   01  locked  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "locked" 
  // 0 - "unlocked " 

  uint8_t LockStatusOfDoor7;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Open status of bus door 7    00  door closed  01  door opened  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door opened" 
  // 0 - "door closed" 

  uint8_t OpenStatusOfDoor7;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Enable status of bus door 7.  Enabled means the bus doors are able to be automatically opened or closed.    00  door disabled  01  door enabled  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door enabled" 
  // 0 - "door disabled" 

  uint8_t EnableStatusOfDoor7;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lock status of bus door 8    00  unlocked   01  locked  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "locked" 
  // 0 - "unlocked " 

  uint8_t LockStatusOfDoor8;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Open status of bus door 8    00  door closed  01  door opened  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door opened" 
  // 0 - "door closed" 

  uint8_t OpenStatusOfDoor8;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Enable status of bus door 8.  Enabled means the bus doors are able to be automatically opened or closed.    00  door disabled  01  door enabled  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door enabled" 
  // 0 - "door disabled" 

  uint8_t EnableStatusOfDoor8;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lock status of bus door 9    00  unlocked   01  locked  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "locked" 
  // 0 - "unlocked " 

  uint8_t LockStatusOfDoor9;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Open status of bus door 9    00  door closed  01  door opened  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door opened" 
  // 0 - "door closed" 

  uint8_t OpenStatusOfDoor9;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Enable status of bus door 9.  Enabled means the bus doors are able to be automatically opened or closed.    00  door disabled  01  door enabled  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door enabled" 
  // 0 - "door disabled" 

  uint8_t EnableStatusOfDoor9;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lock status of bus door 10    00  unlocked   01  locked  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "locked" 
  // 0 - "unlocked " 

  uint8_t LockStatusOfDoor10;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Open status of bus door 10    00  door closed  01  door opened  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door opened" 
  // 0 - "door closed" 

  uint8_t OpenStatusOfDoor10;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Enable status of bus door 10.  Enabled means the bus doors are able to be automatically opened or closed.    00  door disabled  01  door enabled  10  error  11  not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "door enabled" 
  // 0 - "door disabled" 

  uint8_t EnableStatusOfDoor10;          //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} DC2_t;

// def @WCM2 CAN Message (419277054)
#define WCM2_IDE (1U)
#define WCM2_DLC (8U)
#define WCM2_CANID (0x18FDA8FEU)
// -- Wireless Communications Message 2  Message for reporting status information regarding the second instance of a wireless communications network on a device or system.    See PGN 64937 for the first wireless network.
// signal: @NetworkSignalStrength2
#define NetworkSignalStrength2_CovFactor 0.4
#define NetworkSignalStrength2_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Indicates the status of the transceiver for the wireless communications network type    0 = Off  1 = On  2 = Not Authorized to Operate on Network  3-250 = Reserved for Future Assignment  251-253 = Reserved  254 = Error  255 = Not Available
  // 255 - "Not Available" 
  // 254 - "Error" 
  // 2 - "Not Authorized to Operate on Network" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t NetworkTransceiverStatus2;          //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Indicates the status of the Service for the wireless communications network type  0 = Local Service  1 = Roaming Service  2 = Service not available  3 = Not Authorized to Operate on Service  4-250 = Reserved for Future Assignment  251-253 = Reserved   ...
  // 255 - "Not Available" 
  // 254 - "Error" 
  // 3 - "Not Authorized to Operate on Service" 
  // 2 - "Service not available" 
  // 1 - "Roaming Service" 
  // 0 - "Local Service" 

  uint8_t NetworkServiceStatus2;              //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Indicates the status of the antenna for the wireless communications network type    0 = Off  1 = On  2-250 = Reserved for Future Assignment  251-253 = Reserved  254 = Error  255 = Not Available
  // 255 - "Not Available" 
  // 254 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t NetworkAntennaStatus2;              //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Indicates the signal strength for the wireless communications network type.
  uint8_t NetworkSignalStrength2;             //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Type of Wireless Communication Network    0 = Cellular network #1  1 = Cellular network #2  2 = Wireless LAN #1  3 = Wireless LAN #2  4 = Satellite network  5-250 = Reserved for Future Assignment  251-253 = Reserved  254 = Error  255 = Not Available
  // 255 - "Not Available" 
  // 254 - "Error" 
  // 4 - "Satellite network" 
  // 3 - "Wireless LAN #2" 
  // 2 - "Wireless LAN #1" 
  // 1 - "Cellular network #2" 
  // 0 - "Cellular network #1" 

  uint8_t WrelessCommunicationNetworkType2;   //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} WCM2_t;

// def @WCM1 CAN Message (419277310)
#define WCM1_IDE (1U)
#define WCM1_DLC (8U)
#define WCM1_CANID (0x18FDA9FEU)
// -- Wireless Communications Message 1  Message for reporting status information regarding the first instance of a wireless communications network on a device or system.
// signal: @NetworkSignalStrength1
#define NetworkSignalStrength1_CovFactor 0.4
#define NetworkSignalStrength1_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Indicates the status of the transceiver for the wireless communications network type    0 = Off  1 = On  2 = Not Authorized to Operate on Network  3-250 = Reserved for Future Assignment  251-253 = Reserved  254 = Error  255 = Not Available
  // 255 - "Not Available" 
  // 254 - "Error" 
  // 2 - "Not Authorized to Operate on Network" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t NetworkTransceiverStatus1;          //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Indicates the status of the Service for the wireless communications network type  0 = Local Service  1 = Roaming Service  2 = Service not available  3 = Not Authorized to Operate on Service  4-250 = Reserved for Future Assignment  251-253 = Reserved   ...
  // 255 - "Not Available" 
  // 254 - "Error" 
  // 3 - "Not Authorized to Operate on Service" 
  // 2 - "Service not available" 
  // 1 - "Roaming Service" 
  // 0 - "Local Service" 

  uint8_t NetworkServiceStatus1;              //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Indicates the status of the antenna for the wireless communications network type    0 = Off  1 = On  2-250 = Reserved for Future Assignment  251-253 = Reserved  254 = Error  255 = Not Available
  // 255 - "Not Available" 
  // 254 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t NetworkAntennaStatus1;              //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Indicates the signal strength for the wireless communications network type.
  uint8_t NetworkSignalStrength1;             //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Type of Wireless Communication Network    0 = Cellular network #1  1 = Cellular network #2  2 = Wireless LAN #1  3 = Wireless LAN #2  4 = Satellite network  5-250 = Reserved for Future Assignment  251-253 = Reserved  254 = Error  255 = Not Available
  // 255 - "Not Available" 
  // 254 - "Error" 
  // 4 - "Satellite network" 
  // 3 - "Wireless LAN #2" 
  // 2 - "Wireless LAN #1" 
  // 1 - "Cellular network #2" 
  // 0 - "Cellular network #1" 

  uint8_t WrelessCommunicationNetworkType1;   //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} WCM1_t;

// def @EFL_P4 CAN Message (419277566)
#define EFL_P4_IDE (1U)
#define EFL_P4_DLC (8U)
#define EFL_P4_CANID (0x18FDAAFEU)
#define EFL_P4_CYC (500U)
// -- Engine Fluid Level/Pressure 4  4th PGN which identifies parameters that are either measuring various pressures within the engine or identifying engine fluid levels
// signal: @EngChargeAirCooler1IntakePress
#define EngChargeAirCooler1IntakePress_CovFactor 2
#define EngChargeAirCooler1IntakePress_CovS(x) ((uint8_t)((x / 2)))
// signal: @EngChargeAirCooler2IntakePress
#define EngChargeAirCooler2IntakePress_CovFactor 2
#define EngChargeAirCooler2IntakePress_CovS(x) ((uint8_t)((x / 2)))
// signal: @EngCoolantPumpDiffPress
#define EngCoolantPumpDiffPress_CovFactor 1.64
#define EngCoolantPumpDiffPress_CovS(x) ((int16_t)((x / 1.64) + 4))
// signal: @EngCentrifugalOilFilterSpeed
#define EngCentrifugalOilFilterSpeed_CovFactor 4
#define EngCentrifugalOilFilterSpeed_CovS(x) ((uint16_t)((x / 4)))
// signal: @EngIntercoolerCoolantLevel
#define EngIntercoolerCoolantLevel_CovFactor 0.4
#define EngIntercoolerCoolantLevel_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngAftercoolerCoolantLevel
#define EngAftercoolerCoolantLevel_CovFactor 0.4
#define EngAftercoolerCoolantLevel_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngChargeAirCoolerOutletPress
#define EngChargeAirCoolerOutletPress_CovFactor 2
#define EngChargeAirCoolerOutletPress_CovS(x) ((uint8_t)((x / 2)))
typedef struct
{

  // Pressure of air at intake to 1st or only charge air cooler, from multiple first stage turbochargers being cooled and feeding multiple second stage turbochargers.
  uint8_t EngChargeAirCooler1IntakePress;   //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // Pressure of air at intake to 2nd charge air cooler, from multiple first stage turbochargers being cooled and feeding multiple second stage turbochargers.
  uint8_t EngChargeAirCooler2IntakePress;   //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // The differential pressure measured across the input and output of the engine coolant pump.
  int16_t EngCoolantPumpDiffPress;          //      Bits=08.  [ -7    , 403    ]  Unit:'kPa'   Offset= -7        Factor= 1.64  

  // The speed of a rotating (centrifugal) engine oil filter.
  uint16_t EngCentrifugalOilFilterSpeed;    //      Bits=16.  [ 0     , 257020 ]  Unit:'rpm'   Factor= 4     

  // Ratio of volume of liquid found in an engine charge air cooler cooling system to total engine charge air cooler cooling system volume.
  uint8_t EngIntercoolerCoolantLevel;       //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Ratio of aftercooler coolant system volume of liquid to total cooling system volume.  The engine aftercooler coolant level is for  the low temperature (LT) cooling circuit used for the compressor outlet air or charge aftercooling.  SPN 111
  uint8_t EngAftercoolerCoolantLevel;       //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Measures pressure of air at outlet from charge air cooler
  uint8_t EngChargeAirCoolerOutletPress;    //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     
  uint32_t framecnt;
} EFL_P4_t;

// def @RCMS CAN Message (419277822)
#define RCMS_IDE (1U)
#define RCMS_DLC (8U)
#define RCMS_CANID (0x18FDABFEU)
// -- Request For Complete Configurable Message Set (no longer used)  This message is designed to cause all CAs to respond with the complete sequence of configuration identification messages for a particular one or all of the configurable messages that ...
typedef struct
{

  // Used to identify all configurable messages.
  uint8_t MessageSelectionCtrl;              //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // To identify the configurable message whose configuration is being requested. If the request is for all configurable PGNs then this SPN is set to all ones.
  uint32_t PGNOfConfigurableMessageDesired;  //      Bits=24.  [ 0     , 16777215 ]  Unit:''     
  uint32_t framecnt;
} RCMS_t;

// def @EFI CAN Message (419278078)
#define EFI_IDE (1U)
#define EFI_DLC (8U)
#define EFI_CANID (0x18FDACFEU)
// -- Engine Fuel Information  Configuration information for engine fuel system.
// signal: @EngIdleFuelFlowRateThreshold
#define EngIdleFuelFlowRateThreshold_CovFactor 0.001
#define EngIdleFuelFlowRateThreshold_CovS(x) ((uint32_t)((x / 0.001)))
typedef struct
{

  // The number of fuel consumption monitoring transducers installed in the fuel consumption monitoring system.
  uint8_t NmbrOfFlCnsmptnMntrngTransducers;   //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // A configuration value that indicates the maximum flow rate for engine idle operation.
  uint32_t EngIdleFuelFlowRateThreshold;      //      Bits=32.  [ 0     , 4211081.215 ]  Unit:'L/h'   Factor= 0.001 
  uint32_t framecnt;
} EFI_t;

// def @FWSS2 CAN Message (419278590)
#define FWSS2_IDE (1U)
#define FWSS2_DLC (8U)
#define FWSS2_CANID (0x18FDAEFEU)
// -- Fifth Wheel Smart Systems 2  Fifth wheel smart system information #2. Message to convey operator parameters associated with the tractor to trailer coupling control and error state.
// signal: @FifthWheelSliderPos
#define FifthWheelSliderPos_CovFactor 10
#define FifthWheelSliderPos_CovS(x) ((uint8_t)((x / 10)))
typedef struct
{

  // Fifth wheel error state which conveys information when coupling status is incomplete or bad.  0000    0 - Improper Couple  0001    1 - Locks Closed / No Kingpin at Startup  0010    2 - Kingpin / Locks Open at Startup  0011    3 - Not Used  0100    4 ...
  // 15 - "15" 
  // 14 - "14" 
  // 13 - "13" 
  // 12 - "12" 
  // 11 - "11" 
  // 10 - "10" 
  // 9 - "9" 
  // 8 - "8" 
  // 7 - "7" 
  // 6 - "6" 
  // 5 - "5" 
  // 4 - "4" 
  // 3 - "3" 
  // 2 - "2" 
  // 1 - "1" 
  // 0 - "0" 

  uint8_t FifthWheelErrorStatus;              //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Indicates to the vehicle operator that the fifth wheel lock is open and ready to couple.    00   Lock not open, not ready to couple  01   Lock open, ready to couple  10   Error  11   Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Lock open" 
  // 0 - "Lock not open" 

  uint8_t FfthWhlLckReadyToCoupleIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates results of coupling operation to the vehicle operator. For incomplete couples further information can be obtained from the fifth wheel error status SPN.  00   Incomplete or bad couple, truck should not be moved  01   Successful couple ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Successful couple detected" 
  // 0 - "Incomplete or bad couple" 

  uint8_t FfthWhlLockCoupleStatusIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Slider position measurement. Zero equals fully back position, that is, the farthest to the rear of the vehicle.
  uint8_t FifthWheelSliderPos;                //      Bits=08.  [ 0     , 2500   ]  Unit:'mm'    Factor= 10    

  // Indicates to vehicle operator that the fifth wheel slider is in position and locked.     00 Not Locked  01 Locked  10 Error  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Locked" 
  // 0 - "Not Locked" 

  uint8_t FifthWheelSliderLockIndicator;      //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} FWSS2_t;

// def @AT2IMG CAN Message (419278846)
#define AT2IMG_IDE (1U)
#define AT2IMG_DLC (8U)
#define AT2IMG_CANID (0x18FDAFFEU)
#define AT2IMG_CYC (500U)
// -- Aftertreatment 2 Intermediate Gas  The purpose of this PGN is to group the aftertreatment intermediate gas temperature and pressure messages for bank 2.
// signal: @ExhTemp2
#define ExhTemp2_CovFactor 0.03125
#define ExhTemp2_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @DPFIntmdTemp
#define DPFIntmdTemp_CovFactor 0.03125
#define DPFIntmdTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @DPFDiffPress
#define DPFDiffPress_CovFactor 0.1
#define DPFDiffPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // The reading from the exhaust temperature sensor located midstream of the other two temperature sensors in the aftertreatment system in exhaust bank 2.  (For a single exhaust bank system, refer to parameters in PGNs 61454, 61455,  64946, 64947, ...
  int32_t ExhTemp2;                      //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of engine combustion byproducts at a mid-point in the diesel particulate filter in exhaust bank 2.  (For a single exhaust bank system, refer to parameters in PGNs 61454, 61455,  64946, 64947, 64948, and 65247)
  int32_t DPFIntmdTemp;                  //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Exhaust differential pressure measured between the intake and exhaust of a diesel particulate filter in exhaust bank 2.  (For a single exhaust bank system, refer to parameters in PGNs 61454, 61455,  64946, 64947, 64948, and 65247)
  uint16_t DPFDiffPress;                 //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Used to identify the applicable J1939-73 FMI detected in the exhaust temperature 2 sensor by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of multiple failures the most severe is ...
  uint8_t ExhTemp2PreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel particulate filter differential pressure sensor by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of multiple ...
  uint8_t DPFDiffPressPreliminaryFMI;    //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel particulate filter intermediate temperature sensor by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of ...
  uint8_t DPFIntmdTempPreliminaryFMI;    //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT2IMG_t;

// def @AT2OG2 CAN Message (419279102)
#define AT2OG2_IDE (1U)
#define AT2OG2_DLC (8U)
#define AT2OG2_CANID (0x18FDB0FEU)
#define AT2OG2_CYC (500U)
// -- Aftertreatment 2 Outlet Gas 2  The purpose of this PGN is to group the aftertreatment outlet gas temperature messages for bank 2.
// signal: @ExhTemp3
#define ExhTemp3_CovFactor 0.03125
#define ExhTemp3_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @DPFOutTemp
#define DPFOutTemp_CovFactor 0.03125
#define DPFOutTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // The reading from the exhaust temperature sensor located farthest downstream in the aftertreatment system in exhaust bank 2.  (For a single exhaust bank system, refer to parameters in PGNs 61454, 61455,  64946, 64947, 64948, and 65247)
  int32_t ExhTemp3;                      //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of engine combustion byproducts leaving the diesel particulate filter exhaust in exhaust bank 2.  (For a single exhaust bank system, refer to parameters in PGNs 61454, 61455,  64946, 64947, 64948, and 65247)
  int32_t DPFOutTemp;                    //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Used to identify the applicable J1939-73 FMI detected in the exhaust temperature 3 sensor by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of multiple failures the most severe is ...
  uint8_t ExhTemp3PreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel particulate filter outlet temperature sensor by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of multiple ...
  uint8_t DPFExhTempPreliminaryFMI;      //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT2OG2_t;

// def @AT2IG2 CAN Message (419279358)
#define AT2IG2_IDE (1U)
#define AT2IG2_DLC (8U)
#define AT2IG2_CANID (0x18FDB1FEU)
#define AT2IG2_CYC (500U)
// -- Aftertreatment 2 Intake Gas 2  The purpose of this PGN is to group the aftertreatment intake gas temperature messages for bank 2.
// signal: @ExhTemp1
#define ExhTemp1_CovFactor 0.03125
#define ExhTemp1_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @DPFInTemp
#define DPFInTemp_CovFactor 0.03125
#define DPFInTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // The reading from the exhaust temperature sensor located farthest upstream in the aftertreatment system in exhaust bank 2.  (For a single exhaust bank system, refer to parameters in PGNs 61454, 61455,  64946, 64947, 64948, and 65247)
  int32_t ExhTemp1;                      //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of engine combustion byproducts entering the diesel particulate filter in exhaust bank 2.  (For a single exhaust bank system, refer to parameters in PGNs 61454, 61455,  64946, 64947, 64948, and 65247)
  int32_t DPFInTemp;                     //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Used to identify the applicable J1939-73 FMI detected in the exhaust temperature 1 sensor by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of multiple failures the most severe is ...
  uint8_t ExhTemp1PreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel particulate filter intake temperature sensor by the manufacturer?s sensor control software in exhaust bank 2.  When there is no failure FMI 31 is sent.  In the case of multiple ...
  uint8_t DPFInTempPreliminaryFMI;       //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT2IG2_t;

// def @AT1IMG CAN Message (419279614)
#define AT1IMG_IDE (1U)
#define AT1IMG_DLC (8U)
#define AT1IMG_CANID (0x18FDB2FEU)
#define AT1IMG_CYC (500U)
// -- Aftertreatment 1 Intermediate Gas  The purpose of this PGN is to group the aftertreatment intermediate gas temperature and pressure messages.  Note: The 5 bits of SPN 3253 are positioned into the data field in the following manner.  The 2 most ...
// signal: @ExhTemp2
#define ExhTemp2_CovFactor 0.03125
#define ExhTemp2_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @DPFIntmdTemp
#define DPFIntmdTemp_CovFactor 0.03125
#define DPFIntmdTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @DPFDiffPress
#define DPFDiffPress_CovFactor 0.1
#define DPFDiffPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // The reading from the exhaust temperature sensor located midstream of the other two temperature sensors in the aftertreatment system in exhaust bank 1.
  int32_t ExhTemp2;                      //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of engine combustion byproducts at a mid-point in the diesel particulate filter in exhaust bank 1.
  int32_t DPFIntmdTemp;                  //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Exhaust differential pressure measured between the intake and exhaust of a diesel particulate filter in exhaust bank 1.
  uint16_t DPFDiffPress;                 //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Used to identify the applicable J1939-73 FMI detected in the exhaust temperature 2 sensor by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of multiple failures the most severe is ...
  uint8_t ExhTemp2PreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel particulate filter differential pressure sensor by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of multiple ...
  uint8_t DPFDiffPressPreliminaryFMI;    //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel particulate filter intermediate temperature sensor by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of ...
  uint8_t DPFIntmdTempPreliminaryFMI;    //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT1IMG_t;

// def @AT1OG2 CAN Message (419279870)
#define AT1OG2_IDE (1U)
#define AT1OG2_DLC (8U)
#define AT1OG2_CANID (0x18FDB3FEU)
#define AT1OG2_CYC (500U)
// -- Aftertreatment 1 Outlet Gas 2  The purpose of this PGN is to group the aftertreatment outlet gas temperature messages.
// signal: @ExhTemp3
#define ExhTemp3_CovFactor 0.03125
#define ExhTemp3_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @DPFOutTemp
#define DPFOutTemp_CovFactor 0.03125
#define DPFOutTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // The reading from the exhaust temperature sensor located farthest downstream in the aftertreatment system in exhaust bank 1.
  int32_t ExhTemp3;                      //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of engine combustion byproducts leaving the diesel particulate filter exhaust in exhaust bank 1.
  int32_t DPFOutTemp;                    //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Used to identify the applicable J1939-73 FMI detected in the exhaust temperature 3 sensor by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of multiple failures the most severe is ...
  uint8_t ExhTemp3PreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel particulate filter outlet temperature sensor by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of multiple ...
  uint8_t DPFOutExhTempPreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT1OG2_t;

// def @AT1IG2 CAN Message (419280126)
#define AT1IG2_IDE (1U)
#define AT1IG2_DLC (8U)
#define AT1IG2_CANID (0x18FDB4FEU)
#define AT1IG2_CYC (500U)
// -- Aftertreatment 1 Intake Gas 2  The purpose of this PGN is to group the aftertreatment intake gas temperature messages for bank 1.
// signal: @ExhTemp1
#define ExhTemp1_CovFactor 0.03125
#define ExhTemp1_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @DPFInTemp
#define DPFInTemp_CovFactor 0.03125
#define DPFInTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // The reading from the exhaust temperature sensor located farthest upstream in the aftertreatment system in exhaust bank 1.
  int32_t ExhTemp1;                      //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of engine combustion byproducts entering the diesel particulate filter in exhaust bank 1.
  int32_t DPFInTemp;                     //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Used to identify the applicable J1939-73 FMI detected in the exhaust temperature 1 sensor by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of multiple failures the most severe is ...
  uint8_t ExhTemp1PreliminaryFMI;        //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected in the diesel particulate filter intake temperature sensor by the manufacturer?s sensor control software in exhaust bank 1.  When there is no failure FMI 31 is sent.  In the case of multiple ...
  uint8_t DPFInTempPreliminaryFMI;       //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT1IG2_t;

// def @DM26 CAN Message (419281150)
#define DM26_IDE (1U)
#define DM26_DLC (8U)
#define DM26_CANID (0x18FDB8FEU)
// -- Diagnostic Readiness 3  This message conveys information useful in determining whether the OBD System has a defect or not.
typedef struct
{

  // RUNTM shall increment while the engine is running.  It shall freeze if the engine stalls.  RUNTM shall be reset to zero during every control module power-up and when entering the key-on, engine off position.  RUNTM is limited to 65,535 seconds and ...
  uint16_t TimeSinceEngineStart;              //      Bits=16.  [ 0     , 64255  ]  Unit:'s'    

  // Number of warm-up cycles since all DTCs were cleared (via an external test equipment or possibly, a battery disconnect).  A warm-up is defined in the OBD regulations to be sufficient vehicle operation such that coolant temperature rises by at least ...
  uint8_t NumOfWarmUpsSinceDTCsCleared;       //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // 1 - "EnabledForCycle" 
  // 0 - "DisabledForRestOfCycle" 

  uint8_t MisfireMonitoringEnabled;           //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // 1 - "NotCompleteCycle" 
  // 0 - "CompleteCycleOrNotSupported" 

  uint8_t FuelSystemMonitoringEnabled;        //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "NotCompleteCycle" 
  // 0 - "CompleteCycleOrNotSupported" 

  uint8_t ComprehensiveCompMonEnabled;        //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "EnabledForCycle" 
  // 0 - "DisabledForRestOfCycle" 

  uint8_t MisfireMonitoringComplete;          //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "NotCompleteCycle" 
  // 0 - "CompleteCycleOrNotSupported" 

  uint8_t FuelSystemMonitoringComplete;       //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "NotCompleteCycle" 
  // 0 - "CompleteCycleOrNotSupported" 

  uint8_t ComprehensiveComptMonComplete;      //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "NotCompleteCycle" 
  // 0 - "CompleteCycleOrNotSupported" 

  uint8_t CatalystMonEnabled;                 //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "EnabledForCycle" 
  // 0 - "DisabledForRestOfCycle" 

  uint8_t HeatedCatalystMonEnabled;           //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "NotCompleteCycle" 
  // 0 - "CompleteCycleOrNotSupported" 

  uint8_t EvaporativeSystemMonEnabled;        //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "EnabledForCycle" 
  // 0 - "DisabledForRestOfCycle" 

  uint8_t SecondAirSystemMonEnabled;          //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "NotCompleteCycle" 
  // 0 - "CompleteCycleOrNotSupported" 

  uint8_t ACSystemRefrigerantMonEnabled;      //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "NotCompleteCycle" 
  // 0 - "CompleteCycleOrNotSupported" 

  uint8_t OxygenSensorMonEnabled;             //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "NotCompleteCycle" 
  // 0 - "CompleteCycleOrNotSupported" 

  uint8_t OxygenSensorHeaterMonEnabled;       //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "EnabledForCycle" 
  // 0 - "DisabledForRestOfCycle" 

  uint8_t EGRSystemMonitoringEnabled;         //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "EnabledForCycle" 
  // 0 - "DisabledForRestOfCycle" 

  uint8_t ColdStartAidSystemMonEnabled;       //      Bits=01.  [ 0     , 1      ]  Unit:''     

  int8_t BoostPressureControlSystemEnable;    //  [-] Bits=01.  [ 0     , 0      ]  Unit:''     

  uint8_t DieselParticulateFilterEnabled;     //      Bits=01.  [ 0     , 1      ]  Unit:''     

  uint8_t NOxConvertingCatalystAdsorberEna;   //      Bits=01.  [ 0     , 1      ]  Unit:''     

  uint8_t NMHCConvertingCatalystEnabled;      //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "NotCompleteCycle" 
  // 0 - "CompleteCycleOrNotSupported" 

  uint8_t CatalystMonComplete;                //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "EnabledForCycle" 
  // 0 - "DisabledForRestOfCycle" 

  uint8_t HeatedCatalystMonComplete;          //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "NotCompleteCycle" 
  // 0 - "CompleteCycleOrNotSupported" 

  uint8_t EvaporativeSystemMonComplete;       //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "EnabledForCycle" 
  // 0 - "DisabledForRestOfCycle" 

  uint8_t SecondAirSystemMonComplete;         //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "NotCompleteCycle" 
  // 0 - "CompleteCycleOrNotSupported" 

  uint8_t ACSystemRefrigerantMonComplete;     //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "EnabledForCycle" 
  // 0 - "DisabledForRestOfCycle" 

  uint8_t OxygenSensorMonComplete;            //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "EnabledForCycle" 
  // 0 - "DisabledForRestOfCycle" 

  uint8_t OxygenSensorHeaterMonComplete;      //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "NotCompleteCycle" 
  // 0 - "CompleteCycleOrNotSupported" 

  uint8_t EGRSystemMonitoringComplete;        //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "EnabledForCycle" 
  // 0 - "DisabledForRestOfCycle" 

  uint8_t ColdStartAidSystemMonComplete;      //      Bits=01.  [ 0     , 1      ]  Unit:''     

  uint8_t BoostPressureControlSystemComple;   //      Bits=01.  [ 0     , 1      ]  Unit:''     

  uint8_t DieselParticulateFilterCompleted;   //      Bits=01.  [ 0     , 1      ]  Unit:''     

  uint8_t NOxConvertingCatalstAdsrbrCmpltd;   //      Bits=01.  [ 0     , 1      ]  Unit:''     

  uint8_t NMHCConvertingCatalystCompleted;    //      Bits=01.  [ 0     , 1      ]  Unit:''     
  uint32_t framecnt;
} DM26_t;

// def @TPRI CAN Message (419281406)
#define TPRI_IDE (1U)
#define TPRI_DLC (8U)
#define TPRI_CANID (0x18FDB9FEU)
// -- Tire Pressure Reference Information  Information on actual tire pressure reference value for monitoring.  NOTE?Message has to repeated as necessary to transmit all available information.  This method of location identification requires individual ...
// signal: @ReferenceTirePress_33
#define ReferenceTirePress_33_CovFactor 8
#define ReferenceTirePress_33_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePress_32
#define ReferenceTirePress_32_CovFactor 8
#define ReferenceTirePress_32_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePress_31
#define ReferenceTirePress_31_CovFactor 8
#define ReferenceTirePress_31_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePress_30
#define ReferenceTirePress_30_CovFactor 8
#define ReferenceTirePress_30_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePress_23
#define ReferenceTirePress_23_CovFactor 8
#define ReferenceTirePress_23_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePress_22
#define ReferenceTirePress_22_CovFactor 8
#define ReferenceTirePress_22_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePress_21
#define ReferenceTirePress_21_CovFactor 8
#define ReferenceTirePress_21_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePress_20
#define ReferenceTirePress_20_CovFactor 8
#define ReferenceTirePress_20_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePress_13
#define ReferenceTirePress_13_CovFactor 8
#define ReferenceTirePress_13_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePress_12
#define ReferenceTirePress_12_CovFactor 8
#define ReferenceTirePress_12_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePress_11
#define ReferenceTirePress_11_CovFactor 8
#define ReferenceTirePress_11_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePress_10
#define ReferenceTirePress_10_CovFactor 8
#define ReferenceTirePress_10_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePress_01
#define ReferenceTirePress_01_CovFactor 8
#define ReferenceTirePress_01_CovS(x) ((uint8_t)((x / 8)))
// signal: @ReferenceTirePress_00
#define ReferenceTirePress_00_CovFactor 8
#define ReferenceTirePress_00_CovS(x) ((uint8_t)((x / 8)))
typedef struct
{

  // Identifies which tire is associated with the parametric data in this PGN.  The low order 4 bits represent a position number, counting left to right when facing in the direction of normal vehicle travel (forward).  The high order 4 bits represent a ...
  // 51 - "Axle3_Position3" 
  // 50 - "Axle3_Position2" 
  // 49 - "Axle3_Position1" 
  // 35 - "Axle2_Position3" 
  // 34 - "Axle2_Position2" 
  // 33 - "Axle2_Position1" 
  // 19 - "Axle1_Position3" 
  // 18 - "Axle1_Position2" 
  // 17 - "Axle1_Position1" 
  // 1 - "Axle0_Position1" 
  // 48 - "Axle3_Position0" 
  // 32 - "Axle2_Position0" 
  // 16 - "Axle1_Position0" 
  // 0 - "Axle0_Position0" 

  uint8_t TireLocation;                  //      Bits=08.  [ 0     , 255    ]  Unit:''     

  uint8_t ReferenceTirePress_33;         //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePress_32;         //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePress_31;         //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePress_30;         //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePress_23;         //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePress_22;         //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePress_21;         //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePress_20;         //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePress_13;         //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePress_12;         //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePress_11;         //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePress_10;         //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePress_01;         //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  uint8_t ReferenceTirePress_00;         //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     
  uint32_t framecnt;
} TPRI_t;

// def @TR6 CAN Message (419281662)
#define TR6_IDE (1U)
#define TR6_DLC (8U)
#define TR6_CANID (0x18FDBAFEU)
// -- Farebox Status  Used to report alarms of the fare collection unit.
typedef struct
{

  // Indicates if a farebox emergency condition exists.    00 = Non-emergency condition  01 = Emergency condition  10 = Error Condition  11 = Not available
  // 3 - "Not available" 
  // 2 - "Error Condition" 
  // 1 - "Emergency condition" 
  // 0 - "Non-emergency condition" 

  uint8_t FareboxEmergencyStatus;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the nature of the farebox alarm condition.  0000000 = Voltage dropout  0000001 = Voltage restored  0000010 = Probe started  0000011 = Probe completed  0000100 = Cashbox removed  0000101 = Cashbox restored  0000110 = Cashbox door timeout   ...
  // 25 - "Maintenance access out of service" 
  // 24 - "Maintenance access in service considered an alarm condition" 
  // 23 - "Paper currency jam cleared" 
  // 22 - "Paper currency jam" 
  // 21 - "Pass/transfer jam cleared" 
  // 20 - "Pass/transfer jam" 
  // 19 - "Farebox reset to automatic mode" 
  // 18 - "Farebox set in manual bypass" 
  // 17 - "Coin dejam operated" 
  // 16 - "Card/pass box full" 
  // 15 - "Card/pass box less than 75 full" 
  // 14 - "Card/pass box 75 full" 
  // 13 - "Currency box full" 
  // 12 - "Currency box less than 75 full" 
  // 11 - "Currency box 75 full" 
  // 10 - "Coinbox full" 
  // 9 - "Coinbox 75 full" 
  // 8 - "Insufficient fare accepted" 
  // 7 - "Cashbox opened in service considered an alarm condition" 
  // 6 - "Cashbox door timeout" 
  // 5 - "Cashbox restored" 
  // 4 - "Cashbox removed" 
  // 3 - "Probe completed" 
  // 2 - "Probe started" 
  // 1 - "Voltage restored" 
  // 0 - "Voltage dropout" 

  uint8_t FareboxAlarmIdentifier;        //      Bits=07.  [ 0     , 127    ]  Unit:''     
  uint32_t framecnt;
} TR6_t;

// def @TR5 CAN Message (419281918)
#define TR5_IDE (1U)
#define TR5_DLC (8U)
#define TR5_CANID (0x18FDBBFEU)
// -- Farebox Point of Sale  Used to report stop level point of sale detail.
typedef struct
{

  // Enumerated value representing the type of transaction completed    0000 = Cash  0001 = Token  0010 = Ticket  0011 = Pass  0100 = Card  0101 = Permit  0110 = Transfer  0111 = Free  1000-1011 = Reserved for assignment  1100-1111 = Agency defined
  // 7 - "Free" 
  // 6 - "Transfer" 
  // 5 - "Permit" 
  // 4 - "Card" 
  // 3 - "Pass" 
  // 2 - "Ticket" 
  // 1 - "Token" 
  // 0 - "Cash" 

  uint8_t TransactionType;               //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Enumerated value representing the type/class of passenger, as defined by the agency.
  uint8_t PassengerType;                 //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Fare    0000 = Cash/No detail  0001 = Token A  0010 = Token B  0011 = Ticket A  0100 = Ticket B  0101 = Pass A  0110 = Pass B  0111-1010 = Reserved for assignment  1011-1111 = Agency defined
  // 6 - "Pass B" 
  // 5 - "Pass A" 
  // 4 - "Ticket B" 
  // 3 - "Ticket A" 
  // 2 - "Token B" 
  // 1 - "Token A" 
  // 0 - "Cash/No detail" 

  uint8_t TypeOfFare;                    //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Payment details.    0000 = Not an upgrade  0001 = Cash  0010 = Token  0011 = Ticket  0100 = Pass  0101 = Card  0110-1010 = Reserved for assignment  1011-1111 = Agency defined
  // 5 - "Card" 
  // 4 - "Pass" 
  // 3 - "Ticket" 
  // 2 - "Token" 
  // 1 - "Cash" 
  // 0 - "Not an upgrade" 

  uint8_t PaymentDetails;                //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Agency defined value indicating validity of this fare
  uint8_t FareValidity;                  //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Agency defined value indicating the category of the passenger associated with this fare
  uint8_t PassCategory;                  //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Identifies where the initial fare is paid    Note:  The definition of the agency numbering plan shall be agreed by the operating agency and the farebox manufacturer.  The value of 0 is reserved, the usable range is 1 to 31.
  uint8_t InitialFareAgency;             //      Bits=05.  [ 1     , 31     ]  Unit:''     

  // The type of service provided    000 = Local service  001 = Express service  010-111 = Agency defined
  // 1 - "Express service" 
  // 0 - "Local service" 

  uint8_t TypeOfService;                 //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The kind of transfer used    00000 = North  00001 = South  00010 = East  00011 = West  00100 = In  00101 = Out  00110-11111 = Agency defined
  // 5 - "Out" 
  // 4 - "In" 
  // 3 - "West" 
  // 2 - "East" 
  // 1 - "South" 
  // 0 - "North" 

  uint8_t TransferType;                  //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The route number issuing the transfer.
  uint16_t RouteNumber;                  //      Bits=12.  [ 0     , 4095   ]  Unit:''     

  // Indicates that a transfer was sold or issued on this transaction including its type and/or restrictions. The final definitions of the transfer issued information shall be agreed by the operating agency and the farebox manufacturer.  Note:  A ...
  uint8_t TransferSold;                  //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} TR5_t;

// def @TR3 CAN Message (419282430)
#define TR3_IDE (1U)
#define TR3_DLC (8U)
#define TR3_CANID (0x18FDBDFEU)
// -- Signal Preemption  Status and configuration of the device used for intersection preemption.
typedef struct
{

  // Range code enable    00 - Range code not used for interleaved data  01 - Range code used for interleaved data  10 - Error condition  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error condition" 
  // 1 - "Range code used for interleaved data" 
  // 0 - "Range code not used for interleaved data" 

  uint8_t RangeCodeEnable;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Transit route ID usage    00 - Transit route ID not used for interleaved data  01 - Transit route ID used for interleaved data (if range code not enabled)  10 - Error condition  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error condition" 
  // 1 - "Transit route ID used for interleaved data" 
  // 0 - "Transit route ID not used for interleaved data" 

  uint8_t TransitRouteIDUsage;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the intersection signal preemption    00 - Message is a request directed to the emitter  01 - Message is a response from the emitter  10 - Error condition  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error condition" 
  // 1 - "Message is a response from the emitter" 
  // 0 - "Message is a request directed to the emitter" 

  uint8_t IntrsctnPrmptionRequest_Response;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Priority of response sent by emitter  0000               - Reserved  0001               - Low priority  0010               - Probe priority  0011               - High priority  0100 to 1000 - Reserved  1001               - Priority set by hardware ...
  // 15 - "- Not available" 
  // 14 - "- Error condition" 
  // 11 - "- Priority set by hardware to high priority" 
  // 10 - "- Priority set by hardware to probe priority" 
  // 9 - "- Priority set by hardware to low priority" 
  // 3 - "- High priority" 
  // 2 - "- Probe priority" 
  // 1 - "- Low priority" 
  // 0 - "- Reserved" 

  uint8_t PriorityOfRespSentByEmitter;        //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Transit door enable    00 - Ignore transit door status  01 - Transit door status will override strobe activation  10 - Error condition  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error condition" 
  // 1 - "Transit door status will override strobe activation" 
  // 0 - "Ignore transit door status" 

  uint8_t TransitDoorEnable;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Strobe activation control status    00 - Deactivate strobe  01 - Activate strobe  10 - Error condition  11 - Not available    Note: Strobe will flash if not overridden by transit door status, strobe is working, and emitter is in the normal mode.
  // 3 - "Not available" 
  // 2 - "Error condition" 
  // 1 - "Activate strobe" 
  // 0 - "Deactivate strobe" 

  uint8_t StrobeActivationCtrlStatus;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Numerical designation of the vehicle.   65535 is used to represent the vehicle ID is not available.
  uint16_t VehicleID;                         //      Bits=16.  [ 0     , 65534  ]  Unit:''     
  uint32_t framecnt;
} TR3_t;

// def @TR1 CAN Message (419282686)
#define TR1_IDE (1U)
#define TR1_DLC (8U)
#define TR1_CANID (0x18FDBEFEU)
// -- Transit Route  The current route assigned to this transit vehicle. The transit route information may be entered into different devices by different authorities (fare collection, radio log, unit control panel, etc.).
typedef struct
{

  // The identity of the agency involved in this transaction
  uint8_t Agency;                             //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Number of bytes in the Transit Assigned Route Identity.  This parameter identifies the length, in bytes, of the data in SPN 3074 (Transit Assigned Route Identity).
  uint8_t NmbrOfBytsInThTrnstAssgndRtIdntt;   //      Bits=08.  [ 1     , 100    ]  Unit:'bytes'

  // Number of bytes in the Transit Assigned Run Identity.  This parameter identifies the length, in bytes, of the data in SPN 3075 (Transit Assigned Run Identity).
  uint8_t NmbrOfBytsInThTrnstAssgndRnIdntt;   //      Bits=08.  [ 1     , 100    ]  Unit:'bytes'

  // Number of bytes in the Transit Assigned Block Identity.  This parameter identifies the length, in bytes, of the data in SPN 3076 (Transit Assigned Block Identity).
  uint8_t NmbrOfBytsInThTrnstAssgndBlckIdn;   //      Bits=08.  [ 1     , 100    ]  Unit:'bytes'
  uint32_t framecnt;
} TR1_t;

// def @TR2 CAN Message (419282942)
#define TR2_IDE (1U)
#define TR2_DLC (8U)
#define TR2_CANID (0x18FDBFFEU)
// -- Transit Milepost  Identification of a transit route milepost
typedef struct
{

  // Number of bytes in the Milepost Identification.  This parameter identifies the length, in bytes, of the data in SPN 590 (Milepost Identification).
  uint8_t NmbrOfBytsInThMlpstIdntification;   //      Bits=08.  [ 0     , 100    ]  Unit:'bytes'
  uint32_t framecnt;
} TR2_t;

// def @TR7 CAN Message (419283198)
#define TR7_IDE (1U)
#define TR7_DLC (8U)
#define TR7_CANID (0x18FDC0FEU)
// -- Passenger Counter  Used to notify the transit link devices of real-time boarding and exiting passengers or to indicate the total number of passengers on vehicle referenced to the last transit stop.  Also transmits information on the use status of ...
typedef struct
{

  // Used to notify transit link devices of the type of passenger counting system used in the vehicle.  Some passenger counting systems indicate real-time boarding and exiting data for other devices to accumulate. Other types of passenger counters report ...
  // 255 - "not available" 
  // 254 - "error indicator" 
  // 4 - "exiting passenger, second passenger stream)" 
  // 3 - "boarding passenger, second passenger stream)" 
  // 2 - "exiting passenger" 
  // 1 - "boarding passenger" 
  // 0 - "absolute passenger count" 

  uint8_t TypeOfPassengerCount;          //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Count of the number of passengers on a transit vehicle.  If the type of passenger count (SPN 3043) is 0, the patron count indicates the number of patrons currently on vehicle after the door has closed.  If the type of passenger count is 1 to 4,  the ...
  uint8_t PatronCount;                   //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Used to report silent alarm push button status.    00 - Off  01 - On  10 - Error condition  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error condition" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t SilentAlarmStatus;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to indicate the proper or unauthorized use of the vehicle. The administrative control device or any device issuing the vehicle use status PID should be sensitive to the run switch status (SPN 3046) and any other locally defined criteria for ...
  // 3 - "Not available" 
  // 2 - "Error condition" 
  // 1 - "Unauthorized use" 
  // 0 - "Normal use" 

  uint8_t VehicleUseStatus;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status of the run switch for the vehicle.    00 - Off  01- On  10 - Error condition  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error condition" 
  // 0 - "Off" 

  uint8_t TransitRunStatus;              //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} TR7_t;

// def @EFL_P3 CAN Message (419283454)
#define EFL_P3_IDE (1U)
#define EFL_P3_DLC (8U)
#define EFL_P3_CANID (0x18FDC1FEU)
#define EFL_P3_CYC (500U)
// -- Engine Fluid Level/Pressure 3  3rd PGN which identifies parameters that are either measuring various pressures within the engine or identifying engine fluid levels
// signal: @EngIntkVlvActationSystemOilPress
#define EngIntkVlvActationSystemOilPress_CovFactor 0.00390625
#define EngIntkVlvActationSystemOilPress_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @EngExhstGsRcrclation1IntakePress
#define EngExhstGsRcrclation1IntakePress_CovFactor 2
#define EngExhstGsRcrclation1IntakePress_CovS(x) ((uint8_t)((x / 2)))
// signal: @EngExhstVlvActtionSystemOilPress
#define EngExhstVlvActtionSystemOilPress_CovFactor 0.00390625
#define EngExhstVlvActtionSystemOilPress_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @EngExhstGsRcrclation1OutletPress
#define EngExhstGsRcrclation1OutletPress_CovFactor 2
#define EngExhstGsRcrclation1OutletPress_CovS(x) ((uint8_t)((x / 2)))
// signal: @EngThrottleValve1DiffPress
#define EngThrottleValve1DiffPress_CovFactor 0.1
#define EngThrottleValve1DiffPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // The gage pressure of the oil in the hydraulic system that powers the engine intake valve actuation system
  uint16_t EngIntkVlvActationSystemOilPress;  //      Bits=16.  [ 0     , 250.996 ]  Unit:'MPa'   Factor= 0.00390625

  // EGR intake gage pressure is measured after the EGR cooler and before the EGR valve.
  uint8_t EngExhstGsRcrclation1IntakePress;   //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // The absolute pressure of the oil in the hydraulic system that powers the engine exhaust valve actuation system
  uint16_t EngExhstVlvActtionSystemOilPress;  //      Bits=16.  [ 0     , 250.996 ]  Unit:'MPa'   Factor= 0.00390625

  // EGR outlet pressure is measured immediately after the EGR valve.
  uint8_t EngExhstGsRcrclation1OutletPress;   //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // The differential pressure between the intake and outlet of the throttle valve 1 (SPN 51).  The differential pressure is measured from the intake with respect to the outlet of the throttle valve.
  uint16_t EngThrottleValve1DiffPress;        //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} EFL_P3_t;

// def @EEC14 CAN Message (419283710)
#define EEC14_IDE (1U)
#define EEC14_DLC (8U)
#define EEC14_CANID (0x18FDC2FEU)
// -- Electronic Engine Controller 14
// signal: @EngExhstGsRcrcltn1Valve1PosError
#define EngExhstGsRcrcltn1Valve1PosError_CovFactor 0.004
#define EngExhstGsRcrcltn1Valve1PosError_CovS(x) ((int32_t)((x / 0.004) + 31250))
// signal: @EngExhstGsRcrcltn1Valve2PosError
#define EngExhstGsRcrcltn1Valve2PosError_CovFactor 0.004
#define EngExhstGsRcrcltn1Valve2PosError_CovS(x) ((int32_t)((x / 0.004) + 31250))
// signal: @EngFuelMassFlowRate
#define EngFuelMassFlowRate_CovFactor 0.005
#define EngFuelMassFlowRate_CovS(x) ((uint16_t)((x / 0.005)))
typedef struct
{

  // The position error of the Exhaust Gas Recirculation 1 valve, determined as the actual position (SPN 27) minus the commanded position (SPN 2791).
  int32_t EngExhstGsRcrcltn1Valve1PosError;   //      Bits=16.  [ -125  , 132.02 ]  Unit:'%'     Offset= -125      Factor= 0.004 

  // The position error of the Exhaust Gas Recirculation 1 valve 2, determined as the actual position (SPN 3821) minus the commanded position (SPN 3822).
  int32_t EngExhstGsRcrcltn1Valve2PosError;   //      Bits=16.  [ -125  , 132.02 ]  Unit:'%'     Offset= -125      Factor= 0.004 

  // Mass of liquid fuel consumed by engine per unit of time.
  uint16_t EngFuelMassFlowRate;               //      Bits=16.  [ 0     , 321.275 ]  Unit:'g/s'   Factor= 0.005 

  // Type of fuel currently being utilized by the vehicle  Data Byte - Scaling - External Display  0x00 - Not available - NONE  0x01 - Gasoline/petrol - GAS  0x02 - Methanol - METH  0x03 - Ethanol - ETH  0x04 - Diesel - DSL  0x05 - Liquefied Petroleum ...
  // 255 - "Not available, Parameter not supported)" 
  // 254 - "Error" 
  // 28 - "Dual Fuel, Diesel and LNG" 
  // 27 - "Dual Fuel, Diesel and CNG" 
  // 26 - "Natural Gas, Compressed or Liquefied Natural Gas)" 
  // 25 - "Bi-fuel using diesel" 
  // 24 - "Bi-fuel vehicle using NG" 
  // 23 - "Natural Gas, NG)" 
  // 22 - "Hybrid vehicle in regeneration mode" 
  // 21 - "Hybrid vehicle using battery and combustion engine" 
  // 20 - "Hybrid vehicle using battery" 
  // 19 - "Hybrid vehicle using diesel engine" 
  // 18 - "Hybrid vehicle using gasoline engine on ethanol" 
  // 17 - "Hybrid vehicle using gasoline engine" 
  // 16 - "Bi-fuel vehicle using battery and combustion engine" 
  // 15 - "Bi-fuel vehicle using battery" 
  // 14 - "Bi-fuel vehicle using propane" 
  // 13 - "Bi-fuel vehicle using CNG" 
  // 12 - "Bi-fuel vehicle using LPG" 
  // 11 - "Bi-fuel vehicle using ethanol" 
  // 10 - "Bi-fuel vehicle using methanol" 
  // 9 - "Bi-fuel vehicle using gasoline" 
  // 8 - "Battery/electric" 
  // 7 - "Propane" 
  // 6 - "Compressed Natural Gas" 
  // 5 - "Liquefied Petroleum Gas" 
  // 4 - "Diesel" 
  // 3 - "Ethanol" 
  // 2 - "Methanol" 
  // 1 - "Gasoline/petrol" 
  // 0 - "Not available, NONE" 

  uint8_t FuelType;                           //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Control setting for fuel isolation. In a single injector dual fuel system when using just diesel fuel, diesel must not be allowed to migrate into the gaseous fuel system. When the fuel isolation valve is closed the engine uses dual fuel by allowing ...
  // 3 - "Don't care / take no action" 
  // 2 - "Reserved" 
  // 1 - "Gaseous Fuel is Used" 
  // 0 - "Gaseous Fuel Migration is Prevented" 

  uint8_t EngFuelIsolationCtrl;               //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EEC14_t;

// def @EEC15 CAN Message (419283966)
#define EEC15_IDE (1U)
#define EEC15_DLC (8U)
#define EEC15_CANID (0x18FDC3FEU)
// -- Electronic Engine Controller 15
// signal: @AccelPedal1Channel2
#define AccelPedal1Channel2_CovFactor 0.4
#define AccelPedal1Channel2_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @AccelPedal1Channel3
#define AccelPedal1Channel3_CovFactor 0.4
#define AccelPedal1Channel3_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @AccelPedal2Channel2
#define AccelPedal2Channel2_CovFactor 0.4
#define AccelPedal2Channel2_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @AccelPedal2Channel3
#define AccelPedal2Channel3_CovFactor 0.4
#define AccelPedal2Channel3_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Sensor output 2 for the accelerator pedal #1 position when using a redundant-style sensor.  The ratio of actual accelerator pedal position to maximum pedal position. This is for the first occurrence of the accelerator pedal. Although it is used as ...
  uint8_t AccelPedal1Channel2;           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Sensor output 3 for the accelerator pedal #1 position when using a redundant-style sensor.  The ratio of actual accelerator pedal position to maximum pedal position. This is for the first occurrence of the accelerator pedal. Although it is used as ...
  uint8_t AccelPedal1Channel3;           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Sensor output 2 for the accelerator pedal #2 position when using a redundant-style sensor.  The ratio of actual accelerator pedal position to maximum pedal position. This is for the second occurrence of the accelerator pedal. Although it is used as ...
  uint8_t AccelPedal2Channel2;           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Sensor output 3 for the accelerator pedal #2 position when using a redundant-style sensor.  The ratio of actual accelerator pedal position to maximum pedal position. This is for the second occurrence of the accelerator pedal. Although it is used as ...
  uint8_t AccelPedal2Channel3;           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} EEC15_t;

// def @EBC5 CAN Message (419284222)
#define EBC5_IDE (1U)
#define EBC5_DLC (8U)
#define EBC5_CANID (0x18FDC4FEU)
#define EBC5_CYC (100U)
// -- Electronic Brake Controller 5  Used for information on brake control.
// signal: @XBRAccelerationLimit
#define XBRAccelerationLimit_CovFactor 0.1
#define XBRAccelerationLimit_CovS(x) ((int16_t)((x / 0.1) + 125))
typedef struct
{

  // This parameter indicates if the temperature in the service brakes exceeds a certain value. It can be used for a warning information for the driver. The temperature warning value is vehicle manufacturer specific.  00 Not Active  01 Active  10 ...
  // 3 - "not available" 
  // 2 - "Reserved" 
  // 1 - "Active" 
  // 0 - "Not Active" 

  uint8_t BrakeTempWarning;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the current mode of the halt brake function.  000            Inactive  001            Active  010            Active, but not functioning properly.  (This mode may be used to warn the driver)  011 - 101  Not defined  110 ...
  // 7 - "Not available" 
  // 6 - "Halt brake not functional" 
  // 2 - "Active,  but not functioning properly" 
  // 1 - "Active" 
  // 0 - "Inactive" 

  uint8_t HaltBrakeMode;                      //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Signal which indicates the current mode of the hill holder function.  000            Inactive  001            Active  010            Active, but will change to inactive in a short time.  (This mode may be used to warn the driver)  011 ...
  // 7 - "Not available" 
  // 6 - "Hill holder not functional" 
  // 3 - "Active,  but may activate parking brake if needed." 
  // 2 - "Active,  but will change to inactive in a short time" 
  // 1 - "Active" 
  // 0 - "Inactive" 

  uint8_t HillHolderMode;                     //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // This parameter indicates if the brake system presently uses the foundation brakes.    00   Foundation brakes not in use  01   Foundation brakes in use  10   Reserved  11   Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Foundation brakes in use" 
  // 0 - "Foundation brakes not in use" 

  uint8_t FoundationBrakeUse;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter indicates which external brake control is allowed.  00 - Any external brake demand will be accepted (brake system fully operational)  01 - Only external brake demand of highest XBR Priority (00) will be accepted  (e.g. because the ...
  // 3 - "not available" 
  // 2 - "No external brake demand will be accepted" 
  // 1 - "Only external brake demand of highest XBR Priority" 
  // 0 - "Any external brake demand will be accepted" 

  uint8_t XBRSystemState;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter indicates which XBR Control Mode is executed by the brake system.  0000                No brake demand being executed (default mode)  0001                Driver's brake demand being executed, no external brake demand  0010 ...
  // 15 - "Not available" 
  // 3 - "Maximum mode of XBR acceleration control being executed" 
  // 2 - "Addition mode of XBR acceleration control being executed" 
  // 1 - "Driver's brake demand being executed" 
  // 0 - "No brake demand being executed" 

  uint8_t XBRActiveCtrlMode;                  //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The brake system may temporarily or generally limit the maximum brake performance available for external systems. A temporary limit may be nessary due to high brake temperature; a general limit may be defined by the vehicle manufacturer, e.g. a ...
  int16_t XBRAccelerationLimit;               //      Bits=08.  [ -10   , 10     ]  Unit:'m/s?'  Offset= -12.5     Factor= 0.1   

  // Signal which indicates when the parking brake actuator is fully activated.  (see also SPN 70 and 619).    00 - Parking Brake Actuator not fully activated  01 - Parking Brake Actuator fully activated  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Parking Brake Actuator fully activated" 
  // 0 - "Parking Brake Actuator not fully activated" 

  uint8_t PrkngBrakeActuatorFullyActivated;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates an emergency braking situation (ref. ECE Regulation 13 paragraph 5.2.1.31) with high  deceleration values.  This signal can be used to activate the hazard lights (ref ECE Regulation 48 paragraph 6.23) to  indicate other road ...
  // 3 - "not available" 
  // 2 - "reserved" 
  // 1 - "active" 
  // 0 - "inactive" 

  uint8_t EmergencyBrakingActive;             //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EBC5_t;

// def @ECUID CAN Message (419284478)
#define ECUID_IDE (1U)
#define ECUID_DLC (8U)
#define ECUID_CANID (0x18FDC5FEU)
// -- ECU Identification Information  Message for reporting identification and information about the physical ECU and its hardware, such as the ECU's part number, serial number, build date, etc.  Information about the software within the ECU should be ...
typedef struct
{

  // The part number of the physical ECU.
  uint8_t ECUPartNumber;                 //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // The serial number of the physical ECU.
  uint8_t ECUSerialNumber;               //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // The location of the ECU within a network.
  uint8_t ECULocation;                   //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // The type of ECU.  One example of a use of the ECU type could be for classifying ECU capabilities, such as I/O.
  uint8_t ECUType;                       //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // The name of the manufacturer of the physical ECU.    This name may be different than the manufacturer identified by the Manufacturer Code (SPN 2838) and listed in table B10 of J1939.
  uint8_t ECUManufacturerName;           //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // The ECU Hardware ID provides information to identify a specific ECU hardware version.  As an example, on a CAN network, this parameter can be used to uniquely identify the hardware version that is relevant for the interface of the ECU to the CAN ...
  uint8_t ECUHardwareID;                 //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} ECUID_t;

// def @CSA CAN Message (419284734)
#define CSA_IDE (1U)
#define CSA_DLC (8U)
#define CSA_CANID (0x18FDC6FEU)
// -- Cold Start Aids  Cold start aid information and settings.
// signal: @EngColdStartFuelIgniterCmd
#define EngColdStartFuelIgniterCmd_CovFactor 0.4
#define EngColdStartFuelIgniterCmd_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Devices that assist an Engine in starting, e.g. intake heaters and ether.  Primary starting aid.  Parameter indicating whether the start enable device 1 is ON or OFF    00 - start enable OFF  01 - start enable ON  10 - reserved  11 - not available
  // 3 - "not available" 
  // 2 - "reserved" 
  // 1 - "start enable ON" 
  // 0 - "start enable OFF" 

  uint8_t EngStartEnableDevice1;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Devices that assist an engine in starting, e.g. intake heaters, ether, or an alternate/secondary starting aid.  May be of the same type or different than Start Enable Device 1 (SPN 626). Parameter indicating whether the start enable device 2 is ON ...
  // 3 - "not available" 
  // 2 - "reserved" 
  // 1 - "start enable ON" 
  // 0 - "start enable OFF" 

  uint8_t EngStartEnableDevice2;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The start enable device installed for start enable device 1.  0000 - no start enable device 1 installed  0001 - glow plugs installed  0010 - fuelled start installed  0011 - ether injection installed  0100 - electric intake air heater installed  0101 ...
  // 15 - "not available" 
  // 4 - "electric intake air heater installed" 
  // 3 - "ether injection installed" 
  // 2 - "fuelled start installed" 
  // 1 - "glow plugs installed" 
  // 0 - "no start enable device 1 installed" 

  uint8_t EngStartEnableDevice1Config;        //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The start enable device installed for start enable device 2.  0000 - no start enable device 2 installed  0001 - glow plugs installed  0010 - fuelled start installed  0011 - ether injection installed  0100 - electric intake air heater installed  0101 ...
  // 15 - "not available" 
  // 4 - "electric intake air heater installed" 
  // 3 - "ether injection installed" 
  // 2 - "fuelled start installed" 
  // 1 - "glow plugs installed" 
  // 0 - "no start enable device 2 installed" 

  uint8_t EngStartEnableDevice2Config;        //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The engine cold start fuel igniter control command, normalized to %, where 0% represents fully off and 100% represents fully on.
  uint8_t EngColdStartFuelIgniterCmd;         //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The engine cold start fuel igniter relay control command.  This command controls the relay, not the igniter.    00  Off  01  On  10  Reserved  11  Don't care/take no action
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngColdStartFuelIgniterRelay;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Feedback state of the engine cold start fuel igniter relay which indicates the status of the relay output.    00  Off  01  On  10  Error  11  Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngCldStrtFlIgniterRelayFeedback;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} CSA_t;

// def @OHCSS CAN Message (419284990)
#define OHCSS_IDE (1U)
#define OHCSS_DLC (8U)
#define OHCSS_CANID (0x18FDC7FEU)
#define OHCSS_CYC (5000U)
// -- Off-Highway Engine Control Selection States  Reports the states of off-highway engine control modes, as they apply to different modes of engine operation which may be used to aid particular working environments. These states provide the controls ...
typedef struct
{

  // This is the Engine Auxiliary Governor feature. This feature is used to allow engine speed to be controlled by an auxiliary input such as pressure or tailshaft speed. This feature is requested by an operator switch, this parameter indicates the state ...
  // 3 - "Not available" 
  // 2 - "SAE reserved" 
  // 1 - "Control State is Auxiliary Governor enabled" 
  // 0 - "Control State is Auxiliary Governor disabled" 

  uint8_t EngAuxGovernorState;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This feature is widely used in Industry to operate multiple engines from a single command source. A master engine will ?synchronize? one or more slave engines to operate at the same speed. This feature is requested by an operator switch, this ...
  // 3 - "Not available" 
  // 2 - "SAE reserved" 
  // 1 - "Control State is Functionality enabled" 
  // 0 - "Control State is Functionality disabled" 

  uint8_t EngMultiUnitSyncState;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // In many applications, it is desirable that an alternate low idle speed setting be made available via switch input. The normal programmed low idle is the default low idle, and when the Alternate Low Idle feature is activated, an alternate ...
  // 3 - "not available" 
  // 2 - "SAE reserved" 
  // 1 - "Alternate idle state" 
  // 0 - "Normal idle state" 

  uint8_t EngAltLowIdleSelectState;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter reflects the control state that has been achieved based on the input from the SPN 2882.  In some off-highway applications it may be desirable to have multiple engine ratings available for selection by the operator.  There is the ...
  // 255 - "Not available" 
  // 254 - "SAE reserved" 
  // 3 - "Control state is Alternate Power Fueling 3" 
  // 2 - "Control state is Alternate Power Fueling 2 " 
  // 1 - "Control state is Alternate Power Fueling 1 " 
  // 0 - "Control state is Maximum Power Fueling" 

  uint8_t EngAltRatingSelectState;            //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // In some off-highway applications it may be desirable to have multiple droop settings available across the range of engine operation.  For example, in an agricultural tractor application, this functionality allows a higher engine speed during low ...
  // 15 - "-  Not available" 
  // 14 - "-  SAE reserved" 
  // 1 - "thru 1101" 
  // 0 - "- Control state is Normal Droop Setting" 

  uint8_t EngAltDroopAccel1SelectState;       //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // In some off-highway applications it may be desirable to have multiple droop settings available across the range of engine operation.  For example, in an agricultural tractor application, this functionality allows a higher engine speed during low ...
  // 15 - "-  Not available" 
  // 14 - "-  SAE reserved" 
  // 1 - "thru 1101" 
  // 0 - "- Control's state is Normal Droop Setting" 

  uint8_t EngAltDroopAccel2SelectState;       //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // In some off-highway applications it may be desirable to have multiple droop settings available across the range of engine operation.  For example, in an agricultural tractor application, this functionality allows a higher engine speed during low ...
  // 15 - "-  Not available" 
  // 14 - "-  SAE reserved" 
  // 1 - "thru 1101" 
  // 0 - "- Control state is Normal Droop Setting" 

  uint8_t EngAltDropRemoteAccelSelectState;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // In some off-highway applications it may be desirable to have multiple droop settings available across the range of engine operation.  For example, in an agricultural tractor application, this functionality allows a higher engine speed during low ...
  // 15 - "-  Not available" 
  // 14 - "-  SAE reserved" 
  // 1 - "thru 1101" 
  // 0 - "- Control state is Normal Droop Setting" 

  uint8_t EngAltDroopAuxInputSelectState;     //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // This parameter will report the selected torque curve, as indicated by SPN 6796.  0 - Indicates that the engine is using a torque that is not presently selected by SPN 6796  1 - Indicates that Torque Curve 1 is selected  2 - Indicates that Torque ...
  // 0 - "Indicates that the engine is using a torque that is not presently selected by SPN 6796" 
  // 15 - "Not supported" 
  // 14 - "Error" 
  // 2 - "Indicates that Torque Curve 2 is selected" 
  // 1 - "Indicates that Torque Curve 1 is selected" 

  uint8_t EngTorqueCurveSelection;            //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} OHCSS_t;

// def @ISCS CAN Message (419285246)
#define ISCS_IDE (1U)
#define ISCS_DLC (8U)
#define ISCS_CANID (0x18FDC8FEU)
#define ISCS_CYC (1000U)
// -- Operator Primary Intermediate Speed Control state  The Operator Primary Intermediate Speed Control State is used to provide the controller feedback to indicate the controls state achieved.
typedef struct
{

  // 13 preprogrammed intermediate speed control settings are available for the controlling ECM to select.  If no speed setting is requested, the engine operates normally. The Intermediate Speed Control is widely used in the Industrial application to ...
  // 15 - "- not available" 
  // 14 - "- SAE reserved" 
  // 1 - "thru 1101" 
  // 0 - "- Control state is ISC functionality is not requested" 

  uint8_t EngOprtrPrmryIntrmdtSpdSlctState;   //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} ISCS_t;

// def @ISC CAN Message (419285758)
#define ISC_IDE (1U)
#define ISC_DLC (8U)
#define ISC_CANID (0x18FDCAFEU)
#define ISC_CYC (1000U)
// -- Intermediate Speed Control  The Intermediate Speed Control is widely used in the Industrial application to control the engine to an intermediate speed setting which can bypass the accelerator position control. An example of this operation would be ...
typedef struct
{

  // Allows the operator to select one of 13 preprogrammed Intermediate Speed Control settings. If no speed setting is requested, the engine operates normally. The Intermediate Speed Control is widely used in the Industrial application to control the ...
  // 15 - "- not available" 
  // 14 - "- error condition" 
  // 1 - "thru 1101" 
  // 0 - "- indicates that the ISC functionality is not requested" 

  uint8_t EngOprtrPrmryIntrmdteSpeedSelect;   //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} ISC_t;

// def @OHECS CAN Message (419286014)
#define OHECS_IDE (1U)
#define OHECS_DLC (8U)
#define OHECS_CANID (0x18FDCBFEU)
#define OHECS_CYC (500U)
// -- Off-Highway Engine Control Selection  Allows for the selection of off-highway engine control modes, as they apply to different modes of engine operation which may be used to aid particular working environments. By offering characteristics suitable ...
typedef struct
{

  // This is the On/Off operation of the Auxiliary Governor feature switch. This feature is used to allow engine speed to be controlled by an auxiliary input such as pressure or tailshaft speed. This switch position indicates whether this feature is ...
  // 3 - "Not available" 
  // 2 - "Error condition" 
  // 1 - "Auxiliary Governor is enabled" 
  // 0 - "Auxiliary Governor is disabled" 

  uint8_t EngAuxGovernorSwitch;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This is the On/Off operation of the Multiple Unit Synchronization functionality. When it is enabled (i.e. On) the master engine will synchronize one or more slave engines to operate at the same speed. This switch position indicates whether this ...
  // 3 - "Not available or Unused" 
  // 2 - "Error" 
  // 1 - "Functionality is enabled" 
  // 0 - "Functionality is disabled" 

  uint8_t EngSynchronizationSwitch;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Operator switch which selects between two low idle speeds, default and alternate.  The normal programmed low idle is the default low idle, and when the Alternate Low Idle switch is activated, a alternate preprogrammed low idle speed is selected. The ...
  // 3 - "Not available or Unused" 
  // 2 - "Error" 
  // 1 - "Alternate low idle point is selected" 
  // 0 - "Default low idle point is selected" 

  uint8_t EngAltLowIdleSwitch;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // In some off-highway applications it may be desirable to have multiple engine ratings available for selection by the operator. There is the default engine rating, which provides the maximum available power across the range of operation. There are ...
  // 255 - "Not available" 
  // 254 - "Error condition." 
  // 3 - "indicates that the Alternate Power Fueling 3 is selected" 
  // 2 - "indicates that the Alternate Power Fueling 2 is selected" 
  // 1 - "indicates that the Alternate Power Fueling 1 is selected" 
  // 0 - "indicates that Maximum Power Fueling is selected" 

  uint8_t EngAltRatingSelect;             //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // In some off-highway applications it may be desirable to have multiple droop settings available across the range of engine operation.  For example, in an agricultural tractor application, this functionality allows a higher engine speed during low ...
  // 15 - "- Not available" 
  // 14 - "-  Error condition" 
  // 1 - "thru 1101" 
  // 0 - "- Normal Droop Setting is selected" 

  uint8_t EngAltDroopAccel1Select;        //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // In some off-highway applications it may be desirable to have multiple droop settings available across the range of engine operation.  For example, in an agricultural tractor application, this functionality allows a higher engine speed during low ...
  // 15 - "- Not available" 
  // 14 - "-  Error condition" 
  // 1 - "thru 1101" 
  // 0 - "- Normal Droop Setting is selected" 

  uint8_t EngAltDroopAccel2Select;        //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // In some off-highway applications it may be desirable to have multiple droop settings available across the range of engine operation.  For example, in an agricultural tractor application, this functionality allows a higher engine speed during low ...
  // 15 - "-  Not available" 
  // 14 - "-  Error condition" 
  // 1 - "thru 1101" 
  // 0 - "- Normal Droop Setting is selected" 

  uint8_t EngAltDroopRemoteAccelSelect;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // In some off-highway applications it may be desirable to have multiple droop settings available across the range of engine operation.  For example, in an agricultural tractor application, this functionality allows a higher engine speed during low ...
  // 15 - "-  Not available" 
  // 14 - "-  Error condition" 
  // 1 - "thru 1101" 
  // 0 - "- Normal Droop Setting is selected" 

  uint8_t EngAltDroopAuxInputSelect;      //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // This parameter will allow selection of a torque curve that is higher than the base curve.  0 - Indicates that this parameter is not presently requesting a different torque curve be used  1 - Indicates that Torque Curve 1 is selected  2 - Indicates ...
  // 15 - "Not supported" 
  // 14 - "SAE reserved" 
  // 2 - "Indicates that Torque Curve 2 is selected" 
  // 1 - "Indicates that Torque Curve 1 is selected" 
  // 0 - "Indicates that this parameter is not presently requesting a different torque curve be used" 

  uint8_t EngTorqueCurveSelectionCmd;     //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} OHECS_t;

// def @OWW CAN Message (419286526)
#define OWW_IDE (1U)
#define OWW_DLC (8U)
#define OWW_CANID (0x18FDCDFEU)
#define OWW_CYC (200U)
// -- Operator Wiper and Washer Controls Message  Message for items related to the operators controls for the window wipers and washers on the front and rear cab windows
// signal: @FrontOperatorWiperDelayCtrl
#define FrontOperatorWiperDelayCtrl_CovFactor 0.4
#define FrontOperatorWiperDelayCtrl_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @FrontNonoperatorWiperDelayCtrl
#define FrontNonoperatorWiperDelayCtrl_CovFactor 0.4
#define FrontNonoperatorWiperDelayCtrl_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @RearWiperDelayCtrl
#define RearWiperDelayCtrl_CovFactor 0.4
#define RearWiperDelayCtrl_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // State of operation selected by operator switch for the front wiper not in front of the operator position.  The parameter, 'Front Operator Washer Switch' should be used for the control information if this parameter is 'Not Available' and the ...
  // 15 - "Not available" 
  // 6 - "Mist" 
  // 5 - "Delayed 2" 
  // 4 - "Delayed 1" 
  // 3 - "High" 
  // 2 - "Medium" 
  // 1 - "Low" 
  // 0 - "Off" 

  uint8_t FrontNonoperatorWiperSwitch;      //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // State of operation selected by operator switch for the Wiper in front of the operator position. This parameter, 'Front Operator Wiper Switch' should be used for the control information if either of the other wiper switch parameters is 'Not ...
  // 15 - "Not available" 
  // 6 - "Mist" 
  // 5 - "Delayed 2" 
  // 4 - "Delayed 1" 
  // 3 - "High" 
  // 2 - "Medium" 
  // 1 - "Low" 
  // 0 - "Off" 

  uint8_t FrontOperatorWiperSwitch;         //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // State of operation selected by operator switch for the rear wiper.  The parameter, 'Front Operator Washer Switch' should be used for the control information if this parameter is 'Not Available' and the associated washer still needs to be controlled.   ...
  // 15 - "Not available" 
  // 6 - "Mist" 
  // 5 - "Delayed 2" 
  // 4 - "Delayed 1" 
  // 3 - "High" 
  // 2 - "Medium" 
  // 1 - "Low" 
  // 0 - "Off" 

  uint8_t RearWiperSwitch;                  //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Time between cycles of the front operator side wiper (i.e. from end of cycle 'n' to start of cycle 'n+1') as selected by the operator control (switch, etc.) in percentage of position with maximum position corresponding to maximum delay selectable ...
  uint8_t FrontOperatorWiperDelayCtrl;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Time between cycles of the front non-operator side wiper (i.e. from end of cycle 'n' to start of cycle 'n+1') as selected by the operator control (switch, etc.) in percentage of position with maximum position corresponding to maximum delay ...
  uint8_t FrontNonoperatorWiperDelayCtrl;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Time between cycles of the rear wiper (i.e. from end of cycle 'n' to start of cycle 'n+1') as selected by the operator control (switch, etc.) in percentage of position with maximum position corresponding to maximum delay selectable.  The parameter, ...
  uint8_t RearWiperDelayCtrl;               //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // State of operation selected by operator switch for the front washer not in front of the operator position.  The parameter, 'Front Operator Washer Switch? should be used for the control information if this parameter  is 'Not Available' and the ...
  // 7 - "Not available" 
  // 3 - "High" 
  // 2 - "Medium" 
  // 1 - "Low" 
  // 0 - "Off" 

  uint8_t FrontNonoperatorWasherSwitch;     //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // State of operation selected by operator switch for the washer in front of the operator position. This parameter, 'Front Operator Washer Switch? should be used for the control information if either of the other washer switch parameters  is 'Not ...
  // 7 - "Not available" 
  // 3 - "High" 
  // 2 - "Medium" 
  // 1 - "Low" 
  // 0 - "Off" 

  uint8_t FrontOperatorWasherSwitch;        //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // State of operation selected by operator switch for the rear washer.   The parameter, 'Front Operator Washer Switch? should be used for the control information if this parameter is 'Not Available' and the associated washer still needs to be ...
  // 7 - "Not available" 
  // 3 - "High" 
  // 2 - "Medium" 
  // 1 - "Low" 
  // 0 - "Off" 

  uint8_t RearWasherFunction;               //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} OWW_t;

// def @WSMM CAN Message (419286782)
#define WSMM_IDE (1U)
#define WSMM_DLC (8U)
#define WSMM_CANID (0x18FDCEFEU)
// -- Working Set Member Message  Message sent by the Master of a Working Set to identify an individual member of a specific Working Set.
typedef struct
{

  // NAME of Working Set Member    The identifier of the particular CA that is a member of the Working Set identified by the source address of this message.  This parameter is a NAME with the format described in 4.1.1.
  int64_t NAMEOfWorkingSetMember;        //      Bits=64.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} WSMM_t;

// def @WSM CAN Message (419287038)
#define WSM_IDE (1U)
#define WSM_DLC (8U)
#define WSM_CANID (0x18FDCFFEU)
// -- Working Set Master Message  Message sent by the Master of a Working Set to identify how many members  there are  in said set.
typedef struct
{

  uint8_t NumberOfMembers;               //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} WSM_t;

// def @IC2 CAN Message (419287294)
#define IC2_IDE (1U)
#define IC2_DLC (8U)
#define IC2_CANID (0x18FDD0FEU)
#define IC2_CYC (5000U)
// -- Intake/Exhaust Conditions 2  Intake/Exhaust Conditions 2 is a second PGN conveying this type of engine information. Also see PGN 65270.
// signal: @EngAirFilter2DiffPress
#define EngAirFilter2DiffPress_CovFactor 0.05
#define EngAirFilter2DiffPress_CovS(x) ((uint8_t)((x / 0.05)))
// signal: @EngAirFilter3DiffPress
#define EngAirFilter3DiffPress_CovFactor 0.05
#define EngAirFilter3DiffPress_CovS(x) ((uint8_t)((x / 0.05)))
// signal: @EngAirFilter4DiffPress
#define EngAirFilter4DiffPress_CovFactor 0.05
#define EngAirFilter4DiffPress_CovS(x) ((uint8_t)((x / 0.05)))
// signal: @EngIntakeManifold2Press
#define EngIntakeManifold2Press_CovFactor 2
#define EngIntakeManifold2Press_CovS(x) ((uint8_t)((x / 2)))
// signal: @EngIntakeManifold1AbsPress
#define EngIntakeManifold1AbsPress_CovFactor 2
#define EngIntakeManifold1AbsPress_CovS(x) ((uint8_t)((x / 2)))
// signal: @EngIntakeManifold1AbsPress4817
#define EngIntakeManifold1AbsPress4817_CovFactor 0.1
#define EngIntakeManifold1AbsPress4817_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngIntakeManifold2AbsPress
#define EngIntakeManifold2AbsPress_CovFactor 2
#define EngIntakeManifold2AbsPress_CovS(x) ((uint8_t)((x / 2)))
typedef struct
{

  // Change in engine air system pressure, measured across the second air filter, due to the filter and any accumulation of solid foreign matter on or in the filter.  This is for monitoring the air filter on the intake to the second turbocharger. Filter ...
  uint8_t EngAirFilter2DiffPress;           //      Bits=08.  [ 0     , 12.5   ]  Unit:'kPa'   Factor= 0.05  

  // Change in engine air system pressure, measured across the third air filter, due to the filter and any accumulation of solid foreign matter on or in the filter.  This is for monitoring the air filter on the intake to the third turbocharger. Filter ...
  uint8_t EngAirFilter3DiffPress;           //      Bits=08.  [ 0     , 12.5   ]  Unit:'kPa'   Factor= 0.05  

  // Change in engine air system pressure, measured across the fourth air filter, due to the filter and any accumulation of solid foreign matter on or in the filter.  This is for monitoring the air filter on the intake to the fourth turbocharger. Filter ...
  uint8_t EngAirFilter4DiffPress;           //      Bits=08.  [ 0     , 12.5   ]  Unit:'kPa'   Factor= 0.05  

  // The gage pressure measurement of the air intake manifold for bank #2 or the second air intake manifold. If there are multiple air pressure sensors in the second intake stream, this is the last one in flow direction before entering the combustion ...
  uint8_t EngIntakeManifold2Press;          //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // The absolute pressure measurement of the air intake manifold. If there are multiple air pressure sensors in the intake stream, this is the last one in flow direction before entering the combustion chamber.
  uint8_t EngIntakeManifold1AbsPress;       //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // The absolute pressure measurement of the air intake manifold. If there are multiple air pressure sensors in the intake stream, this is the last one in flow direction before entering the combustion chamber.  This SPN is a high resolution measurement ...
  uint16_t EngIntakeManifold1AbsPress4817;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The absolute pressure measurement of the air intake manifold for bank 2 or the second air intake manifold. If there are multiple air pressure sensors in the intake stream, this is the last one in flow direction before entering the combustion ...
  uint8_t EngIntakeManifold2AbsPress;       //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     
  uint32_t framecnt;
} IC2_t;

// def @EP CAN Message (419287806)
#define EP_IDE (1U)
#define EP_DLC (8U)
#define EP_CANID (0x18FDD2FEU)
// -- ECU Performance  Message used to transfer ECU performance parameters.
// signal: @DataMemoryUsage
#define DataMemoryUsage_CovFactor 0.4
#define DataMemoryUsage_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // The capacity consumed from the direct battery connection since the key was last turned off.  This value is maintained and does not accumulate while the key switch is on.  The value is reset to 0 when the key switch is turned to the off position.
  uint16_t KeepAliveBatteryConsumption;  //      Bits=16.  [ 0     , 64255  ]  Unit:'mAh'  

  // The used storage capacity of the data buffer memory internal to an ECU, such as a data logger.
  uint8_t DataMemoryUsage;               //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} EP_t;

// def @TCI6 CAN Message (419288062)
#define TCI6_IDE (1U)
#define TCI6_DLC (8U)
#define TCI6_CANID (0x18FDD3FEU)
#define TCI6_CYC (1000U)
// -- Turbocharger Information 6
// signal: @EngTurbo1CompressorOutletTemp
#define EngTurbo1CompressorOutletTemp_CovFactor 0.03125
#define EngTurbo1CompressorOutletTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngTurbo2CompressorOutletTemp
#define EngTurbo2CompressorOutletTemp_CovFactor 0.03125
#define EngTurbo2CompressorOutletTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngTurbo3CompressorOutletTemp
#define EngTurbo3CompressorOutletTemp_CovFactor 0.03125
#define EngTurbo3CompressorOutletTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngTurbo4CompressorOutletTemp
#define EngTurbo4CompressorOutletTemp_CovFactor 0.03125
#define EngTurbo4CompressorOutletTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of the air exiting the turbocharger 1 compressor outlet
  int32_t EngTurbo1CompressorOutletTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the air exiting the turbocharger 2 compressor outlet
  int32_t EngTurbo2CompressorOutletTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the air exiting the turbocharger 3 compressor outlet
  int32_t EngTurbo3CompressorOutletTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the air exiting the turbocharger 4 compressor outlet
  int32_t EngTurbo4CompressorOutletTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} TCI6_t;

// def @CM3 CAN Message (419288318)
#define CM3_IDE (1U)
#define CM3_DLC (8U)
#define CM3_CANID (0x18FDD4FEU)
#define CM3_CYC (10000U)
// -- Cab Message 3  Provides information from Cab mounted operator inputs.
typedef struct
{

  // Operator switch to select the condition of the transfer case.  States 000 and 001 should be used if the transfer case only functions to switch between 2-wheel and 4-wheel drive.  If the transfer case includes a High / Low Range function, states 011 ...
  // 7 - "Not available" 
  // 6 - "Error indicator" 
  // 5 - "Reserved for SAE assignment" 
  // 4 - "4 wheel low or Off Highway Range" 
  // 2 - "Neutral" 
  // 1 - "4 wheel high Normal or On Highway Range" 
  // 0 - "2 wheel high Normal or On Highway Range" 
  // 3 - "2 wheel low or Off Highway Range" 

  uint8_t TransferCaseSelectorSwitch;         //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Operator input used to release the fifth wheel. Fifth Wheel Release Control Security Lockout and other conditions must be properly enabled before this will function.  00   Coupler Locked  01   Coupler Unlocked, trailer can be unhitched or hitched   ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Coupler Unlocked" 
  // 0 - "Coupler Locked" 

  uint8_t FifthWheelReleaseCtrl;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Operator's fifth wheel release control interlock. This operator input must be enabled prior to activating the fifth wheel release control (SPN 3314).  00    Fifth wheel release Disabled  01    Fifth wheel release Enabled  10    Error  11    Not ...
  // 3 - "Not Available" 
  // 2 - "Error   " 
  // 1 - "Fifth wheel release Enabled" 
  // 0 - "Fifth wheel release Disabled" 

  uint8_t FfthWhlRleaseCtrlSecurityLockout;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates a trailer is connected to the towing mechanism.  This is not intended to indicate that the trailer is latched.    00 - Trailer is not detected  01 - Trailer is detected  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Trailer is detected" 
  // 0 - "Trailer is not detected" 

  uint8_t VehTrailerStatus;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Conveys operator or vehicle system desire for a transmission oil level reading to be taken.     00 - No transmission oil level reading desired  01 - Transmission oil level reading desired  10 - Reserved  11 - Don't care / take no action
  // 3 - "Don't care / take no action" 
  // 2 - "Reserved" 
  // 1 - "Transmission oil level reading desired" 
  // 0 - "No transmission oil level reading desired" 

  uint8_t TransOilLevelRq;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} CM3_t;

// def @EEC5 CAN Message (419288574)
#define EEC5_IDE (1U)
#define EEC5_DLC (8U)
#define EEC5_CANID (0x18FDD5FEU)
// -- Electronic Engine Controller 5  Engine related parameters
// signal: @EngTrb1ClclatedTurbineIntakeTemp
#define EngTrb1ClclatedTurbineIntakeTemp_CovFactor 0.03125
#define EngTrb1ClclatedTurbineIntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngTrb1ClclatedTurbineOutletTemp
#define EngTrb1ClclatedTurbineOutletTemp_CovFactor 0.03125
#define EngTrb1ClclatedTurbineOutletTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhstGsRcirculation1ValveCtrl
#define EngExhstGsRcirculation1ValveCtrl_CovFactor 0.0025
#define EngExhstGsRcirculation1ValveCtrl_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngVrblGeometryTurbo1ActuatorPos
#define EngVrblGeometryTurbo1ActuatorPos_CovFactor 0.4
#define EngVrblGeometryTurbo1ActuatorPos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Calculated value of turbine intake temperature based on engine operating conditions, such as intake manifold temperature, charge fuel ratio, injection timing, and engine speed.  Use SPN 1180 for actual measured intake temperature.
  int32_t EngTrb1ClclatedTurbineIntakeTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Calculated value of turbocharger compressor outlet air temperature.  Temperature of air exiting the turbocharger compressor and before entering charge air cooler.  The estimate is based on turbo speed and measured turbocharger compressor intake ...
  int32_t EngTrb1ClclatedTurbineOutletTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Desired percentage of maximum Exhaust Gas Recirculation (EGR) valve 1 opening.  0% means valve is closed. 100% means maximum valve opening (full gas flow).
  uint16_t EngExhstGsRcirculation1ValveCtrl;  //      Bits=16.  [ 0     , 100    ]  Unit:'%'     Factor= 0.0025

  // Isolates vehicle brake air from the Variable Geometry Turbocharger (VGT) system when engine is not running.  This valve prevents vehicle air from bleeding off through the VGT Control Valve when engine is not in use.  Primary vehicle air system from ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "VGT Air Control Shutoff Valve is On" 
  // 0 - "VGT Air Control Shutoff Valve is Off" 

  uint8_t EngVrblGmtryTrbArCtrlShtoffValve;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the Engine Fuel Control System is in open loop or closed loop.    00     Open loop  01     Closed loop  10     SAE reserved  11     Not available
  // 3 - "Not available" 
  // 2 - "SAE reserved" 
  // 1 - "Closed loop" 
  // 0 - "Open loop" 

  uint8_t EngFuelCtrlCtrlMode;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates if the variable geometry turbocharger control status is either open loop or closed loop.    00 open loop  01 closed loop  10 SAE reserved  11 not available
  // 3 - "not available" 
  // 2 - "SAE reserved" 
  // 1 - "closed loop" 
  // 0 - "open loop" 

  uint8_t EngVriableGeometryTurbo1CtrlMode;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Sensor that measures the position of the variable geometry turbocharger actuator.  A  position of 0% indicates the actuator is in the position creating the smallest geometry turbocharger. A position of 100% represents the largest geometry ...
  uint8_t EngVrblGeometryTurbo1ActuatorPos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} EEC5_t;

// def @MCI CAN Message (419290366)
#define MCI_IDE (1U)
#define MCI_DLC (8U)
#define MCI_CANID (0x18FDDCFEU)
#define MCI_CYC (1000U)
// -- Marine Control Information  This messages contains marine vessel control information for the engine
typedef struct
{

  // The status of the Throttle Synchronization Mode. Throttle Synchronization Mode is used to indicate which throttle, if any, is currently being used for the synchronized throttle.  0000 Not Synchronized  0001 Synchronized Center  0010 Synchronized ...
  // 15 - "Take no action" 
  // 4 - "Synchronized Master" 
  // 3 - "Synchronized Starboard" 
  // 2 - "Synchronized Port" 
  // 1 - "Synchronized Center" 
  // 0 - "Not Synchronized" 

  uint8_t EngThrttlSynchrnzationModeStatus;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The status of the Trolling Mode.  Trolling mode limits the top speed.  Full range travel of the throttle level spans from low idle engine speed to maximum trolling speed.  00 Trolling mode is OFF.  01 Trolling mode is ACTIVE.  10 Reserved  11 Take ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Trolling mode is ACTIVE." 
  // 0 - "Trolling mode is OFF." 

  uint8_t TrollingModeStatus;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The status of the Slow Vessel Mode.  Slow Vessel Mode puts the engine in a lower-than-normal low idle speed during docking or other slow vessel operations.  00 Slow vessel mode is OFF.  01 Slow vessel mode is ACTIVE.  10 Reserved  11 Take no action   ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Slow vessel mode is ACTIVE." 
  // 0 - "Slow vessel mode is OFF." 

  uint8_t SlowVesselModeStatus;               //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} MCI_t;

// def @MAM11 CAN Message (419290622)
#define MAM11_IDE (1U)
#define MAM11_DLC (8U)
#define MAM11_CANID (0x18FDDDFEU)
// -- Military Application Message #1/1  Message to transmit data of the towing vehicle to the towed vehicle. See ISO 11992-3.
typedef struct
{
  uint32_t framecnt;
} MAM11_t;

// def @MAM21 CAN Message (419290878)
#define MAM21_IDE (1U)
#define MAM21_DLC (8U)
#define MAM21_CANID (0x18FDDEFEU)
// -- Military Application Message #2/1  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-3.
typedef struct
{
  uint32_t framecnt;
} MAM21_t;

// def @AMB2 CAN Message (419291390)
#define AMB2_IDE (1U)
#define AMB2_DLC (8U)
#define AMB2_CANID (0x18FDE0FEU)
#define AMB2_CYC (1000U)
// -- Ambient Conditions 2  This message contains measurement and configuration information about the vehicle ambient conditions.
// signal: @SolarIntensityPercent
#define SolarIntensityPercent_CovFactor 0.4
#define SolarIntensityPercent_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @SolarSensorMax
#define SolarSensorMax_CovFactor 0.4
#define SolarSensorMax_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @SpecificHumidity
#define SpecificHumidity_CovFactor 0.01
#define SpecificHumidity_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @CalculatedAmbientAirTemp
#define CalculatedAmbientAirTemp_CovFactor 0.03125
#define CalculatedAmbientAirTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @BarometricAbsPressHighResolution
#define BarometricAbsPressHighResolution_CovFactor 0.1
#define BarometricAbsPressHighResolution_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // This is the solar radiation (power density) falling on the vehicle in percent of the maximum sensor value (SPN 2611).  Currently this is in the infra-red spectrum.
  uint8_t SolarIntensityPercent;              //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // This is the maximum value which can be reported by the sensor for the solar intensity. (This is a configuration parameter)
  uint8_t SolarSensorMax;                     //      Bits=08.  [ 0     , 100    ]  Unit:'mW/cm?' Factor= 0.4   

  // Specific humidity of the ambient intake air.
  uint16_t SpecificHumidity;                  //      Bits=16.  [ 0     , 642.55 ]  Unit:'g/kg'  Factor= 0.01  

  // Calculated temperature of air surrounding vehicle.  Use SPN 171 for actual measured ambient air temperature.
  int32_t CalculatedAmbientAirTemp;           //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Barometric Absolute Pressure (High Resolution).  See SPN 108 if high resolution is not needed.
  uint16_t BarometricAbsPressHighResolution;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} AMB2_t;

// def @CACI CAN Message (419291646)
#define CACI_IDE (1U)
#define CACI_DLC (8U)
#define CACI_CANID (0x18FDE1FEU)
#define CACI_CYC (1000U)
// -- Cab A/C Climate System Information  This message contains measurement and condition information from cab air conditioning components.
// signal: @CbA_CRfrgrntCmpressorOutletPress
#define CbA_CRfrgrntCmpressorOutletPress_CovFactor 16
#define CbA_CRfrgrntCmpressorOutletPress_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // This is the gage pressure at the compressor outlet in the cab air conditioning system.
  uint8_t CbA_CRfrgrntCmpressorOutletPress;   //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa'   Factor= 16    
  uint32_t framecnt;
} CACI_t;

// def @SPR CAN Message (419291902)
#define SPR_IDE (1U)
#define SPR_DLC (8U)
#define SPR_CANID (0x18FDE2FEU)
#define SPR_CYC (1000U)
// -- Supply Pressure Demand  Used for controlling the supply pressure.  Often used to raise the pressure of a supply pressure circuit in situations where more pneumatic energy is needed.    This message is the setpoint for the PGN 65198 message.
// signal: @PneumaticSupplyPressRq
#define PneumaticSupplyPressRq_CovFactor 8
#define PneumaticSupplyPressRq_CovS(x) ((uint8_t)((x / 8)))
// signal: @ParkingAnd_orTrailerAirPressRq
#define ParkingAnd_orTrailerAirPressRq_CovFactor 8
#define ParkingAnd_orTrailerAirPressRq_CovS(x) ((uint8_t)((x / 8)))
// signal: @ServiceBrakeAirPressRqCircuit1
#define ServiceBrakeAirPressRqCircuit1_CovFactor 8
#define ServiceBrakeAirPressRqCircuit1_CovS(x) ((uint8_t)((x / 8)))
// signal: @ServiceBrakeAirPressRqCircuit2
#define ServiceBrakeAirPressRqCircuit2_CovFactor 8
#define ServiceBrakeAirPressRqCircuit2_CovS(x) ((uint8_t)((x / 8)))
// signal: @AuxEquipmentSupplyPressRq
#define AuxEquipmentSupplyPressRq_CovFactor 8
#define AuxEquipmentSupplyPressRq_CovS(x) ((uint8_t)((x / 8)))
// signal: @AirSuspensionSupplyPressRq
#define AirSuspensionSupplyPressRq_CovFactor 8
#define AirSuspensionSupplyPressRq_CovS(x) ((uint8_t)((x / 8)))
// signal: @PwertrainCircuitAirSupplyPressRq
#define PwertrainCircuitAirSupplyPressRq_CovFactor 8
#define PwertrainCircuitAirSupplyPressRq_CovS(x) ((uint8_t)((x / 8)))
typedef struct
{

  // Command signal to influence the pneumatic pressure in the main reservoir.  This parameter is the setpoint for the parameter SPN 46.
  uint8_t PneumaticSupplyPressRq;             //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // Command signal to influence the pneumatic pressure in the circuit or reservoir for the parking brake and/or the trailer supply.  This parameter is the setpoint for the parameter SPN 1086.
  uint8_t ParkingAnd_orTrailerAirPressRq;     //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // Command signal to influence the pneumatic pressure in the service brake circuit or reservoir #1.  This parameter is the setpoint for the parameter SPN 1087.
  uint8_t ServiceBrakeAirPressRqCircuit1;     //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // Command signal to influence the pneumatic pressure in the service brake circuit or reservoir #2.  This parameter is the setpoint for the parameter SPN 1088.
  uint8_t ServiceBrakeAirPressRqCircuit2;     //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // Command signal to influence the pneumatic pressure in the auxiliary circuit.   This parameter is the setpoint for the parameter SPN 1089.
  uint8_t AuxEquipmentSupplyPressRq;          //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // Command signal to influence the pneumatic pressure in the circuit for the electronically controlled air suspension system.   This parameter is the setpoint for the parameter SPN 1090.
  uint8_t AirSuspensionSupplyPressRq;         //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // Command signal to influence the air pressure in the powertrain circuit.  This parameter is the setpoint for the parameter SPN 6305.
  uint8_t PwertrainCircuitAirSupplyPressRq;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     
  uint32_t framecnt;
} SPR_t;

// def @EOAC CAN Message (419292158)
#define EOAC_IDE (1U)
#define EOAC_DLC (8U)
#define EOAC_CANID (0x18FDE3FEU)
#define EOAC_CYC (250U)
// -- Equipment Operation and Control  Parameters related to the operation and controls for equipment
// signal: @TravelVelocityCtrlPos
#define TravelVelocityCtrlPos_CovFactor 1
#define TravelVelocityCtrlPos_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // The position of the travel velocity control component reported as a percentage of the control's full displacement in each direction respectively.  Positive position values indicate forward travel direction;  negative position values indicate ...
  int16_t TravelVelocityCtrlPos;         //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     
  uint32_t framecnt;
} EOAC_t;

// def @EPD CAN Message (419292414)
#define EPD_IDE (1U)
#define EPD_DLC (8U)
#define EPD_CANID (0x18FDE4FEU)
#define EPD_CYC (500U)
// -- Equipment Performance Data  Parameters related to the performance characteristics of equipment
// signal: @PayloadWeight
#define PayloadWeight_CovFactor 2
#define PayloadWeight_CovS(x) ((uint32_t)((x / 2)))
// signal: @PayloadWeightConfidence
#define PayloadWeightConfidence_CovFactor 0.5
#define PayloadWeightConfidence_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @PayloadCarryBackWeight
#define PayloadCarryBackWeight_CovFactor 2
#define PayloadCarryBackWeight_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // The current payload of the equipment, reported as a percentage of the equipment's rated payload limit.
  uint8_t PayloadPercentage;             //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The current payload weight carried by the machine.
  uint32_t PayloadWeight;                //      Bits=24.  [ 0     , 32899070 ]  Unit:'kg'    Factor= 2     

  // The level of confidence of the real time payload weight measurement (SPN 6851). Higher confidence values indicate greater probability the real time payload weight is the actual weight and providing feedback on the potential for improving system ...
  uint8_t PayloadWeightConfidence;       //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.5   

  // The payload weight left on the machine after the last payload dump event.
  uint16_t PayloadCarryBackWeight;       //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     

  // The current equipment payload plus the weight of any after-factory modifications reported as a percentage of the equipment's maximum payload capacity. The equipment's maximum payload capacity is the maximum capacity of the equipment before the added ...
  uint8_t PayloadCapacityPercentage;     //      Bits=08.  [ 0     , 250    ]  Unit:'%'    
  uint32_t framecnt;
} EPD_t;

// def @MVS CAN Message (419292670)
#define MVS_IDE (1U)
#define MVS_DLC (8U)
#define MVS_CANID (0x18FDE5FEU)
#define MVS_CYC (1000U)
// -- Maximum Vehicle Speed Limit Status  Reports the possible maximum vehicle speed limits, one through seven, and the applied maximum vehicle speed limit.
typedef struct
{

  // The lowest Maximum Vehicle Speed Limit. This value is the similar to SPN 74. However, SPN 74 was not specifically defined to convey  the applied vehicle speed limit or what was possible to be applied. This new SPN is the lowest vehicle speed limit ...
  uint8_t MaxVehicleSpeedLimit1;         //      Bits=08.  [ 0     , 250    ]  Unit:'km/h' 

  // The highest of the two lowest vehicle speed limits
  uint8_t MaxVehicleSpeedLimit2;         //      Bits=08.  [ 0     , 250    ]  Unit:'km/h' 

  // The highest of the three lowest vehicle speed limits
  uint8_t MaxVehicleSpeedLimit3;         //      Bits=08.  [ 0     , 250    ]  Unit:'km/h' 

  // The highest of the four lowest vehicle speed limits
  uint8_t MaxVehicleSpeedLimit4;         //      Bits=08.  [ 0     , 250    ]  Unit:'km/h' 

  // The highest of the five lowest vehicle speed limits
  uint8_t MaxVehicleSpeedLimit5;         //      Bits=08.  [ 0     , 250    ]  Unit:'km/h' 

  // The highest of the six lowest vehicle speed limits
  uint8_t MaxVehicleSpeedLimit6;         //      Bits=08.  [ 0     , 250    ]  Unit:'km/h' 

  // The highest of the seven lowest vehicle speed limits
  uint8_t MaxVehicleSpeedLimit7;         //      Bits=08.  [ 0     , 250    ]  Unit:'km/h' 

  // The vehicle speed limit in effect.    251 (0xFB) is used to indicate that a maximum vehicle speed limit is not selected.    See SPN 7420 for alternate resolution.
  uint8_t AppliedVehicleSpeedLimit;      //      Bits=08.  [ 0     , 250    ]  Unit:'km/h' 
  uint32_t framecnt;
} MVS_t;

// def @ET CAN Message (419301374)
#define ET_IDE (1U)
#define ET_DLC (8U)
#define ET_CANID (0x18FE07FEU)
#define ET_CYC (5000U)
// -- Exhaust Temperature
// signal: @EngExhaustGasTempRightManifold
#define EngExhaustGasTempRightManifold_CovFactor 0.03125
#define EngExhaustGasTempRightManifold_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasTempLeftManifold
#define EngExhaustGasTempLeftManifold_CovFactor 0.03125
#define EngExhaustGasTempLeftManifold_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustManifoldBank2Temp2
#define EngExhaustManifoldBank2Temp2_CovFactor 0.03125
#define EngExhaustManifoldBank2Temp2_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustManifoldBank1Temp2
#define EngExhaustManifoldBank1Temp2_CovFactor 0.03125
#define EngExhaustManifoldBank1Temp2_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of combustion byproducts measured in engine bank 2 (right bank) exhaust manifold.  Single manifold engines should use exhaust temperature (SPN 173).
  int32_t EngExhaustGasTempRightManifold;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of combustion byproducts measured in engine bank 1 (left bank) exhaust manifold.  Single manifold engines should use exhaust temperature (SPN 173).
  int32_t EngExhaustGasTempLeftManifold;    //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of combustion byproducts measured by a second sensor in engine bank 2 (right bank) exhaust manifold. This should be used for the sensor toward the rear of the engine on the bank 2 manifold.
  int32_t EngExhaustManifoldBank2Temp2;     //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of combustion byproducts measured by a second sensor in engine bank 1 (left bank) exhaust manifold. This should be used for the sensor toward the rear of the engine on the bank 1 manifold.
  int32_t EngExhaustManifoldBank1Temp2;     //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} ET_t;

// def @RTF CAN Message (419301630)
#define RTF_IDE (1U)
#define RTF_DLC (8U)
#define RTF_CANID (0x18FE08FEU)
// -- Required Tractor Facilities message  Implement response to task controller or Tractor ECU desired tractor classification and facilities
typedef struct
{

  // Indicates whether the requester requires reporting of the limit status and request status parameters in the tractor?s supported status messages.    0  Limit/request status reporting not required  1  Limit/request status reporting required
  uint8_t TrctrFcltyRqLmt_RqstSttsRporting;   //      Bits=01.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} RTF_t;

// def @TFR CAN Message (419301886)
#define TFR_IDE (1U)
#define TFR_DLC (8U)
#define TFR_CANID (0x18FE09FEU)
// -- Tractor Facilities response message  Tractor response to an implement ECU or task controller tractor classification and facilities request
typedef struct
{

  // Indicates whether the vehicle supports reporting of the limit status and request status parameters in the tractor?s supported status messages.    0   Limit/request status reporting not available  1   Limit/request status reporting available
  uint8_t TrctrFcltyRspLmt_RqstSttsRprting;   //      Bits=01.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} TFR_t;

// def @IRCR CAN Message (419302142)
#define IRCR_IDE (1U)
#define IRCR_DLC (8U)
#define IRCR_CANID (0x18FE0AFEU)
// -- Implement Remote Control Command Tractor Response  This command is a task controller or an implement ECU to tractor ECU message.
typedef struct
{
  uint32_t framecnt;
} IRCR_t;

// def @IRC CAN Message (419302398)
#define IRC_IDE (1U)
#define IRC_DLC (8U)
#define IRC_CANID (0x18FE0BFEU)
// -- Implement Remote Control Command  This command is a task controller or an implement ECU to tractor ECU message.
typedef struct
{
  uint32_t framecnt;
} IRC_t;

// def @WSMEM CAN Message (419302654)
#define WSMEM_IDE (1U)
#define WSMEM_DLC (8U)
#define WSMEM_CANID (0x18FE0CFEU)
// -- Working Set Member  This message is sent by the Master of a Working Set to identify an individual member of a specific Working Set (Master?s Source Address identifies the particular Working Set).
typedef struct
{

  uint32_t IdentityNumber;               //      Bits=21.  [ 0     , 2097152 ]  Unit:''     

  // Assigned by NMEA 2000 Committee
  // 454 - "NGK Spark Plug Co. Ltd" 
  // 453 - "Cooper Bussmann" 
  // 452 - "WIKA Alexander Wiegand SE & Co. KG" 
  // 451 - "Parker Hannifin Corp" 
  // 450 - "Dycor Technologies Ltd." 
  // 449 - "Polaris Industries Inc" 
  // 448 - "Stanadyne Corporation, Electronics Systems" 
  // 447 - "Great Plains Mfg." 
  // 446 - "CertTech, L.L.C." 
  // 445 - "KAT MECHATRONIC, Electronic Product Division" 
  // 444 - "ITT Power Solutions" 
  // 443 - "SignalQuest, Inc." 
  // 442 - "Horsch Maschinen GmbH" 
  // 441 - "PTG Reifendruckregelsysteme GmbH" 
  // 440 - "Cummins Power Generation" 
  // 439 - "Hyundai Heavy Industries" 
  // 438 - "Comar Systems Ltd" 
  // 437 - "Digital Yacht Limited" 
  // 436 - "Kinze Manufacturing" 
  // 435 - "Zunhammer GmbH" 
  // 434 - "Stored Energy Systems" 
  // 433 - "Rowe Electronics" 
  // 432 - "S&A Systems, Inc." 
  // 431 - "Tohatsu Corporation" 
  // 430 - "Auteq Telematica S.A." 
  // 520 - "Trapeze" 
  // 519 - "Peeters Landbouwmachines b.v." 
  // 518 - "Transas USA Inc." 
  // 517 - "Noland Engineering" 
  // 516 - "AVAT Automation GmbH" 
  // 515 - "GINAF Trucks Nederland B.V." 
  // 514 - "DISTek Integration, Inc." 
  // 513 - "FarmscanAg" 
  // 512 - "Inpower LLC" 
  // 511 - "Sulky" 
  // 510 - "Marinesoft Co. Ltd" 
  // 509 - "MOTORTECH GmbH" 
  // 508 - "Transtech Innovations" 
  // 507 - "Test Center ISOBUS" 
  // 506 - "IHI STAR Machinery Corporation" 
  // 505 - "Yetter Farm Equipment" 
  // 504 - "Vesper Marine" 
  // 503 - "Naviop S.R.L." 
  // 502 - "Attwood Corporation" 
  // 501 - "Agrotronix S.A." 
  // 500 - "Oxbo International Corporation" 
  // 499 - "LCJ Capteurs" 
  // 498 - "Innovative Design Solutions, Inc" 
  // 497 - "SENTRON Sistemas Embarcados" 
  // 496 - "W. Gessmann GmbH" 
  // 495 - "HOLMER Maschinenbau GmbH" 
  // 494 - "Synerject" 
  // 493 - "Watcheye" 
  // 492 - "Inergy Automotive Systems" 
  // 491 - "Penny and Giles Ltd" 
  // 490 - "QuikQ" 
  // 489 - "Appareo Systems" 
  // 488 - "The Charles Machine Works, Inc." 
  // 487 - "DSE Test Solutions A/S" 
  // 486 - "Westport Innovations Inc." 
  // 485 - "MATT automotive" 
  // 484 - "Headsight Inc." 
  // 483 - "Valeo" 
  // 482 - "Tricon Electronics" 
  // 481 - "Chetco Digital Instruments" 
  // 480 - "EnerDel, Inc." 
  // 479 - "Vapor Bus International" 
  // 478 - "OceanSat BV" 
  // 477 - "OilQuick AB" 
  // 476 - "Hummingbird Marine Electronics" 
  // 475 - "GME" 
  // 474 - "Persen Technologies Inc." 
  // 473 - "Boss Industries, Inc." 
  // 472 - "Tenneco Inc." 
  // 471 - "Sea Cross Marine AB" 
  // 470 - "SI-TEX Marine Electronics" 
  // 469 - "RA Consulting GmbH" 
  // 468 - "Tyco Fire Protection Products" 
  // 467 - "Lely Industries N.V." 
  // 466 - "Veethree Electronics and Marine LLC" 
  // 465 - "Ashcroft Inc" 
  // 464 - "Leach International Corporation" 
  // 463 - "PROBOTIQ" 
  // 462 - "IHI Shibaura Machinery Corporation" 
  // 461 - "HAWE Hydraulik SE" 
  // 460 - "San Giorgio S.E.I.N." 
  // 459 - "Alltek Marine Electronics Corp" 
  // 458 - "Control Solutions, Inc." 
  // 457 - "RUSELPROM-ElectricDrive Ltd" 
  // 456 - "General Kinetics" 
  // 455 - "ADZ NAGANO GmbH" 
  // 429 - "Rota Engineering Ltd." 
  // 428 - "Mfg_428" 
  // 427 - "em-trak Marine Electronics Ltd" 
  // 426 - "Egersund Marine Electronics AS" 
  // 425 - "Methode Electronics Inc, MDI" 
  // 424 - "Odyne LLC" 
  // 423 - "BSM Wireless, Inc." 
  // 422 - "True Heading AB" 
  // 421 - "Vertex Standard Co, Ltd" 
  // 420 - "Vermeer Corporation, ACS Group" 
  // 419 - "Fusion Electronics Ltd" 
  // 418 - "Intellistick Inc" 
  // 417 - "KZValve" 
  // 416 - "Kubota Corporation" 
  // 415 - "Valid Manufacturing Ltd." 
  // 414 - "Cattron Group International" 
  // 413 - "Datapross Nijbroek bv" 
  // 412 - "WebTech Wireless Inc." 
  // 411 - "Hy-Drive Technologies Ltd." 
  // 410 - "COBO S.p.A. Divisione 3B6" 
  // 409 - "Transfluid S.r.L." 
  // 408 - "Corvus Energy Ltd." 
  // 407 - "Comtech Mobile Datacom" 
  // 406 - "Vecima Networks Inc." 
  // 405 - "Wema System AS" 
  // 404 - "Com Nav Marine Ltd" 
  // 403 - "Trackwell ADS, Inc." 
  // 402 - "Simma Software, Inc." 
  // 401 - "Torqeedo GmbH" 
  // 400 - "Livorsi Marine" 
  // 399 - "ISEKI & Co., Ltd." 
  // 398 - "Hilite International" 
  // 397 - "Sanyo-kiki Co Ltd." 
  // 396 - "Beyond Measure" 
  // 395 - "GENTEC S.R.L." 
  // 394 - "Capi 2 Nederland BV" 
  // 393 - "Harvest Tec, Inc" 
  // 392 - "Tianyuan Technology Co Ltd." 
  // 391 - "Electronic Design for Industry, Inc" 
  // 390 - "Partech Inc." 
  // 389 - "Benchmark Electronics, Minnesota Division" 
  // 388 - "Innomatix, LLC" 
  // 387 - "Orscheln Products, LLC" 
  // 386 - "JLG Automation BVBA" 
  // 385 - "Johnson Outdoor Marine Electronics" 
  // 384 - "Camano Light" 
  // 383 - "MCL Industries" 
  // 382 - "National Agricultural and Food Research Organization" 
  // 380 - "Suntech International Ltd." 
  // 379 - "Yamabiko Corporation" 
  // 378 - "Glendinning Marine Products" 
  // 377 - "ifm electronic gmbh" 
  // 376 - "Quake Global" 
  // 375 - "Williams Controls Inc." 
  // 372 - "Delphi" 
  // 381 - "B&G" 
  // 374 - "Northern Lights, Inc." 
  // 373 - "Electronic Design Inc." 
  // 371 - "Heinzmann GmbH & Co. KG" 
  // 370 - "Rolls-Royce Marine AS" 
  // 369 - "Power Torque Engineering Ltd" 
  // 368 - "HANSENHOF_electronic" 
  // 367 - "Fliegl Agrartechnik" 
  // 366 - "Viewnyx Corp." 
  // 365 - "Digi-Star, LLC" 
  // 364 - "OEM Controls Inc." 
  // 363 - "BEI Duncan" 
  // 362 - "Alois Poettinger Maschinenfabrik GmbH" 
  // 361 - "InMach" 
  // 360 - "HJS Emission Technology GmbH & Co KG" 
  // 359 - "Ludwig Bergmann GmbH" 
  // 358 - "Victron Energy BV" 
  // 357 - "Hardi International A/S" 
  // 356 - "Fischer Panda Generators, Inc" 
  // 355 - "Mastervolt International B.V." 
  // 354 - "Junkkari OY" 
  // 353 - "Hegemon Electronics, Inc." 
  // 352 - "SAME DEUTZ-FAHR" 
  // 351 - "Thrane & Thrane" 
  // 350 - "Noris Marine Systems GmbH & Co KG" 
  // 349 - "Suonentiet" 
  // 348 - "Amazonen Werke H. Dreyer" 
  // 347 - "Honeywell" 
  // 346 - "Control Solutions" 
  // 345 - "Korean Maritime University" 
  // 344 - "Parvus Corporation" 
  // 343 - "Baumer Group" 
  // 342 - "THOMAS MAGNETE GmbH" 
  // 341 - "Boning GmbH & Co" 
  // 340 - "Continental AG" 
  // 339 - "Competence Center ISOBUS e.V." 
  // 338 - "GRAF-SYTECO" 
  // 337 - "Carraro S.p.A." 
  // 336 - "APE s.r.o." 
  // 335 - "Evo Electric Ltd" 
  // 334 - "Takata-Petri AG" 
  // 333 - "Hadley Products Corporation" 
  // 332 - "HWH Corporation" 
  // 331 - "Horton, Inc." 
  // 330 - "Kidde Aerospace and Defense" 
  // 329 - "Deif A/S" 
  // 328 - "Qwerty Electronik AB" 
  // 252 - "Sensor-Technik Wiedemann GmbH" 
  // 251 - "German Agricultural Society" 
  // 250 - "Kuhn Group" 
  // 249 - "Schaltbau GmbH" 
  // 233 - "Yacht Monitoring Solutions Inc." 
  // 232 - "TSD Integrated Controls" 
  // 1863 - "Thomas G. Faria Co." 
  // 1862 - "Sanshin" 
  // 1861 - "Vector CANtech" 
  // 1860 - "MMP" 
  // 1859 - "Kvasar AB" 
  // 1858 - "Litton" 
  // 1857 - "Simrad" 
  // 1856 - "Trimble" 
  // 1855 - "Furuno USA" 
  // 1854 - "Northstar Technologies" 
  // 1853 - "Japan Radio Co." 
  // 1852 - "Navionics" 
  // 1851 - "Raymarine" 
  // 1850 - "Teleflex" 
  // 222 - "Generac Power Systems, Inc." 
  // 221 - "SiE" 
  // 220 - "Beede Electrical Instrument Company, Inc." 
  // 219 - "Cat OEM Solutions" 
  // 218 - "Gits Manufacturing Company" 
  // 217 - "RM Michaelides Software & Elektronik GmbH" 
  // 216 - "Paneltronics Inc." 
  // 215 - "Aetna Engineering/Fireboy-Xintex" 
  // 214 - "MC elettronica Srl" 
  // 213 - "CNH Belgium N.V." 
  // 212 - "Sure Power Industries, Inc." 
  // 211 - "DNA Group" 
  // 210 - "Iteris, Inc." 
  // 209 - "Bell Equip. Co. SA (PTY) LTD" 
  // 208 - "Drew Technologies, Inc." 
  // 207 - "Otto Engineering" 
  // 206 - "port GmbH" 
  // 205 - "SmarTire Systems Inc" 
  // 204 - "The Morey Corporation" 
  // 203 - "MILtronik GmbH" 
  // 202 - "Curtis Instruments, Inc." 
  // 201 - "Disenos y Tecnologia S.A." 
  // 200 - "MGM Brakes" 
  // 199 - "Actia Corp." 
  // 198 - "Mystic Valley Communications" 
  // 197 - "Mechron Power Systems" 
  // 196 - "LEMKEN GmbH & Co. KG" 
  // 195 - "General Engine Products" 
  // 194 - "TriMark Corporation" 
  // 193 - "Nobletec" 
  // 192 - "Floscan" 
  // 191 - "XRS Corporation" 
  // 190 - "Hella KGaA Hueck & Co." 
  // 189 - "QUALCOMM" 
  // 188 - "EMP Corp." 
  // 187 - "Air-Weigh" 
  // 186 - "Altronic, Inc." 
  // 185 - "Beede Electrical Instrument Company" 
  // 184 - "EIA Electronics" 
  // 183 - "KDS Controls, Inc." 
  // 182 - "Vehicle Systems Engineering B.V." 
  // 181 - "Coretronics, Inc." 
  // 180 - "Smart Power Systems" 
  // 179 - "TeeJet Technologies Denmark" 
  // 178 - "Siemens VDO Automotive AG" 
  // 177 - "Diagnostic System Associates" 
  // 176 - "Moritz Aerospace" 
  // 175 - "Veris Technologies, Inc." 
  // 174 - "AB Volvo Penta" 
  // 173 - "Ryeso, Inc." 
  // 172 - "Yanmar Marine USA" 
  // 171 - "Wachendorff Elektronik GmbH & Co. KG" 
  // 170 - "Computronics Corporation Ltd." 
  // 169 - "Marlin Technologies Inc." 
  // 168 - "Xantrex" 
  // 167 - "JLG Industries Inc." 
  // 166 - "Phoenix International" 
  // 165 - "CPAC Systems AB" 
  // 164 - "DaimlerChrysler Off-Highway" 
  // 163 - "BRP Inc." 
  // 162 - "Axiomatic Technologies" 
  // 161 - "Offshore Systems (UK) Limited" 
  // 160 - "Nido" 
  // 159 - "NTech Industries Inc." 
  // 158 - "Firestone Industrial Products Company" 
  // 157 - "ISSPRO Inc." 
  // 156 - "ITT Industries - Cannon" 
  // 155 - "Vetronix Corporation" 
  // 154 - "Westerbeke Corporation" 
  // 153 - "Woodward, Industrial Controls Division" 
  // 152 - "elobau GmbH & Co. KG" 
  // 151 - "Raven Industries Inc. - Flow Controls Division" 
  // 150 - "Fleetguard" 
  // 149 - "Holset" 
  // 148 - "Blue Water Data, Inc." 
  // 147 - "Nautibus Electronic GmbH" 
  // 146 - "Maxima Technologies" 
  // 145 - "MurCal Controls" 
  // 144 - "Mercury Marine" 
  // 143 - "W. Gmeiner GmbH & Co." 
  // 142 - "TRW Automotive (Commercial Steering Systems)" 
  // 141 - "Thales Navigation Ltd." 
  // 140 - "Lowrance Electronics, Inc." 
  // 139 - "Caterpillar Trimble Control Technologies (CTCT), LLC" 
  // 138 - "Georg Fritzmeier GmbH & Co. KG" 
  // 137 - "Maretron" 
  // 136 - "Komatsu Ltd." 
  // 135 - "Airmar Technology Corporation" 
  // 134 - "Iris Technology Ltd." 
  // 133 - "Bucher Schoerling GmbH" 
  // 132 - "Mulag-Fahrzeugwerk" 
  // 131 - "ITT Industries" 
  // 130 - "Nido - Universal Machines B.V." 
  // 129 - "OMNEX Control Systems, Inc." 
  // 128 - "Gerhard Duecker GmbH & Co. KG" 
  // 127 - "Holland USA" 
  // 126 - "Driver Tech" 
  // 125 - "Nevada Automotive Test Center" 
  // 124 - "Hydac Electronic" 
  // 123 - "Basler Electric" 
  // 122 - "FG Wilson (Engineering) Limited" 
  // 121 - "HED (Hydro Electronic Devices, Inc.)" 
  // 120 - "RDS Technology Ltd." 
  // 119 - "IntegriNautics" 
  // 118 - "Intron GmbH" 
  // 117 - "HUSCO International" 
  // 116 - "BEELINE Technologies" 
  // 115 - "NACCO Materials Handling Group, Inc." 
  // 114 - "EControls, Inc." 
  // 113 - "Stress-Tek, Inc." 
  // 112 - "MECALAC" 
  // 111 - "Maschinenfabrik Bernard Krone GmbH" 
  // 110 - "EPIQ Sensor-Nite" 
  // 109 - "TeeJet Technologies Denmark" 
  // 108 - "WTK-Elecktronik GmbH" 
  // 107 - "Grimme Landmaschinen GmbH & Co. KG" 
  // 106 - "BAE Systems Controls, Inc." 
  // 105 - "Kiepe Elektrik GmbH & Co. KG" 
  // 104 - "Claas Selbstfahrende Erntemaschinen GmbH" 
  // 103 - "CLAAS Agrosystems GmbH & Co. KG" 
  // 102 - "AGCO GmbH & Co." 
  // 101 - "Sensoria" 
  // 100 - "VDO Technik AG" 
  // 99 - "International Transmissions Ltd (ITL)" 
  // 98 - "Mueller-Elektronik GmbH & Co." 
  // 97 - "Ag Leader Technology, Inc." 
  // 96 - "Mech@tronic IT GmbH" 
  // 95 - "Pacific Insight Electronics Corp." 
  // 94 - "CNH Global N.V." 
  // 93 - "Perkins Engines Company Ltd." 
  // 92 - "Ag-Chem Equipment Co., Inc." 
  // 91 - "BSG Bodensee Steuergeraete GmbH" 
  // 90 - "Knorr-Bremse SfN GmbH" 
  // 89 - "Kverneland Group, Electronics Division" 
  // 88 - "Satloc Precision GPS" 
  // 87 - "J.C. Bamford Excavators Ltd (JCB)" 
  // 86 - "C.E. Niehoff & Company" 
  // 85 - "Kohler Co." 
  // 84 - "New Holland UK Limited" 
  // 83 - "Bendix VORAD Technologies" 
  // 82 - "Bobcat/Ingersoll-Rand" 
  // 81 - "Fire Research Corp" 
  // 80 - "Twin Disc, Inc." 
  // 79 - "Daimler Benz AG - Engine Division (PBM)" 
  // 78 - "Frank W. Murphy Manufacturing, Inc." 
  // 77 - "Deere Power Systems Group" 
  // 76 - "unused" 
  // 75 - "Deere & Co. Agricultural Division" 
  // 74 - "Eaton Axle-Brake Division" 
  // 73 - "LeTourneau, Inc." 
  // 72 - "Sisu Corporation" 
  // 71 - "Vansco Electronics Ltd." 
  // 70 - "Flex-Coil Limited" 
  // 69 - "Trimble Navigation" 
  // 68 - "Scania" 
  // 67 - "Funk Manufacturing Company" 
  // 66 - "John Deere Construction Equipment Division" 
  // 65 - "MAN Nutzfahrzeuge AG" 
  // 64 - "unused" 
  // 63 - "ZF Industries Inc." 
  // 62 - "Wabco" 
  // 61 - "Volvo Truck Corp." 
  // 60 - "Volvo Trucks North America Inc." 
  // 59 - "VES Inc." 
  // 58 - "SPX Corporation, OTC Division" 
  // 57 - "Sauer-Danfoss Co." 
  // 56 - "SAIC" 
  // 55 - "Ryder System Inc." 
  // 54 - "Meritor Wabco" 
  // 53 - "Continental Automotive Systems US, Inc." 
  // 52 - "Meritor Automotive, Inc." 
  // 51 - "Robert Bosch GmbH" 
  // 50 - "Robert Bosch Corp" 
  // 49 - "RE America Inc." 
  // 48 - "Pollak Alphabet" 
  // 47 - "Phillips Semiconductor" 
  // 46 - "Noregon Systems, Inc" 
  // 45 - "PACCAR" 
  // 44 - "Nippondenso Co. Ltd." 
  // 43 - "International Truck and Engine Corp. Vehicle Electronics" 
  // 42 - "International Truck and Engine Corp. Engine Electronics" 
  // 41 - "Motorola Inc." 
  // 40 - "Motorola AIEG Inc." 
  // 39 - "Microfirm Inc." 
  // 38 - "Micro Processor Systems Inc." 
  // 37 - "Mack Trucks Inc." 
  // 36 - "Lucas Ltd." 
  // 35 - "Kenworth Truck Co." 
  // 34 - "Kelsey Hayes Co." 
  // 33 - "John Deere" 
  // 32 - "Jacobs Vehicle Systems" 
  // 31 - "J Pollak Corp." 
  // 30 - "Isuzu Motors Ltd." 
  // 29 - "Hino Motors Ltd." 
  // 28 - "Grote Ind. Inc." 
  // 27 - "GMC" 
  // 26 - "General Motors Corp., Service Technology Group" 
  // 25 - "Daimler Trucks North America LLC" 
  // 24 - "Ford Motor Co., Vehicle Controls" 
  // 23 - "Ford Motor Co., Heavy Truck" 
  // 22 - "Ford Motor Co., Electronic Concepts $ Systems" 
  // 21 - "Echilin Inc., Midland Brake Inc." 
  // 20 - "Eaton Ltd" 
  // 19 - "Eaton Corp. Trucking Info Services" 
  // 18 - "Eaton Corp, Transmission Division" 
  // 17 - "Eaton Corp. Res & Dev" 
  // 16 - "Eaton Corp." 
  // 15 - "Dickey-John Corp." 
  // 14 - "Detroit Diesel Corporation" 
  // 13 - "Delco Electronics" 
  // 12 - "Deere & Company, Precision Farming" 
  // 11 - "Dearborn Group Inc." 
  // 10 - "Cummins Engine Co." 
  // 9 - "Chrysler Corp." 
  // 8 - "Caterpillar Inc." 
  // 7 - "Case Corp." 
  // 6 - "Berifors Electronics AB" 
  // 5 - "AMP Inc." 
  // 4 - "Ametek-Dixson" 
  // 3 - "Ametek, US Gauge Division" 
  // 2 - "Allison Transmission, GMC" 
  // 1 - "Allied Signal Inc." 
  // 0 - "Reserved" 
  // 231 - "Topcon Positioning Systems, Inc." 
  // 230 - "Saucon Technologies" 
  // 229 - "Garmin International Inc." 
  // 228 - "ZF Marine Electronics" 
  // 227 - "Lykketronic A/S" 
  // 226 - "Monaco Coach Corporation" 
  // 225 - "SKF" 
  // 224 - "EMMI Network, S.L." 
  // 223 - "Vaueo Retarder Co., Ltd." 
  // 263 - "IMMI" 
  // 262 - "HydraForce, Inc" 
  // 261 - "Red Dot Corporation" 
  // 260 - "Reichhardt GmbH" 
  // 259 - "Jetter AG" 
  // 258 - "ARAG" 
  // 257 - "Honda Motor Co., Ltd" 
  // 256 - "Tyco Electronics AMP" 
  // 255 - "MEAS France" 
  // 254 - "GE Sensing" 
  // 253 - "Mobile Control Systems" 
  // 298 - "Holley Performance" 
  // 297 - "Zonar Systems Inc" 
  // 296 - "micro dynamics GmbH" 
  // 295 - "BEP Marine" 
  // 294 - "Grayhill Inc." 
  // 293 - "Spyder Controls Corp." 
  // 292 - "IKUSI - Angel Iglesias S.A." 
  // 291 - "Groeneveld Transport Efficiency BV" 
  // 290 - "Kuebler GmbH" 
  // 289 - "Watlow" 
  // 288 - "Mitsubishi FUSO Truck & Bus Corp." 
  // 287 - "NTech Industries, Inc" 
  // 286 - "Coelmo srl" 
  // 285 - "Sea Recovery Corp" 
  // 284 - "Mobile Tech Chile" 
  // 283 - "CWF Hamilton & Co Ltd" 
  // 282 - "Medallion Instrumentation Systems" 
  // 281 - "Precision Governors LLC" 
  // 311 - "Patrick Power Products" 
  // 310 - "TECNORD srl" 
  // 309 - "Krauss-Maffei Wegmann GmbH & Co. KG" 
  // 308 - "Cyntrx" 
  // 307 - "MBW Technologies" 
  // 306 - "Sleipner Motor AB" 
  // 305 - "NovAtel Inc" 
  // 304 - "EmpirBus AB" 
  // 303 - "CTS Corporation" 
  // 302 - "Nissin Kogyo Co., LTD" 
  // 301 - "Parker Hannifin (UK) Ltd FDE group" 
  // 300 - "Systron Donner Automotive" 
  // 299 - "Rauch Landmaschinen GmbH" 
  // 280 - "Leica Geosystems Pty Ltd" 
  // 279 - "Geometris LP" 
  // 278 - "Takata Electronics" 
  // 277 - "LHP Telematics" 
  // 276 - "Aqua-Hot Heating Systems" 
  // 275 - "Navico Egersund AS" 
  // 274 - "LTW Technology Co., LTD" 
  // 273 - "Active Research Limited" 
  // 272 - "Gross Mechanical Laboratories, Inc" 
  // 327 - "Sonceboz SA" 
  // 326 - "Akron Brass Company" 
  // 325 - "ASM Automation Sensorik Messtechnik GmbH" 
  // 324 - "Snap-on Diagnostics" 
  // 323 - "Mobileye Vision Technologies Ltd." 
  // 322 - "MICHENKA s.r.o." 
  // 321 - "Ultra Electronics, Electrics" 
  // 320 - "Miedema Landbouwwerktuigenfabriek B.V." 
  // 319 - "Cadec Global" 
  // 318 - "SAT Plan" 
  // 317 - "Navtronics Bvba" 
  // 316 - "ITT Flow Control" 
  // 315 - "Icom Incorporated" 
  // 314 - "CSM GmbH" 
  // 313 - "Ilmor Engineering, Inc" 
  // 312 - "Lectronix, Inc." 
  // 271 - "Cole Hersee" 
  // 270 - "Tennant" 
  // 269 - "Saft America Inc.,  Space & Defense Division" 
  // 268 - "Accurate Technologies" 
  // 267 - "Red Lion Controls, Inc" 
  // 266 - "International Thermal Research Ltd" 
  // 265 - "MTS Sensor Technologie GmbH" 
  // 264 - "Autolync" 
  // 248 - "Cooper Standard Automotive Active Systems Group" 
  // 247 - "ePULSE" 
  // 246 - "Class 1, Inc" 
  // 245 - "Capstan Ag Systems, Inc." 
  // 244 - "Techno-Matic" 
  // 243 - "eRide, Inc." 
  // 242 - "Kokusandenki Co. Ltd" 
  // 241 - "Schneider Automation SAS " 
  // 240 - "Vanair Mfg" 
  // 239 - "May & Scofield Ltd" 
  // 238 - "ZF Friedrichshafen AG" 
  // 237 - "Agtron Enterprises Inc" 
  // 236 - "Norac Systems International Inc" 
  // 235 - "SailorMade Marine Telemetry - Tetra Technology Ltd." 
  // 234 - "Mondial electronic GmbH" 

  uint16_t ManufacturerCode;             //      Bits=11.  [ 0     , 2047   ]  Unit:''     

  uint8_t ECUInstance;                   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  uint8_t FunctionInstance;              //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // 127 - "Reserved" 
  // 126 - "Reserved" 
  // 125 - "Reserved" 
  // 124 - "Reserved" 
  // 123 - "Reserved" 
  // 122 - "Reserved" 
  // 121 - "Reserved" 
  // 120 - "Reserved" 
  // 119 - "Reserved" 
  // 118 - "Reserved" 
  // 117 - "Reserved" 
  // 116 - "Reserved" 
  // 115 - "Reserved" 
  // 114 - "Reserved" 
  // 113 - "Reserved" 
  // 112 - "Reserved" 
  // 111 - "Reserved" 
  // 110 - "Reserved" 
  // 109 - "Reserved" 
  // 108 - "Reserved" 
  // 107 - "Reserved" 
  // 106 - "Reserved" 
  // 105 - "Reserved" 
  // 104 - "Reserved" 
  // 103 - "Reserved" 
  // 102 - "Reserved" 
  // 101 - "Reserved" 
  // 42 - "Water Pump Control" 
  // 41 - "Lighting - Operator Controls" 
  // 40 - "Seat Control" 
  // 39 - "Ignition Control Module" 
  // 38 - "Tire Pressure Control" 
  // 37 - "Cab Controller" 
  // 36 - "Pneumatic - System Controller" 
  // 35 - "Suspension - System Controller" 
  // 34 - "Hydraulic Pump Controller" 
  // 33 - "System Monitor" 
  // 32 - "Headway Controller" 
  // 31 - "Propulsion Battery Charger" 
  // 30 - "Management Computer" 
  // 29 - "Virtual Terminal (in cab)" 
  // 28 - "Off Vehicle Gateway" 
  // 27 - "Power TakeOff (Secondary or Front)" 
  // 26 - "Body Controller" 
  // 25 - "Network Interconnect ECU" 
  // 24 - "Vehicle Security" 
  // 23 - "Vehicle Navigation" 
  // 22 - "Aerodynamic Control" 
  // 21 - "Cab Climate Control" 
  // 20 - "Trip Recorder" 
  // 19 - "Instrument Cluster" 
  // 18 - "Suspension - Drive Axle" 
  // 17 - "Suspension - Steer Axle" 
  // 16 - "Steering Controller" 
  // 15 - "Fuel System" 
  // 14 - "Cruise Control" 
  // 13 - "Retarder - Driveline" 
  // 12 - "Retarder - Engine" 
  // 11 - "Brakes - Drive Axle" 
  // 10 - "Brakes - Steer Axle" 
  // 9 - "Brakes - System Controller" 
  // 8 - "Axle - Drive" 
  // 7 - "Axle - Steering" 
  // 6 - "Power TakeOff - (Main or Rear)" 
  // 5 - "Shift Control/Console" 
  // 4 - "Battery Pack Monitor" 
  // 3 - "Transmission" 
  // 2 - "Electric Propulsion Control" 
  // 1 - "Auxiliary Power Unit (APU)" 
  // 0 - "Engine" 
  // 100 - "Reserved" 
  // 99 - "Reserved" 
  // 98 - "Reserved" 
  // 97 - "Reserved" 
  // 96 - "Reserved" 
  // 95 - "Reserved" 
  // 94 - "Reserved" 
  // 93 - "Reserved" 
  // 92 - "Reserved" 
  // 91 - "Reserved" 
  // 90 - "Reserved" 
  // 89 - "Reserved" 
  // 88 - "Reserved" 
  // 87 - "Reserved" 
  // 86 - "Reserved" 
  // 85 - "Reserved" 
  // 84 - "Reserved" 
  // 83 - "Reserved" 
  // 82 - "Reserved" 
  // 81 - "Reserved" 
  // 80 - "Reserved" 
  // 79 - "Reserved" 
  // 78 - "Fire Suppression System" 
  // 77 - "Fuel Properties Sensor" 
  // 76 - "Temperature Sensor" 
  // 75 - "Supplemental Fan" 
  // 74 - "Lubrication System" 
  // 73 - "Rollover Detection Control" 
  // 72 - "Coolant Valve Controller" 
  // 71 - "Transfer Case Control" 
  // 70 - "Auxiliary Regeneration Device" 
  // 69 - "Engine Emission Aftertreatement System" 
  // 68 - "Aftertreatment system gas measurement" 
  // 67 - "Electrical System Controller" 
  // 66 - "I/O Controller" 
  // 65 - "Gas Flow Measurement" 
  // 64 - "Endurance Braking" 
  // 63 - "Engine Valve Controller" 
  // 62 - "On-Board Diagnostic Unit" 
  // 61 - "File Server/Printer" 
  // 60 - "Cab Display" 
  // 59 - "Starter" 
  // 58 - "Fan Drive Control" 
  // 57 - "Steering Column Unit" 
  // 56 - "Communications Unit, Radio" 
  // 55 - "Communications Unit, Satellite" 
  // 54 - "Communications Unit, Cellular" 
  // 53 - "Alternator/Charging System" 
  // 52 - "Chassis Controller" 
  // 51 - "Forward-Looking Collision Warning System" 
  // 50 - "Auxiliary Heater" 
  // 49 - "Clutch/Converter Control" 
  // 48 - "Ramp Control" 
  // 47 - "Information System Controller" 
  // 46 - "Oil Sensor Unit" 
  // 45 - "Vehicle Dynamic Stability Control" 
  // 44 - "Exhaust Emission Control" 
  // 43 - "Transmission Display" 

  uint8_t Function;                      //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // 127 - "Not Available" 
  // 0 - "Ind. Process Control Stationary" 

  uint8_t VehicleSystem5;                //      Bits=07.  [ 0     , 127    ]  Unit:''     

  // 125 - "Entertainment" 
  // 120 - "Display" 
  // 85 - "External Environment" 
  // 75 - "Sensor Communication Interface" 
  // 35 - "Electrical Generation" 
  // 100 - "Deck, Cargo and Fishing Equipment" 
  // 90 - "Internal Environment" 
  // 80 - "Instrumentation/General Systems (deprecate)" 
  // 70 - "Communications" 
  // 60 - "Navigation" 
  // 50 - "Propulsion" 
  // 40 - "Steering and Control Surfaces" 
  // 30 - "Electrical Distribution" 
  // 25 - "Inter/Intranetwork Device" 
  // 20 - "Safety Systems" 
  // 10 - "System Tools" 
  // 127 - "Not Available" 
  // 0 - "Non-specific System" 

  uint8_t VehicleSystem4;                //      Bits=07.  [ 0     , 127    ]  Unit:''     

  // 8 - "Grader" 
  // 7 - "Four Wheel Drive Loader" 
  // 6 - "Forklift" 
  // 5 - "Excavator" 
  // 4 - "Crawler" 
  // 3 - "Backhoe" 
  // 2 - "Articulated Dump Truck" 
  // 1 - "Skid Steer Loader" 
  // 127 - "Not Available" 
  // 0 - "Non-specific System" 

  uint8_t VehicleSystem3;                //      Bits=07.  [ 0     , 127    ]  Unit:''     

  // 25 - "Slurry Applicators" 
  // 24 - "Utility Vehicles" 
  // 23 - "Mulchers" 
  // 22 - "Timber Processing Machines" 
  // 21 - "Timber loaders" 
  // 20 - "Forwarders" 
  // 19 - "Timber Harvesters" 
  // 17 - "Sensor Systems" 
  // 16 - "Skidder" 
  // 15 - "Earth Work" 
  // 14 - "Special Crops" 
  // 13 - "Powered Auxiliary Device" 
  // 12 - "Farm Yard Operations" 
  // 11 - "Transport/Trailer" 
  // 10 - "Irrigation" 
  // 9 - "Forage" 
  // 8 - "Root Harvesters" 
  // 7 - "Harvesters" 
  // 6 - "Sprayers" 
  // 5 - "Fertilizers" 
  // 4 - "Planters/Seeders" 
  // 3 - "Secondary Tillage" 
  // 2 - "Tillage" 
  // 1 - "Tractor" 
  // 127 - "Not Available" 
  // 0 - "Non-specific System" 

  uint8_t VehicleSystem2;                //      Bits=07.  [ 0     , 127    ]  Unit:''     

  // 2 - "Trailer" 
  // 1 - "Tractor" 
  // 127 - "Not Available" 
  // 0 - "Non-specific System" 

  uint8_t VehicleSystem1;                //      Bits=07.  [ 0     , 127    ]  Unit:''     

  // 0 - "Non-specific System" 
  // 127 - "Not Available" 

  uint8_t VehicleSystem;                 //      Bits=07.  [ 0     , 127    ]  Unit:''     

  uint8_t VehicleSystemInstance;         //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // 0 = Global;      1  = On-Highway;      2  = Agricultural and Forestry;      3  = Construction;      4  = Marine;     5  = Industrial - Process            Control - Stationary (Gen-Sets)     6  = Reserve for SAE     7  = Reserve for SAE
  // 6 - "Reserved for SAE" 
  // 7 - "Reserved for SAE" 
  // 5 - "IndustrialProcessCtrlStationary" 
  // 4 - "Marine" 
  // 3 - "Construction" 
  // 2 - "Agricultural and Forestry" 
  // 1 - "On-Highway" 
  // 0 - "Global" 

  uint8_t IndustryGroup;                 //      Bits=03.  [ 0     , 7      ]  Unit:''     

  uint8_t ArbitraryAddressCapable;       //      Bits=01.  [ 0     , 1      ]  Unit:''     
  uint32_t framecnt;
} WSMEM_t;

// def @WSMSTR CAN Message (419302910)
#define WSMSTR_IDE (1U)
#define WSMSTR_DLC (8U)
#define WSMSTR_CANID (0x18FE0DFEU)
// -- Working Set Master  This message is sent by the Master of a Working Set to identify how many members there are in said set.
typedef struct
{

  uint8_t NumberOfMembers;               //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} WSMSTR_t;

// def @RESRR CAN Message (419303166)
#define RESRR_IDE (1U)
#define RESRR_DLC (8U)
#define RESRR_CANID (0x18FE0EFEU)
// -- Response for Repetition Rate  This global message is the response of the request of a specific user to change the repetition rate.
typedef struct
{

  // This parameter defines the repetition rate of the specified PGN.
  uint16_t RepetitionRateParameter;      //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // This 3 bit parameter that indicates how the data in the following Process Data Parameters is to be used when combined with the Process Data Type parameter. See Table A.2.    NOTE: Process Data Type is included since MOD is a function of PD
  uint8_t ProcessDataModifier;           //      Bits=03.  [ 0     , 0      ]  Unit:''     

  // This 2 bit parameter indicates what the data in the following Process Data Parameters is to be used for. See Table A.2.  00 Data is Set Point  01 Data is Actual values  10 Message is Set Point request  11 Message is Actual value request  Data is Set ...
  // 3 - "Message is Actual value request" 
  // 2 - "Message is Set Point request" 
  // 1 - "Data is Actual values" 
  // 0 - "Data is Set Point" 

  uint8_t ProcessDataType;               //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This 2 bit parameter that indicates the format or availability of the data in the following Process Data Parameter.  00 Data format is Long Integer  01 Data format is Floating  10 Data format is unsigned Long Integer  11 Not Available or error  Data ...
  // 3 - "Not Available or error" 
  // 2 - "Data format is unsigned Long Integer" 
  // 1 - "Data format is Floating" 
  // 0 - "Data format is Long Integer" 

  uint8_t DataFormat_ErrorCondition;     //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This 4 bit parameter of this message will indicate which Implement is referenced within a set of identical Implements.  The numbering is to start with 1 at the leftmost, foremost, bottom most implement.  The numbering will then increment from left ...
  uint8_t ImplementPos;                  //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // This 4 bit parameter indicates which data dictionary page is to be used to locate the identity of the following data.
  uint8_t ImplementType;                 //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // This 4 bit parameter indicates the Column that is to be used within the specific Data Dictionary Table identified by the Implement Type. This is the Instance (INST) in LBS documents.
  uint8_t DataDictionaryColumn;          //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // This 4 bit parameter indicates the Row that is to be used within the specific Data Dictionary Table identified by the Implement Type. This is the Group (GRUP) in LBS documents.
  uint8_t DataDictionaryRow;             //      Bits=04.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} RESRR_t;

// def @LC CAN Message (419303422)
#define LC_IDE (1U)
#define LC_DLC (8U)
#define LC_CANID (0x18FE0FFEU)
// -- Language Command  The language message has been defined as a global message to inform all ECUs on the 11783 bus the language that the operator wants to use, the date and time format and the units of measure with which the connected system should ...
typedef struct
{

  // Command sent to all ECUs which specifies the operator?s desired language of information.  ISO 11783 shall use the 2-character string country codes in ISO 639.  Typical examples from ISO 639 are:     Dutch: nl  French: fr  English: en  German: de
  uint16_t LanguageCodeCmd;              //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // Command sent to all ECUs which specifies the displayed format of the time    00 24 hour  01 12 hour (am/ pm)  10 Reserved  11 No action
  // 3 - "No action" 
  // 2 - "Reserved" 
  // 1 - "12 hour" 
  // 0 - "24 hour" 

  uint8_t TimeCmd;                       //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // Command sent to all ECUs which specifies that a decimal point or Comma should be displayed.    00 Comma is used  01 Point is used  10 Reserved  11 No action
  // 3 - "No action" 
  // 2 - "Reserved" 
  // 1 - "Point is used" 
  // 0 - "Comma is used" 

  uint8_t DecimalSymbolCmd;              //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // Command sent to all ECUs which specifies the displayed order of the date.    0 ddmmyyyy  1 ddyyyymm  2 mmyyyydd  3 mmddyyyy  4 yyyymmdd  5 yyyyddmm  6-255 Reserved
  uint8_t DateCmd;                       //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command to specify the mass units    00 Metric (tonne, kg, ?)  01 Imperial (long tons-UK, pounds, ?.)  10 Tons/pounds (short tons-US, pounds, ?)  11 No action
  // 3 - "No action" 
  // 2 - "Tons/pounds" 
  // 1 - "Imperial" 
  // 0 - "Metric" 

  uint8_t MassUnitCmd;                   //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // Command to specify the volume units    00 Metric (litre)  01 Imperial (gallon)  10 US (gallon)  11 No action
  // 3 - "No action" 
  // 2 - "US" 
  // 1 - "Imperial" 
  // 0 - "Metric" 

  uint8_t VolumeUnitCmd;                 //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // Command to specify the area units    00 Metric (ha or m2)  01 Imperial (acres or feet2)  10 Reserved  11 No action
  // 3 - "No action" 
  // 2 - "Reserved" 
  // 1 - "Imperial" 
  // 0 - "Metric" 

  uint8_t AreaUnitCmd;                   //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // Command to specify the distance units    00 Metric (km, m, ?)  01 Imperial (miles, feet, ..)  10 Reserved  11 No action
  // 3 - "No action" 
  // 2 - "Reserved" 
  // 1 - "Imperial" 
  // 0 - "Metric" 

  uint8_t DistanceUnitCmd;               //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} LC_t;

// def @AV00EF CAN Message (419303678)
#define AV00EF_IDE (1U)
#define AV00EF_DLC (8U)
#define AV00EF_CANID (0x18FE10FEU)
// -- Auxiliary Valve Number 0 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve0ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve0RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t AuxValve0State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve0FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 0 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve0Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV00EF_t;

// def @AV01EF CAN Message (419303934)
#define AV01EF_IDE (1U)
#define AV01EF_DLC (8U)
#define AV01EF_CANID (0x18FE11FEU)
// -- Auxiliary Valve Number 1 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve1ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve1RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t AuxValve1State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve1FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 1 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve1Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV01EF_t;

// def @AV02EF CAN Message (419304190)
#define AV02EF_IDE (1U)
#define AV02EF_DLC (8U)
#define AV02EF_CANID (0x18FE12FEU)
// -- Auxiliary Valve Number 2 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve2ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve2RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t AuxValve2State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve2FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 2 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve2Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV02EF_t;

// def @AV03EF CAN Message (419304446)
#define AV03EF_IDE (1U)
#define AV03EF_DLC (8U)
#define AV03EF_CANID (0x18FE13FEU)
// -- Auxiliary Valve Number 3 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve3ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve3RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t AuxValve3State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve3FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 3 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve3Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV03EF_t;

// def @AV04EF CAN Message (419304702)
#define AV04EF_IDE (1U)
#define AV04EF_DLC (8U)
#define AV04EF_CANID (0x18FE14FEU)
// -- Auxiliary Valve Number 4 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve4ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve4RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t AuxValve4State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve4FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 4 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve4Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV04EF_t;

// def @AV05EF CAN Message (419304958)
#define AV05EF_IDE (1U)
#define AV05EF_DLC (8U)
#define AV05EF_CANID (0x18FE15FEU)
// -- Auxiliary Valve Number 5 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve5ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve5RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t AuxValve5State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve5FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 5 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve5Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV05EF_t;

// def @AV06EF CAN Message (419305214)
#define AV06EF_IDE (1U)
#define AV06EF_DLC (8U)
#define AV06EF_CANID (0x18FE16FEU)
// -- Auxiliary Valve Number 6 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve6ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve6RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t AuxValve6State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve6FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 6 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve6Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV06EF_t;

// def @AV07EF CAN Message (419305470)
#define AV07EF_IDE (1U)
#define AV07EF_DLC (8U)
#define AV07EF_CANID (0x18FE17FEU)
// -- Auxiliary Valve Number 7 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve7ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve7RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t AuxValve7State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve7FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 7 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve7Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV07EF_t;

// def @AV08EF CAN Message (419305726)
#define AV08EF_IDE (1U)
#define AV08EF_DLC (8U)
#define AV08EF_CANID (0x18FE18FEU)
// -- Auxiliary Valve Number 8 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve8ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve8RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t AuxValve8State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve8FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 8 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve8Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV08EF_t;

// def @AV09EF CAN Message (419305982)
#define AV09EF_IDE (1U)
#define AV09EF_DLC (8U)
#define AV09EF_CANID (0x18FE19FEU)
// -- Auxiliary Valve Number 9 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve9ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve9RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t AuxValve9State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve9FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 9 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve9Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV09EF_t;

// def @AV10EF CAN Message (419306238)
#define AV10EF_IDE (1U)
#define AV10EF_DLC (8U)
#define AV10EF_CANID (0x18FE1AFEU)
// -- Auxiliary Valve Number 10 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve10ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve10RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t AuxValve10State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve10FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 10 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve10Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV10EF_t;

// def @AV11EF CAN Message (419306494)
#define AV11EF_IDE (1U)
#define AV11EF_DLC (8U)
#define AV11EF_CANID (0x18FE1BFEU)
// -- Auxiliary Valve Number 11 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve11ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve11RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t AuxValve11State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve11FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 11 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve11Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV11EF_t;

// def @AV12EF CAN Message (419306750)
#define AV12EF_IDE (1U)
#define AV12EF_DLC (8U)
#define AV12EF_CANID (0x18FE1CFEU)
// -- Auxiliary Valve Number 12 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve12ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve12RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t AuxValve12State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve12FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 12 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve12Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV12EF_t;

// def @AV13EF CAN Message (419307006)
#define AV13EF_IDE (1U)
#define AV13EF_DLC (8U)
#define AV13EF_CANID (0x18FE1DFEU)
// -- Auxiliary Valve Number 13 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve13ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve13RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 1 - "Extend" 
  // 0 - "Blocked" 
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 

  uint8_t AuxValve13State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve13FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 13 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve13Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV13EF_t;

// def @AV14EF CAN Message (419307262)
#define AV14EF_IDE (1U)
#define AV14EF_DLC (8U)
#define AV14EF_CANID (0x18FE1EFEU)
// -- Auxiliary Valve Number 14 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve14ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve14RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t AuxValve14State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve14FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 14 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve14Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV14EF_t;

// def @AV15EF CAN Message (419307518)
#define AV15EF_IDE (1U)
#define AV15EF_DLC (8U)
#define AV15EF_CANID (0x18FE1FFEU)
// -- Auxiliary Valve Number 15 Estimated Flow  This message provides the estimated flow of specified auxiliary valve.
typedef struct
{

  // The value reported by the controller of flow through the extend port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning to ...
  uint8_t AuxValve15ExtendPortEstFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The value reported by the controller of flow through the retract port of an auxiliary valve of a tractor which could be based on the commanded position of the valve.  Zero percent indicates no flow, 100%, maximum flow, -100% maximum flow returning ...
  uint8_t AuxValve15RetractPortEstFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured state of the auxiliary valve.   With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Blocked  0001 Extend  0010 Retract  0011 Floating  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Floating" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Blocked" 

  uint8_t AuxValve15State;                //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // The measured state the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve15FailSafeMode;         //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Auxiliary Valve 15 cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t AuxValve15Exit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV15EF_t;

// def @AV00MF CAN Message (419307774)
#define AV00MF_IDE (1U)
#define AV00MF_DLC (8U)
#define AV00MF_CANID (0x18FE20FEU)
// -- Auxiliary Valve Number 0 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve0ExtendPortMeasuredFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve0RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve0ExtendPortPress;          //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve0RetractPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve0ReturnPortPress;           //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV00MF_t;

// def @AV01MF CAN Message (419308030)
#define AV01MF_IDE (1U)
#define AV01MF_DLC (8U)
#define AV01MF_CANID (0x18FE21FEU)
// -- Auxiliary Valve Number 1 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve1ExtendPortMeasuredFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve1RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve1ExtendPortPress;          //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve1RetractPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve1ReturnPortPress;           //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV01MF_t;

// def @AV02MF CAN Message (419308286)
#define AV02MF_IDE (1U)
#define AV02MF_DLC (8U)
#define AV02MF_CANID (0x18FE22FEU)
// -- Auxiliary Valve Number 2 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve2ExtendPortMeasuredFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve2RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve2ExtendPortPress;          //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve2RetractPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve2ReturnPortPress;           //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV02MF_t;

// def @AV03MF CAN Message (419308542)
#define AV03MF_IDE (1U)
#define AV03MF_DLC (8U)
#define AV03MF_CANID (0x18FE23FEU)
// -- Auxiliary Valve Number 3 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve3ExtendPortMeasuredFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve3RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve3ExtendPortPress;          //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve3RetractPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve3ReturnPortPress;           //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV03MF_t;

// def @AV04MF CAN Message (419308798)
#define AV04MF_IDE (1U)
#define AV04MF_DLC (8U)
#define AV04MF_CANID (0x18FE24FEU)
// -- Auxiliary Valve Number 4 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve4ExtendPortMeasuredFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve4RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve4ExtendPortPress;          //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve4RetractPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve4ReturnPortPress;           //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV04MF_t;

// def @AV05MF CAN Message (419309054)
#define AV05MF_IDE (1U)
#define AV05MF_DLC (8U)
#define AV05MF_CANID (0x18FE25FEU)
// -- Auxiliary Valve Number 5 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve5ExtendPortMeasuredFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve5RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve5ExtendPortPress;          //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve5RetractPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve5ReturnPortPress;           //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV05MF_t;

// def @AV06MF CAN Message (419309310)
#define AV06MF_IDE (1U)
#define AV06MF_DLC (8U)
#define AV06MF_CANID (0x18FE26FEU)
// -- Auxiliary Valve Number 6 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve6ExtendPortMeasuredFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve6RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve6ExtendPortPress;          //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve6RetractPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve6ReturnPortPress;           //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV06MF_t;

// def @AV07MF CAN Message (419309566)
#define AV07MF_IDE (1U)
#define AV07MF_DLC (8U)
#define AV07MF_CANID (0x18FE27FEU)
// -- Auxiliary Valve Number 7 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve7ExtendPortMeasuredFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve7RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve7ExtendPortPress;          //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve7RetractPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve7ReturnPortPress;           //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV07MF_t;

// def @AV08MF CAN Message (419309822)
#define AV08MF_IDE (1U)
#define AV08MF_DLC (8U)
#define AV08MF_CANID (0x18FE28FEU)
// -- Auxiliary Valve Number 8 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve8ExtendPortMeasuredFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve8RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve8ExtendPortPress;          //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve8RetractPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve8ReturnPortPress;           //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV08MF_t;

// def @AV09MF CAN Message (419310078)
#define AV09MF_IDE (1U)
#define AV09MF_DLC (8U)
#define AV09MF_CANID (0x18FE29FEU)
// -- Auxiliary Valve Number 9 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve9ExtendPortMeasuredFlow;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve9RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve9ExtendPortPress;          //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve9RetractPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve9ReturnPortPress;           //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV09MF_t;

// def @AV10MF CAN Message (419310334)
#define AV10MF_IDE (1U)
#define AV10MF_DLC (8U)
#define AV10MF_CANID (0x18FE2AFEU)
// -- Auxiliary Valve Number 10 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve10ExtendPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AxValve10RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve10ExtendPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve10RetractPortPress;        //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve10ReturnPortPress;          //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV10MF_t;

// def @AV11MF CAN Message (419310590)
#define AV11MF_IDE (1U)
#define AV11MF_DLC (8U)
#define AV11MF_CANID (0x18FE2BFEU)
// -- Auxiliary Valve Number 11 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve11ExtendPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AxValve11RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve11ExtendPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve11RetractPortPress;        //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve11ReturnPortPress;          //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV11MF_t;

// def @AV12MF CAN Message (419310846)
#define AV12MF_IDE (1U)
#define AV12MF_DLC (8U)
#define AV12MF_CANID (0x18FE2CFEU)
// -- Auxiliary Valve Number 12 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve12ExtendPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AxValve12RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve12ExtendPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve12RetractPortPress;        //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve12ReturnPortPress;          //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV12MF_t;

// def @AV13MF CAN Message (419311102)
#define AV13MF_IDE (1U)
#define AV13MF_DLC (8U)
#define AV13MF_CANID (0x18FE2DFEU)
// -- Auxiliary Valve Number 13 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve13ExtendPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AxValve13RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve13ExtendPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve13RetractPortPress;        //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve13ReturnPortPress;          //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV13MF_t;

// def @AV14MF CAN Message (419311358)
#define AV14MF_IDE (1U)
#define AV14MF_DLC (8U)
#define AV14MF_CANID (0x18FE2EFEU)
// -- Auxiliary Valve Number 14 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve14ExtendPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AxValve14RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve14ExtendPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve14RetractPortPress;        //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve14ReturnPortPress;          //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV14MF_t;

// def @AV15MF CAN Message (419311614)
#define AV15MF_IDE (1U)
#define AV15MF_DLC (8U)
#define AV15MF_CANID (0x18FE2FFEU)
// -- Auxiliary Valve Number 15 Measured Flow  This message provides the measurement of specified auxiliary valve.
typedef struct
{

  // The measured flow through the extend port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AuxValve15ExtendPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured flow through the retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, -100% indicates maximum flow returning to the tractor through the ...
  uint8_t AxValve15RetractPortMeasuredFlow;   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the extend port of an auxiliary valve of a tractor.
  uint16_t AuxValve15ExtendPortPress;         //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the retract port of an auxiliary valve of a tractor.
  uint16_t AuxValve15RetractPortPress;        //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured nominal pressure at the return port of an auxiliary valve of a tractor.
  uint8_t AuxValve15ReturnPortPress;          //      Bits=08.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV15MF_t;

// def @AV00C CAN Message (419311870)
#define AV00C_IDE (1U)
#define AV00C_DLC (8U)
#define AV00C_CANID (0x18FE30FEU)
// -- Auxiliary Valve Number 0 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve0PortFlowCmd;          //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 

  uint8_t AuxValve0StateCmd;             //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve0FailSafeModeCmd;      //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV00C_t;

// def @AV01C CAN Message (419312126)
#define AV01C_IDE (1U)
#define AV01C_DLC (8U)
#define AV01C_CANID (0x18FE31FEU)
// -- Auxiliary Valve Number 1 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve1PortFlowCmd;          //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 

  uint8_t AuxValve1StateCmd;             //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve1FailSafeModeCmd;      //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV01C_t;

// def @AV02C CAN Message (419312382)
#define AV02C_IDE (1U)
#define AV02C_DLC (8U)
#define AV02C_CANID (0x18FE32FEU)
// -- Auxiliary Valve Number 2 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve2PortFlowCmd;          //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 

  uint8_t AuxValve2StateCmd;             //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve2FailSafeModeCmd;      //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV02C_t;

// def @AV03C CAN Message (419312638)
#define AV03C_IDE (1U)
#define AV03C_DLC (8U)
#define AV03C_CANID (0x18FE33FEU)
// -- Auxiliary Valve Number 3 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve3PortFlowCmd;          //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 

  uint8_t AuxValve3StateCmd;             //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve3FailSafeModeCmd;      //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV03C_t;

// def @AV04C CAN Message (419312894)
#define AV04C_IDE (1U)
#define AV04C_DLC (8U)
#define AV04C_CANID (0x18FE34FEU)
// -- Auxiliary Valve Number 4 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve4PortFlowCmd;          //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 

  uint8_t AuxValve4StateCmd;             //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve4FailSafeModeCmd;      //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV04C_t;

// def @AV05C CAN Message (419313150)
#define AV05C_IDE (1U)
#define AV05C_DLC (8U)
#define AV05C_CANID (0x18FE35FEU)
// -- Auxiliary Valve Number 5 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve5PortFlowCmd;          //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 

  uint8_t AuxValve5StateCmd;             //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve5FailSafeModeCmd;      //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV05C_t;

// def @AV06C CAN Message (419313406)
#define AV06C_IDE (1U)
#define AV06C_DLC (8U)
#define AV06C_CANID (0x18FE36FEU)
// -- Auxiliary Valve Number 6 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve6PortFlowCmd;          //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 

  uint8_t AuxValve6StateCmd;             //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve6FailSafeModeCmd;      //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV06C_t;

// def @AV07C CAN Message (419313662)
#define AV07C_IDE (1U)
#define AV07C_DLC (8U)
#define AV07C_CANID (0x18FE37FEU)
// -- Auxiliary Valve Number 7 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve7PortFlowCmd;          //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 

  uint8_t AuxValve7StateCmd;             //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve7FailSafeModeCmd;      //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV07C_t;

// def @AV08C CAN Message (419313918)
#define AV08C_IDE (1U)
#define AV08C_DLC (8U)
#define AV08C_CANID (0x18FE38FEU)
// -- Auxiliary Valve Number 8 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve8PortFlowCmd;          //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 

  uint8_t AuxValve8StateCmd;             //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve8FailSafeModeCmd;      //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV08C_t;

// def @AV09C CAN Message (419314174)
#define AV09C_IDE (1U)
#define AV09C_DLC (8U)
#define AV09C_CANID (0x18FE39FEU)
// -- Auxiliary Valve Number 9 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve9PortFlowCmd;          //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 

  uint8_t AuxValve9StateCmd;             //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve9FailSafeModeCmd;      //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV09C_t;

// def @AV10C CAN Message (419314430)
#define AV10C_IDE (1U)
#define AV10C_DLC (8U)
#define AV10C_CANID (0x18FE3AFEU)
// -- Auxiliary Valve Number 10 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve10PortFlowCmd;         //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 

  uint8_t AuxValve10StateCmd;            //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve10FailSafeModeCmd;     //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV10C_t;

// def @AV11C CAN Message (419314686)
#define AV11C_IDE (1U)
#define AV11C_DLC (8U)
#define AV11C_CANID (0x18FE3BFEU)
// -- Auxiliary Valve Number 11 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve11PortFlowCmd;         //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 

  uint8_t AuxValve11StateCmd;            //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve11FailSafeModeCmd;     //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV11C_t;

// def @AV12C CAN Message (419314942)
#define AV12C_IDE (1U)
#define AV12C_DLC (8U)
#define AV12C_CANID (0x18FE3CFEU)
// -- Auxiliary Valve Number 12 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve12PortFlowCmd;         //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 

  uint8_t AuxValve12StateCmd;            //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve12FailSafeModeCmd;     //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV12C_t;

// def @AV13C CAN Message (419315198)
#define AV13C_IDE (1U)
#define AV13C_DLC (8U)
#define AV13C_CANID (0x18FE3DFEU)
// -- Auxiliary Valve Number 13 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve13PortFlowCmd;         //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 

  uint8_t AuxValve13StateCmd;            //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve13FailSafeModeCmd;     //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV13C_t;

// def @AV14C CAN Message (419315454)
#define AV14C_IDE (1U)
#define AV14C_DLC (8U)
#define AV14C_CANID (0x18FE3EFEU)
// -- Auxiliary Valve Number 14 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve14PortFlowCmd;         //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 
  // 15 - "Don?t Care" 

  uint8_t AuxValve14StateCmd;            //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve14FailSafeModeCmd;     //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV14C_t;

// def @AV15C CAN Message (419315710)
#define AV15C_IDE (1U)
#define AV15C_DLC (8U)
#define AV15C_CANID (0x18FE3FFEU)
// -- Auxiliary Valve Number 15 Command  This message provides control of the flow through the auxiliary valves.
typedef struct
{

  // The command to set the flow through the  extend or retract port of an auxiliary valve of a tractor, expressed as a percentage of full flow.  Zero percent indicates no flow, 100% indicates maximum flow, flow returns to the tractor through the ...
  uint8_t AuxValve15PortFlowCmd;         //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command for setting the auxiliary valve state.  With float enabled, hydraulic fluid may flow to or from the tractor as driven by the implement.    0000 Block  0001 Extend  0010 Retract  0011 Float  0100-1110 Reserved  1111 Don?t Care
  // 15 - "Don?t Care" 
  // 3 - "Float" 
  // 2 - "Retract" 
  // 1 - "Extend" 
  // 0 - "Block" 

  uint8_t AuxValve15StateCmd;            //      Bits=04.  [ 0     , 0      ]  Unit:''     

  // Command for setting the fail safe mode of an auxiliary valve.    00 Block  01 Float  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Float" 
  // 0 - "Block" 

  uint8_t AuxValve15FailSafeModeCmd;     //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} AV15C_t;

// def @LD CAN Message (419315966)
#define LD_IDE (1U)
#define LD_DLC (8U)
#define LD_CANID (0x18FE40FEU)
// -- Lighting Data  This lighting message is a response to the request for lighting data in the lighting command message.  Each lighting controller on the tractor and attached implements must transmit this message to the Tractor ECU when requested.  The ...
typedef struct
{

  // This parameter provides measured data from the vehicle?s running lights.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t RunningLight;                       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor alternate beam head light lamps.     00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t AltBeamHeadLightData;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor low beam head light lamps.     00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t LowBeamHeadLightData;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor high beam head light lamps.     00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t HighBeamHeadLightData;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor front fog lights.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t TractorFrontFogLights;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the beacon light on tractor or attached implements.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t RotatingBeaconLight;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor and attached implement right turn signal lights.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t RightTurnSignalLights;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor and attached implement left turn signal lights.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t LeftTurnSignalLights;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the back up lights and/ or associated alarm.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t BackUpLightAndAlarmHorn;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor and attached implement center stop lights.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t CenterStopLight;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor and attached implement right stop lights.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t RightStopLight;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor and attached implement left stop lights.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t LeftStopLight;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from an attached implement high mounted clearance lights.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t ImplementClearanceLight;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor high mounted clearance and center ID lights.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t TractorClearanceLight;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from an attached implement marker lights, including front position lights, rear tail lights, side running lights, license plate lights and instruments and switch back lights.  00 De-activated  01 Activated  10 ...
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t ImplementMarkerLight;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor and attached implement marker lights, including front position lights, rear tail lights, side running lights, license plate lights and instruments and switch back lights.  00 De-activated  01 ...
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t TractorMarkerLight;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor and/or implement rear fog lights.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t RearFogLights;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor underside mounted work lights.     00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t TrctorUndersideMountedWorkLights;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor rear low mounted work lights.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t TractorRearLowMountedWorkLights;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor rear high mounted work lights.     00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t TractorRearHighMountedWorkLights;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor side low mounted work lights.     00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t TractorSideLowMountedWorkLights;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor side high mounted work lights.     00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t TractorSideHighMountedWorkLights;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor front low mounted work lights.     00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t TractorFrontLowMountedWorkLights;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the tractor front high mounted work lights.     00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t TrctorFrontHighMountedWorkLights;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the implement OEM option 2 light.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t ImplementOEMOption2Light;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the implement OEM option 1 light.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t ImplementOEMOption1Light;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the work lights mounted on an implement to illuminate beyond right end of the implement.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t ImplementRightFacingWorkLight;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the work lights mounted on an implement to illuminate the forward left end of the implement.    00 De-activate  01 Activate  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activate" 
  // 0 - "De-activate" 

  uint8_t ImplementLeftForwardWorkLight;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the forward facing work lights toward the right end of the implement.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t ImplementRightForwardWorkLight;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the left facing work lights toward the left end of the implement.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t ImplementLeftFacingWorkLight;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides measured data from the implement rear work lamps.    00 De-activated  01 Activated  10 Fault Detected  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Fault Detected" 
  // 1 - "Activated" 
  // 0 - "De-activated" 

  uint8_t ImplementRearWorkLight;             //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} LD_t;

// def @HPTOC CAN Message (419316478)
#define HPTOC_IDE (1U)
#define HPTOC_DLC (8U)
#define HPTOC_CANID (0x18FE42FEU)
// -- Hitch and PTO Commands  This message provides control of the hitch position, PTO shaft set point speed and PTO engagement.
typedef struct
{

  // Command to allow the position of the front three-point-hitch to be set.  Expressed as a percentage of full travel.  Zero percent indicates the full down position, and 100%, the full up position.
  uint8_t FrontHitchPosCmd;                   //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // Command to allow the position of the rear three-point-hitch to be set.  Expressed as a percentage of full travel.  Zero percent indicates the full down position, and 100%, the full up position.
  uint8_t RearHitchPosCmd;                    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The command to set the rotational speed of the front power take off (PTO) output shaft.
  uint16_t FrntPTOOtptShaftSpeedSetPointCmd;  //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The command to set the rotational speed of the rear power take off (PTO) output shaft.
  uint16_t RrPTOOutputShaftSpeedSetPointCmd;  //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The command to engage or disengage the rear power take off .    00 Disengage Power take off  01 Engage Power take off   10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Engage Power take off " 
  // 0 - "Disengage Power take off" 

  uint8_t RearPowerTakeOffEngagementCmd;      //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // The command to engage or disengage the front power take off .    00 Disengage Power take off  01 Engage Power take off   10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Engage Power take off " 
  // 0 - "Disengage Power take off" 

  uint8_t FrontPowerTakeOffEngagementCmd;     //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // The command to engage or disengage the rear power take off?s economy mode.    00 Disengage Power take off?s economy mode  01 Engage Power take off?s economy mode  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Engage Power take off?s economy mode" 
  // 0 - "Disengage Power take off?s economy mode" 

  uint8_t RearPowerTakeOffEconomyModeCmd;     //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // The command to engage or disengage the front power take off?s economy mode.    00 Disengage Power take off?s economy mode  01 Engage Power take off?s economy mode  10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Engage Power take off?s economy mode" 
  // 0 - "Disengage Power take off?s economy mode" 

  uint8_t FrontPowerTakeOffEconomyModeCmd;    //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // The command to select the mode of the rear power take off .    00 Select 540 rpm mode  01 Select 1000 rpm mode   10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Select 1000 rpm mode " 
  // 0 - "Select 540 rpm mode" 

  uint8_t RearPowerTakeOffModeCmd;            //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // The command to select the mode of the front power take off .    00 Select 540 rpm mode  01 Select 1000 rpm mode   10 Reserved  11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved" 
  // 1 - "Select 1000 rpm mode " 
  // 0 - "Select 540 rpm mode" 

  uint8_t FrontPowerTakeOffModeCmd;           //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} HPTOC_t;

// def @RPTO CAN Message (419316734)
#define RPTO_IDE (1U)
#define RPTO_DLC (8U)
#define RPTO_CANID (0x18FE43FEU)
// -- Primary or Rear Power Take off Output Shaft  This message provides the measurement of the current primary or rear PTO output shaft parameters.
typedef struct
{

  // The measured rotational speed of the rear power take off (PTO) output shaft. For existing tractors that monitor PTO speed prior to the engagement clutch, the PTO speed would only be valid when PTO is engaged and not available when PTO disengaged.
  uint16_t RearPTOOutputShaftSpeed;          //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured value of the set point of the rotational speed of the rear power take off (PTO) output shaft.
  uint16_t RearPTOOutputShaftSpeedSetPoint;  //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // A measured signal indicating that the rear power take off economy mode is engaged or disengaged. Economy mode PTO operate at 540 or 1000 rpm at a lower engine rpm.  00 Power take off economy mode is disengaged  01 Power take off economy mode is ...
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Power take off economy mode is engaged" 
  // 0 - "Power take off economy mode is disengaged" 

  uint8_t RearPowerTakeOffEconomyMode;       //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // A measured signal indicating that the rear power take off mode is either 540 or 1000 rpm.     00 Power take off mode is 540  01 Power take off mode is 1000  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Power take off mode is 1000" 
  // 0 - "Power take off mode is 540" 

  uint8_t RearPowerTakeOffMode;              //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // A measured signal indicating that the rear power take off is engaged or disengage.    00 Power take off disengaged  01 Power take off engaged  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Power take off engaged" 
  // 0 - "Power take off disengaged" 

  uint8_t RearPowerTakeOffEngagement;        //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Rear PTO cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator override ...
  uint8_t RearPTOExit_reasonCode;            //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} RPTO_t;

// def @FPTO CAN Message (419316990)
#define FPTO_IDE (1U)
#define FPTO_DLC (8U)
#define FPTO_CANID (0x18FE44FEU)
// -- Secondary or Front Power Take off Output Shaft  This message provides the measurement of the current secondary or front PTO output shaft parameters.
typedef struct
{

  // The measured rotational speed of the front power take off (PTO) output shaft. For existing tractors that monitor PTO speed prior to the engagement clutch, the PTO speed would only be valid when PTO is engaged and not available when PTO disengaged.
  uint16_t FrontPTOOutputShaftSpeed;          //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The measured value of the set point of the rotational speed of the front power take off (PTO) output shaft.
  uint16_t FrontPTOOutputShaftSpeedSetPoint;  //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // A measured signal indicating that the front power take off economy mode is engaged or disengaged. Economy mode PTO operate at 540 or 1000 rpm at a lower engine rpm.  00 Power take off economy mode is disengaged  01 Power take off economy mode is ...
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Power take off economy mode is engaged" 
  // 0 - "Power take off economy mode is disengaged" 

  uint8_t FrontPowerTakeOffEconomyMode;       //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // A measured signal indicating that the front power take off mode is either 540 or 1000 rpm.     00 Power take off mode is 540  01 Power take off mode is 1000  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Power take off mode is 1000" 
  // 0 - "Power take off mode is 540" 

  uint8_t FrontPowerTakeOffMode;              //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // A measured signal indicating that the front power take off is engaged or disengage.    00 Power take off disengaged  01 Power take off engaged  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Power take off engaged" 
  // 0 - "Power take off disengaged" 

  uint8_t FrontPowerTakeOffEngagement;        //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Front Hitch cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator ...
  uint8_t FrontHitchExit_reasonCode;          //      Bits=06.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Front PTO cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator override ...
  uint8_t FrontPTOExit_reasonCode;            //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} FPTO_t;

// def @RHS CAN Message (419317246)
#define RHS_IDE (1U)
#define RHS_DLC (8U)
#define RHS_CANID (0x18FE45FEU)
// -- Primary or Rear Hitch Status  This message provides the measurement of the current rear hitch parameters.
typedef struct
{

  // The measured position of the rear three-point-hitch.  Expressed as a percentage of full travel.  Zero percent indicates the full down position, and 100%, the full up position.
  uint8_t RearHitchPos;                  //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // A measured signal indicating that the rear hitch is positioned below (in-work) or above (out-of-work) an adjustable switching threshold.  The method of determining switching threshold is not standardise and will be determined by machine designers.   ...
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Hitch position is in-work" 
  // 0 - "Hitch position is out-of-work " 

  uint8_t RearHitchInworkIndication;     //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This measurement provides an indication of draft at the lower links of the rear three point hitch. Nominal lower link force may be expected to be approximately linear with respect to draft and may be proportional to draft for a single hitch ...
  uint8_t RearNominalLowerLinkForce;     //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The apparent horizontal force applied to the rear hitch by an implement.  A positive value indicates force applied to the tractor opposed to heading.
  uint16_t RearDraft;                    //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // This parameter indicates why the Rear Hitch cannot accept remote commands or has most recently stopped accepting remote commands.  0-No reason/all clear  1-Operator presence not detected  2-Implement released control of function  3-Operator override ...
  uint8_t RearHitchExit_reasonCode;      //      Bits=06.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} RHS_t;

// def @FHS CAN Message (419317502)
#define FHS_IDE (1U)
#define FHS_DLC (8U)
#define FHS_CANID (0x18FE46FEU)
// -- Secondary or Front Hitch Status  This message provides the measurement of the current front hitch parameters.
typedef struct
{

  // The measured position of the front three-point-hitch.  Expressed as a percentage of full travel.  Zero percent indicates the full down position, and 100%, the full up position.
  uint8_t FrontHitchPos;                 //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // A measured signal indicating that the front hitch is positioned below (in-work) or above (out-of-work) an adjustable switching threshold.    00 Hitch position is out-of-work   01 Hitch position is in-work  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Hitch position is in-work" 
  // 0 - "Hitch position is out-of-work " 

  uint8_t FrontHitchInworkIndication;    //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // This measurement provides an indication of draft at the lower links of the front three point hitch. Nominal lower link force may be expected to be approximately linear with respect to draft and may be proportional to draft for a single hitch ...
  uint8_t FrontNominalLowerLinkForce;    //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // The apparent horizontal force applied to the front hitch by an implement.  A positive value indicates force applied to the tractor opposed to heading.
  uint16_t FrontDraft;                   //      Bits=16.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} FHS_t;

// def @MP CAN Message (419317758)
#define MP_IDE (1U)
#define MP_DLC (8U)
#define MP_CANID (0x18FE47FEU)
// -- Maintain Power  This message is sent by any ECU connected to the implement bus requesting that the Tractor ECU not switch off the power for the next 2 seconds.
typedef struct
{

  // Request to the Tractor ECU to maintain PWR power for the next 2 seconds.    00 No Further Requirement for PWR  01 Requirement for 2 more seconds of PWR  10 Reserved   11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved " 
  // 1 - "Requirement for 2 more seconds of PWR" 
  // 0 - "No Further Requirement for PWR" 

  uint8_t MaintainAcuatorPower;          //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // Request to the Tractor ECU to maintain ECU_PWR power for the next 2 seconds.    00 No Further Requirement for ECU_PWR  01 Requirement for 2 more seconds of ECU_PWR  10 Reserved   11 Don?t Care
  // 3 - "Don?t Care" 
  // 2 - "Reserved " 
  // 1 - "Requirement for 2 more seconds of ECU_PWR" 
  // 0 - "No Further Requirement for ECU_PWR" 

  uint8_t MaintainECUPower;              //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // Indicates that an implement is connected to a tractor or power unit and is ?in-work?.    00   Implement is ?out of work?  01   Implement is ?in-work?  10   Error indication  11   Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Implement is ?in-work?" 
  // 0 - "Implement is ?out of work?" 

  uint8_t ImplementInWorkState;          //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // Indicates that an implement is connected to a tractor or power unit and is ready for work    00 Implement is Not ready for field work   01 Implement is ready for field work  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Implement is ready for field work" 
  // 0 - "Implement is Not ready for field work " 

  uint8_t ImplementWorkState;            //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // Indicates the state of an implement where it may be disconnected from a tractor or power unit.    00 Implement may Not be disconnected   01 Implement may be disconnected  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Implement may be disconnected" 
  // 0 - "Implement may Not be disconnected " 

  uint8_t ImplementParkState;            //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // Indicates the transport state of an implement connected to a tractor or power unit.    00 Implement may Not be transported   01 Implement may be transported  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Implement may be transported" 
  // 0 - "Implement may Not be transported " 

  uint8_t ImplementTransportState;       //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} MP_t;

// def @WBSD CAN Message (419318014)
#define WBSD_IDE (1U)
#define WBSD_DLC (8U)
#define WBSD_CANID (0x18FE48FEU)
// -- Wheel-based Speed and Distance  This message is sent by the Tractor ECU on the implement bus on construction and agricultural implements and provides to connected systems, the current measured wheel-based speed.
typedef struct
{

  // A value of the speed of a machine as calculated from the measured wheel or tail shaft speed.
  uint16_t WheelBasedSpeed;              //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The distance travelled by a machine as calculated from wheel or tail shaft speed.  When distance exceeds 4211081,215 m, the value should be reset to zero and incremented as additional distance accrues.
  uint32_t WheelBasedDistance;           //      Bits=32.  [ 0     , 0      ]  Unit:''     

  // The maximum time of remaining tractor or power unit supplied electrical power at the current load.
  uint8_t MaxTimeOfTractorPower;         //      Bits=08.  [ 0     , 0      ]  Unit:''     

  // A measured signal indicating either forward or reverse as the direction of travel.  When speed is zero, indicate the last travel direction until a different direction is detected or selected and engaged.  00 Reverse  01 Forward  10 Error indication   ...
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Forward" 
  // 0 - "Reverse" 

  uint8_t WheelBasedDirection;           //      Bits=02.  [ 0     , 0      ]  Unit:''     

  // Indicates the Key Switch of the tractor or power unit is NOT in the Off position. This does not indicate unforeseen power interruption such as those caused by starting the engine or due to connector intermittents.  00 Key Switch Off  01 Key Switch ...
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Key Switch Not Off" 
  // 0 - "Key Switch Off" 

  uint8_t KeySwitchNOTOFF;               //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} WBSD_t;

// def @GBSD CAN Message (419318270)
#define GBSD_IDE (1U)
#define GBSD_DLC (8U)
#define GBSD_CANID (0x18FE49FEU)
// -- Ground-based Speed and Distance  This message is normally sent by the Tractor ECU on the implement bus on construction and agricultural implements and provides to connected systems, the current measured ground speed.
typedef struct
{

  // Actual ground speed of a machine, measured by a sensor such as RADAR.
  uint16_t GroundBasedImplementSpeed;     //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // Actual distance travelled by a machine based on measurements from a sensor such as RADAR.  When distance exceeds 4 211 081.215 m, the value should be reset to zero and incremented as additional distance accrues.
  uint32_t GroundBasedImplementDistance;  //      Bits=32.  [ 0     , 0      ]  Unit:''     

  // A measured signal indicating either forward or reverse as the direction of travel.  When speed is zero, indicate the last travel direction until a different direction is detected.    00 Reverse  01 Forward  10 Error indication  11 Not available
  // 3 - "Not available" 
  // 2 - "Error indication" 
  // 1 - "Forward" 
  // 0 - "Reverse" 

  uint8_t GroundBasedDirection;           //      Bits=02.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} GBSD_t;

// def @ETC7 CAN Message (419318526)
#define ETC7_IDE (1U)
#define ETC7_DLC (8U)
#define ETC7_CANID (0x18FE4AFEU)
#define ETC7_CYC (100U)
// -- Electronic Transmission Controller 7  Transmission status information from the transmission controller to network.
// signal: @TransRequestedGearFeedback
#define TransRequestedGearFeedback_CovFactor 1
#define TransRequestedGearFeedback_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // State signal indicating a transmission request for the display of the Transmission Current Range parameter (SPN 163) to be blanked or not blanked.  The 'Transmission Current Range Display Blank State' indicator can be utilized by (but not limited ...
  uint8_t TrnsCrrentRangeDisplayBlankState;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal from transmission indicating that some aspect of the gearbox requires servicing, such as the oil, filter, clutch(es) or other component.  00  Transmission Service Indicator is off  01  Transmission Service Indicator is on continuously  10 ...
  // 3 - "Not available" 
  // 2 - "Transmission Service Indicator is flashing" 
  // 1 - "Transmission Service Indicator is on continuously" 
  // 0 - "Transmission Service Indicator is off" 

  uint8_t TransServiceIndicator;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal indicating a transmission request for the display of the Transmission Requested Range parameter (SPN162) to be blanked or not blanked.  The ?Transmission Requested Range Display Blank State? indicator can be utilized by (but not limited ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Active" 
  // 0 - "Inactive" 

  uint8_t TrnsRqstedRangeDisplayBlankState;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal indicating a transmission request for the display of the Transmission Requested Range parameter (SPN 162) to flash or not to flash. The ?Transmission Requested Range Display Flash State? indicator can be utilized by (but not limited to) ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Active" 
  // 0 - "Inactive" 

  uint8_t TrnsRqstedRangeDisplayFlashState;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter indicates that enough torque / motive force is available at the transmission output shaft to release all the brakes without a risk of unintentional movement in the opposite direction.  00 - Transmission Not Ready for Brake Release  01 ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Transmission Ready for Brake Release" 
  // 0 - "Transmission Not Ready for Brake Release" 

  uint8_t TransReadyForBrakeRelease;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal from transmission control unit indicating which shift console (primary or secondary) it currently considers as the active shift selector input.  00        Primary shift console is active  01        Secondary shift console is active  10 ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Secondary shift console is active" 
  // 0 - "Primary shift console is active" 

  uint8_t ActiveShiftConsoleIndicator;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal from the transmission indicating if the transmission?s status is such that engine cranking is allowed (i.e.  at a minimum, transmission is in neutral and the driveline is disengaged).  As sender of this information, the transmission is ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Cranking enabled" 
  // 0 - "Cranking disabled" 

  uint8_t TransEngCrankEnable;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal indicating a transmission request for the Shift Inhibit Indicator to be active or inactive. The shift inhibit indicator can be of lamp or text form, located on (but not limited to) the shift console, instrument cluster, or cab display ...
  // 3 - "Take no action" 
  // 2 - "Active, flashing)" 
  // 1 - "Active, on continuously)" 
  // 0 - "Inactive" 

  uint8_t TransShiftInhibitIndicator;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This state signal is the transmission?s indication that it is operating under transmission mode 4 (SPN 1855) as commanded via the TC1 message (PGN 256).  The definition of the transmission mode is left to the discretion of the transmission ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Transmission Mode 4 Active" 
  // 0 - "Transmission Mode 4 not active" 

  uint8_t TransMode4Indicator;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This state signal is the transmission?s indication that it is operating under transmission mode 3 (SPN 1854) as commanded via the TC1 message (PGN 256).  The definition of the transmission mode is left to the discretion of the transmission ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Transmission Mode 3 Active" 
  // 0 - "Transmission Mode 3 not active" 

  uint8_t TransMode3Indicator;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This state signal is the transmission?s indication that it is operating under transmission mode 2 (SPN 1853) as commanded via the TC1 message (PGN 256).  The definition of the transmission mode is left to the discretion of the transmission ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Transmission Mode 2 Active" 
  // 0 - "Transmission Mode 2 not active" 

  uint8_t TransMode2Indicator;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This state signal is the transmission?s indication that it is operating under transmission mode 1 (SPN 1852) as commanded via the TC1 message (PGN 256).  The definition of the transmission mode is left to the discretion of the transmission ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Transmission Mode 1 Active" 
  // 0 - "Transmission Mode 1 not active" 

  uint8_t TransMode1Indicator;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Feedback of the SPN 525 Transmission Requested Gear input as received from the shift selector, ABS or engine via PGN 256, Transmission Control 1 (TC1) or other transmission selector input.  Scaling, values and parameter specific indicators are ...
  int16_t TransRequestedGearFeedback;         //      Bits=08.  [ -125  , 125    ]  Unit:''      Offset= -125     

  // This state signal is the transmission?s indication that it is operating under transmission mode 5 (SPN 4246) as commanded via the TC1 message (PGN 256).  The definition of the transmission mode is left to the discretion of the transmission ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Transmission Mode 5 active" 
  // 0 - "Transmission Mode 5 not active" 

  uint8_t TransMode5Indicator;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This state signal is the transmission?s indication that it is operating under transmission mode 6 (SPN 4247) as commanded via the TC1 message (PGN 256).  The definition of the transmission mode is left to the discretion of the transmission ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Transmission Mode 6 active" 
  // 0 - "Transmission Mode 6 not active" 

  uint8_t TransMode6Indicator;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This state signal is the transmission?s indication that it is operating under transmission mode 7 (SPN 4248) as commanded via the TC1 message (PGN 256).  The definition of the transmission mode is left to the discretion of the transmission ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Transmission Mode 7 active" 
  // 0 - "Transmission Mode 7 not active" 

  uint8_t TransMode7Indicator;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This state signal is the transmission?s indication that it is operating under transmission mode 8 (SPN 4249) as commanded via the TC1 message (PGN 256).  The definition of the transmission mode is left to the discretion of the transmission ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Transmission Mode 8 active" 
  // 0 - "Transmission Mode 8 not active" 

  uint8_t TransMode8Indicator;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reflects the status of transmission reverse inhibit activity in response to requests via SPN 4242 - Transmission Reverse Gear Shift Inhibit Request.  Typically broadcast by the transmission controller.  00 = Reverse gear shifts are currently allowed   ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Reverse gear shifts are currently inhibited" 
  // 0 - "Reverse gear shifts are currently allowed" 

  uint8_t TrnsRverseGearShiftInhibitStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal from transmission indicating that some aspect of its operation is not functioning correctly, and as a result, transmission operation may be altered or restricted.  The indicator is typically a lamp.  Distinctions in meaning between the ...
  // 3 - "Not available" 
  // 2 - "Transmission Warning Indicator is flashing" 
  // 1 - "Transmission Warning Indicator is on continuously" 
  // 0 - "Transmission Warning Indicator is off" 

  uint8_t TransWarningIndicator;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the transmission is operating under transmission mode 9 (SPN 6569) as commanded via the TC2 message (PGN 3328). The definition of the transmission mode is left to the discretion of the transmission manufacturer.  00 Transmission Mode ...
  // 3 - "Not available" 
  // 2 - "Error indicator" 
  // 1 - "Transmission Mode 9 active" 
  // 0 - "Transmission Mode 9 not active" 

  uint8_t TransMode9Indicator;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the transmission is operating under transmission mode 10 (SPN 6570) as commanded via the TC2 message (PGN 3328). The definition of the transmission mode is left to the discretion of the transmission manufacturer.  00 Transmission Mode ...
  // 3 - "Not available" 
  // 2 - "Error indicator" 
  // 1 - "Transmission Mode 10 active" 
  // 0 - "Transmission Mode 10 not active" 

  uint8_t TransMode10Indicator;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether transmission air supply is sufficient  000   Normal Pressure Range - The transmission supply air pressure is within the normal operational range.  001   Low pressure - The transmission supply air pressure is within a range that may ...
  // 7 - "Not available" 
  // 6 - "Error indicator" 
  // 5 - "Not defined" 
  // 4 - "Over pressure" 
  // 3 - "No pressure" 
  // 2 - "Very low pressure" 
  // 1 - "Low pressure" 
  // 0 - "Normal Pressure Range" 

  uint8_t TransAirSupplyPressIndicator;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the transmission response to a Neutral request from SPN 7695 [Transmission Auto-Neutral (Manual Return) Request] or other vehicle input configured for Auto-Neutral (Manual Return) functionality. The applicability of the states and state ...
  // 5 - "Reserved" 
  // 4 - "Auto-Neutral request received,  shift to Auto-Neutral state is inhibited." 
  // 3 - "Auto-Neutral request received,  shift to Auto-Neutral state has been achieved." 
  // 2 - "Auto-Neutral request received,  shift to Auto-Neutral state is pending." 
  // 7 - "Not Available" 
  // 6 - "Error" 
  // 1 - "No request received,  conditions are such that an Auto-Neutral request would NOT be honored." 
  // 0 - "No request received,  conditions are such that an Auto-Neutral request would be honored." 

  uint8_t TransAutoNeutralSt;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} ETC7_t;

// def @TCFG2 CAN Message (419318782)
#define TCFG2_IDE (1U)
#define TCFG2_DLC (8U)
#define TCFG2_CANID (0x18FE4BFEU)
#define TCFG2_CYC (5000U)
// -- Transmission Configuration 2  Contains transmission configuration information.
typedef struct
{

  // Parameter provided to the engine from the transmission as a torque limit to be invoked by the engine in the event that J1939 communication with the transmission is lost.  The intention is to protect transmissions that use a continuous torque limit ...
  uint16_t TransTorqueLimit;             //      Bits=16.  [ 0     , 64255  ]  Unit:'Nm'   
  uint32_t framecnt;
} TCFG2_t;

// def @ML CAN Message (419319038)
#define ML_IDE (1U)
#define ML_DLC (8U)
#define ML_CANID (0x18FE4CFEU)
#define ML_CYC (500U)
// -- Military Lighting Command  The message contains parameters that control military specific lights.
// signal: @OprtrsBlackOutIntensitySelection
#define OprtrsBlackOutIntensitySelection_CovFactor 0.4
#define OprtrsBlackOutIntensitySelection_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Rear Black Out Marker Selection    00 Off  01 On  10 Reserved  11 Not Supported
  // 3 - "Not Supported" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t RearBlackOutMarkerSelect;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Front Black Out Marker Lamp Selection    00 Off  01 On  10 Reserved  11 Not Supported
  // 3 - "Not Supported" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t FrontBlackOutMarkerLampSelect;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Black Out Convoy Lamp Selection    00 Off  01 On  10 Reserved  11 Not Supported
  // 3 - "Not Supported" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t ConvoyLampSelect;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Black Out Convoy Driving Lamp Selection    00 Off  01 On  10 Reserved  11 Not Supported
  // 3 - "Not Supported" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t ConvoyDrivingLampSelect;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Black Out Brake/Stop Lamp Selection    00 Off  01 On  10 Reserved  11 Not Supported
  // 3 - "Not Supported" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t BlackOutBrake_StopLampSelect;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Night Vision Illuminator Selection    00 Off  01 On  10 Reserved  11 Not Supported
  // 3 - "Not Supported" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t NightVisionIlluminatorSelect;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Black Out Work Lamp Selection    00 Off  01 On  10 Reserved  11 Not Supported
  // 3 - "Not Supported" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t BlackOutWorkLampSelect;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Operators Selection of lamp intensity in black out mode.  This parameter provides the operators selected illumination intensity as a percentage of available full scale.  This parameter would be typically used as a dash or instrument cluster ...
  uint8_t OprtrsBlackOutIntensitySelection;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} ML_t;

// def @DC1 CAN Message (419319550)
#define DC1_IDE (1U)
#define DC1_DLC (8U)
#define DC1_CANID (0x18FE4EFEU)
#define DC1_CYC (100U)
// -- Door Control 1  Used for door information.
typedef struct
{

  // Signal which indicates the actual position of the doors.    0000 At least 1 door is open  0001 Closing last door  0010 All doors closed  0011-1101 Not defined  1110 Error  1111 Not available
  // 15 - "Not available" 
  // 14 - "Error" 
  // 2 - "All doors closed" 
  // 1 - "Closing last door" 
  // 0 - "At least 1 door is open" 

  uint8_t PosOfDoors;                    //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Signal which indicates the actual position of the ramp / wheel chair lift.    00 Inside bus  01 Outside bus  10 Error  11 Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Outside bus" 
  // 0 - "Inside bus" 

  uint8_t Ramp_WheelChairLiftPos;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Composite indication of all bus door statuses. Enabled means the bus doors are able to be automatically opened or closed.    00   all bus doors are disabled  01   at least 1 bus door enabled   10   error  11   not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "at least 1 bus door enabled " 
  // 0 - "all bus doors are disabled" 

  uint8_t Status2OfDoors;                //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} DC1_t;

// def @VDC1 CAN Message (419319806)
#define VDC1_IDE (1U)
#define VDC1_DLC (8U)
#define VDC1_CANID (0x18FE4FFEU)
#define VDC1_CYC (100U)
// -- Vehicle Dynamic Stability Control 1  Contains information which relates to the VDC system status.
typedef struct
{

  // This parameter commands the VDC information signal, for example a dash lamp.    00 Off  01 On  10 Reserved  11 Don't care/Take no action
  // 3 - "Don't care/Take no action" 
  // 2 - "Reserved" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t VDCInformationSignal;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal that indicates whether VDC is fully operational or whether its functionality is reduced by a permanent or temporary (e.g. low voltage) defect, by intended action (e.g. disabled by a switch or during special diagnostic procedures), not ...
  // 3 - "Don't care/Take no action" 
  // 2 - "Reserved" 
  // 1 - "Fully operational" 
  // 0 - "Not fully operational" 

  uint8_t VDCFullyOperational;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether VDC requests to turn the vehicle brake lights on    00 Turn brake light not on  01 Turn brake light on  10 Reserved  11 Don't care/Take no action
  // 3 - "Don't care/Take no action" 
  // 2 - "Reserved" 
  // 1 - "Turn brake light on" 
  // 0 - "Turn brake light not on" 

  uint8_t VDCBrakeLightRq;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State Signal which indicates that the Roll Over Prevention (ROP) has commanded engine control to be active. Within the physical limits, ROP attempts to prevent rolling over of the vehicle. Active means that ROP actually tries to control the engine ...
  // 3 - "Don't care/Take no action" 
  // 2 - "Reserved" 
  // 1 - "ROP engine control active" 
  // 0 - "ROP engine control passive but installed" 

  uint8_t ROPEngCtrlActive;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates that Roll over Prevention (ROP) has activated brake control. Active means that ROP actually controls wheel brake pressure at one or more wheels of the vehicle or vehicle combination. Within the physical limits, ROP ...
  // 3 - "Don't care/Take no action" 
  // 2 - "Reserved" 
  // 1 - "ROP brake control active" 
  // 0 - "ROP brake control passive but installed" 

  uint8_t ROPBrakeCtrlActive;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State Signal which indicates that the Yaw Control (YC) has commanded engine control to be active. Within the physical limits, YC attempts to prevent yawing of the vehicle. Active means that YC actually tries to control the engine. This state signal ...
  // 3 - "Don't care/Take no action" 
  // 2 - "Reserved" 
  // 1 - "YC engine control active" 
  // 0 - "YC engine control passive but installed" 

  uint8_t YCEngCtrlActive;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates that Yaw Control (YC) has activated brake control. Active means that YC actually controls wheel brake pressure at one or more wheels of the vehicle or vehicle combination. Within the physical limits, YC attempts to ...
  // 3 - "Don't care/Take no action" 
  // 2 - "Reserved" 
  // 1 - "YC brake control active" 
  // 0 - "YC brake control passive but installed" 

  uint8_t YCBrakeCtrlActive;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The trailer-VDC (Vehicle Dynamic Control) is an electronic vehicle stability function within the (semi) trailer braking system. It acts to stabilize the (semi) trailer during dynamic maneuvers. VDC includes Roll Over Prevention (ROP) and/or Yaw ...
  // 3 - "Not availble or not installed" 
  // 2 - "Reserved" 
  // 1 - "VDC active" 
  // 0 - "VDC passive" 

  uint8_t TrailerVDCActive;              //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} VDC1_t;

// def @BT1 CAN Message (419320062)
#define BT1_IDE (1U)
#define BT1_DLC (8U)
#define BT1_CANID (0x18FE50FEU)
#define BT1_CYC (1000U)
// -- Battery Temperature  Contains battery temperature information.
// signal: @Battery1Temp
#define Battery1Temp_CovFactor 1
#define Battery1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @Battery2Temp
#define Battery2Temp_CovFactor 1
#define Battery2Temp_CovS(x) ((int16_t)(x + 40))
// signal: @SLIBattery3Temp
#define SLIBattery3Temp_CovFactor 1
#define SLIBattery3Temp_CovS(x) ((int16_t)(x + 40))
// signal: @SLIBattery4Temp
#define SLIBattery4Temp_CovFactor 1
#define SLIBattery4Temp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Temperature of the battery 1 used for starting the engine, for lighting, and for ignition (SLI).     The relation to physical location is determined by the equipment manufacturer.
  int16_t Battery1Temp;                  //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of the battery 2 used for starting the engine, for lighting, and for ignition (SLI).     The relation to physical location is determined by the equipment manufacturer.
  int16_t Battery2Temp;                  //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of the battery 3 used for starting the engine, for lighting, and for ignition (SLI).     The relation to physical location is determined by the equipment manufacturer.
  int16_t SLIBattery3Temp;               //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of the battery 4 used for starting the engine, for lighting, and for ignition (SLI).     The relation to physical location is determined by the equipment manufacturer.
  int16_t SLIBattery4Temp;               //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} BT1_t;

// def @ACC2 CAN Message (419320318)
#define ACC2_IDE (1U)
#define ACC2_DLC (8U)
#define ACC2_CANID (0x18FE51FEU)
#define ACC2_CYC (250U)
// -- Adaptive Cruise Control, Operator Input  The operator requested characteristics for the ACC systems operation.
typedef struct
{

  // This parameter indicates the drivers demand to activate or deactivate ACC keeping distance control.    00 driver demand for not using ACC distance keeping control  01 driver demand for using ACC distance keeping control  10 reserved  11 don't care
  // 3 - "don't care" 
  // 2 - "reserved" 
  // 1 - "driver demand for using ACC distance keeping control" 
  // 0 - "driver demand for not using ACC distance keeping control" 

  uint8_t ACCUsageDemand;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The Requested Distance Control Mode to the ACC system from the operators interface.  The ACC Set Distance Mode (SPN 1589) indicates the selected Distance Control Mode for the ACC system. This parameter is the driver requested setting for this.  000 ...
  // 7 - "not available" 
  // 6 - "error condition" 
  // 5 - "not defined" 
  // 4 - "Requested ACC Distance Mode #5" 
  // 3 - "Requested ACC Distance Mode #4" 
  // 2 - "Requested ACC Distance Mode #3" 
  // 1 - "Requested ACC Distance Mode #2" 
  // 0 - "Requested ACC Distance Mode #1" 

  uint8_t RequestedACCDistanceMode;      //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} ACC2_t;

// def @RTC1 CAN Message (419320830)
#define RTC1_IDE (1U)
#define RTC1_DLC (8U)
#define RTC1_CANID (0x18FE53FEU)
#define RTC1_CYC (5000U)
// -- Retarder Continuous Torque & Speed Limit
// signal: @LwLmtThrshldFrMaxRPMFromRetarder
#define LwLmtThrshldFrMaxRPMFromRetarder_CovFactor 32
#define LwLmtThrshldFrMaxRPMFromRetarder_CovS(x) ((uint8_t)((x / 32)))
// signal: @HghLmtThrshldFrMnCntnsRPMFrmRtrd
#define HghLmtThrshldFrMnCntnsRPMFrmRtrd_CovFactor 32
#define HghLmtThrshldFrMnCntnsRPMFrmRtrd_CovS(x) ((uint8_t)((x / 32)))
// signal: @LwLmtThrshldFrMxTrqeFromRetarder
#define LwLmtThrshldFrMxTrqeFromRetarder_CovFactor 1
#define LwLmtThrshldFrMxTrqeFromRetarder_CovS(x) ((int16_t)(x + 125))
// signal: @HghLmtThrshldFrMnCntnsTrqFrmRtrd
#define HghLmtThrshldFrMnCntnsTrqFrmRtrd_CovFactor 1
#define HghLmtThrshldFrMnCntnsTrqFrmRtrd_CovS(x) ((int16_t)(x + 125))
// signal: @MaxContinuousRetarderSpeed
#define MaxContinuousRetarderSpeed_CovFactor 32
#define MaxContinuousRetarderSpeed_CovS(x) ((uint8_t)((x / 32)))
// signal: @MinContinuousRetarderSpeed
#define MinContinuousRetarderSpeed_CovFactor 32
#define MinContinuousRetarderSpeed_CovS(x) ((uint8_t)((x / 32)))
// signal: @MaxContinuousRetarderTorque
#define MaxContinuousRetarderTorque_CovFactor 1
#define MaxContinuousRetarderTorque_CovS(x) ((int16_t)(x + 125))
// signal: @MinContinuousRetarderTorque
#define MinContinuousRetarderTorque_CovFactor 1
#define MinContinuousRetarderTorque_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // Minimum allowable value for maximum continuous retarder speed
  uint8_t LwLmtThrshldFrMaxRPMFromRetarder;   //      Bits=08.  [ 0     , 8000   ]  Unit:'rpm'   Factor= 32    

  // Maximum allowable value for minimum continuous retarder speed
  uint8_t HghLmtThrshldFrMnCntnsRPMFrmRtrd;   //      Bits=08.  [ 0     , 8000   ]  Unit:'rpm'   Factor= 32    

  // Minimum allowable value for maximum continuous retarder torque.
  int16_t LwLmtThrshldFrMxTrqeFromRetarder;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // Maximum allowable value for minimum continuous retarder torque.
  int16_t HghLmtThrshldFrMnCntnsTrqFrmRtrd;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // Applied limit for maximum continuous retarder RPM
  uint8_t MaxContinuousRetarderSpeed;         //      Bits=08.  [ 0     , 8000   ]  Unit:'rpm'   Factor= 32    

  // Applied limit for minimum continuous retarder RPM
  uint8_t MinContinuousRetarderSpeed;         //      Bits=08.  [ 0     , 8000   ]  Unit:'rpm'   Factor= 32    

  // Applied limit for maximum continuous retarder torque.
  int16_t MaxContinuousRetarderTorque;        //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // Applied limit for minimum continuous retarder torque
  int16_t MinContinuousRetarderTorque;        //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     
  uint32_t framecnt;
} RTC1_t;

// def @ECT1 CAN Message (419321086)
#define ECT1_IDE (1U)
#define ECT1_DLC (8U)
#define ECT1_CANID (0x18FE54FEU)
#define ECT1_CYC (5000U)
// -- Engine Continuous Torque & Speed Limit
// signal: @EngLwLmtThrsholdForMaxRPMFromEng
#define EngLwLmtThrsholdForMaxRPMFromEng_CovFactor 32
#define EngLwLmtThrsholdForMaxRPMFromEng_CovS(x) ((uint8_t)((x / 32)))
// signal: @EngHghLmtThrshldFrMnCntnusEngRPM
#define EngHghLmtThrshldFrMnCntnusEngRPM_CovFactor 32
#define EngHghLmtThrshldFrMnCntnusEngRPM_CovS(x) ((uint8_t)((x / 32)))
// signal: @EngLwLmtThrshldFrMxTorqueFromEng
#define EngLwLmtThrshldFrMxTorqueFromEng_CovFactor 1
#define EngLwLmtThrshldFrMxTorqueFromEng_CovS(x) ((int16_t)(x + 125))
// signal: @EngHghLmtThrshldFrMnCntnsTrqFrmE
#define EngHghLmtThrshldFrMnCntnsTrqFrmE_CovFactor 1
#define EngHghLmtThrshldFrMnCntnsTrqFrmE_CovS(x) ((int16_t)(x + 125))
// signal: @EngMaxContinuousRPM
#define EngMaxContinuousRPM_CovFactor 32
#define EngMaxContinuousRPM_CovS(x) ((uint8_t)((x / 32)))
// signal: @EngMinContinuousRPM
#define EngMinContinuousRPM_CovFactor 32
#define EngMinContinuousRPM_CovS(x) ((uint8_t)((x / 32)))
// signal: @EngMaxContinuousTorque
#define EngMaxContinuousTorque_CovFactor 1
#define EngMaxContinuousTorque_CovS(x) ((int16_t)(x + 125))
// signal: @EngMinContinuousTorque
#define EngMinContinuousTorque_CovFactor 1
#define EngMinContinuousTorque_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // Minimum allowable value for maximum continuous RPM from engine
  uint8_t EngLwLmtThrsholdForMaxRPMFromEng;   //      Bits=08.  [ 0     , 8000   ]  Unit:'rpm'   Factor= 32    

  // Maximum allowable value for minimum continuous RPM from engine
  uint8_t EngHghLmtThrshldFrMnCntnusEngRPM;   //      Bits=08.  [ 0     , 8000   ]  Unit:'rpm'   Factor= 32    

  // Minimum allowable value for maximum continuous torque from engine
  int16_t EngLwLmtThrshldFrMxTorqueFromEng;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // Maximum allowable value for minimum continuous torque from engine
  int16_t EngHghLmtThrshldFrMnCntnsTrqFrmE;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // Applied limit for maximum continuous engine RPM
  uint8_t EngMaxContinuousRPM;                //      Bits=08.  [ 0     , 8000   ]  Unit:'rpm'   Factor= 32    

  // Applied limit for minimum continuous engine RPM
  uint8_t EngMinContinuousRPM;                //      Bits=08.  [ 0     , 8000   ]  Unit:'rpm'   Factor= 32    

  // Applied limit for maximum continuous engine torque.
  int16_t EngMaxContinuousTorque;             //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // Applied limit for minimum continuous engine torque
  int16_t EngMinContinuousTorque;             //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     
  uint32_t framecnt;
} ECT1_t;

// def @GFD CAN Message (419321342)
#define GFD_IDE (1U)
#define GFD_DLC (8U)
#define GFD_CANID (0x18FE55FEU)
// -- Gaseous Fuel Properties
// signal: @SpecificHeatRatio
#define SpecificHeatRatio_CovFactor 0.001
#define SpecificHeatRatio_CovS(x) ((uint16_t)((x / 0.001)))
// signal: @ReferenceEngGasMassFlowRate
#define ReferenceEngGasMassFlowRate_CovFactor 0.05
#define ReferenceEngGasMassFlowRate_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @FuelEnergyContent
#define FuelEnergyContent_CovFactor 0.00390625
#define FuelEnergyContent_CovS(x) ((uint16_t)((x / 0.00390625)))
typedef struct
{

  // The specific heat ratio of the fuel.
  uint16_t SpecificHeatRatio;            //      Bits=16.  [ 0     , 2      ]  Unit:''      Factor= 0.001 

  // Configuration of the mass flow rate of gaseous fuel expected for 100% engine fuel valve control command.  Note:  The actuator will request this parameter from the ECU in order to determine what mass fuel flow to associate with a command of 100% from ...
  uint16_t ReferenceEngGasMassFlowRate;  //      Bits=16.  [ 0     , 3212.75 ]  Unit:'kg/h'  Factor= 0.05  

  // Energy content (lower heating value) of the gaseous fuel.  Note:  For gaseous fuels, the fuel's energy content (lower heating value) is commonly defined in terms of energy / volume. The gas volume is defined for regular pressure and temperature ...
  uint16_t FuelEnergyContent;            //      Bits=16.  [ 0     , 250.996 ]  Unit:'MJ/Nm?' Factor= 0.00390625
  uint32_t framecnt;
} GFD_t;

// def @AT1T1I1 CAN Message (419321598)
#define AT1T1I1_IDE (1U)
#define AT1T1I1_DLC (8U)
#define AT1T1I1_CANID (0x18FE56FEU)
#define AT1T1I1_CYC (1000U)
// -- Aftertreatment 1 Diesel Exhaust Fluid Tank 1 Information 1  Contains information on various tank levels
// signal: @Volume
#define Volume_CovFactor 0.4
#define Volume_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @Temp1
#define Temp1_CovFactor 1
#define Temp1_CovS(x) ((int16_t)(x + 40))
// signal: @Lvl
#define Lvl_CovFactor 0.1
#define Lvl_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @Htr
#define Htr_CovFactor 0.4
#define Htr_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Ratio of volume of diesel exhaust fluid to the total volume of diesel exhaust fluid storage container for aftertreatment system 1 (exhaust bank 1).  0% is empty and 100% is full.  See SPN 3517 and SPN 7530 for alternate measurements.  Parameter ...
  uint8_t Volume;                        //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Temperature of the diesel exhaust fluid in the storage tank.
  int16_t Temp1;                         //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The diesel exhaust fluid level height in mm in the diesel exhaust fluid storage container for aftertreatment system 1 (exhaust bank 1).  See SPN 1761 and SPN 7530 for alternate measurements.  Parameter Specific Indicator:  A value of 0xFB indicates ...
  uint16_t Lvl;                          //      Bits=16.  [ 0     , 6425.5 ]  Unit:'mm'    Factor= 0.1   

  // Used to identify the applicable J1939-73 FMI detected in the diesel exhaust fluid tank level sensor by the manufacturer's sensor control software.  This FMI is applicable to either the diesel exhaust fluid tank level or diesel exhaust fluid tank ...
  uint8_t LvlVolPreliminaryFMI;          //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // The desired illumination of the driver's warning indicator for diesel exhaust fluid (DEF) tank low level.  000 - Off -  indicates adequate DEF level  e.g., for Euro VI this is used to indicate the driver warning system is non-active for diesel ...
  // 7 - "not available" 
  // 6 - "reserved for SAE assignment" 
  // 5 - "reserved for SAE assignment" 
  // 4 - "On fast blink" 
  // 3 - "reserved for SAE assignment" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "On solid" 
  // 0 - "Off" 

  uint8_t DEFTankLowLvlInd;              //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Used to identify the applicable J1939-73 FMI detected for the diesel exhaust fluid tank temperature for aftertreatment system 1 (exhaust bank 1), as detected by the manufacturer?s control software. When there is no failure, FMI 31 is sent. In the ...
  uint8_t TempPreliminaryFMI;            //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Severity status of the operator inducement system for anomalies with the SCR system, such as tampering, low DEF quality, and DEF tank level.  Higher numerical levels indicate more severe levels of inducement.  Level 1 is the least severe.  000 - ...
  // 7 - "Not Available / Not Supported" 
  // 6 - "Temporary Override of Inducement " 
  // 5 - "Inducement Level 5  .." 
  // 4 - "Inducement Level 4  .." 
  // 3 - "Inducement Level 3 ? EPA defined SCR Inducement" 
  // 2 - "Inducement Level 2 ? DEF Warning" 
  // 1 - "Inducement Level 1 ? EPA defined SCR Inducement" 
  // 0 - "Driver Warning" 

  uint8_t SCROpIndSev;                   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Percentage of heating applied to the aftertreatment 1 diesel exhaust fluid tank heater.  A value of 0% means no heating applied, a value of 100% means full heating applied.  The diesel exhaust fluid tank heater warms the diesel exhaust fluid in the ...
  uint8_t Htr;                           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Used to identify the applicable J1939-73 FMI detected for the heater of the diesel exhaust fluid tank for aftertreatment system 1 (exhaust bank 1), as detected by the manufacturer's control software.  When there is no failure, FMI 31 is sent. In the ...
  uint8_t HtrPreliminaryFMI;             //      Bits=05.  [ 0     , 31     ]  Unit:''     
  uint32_t framecnt;
} AT1T1I1_t;

// def @ASC4 CAN Message (419322110)
#define ASC4_IDE (1U)
#define ASC4_DLC (8U)
#define ASC4_CANID (0x18FE58FEU)
#define ASC4_CYC (100U)
// -- Air Suspension Control 4  Used for bellow pressure information
// signal: @BellowPressFrontAxleLeft
#define BellowPressFrontAxleLeft_CovFactor 0.1
#define BellowPressFrontAxleLeft_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @BellowPressFrontAxleRight
#define BellowPressFrontAxleRight_CovFactor 0.1
#define BellowPressFrontAxleRight_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @BellowPressRearAxleLeft
#define BellowPressRearAxleLeft_CovFactor 0.1
#define BellowPressRearAxleLeft_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @BellowPressRearAxleRight
#define BellowPressRearAxleRight_CovFactor 0.1
#define BellowPressRearAxleRight_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Information of the pressure of the air suspension bellow at the left side of the front axle
  uint16_t BellowPressFrontAxleLeft;     //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Information of the pressure of the air suspension bellow at the right side of the front axle
  uint16_t BellowPressFrontAxleRight;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Information of the pressure of the air suspension bellow at the left side of the rear axle
  uint16_t BellowPressRearAxleLeft;      //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Information of the pressure of the air suspension bellow at the right side of the rear axle
  uint16_t BellowPressRearAxleRight;     //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} ASC4_t;

// def @ASC3 CAN Message (419322366)
#define ASC3_IDE (1U)
#define ASC3_DLC (8U)
#define ASC3_CANID (0x18FE59FEU)
#define ASC3_CYC (100U)
// -- Air Suspension Control 3  Used for height information
// signal: @RelativeLevelFrontAxleLeft
#define RelativeLevelFrontAxleLeft_CovFactor 0.1
#define RelativeLevelFrontAxleLeft_CovS(x) ((int32_t)((x / 0.1) + 32000))
// signal: @RelativeLevelFrontAxleRight
#define RelativeLevelFrontAxleRight_CovFactor 0.1
#define RelativeLevelFrontAxleRight_CovS(x) ((int32_t)((x / 0.1) + 32000))
// signal: @RelativeLevelRearAxleLeft
#define RelativeLevelRearAxleLeft_CovFactor 0.1
#define RelativeLevelRearAxleLeft_CovS(x) ((int32_t)((x / 0.1) + 32000))
// signal: @RelativeLevelRearAxleRight
#define RelativeLevelRearAxleRight_CovFactor 0.1
#define RelativeLevelRearAxleRight_CovS(x) ((int32_t)((x / 0.1) + 32000))
typedef struct
{

  // Information of the height at the left side of the front axle referred to normal level 1.  For explanations of normal level 1 see SPN 1734 - Nominal Level Front Axle.
  int32_t RelativeLevelFrontAxleLeft;    //      Bits=16.  [ -3200 , 3225.5 ]  Unit:'mm'    Offset= -3200     Factor= 0.1   

  // Information of the height at the right side of the front axle referred to normal level 1.  For explanations of normal level 1 see SPN 1734 - Nominal Level Front Axle.
  int32_t RelativeLevelFrontAxleRight;   //      Bits=16.  [ -3200 , 3225.5 ]  Unit:'mm'    Offset= -3200     Factor= 0.1   

  // Information of the height at the left side of the rear axle referred to normal level 1.  For explanations of normal level 1 see parameter SPN 1734 - Nominal Level Front Axle.
  int32_t RelativeLevelRearAxleLeft;     //      Bits=16.  [ -3200 , 3225.5 ]  Unit:'mm'    Offset= -3200     Factor= 0.1   

  // Information of the height at the left side of the rear axle referred to normal level 1.  For explanations of normal level 1 see parameter SPN 1734 - Nominal Level Front Axle.
  int32_t RelativeLevelRearAxleRight;    //      Bits=16.  [ -3200 , 3225.5 ]  Unit:'mm'    Offset= -3200     Factor= 0.1   
  uint32_t framecnt;
} ASC3_t;

// def @FLI2 CAN Message (419322878)
#define FLI2_IDE (1U)
#define FLI2_DLC (8U)
#define FLI2_CANID (0x18FE5BFEU)
#define FLI2_CYC (100U)
// -- Forward Lane Image 2
// signal: @DriverAlertnessLevel
#define DriverAlertnessLevel_CovFactor 0.4
#define DriverAlertnessLevel_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Indicates whether right side is tracking lane.    00 Not Tracking Right side  01 Tracking Right side  10 Reserved  11 Don't Care/take no action
  // 3 - "Don't Care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Tracking Right side" 
  // 0 - "Not Tracking Right side" 

  uint8_t LaneTrackingStatusRightSide;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the left side is tracking lane.    00 Not Tracking Left side  01 Tracking Left side  10 Reserved  11 Don't care/Take no action
  // 3 - "Don't care/Take no action" 
  // 2 - "Reserved" 
  // 1 - "Tracking Left side" 
  // 0 - "Not Tracking Left side" 

  uint8_t LaneTrackingStatusLeftSide;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether lane departure indication is active.    00 Lane Departure indication disabled  01 Lane Departure Indication enabled   10 Reserved  11 Not Used
  // 3 - "Not Used" 
  // 2 - "Reserved" 
  // 1 - "Lane Departure Indication enabled " 
  // 0 - "Lane Departure indication disabled" 

  uint8_t LnDpartureIndicationEnableStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the alertness level of the driver measured by the driver alertness warning system. 100 % means driver is fully attentive. This signal can be used independent of the technology and ECU used to estimate the driver alertness condition.
  uint8_t DriverAlertnessLevel;               //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Indicates the various system state in the driver alertness warning system. This signal can be used independent of the technology and ECU used to estimate the driver alertness condition.  000 = System installed but disabled  001 = Initializing  010 = ...
  // 7 - "Not Available / Not Installed" 
  // 4 - "System monitoring driver behavior" 
  // 3 - "System available" 
  // 2 - "System temporarily not available" 
  // 1 - "Initializing" 
  // 0 - "System installed but disabled" 

  uint8_t DrverAlertnessWarningSystemState;   //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} FLI2_t;

// def @RGE22 CAN Message (419323134)
#define RGE22_IDE (1U)
#define RGE22_DLC (8U)
#define RGE22_CANID (0x18FE5CFEU)
#define RGE22_CYC (100U)
// -- Running Gear Equipment #2/2  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-2.
// signal: @RelVehBodyLevelFrontAxle
#define RelVehBodyLevelFrontAxle_CovFactor 1
#define RelVehBodyLevelFrontAxle_CovS(x) ((int32_t)(x + 32000))
typedef struct
{

  // Actual relative vehicle body height.
  int32_t RelVehBodyLevelFrontAxle;      //      Bits=16.  [ -32000, 32255  ]  Unit:'mm'    Offset= -32000   

  // Actual relative vehicle body height.
  uint16_t RelVehBodyLevelRearAxle;      //      Bits=16.  [ 0     , 64255  ]  Unit:'mm'   
  uint32_t framecnt;
} RGE22_t;

// def @GPM12 CAN Message (419323390)
#define GPM12_IDE (1U)
#define GPM12_DLC (8U)
#define GPM12_CANID (0x18FE5DFEU)
#define GPM12_CYC (500U)
// -- General Purpose Message #1/2  Message to transmit data of the towing vehicle to the towed vehicle. See ISO 11992-3.
// signal: @EngineSpeedUpperLimit
#define EngineSpeedUpperLimit_CovFactor 0.125
#define EngineSpeedUpperLimit_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @EngineSpeedLowerLimit
#define EngineSpeedLowerLimit_CovFactor 0.125
#define EngineSpeedLowerLimit_CovS(x) ((uint16_t)((x / 0.125)))
typedef struct
{

  // The engine speed which cannot be exceeded.
  uint16_t EngineSpeedUpperLimit;        //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // The minimum engine speed which the engine is allowed to reach.
  uint16_t EngineSpeedLowerLimit;        //      Bits=16.  [ 0     , 8191.875 ]  Unit:'rpm'   Factor= 0.125 

  // Maximum vehicle velocity allowed.   See SPN 6808 for an alternate resolution.
  uint8_t MaxVehicleSpeedLimit;          //      Bits=08.  [ 0     , 250    ]  Unit:'km/h' 
  uint32_t framecnt;
} GPM12_t;

// def @RGE23 CAN Message (419323646)
#define RGE23_IDE (1U)
#define RGE23_DLC (8U)
#define RGE23_CANID (0x18FE5EFEU)
#define RGE23_CYC (1000U)
// -- Running Gear Equipment #2/3  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-2.
// signal: @TyreTemperature
#define TyreTemperature_CovFactor 0.03125
#define TyreTemperature_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @AirLeakageDetection
#define AirLeakageDetection_CovFactor 0.1
#define AirLeakageDetection_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // First part of the identification number of the tyre or whee (position on each axle).
  // 15 - "Wheel position 15" 
  // 14 - "Wheel position 14" 
  // 13 - "Wheel position 13" 
  // 12 - "Wheel position 12" 
  // 11 - "Wheel position 11" 
  // 10 - "Wheel position 10" 
  // 9 - "Wheel position 9" 
  // 8 - "Wheel position 8" 
  // 7 - "Wheel position 7" 
  // 6 - "Wheel position 6" 
  // 5 - "Wheel position 5" 
  // 4 - "Wheel position 4" 
  // 3 - "Wheel position 3" 
  // 2 - "Wheel position 2" 
  // 1 - "Wheel position 1" 
  // 0 - "Wheel position not identified" 

  uint8_t TyreWheelIdentification1;      //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // First part of the identification number of the tyre or whee (number of axles).
  // 15 - "Axle position 15" 
  // 14 - "Axle position 14" 
  // 13 - "Axle position 13" 
  // 12 - "Axle position 12" 
  // 11 - "Axle position 11" 
  // 10 - "Axle position 10" 
  // 9 - "Axle position 9" 
  // 8 - "Axle position 8" 
  // 7 - "Axle position 7" 
  // 6 - "Axle position 6" 
  // 5 - "Axle position 5" 
  // 4 - "Axle position 4" 
  // 3 - "Axle position 3" 
  // 2 - "Axle position 2" 
  // 1 - "Axle position 1" 
  // 0 - "Axle position not identified" 

  uint8_t TyreWheelIdentification2;      //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The temperature measured by the tyre module.
  int32_t TyreTemperature;               //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // The pressure loss of a tyre.
  uint16_t AirLeakageDetection;          //      Bits=16.  [ 0     , 6425.5 ]  Unit:'Pa/s'  Factor= 0.1   

  // Signal indicating the pressure level of the tyre.
  // 7 - "Not available" 
  // 6 - "Error indicator" 
  // 5 - "Not defined" 
  // 4 - "Extreme under pressure" 
  // 3 - "Under pressure" 
  // 2 - "No warning pressure" 
  // 1 - "Over pressure" 
  // 0 - "Extreme over pressure" 

  uint8_t TyrePressThresholdDetect;      //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Signal indicating the power supply of the tyre module is sufficient to achieve the specified performance of the module.
  // 1 - "Sufficient power supply" 
  // 0 - "Insufficient power supply" 

  uint8_t TyreModulePowerSupply;         //      Bits=02.  [ 0     , 1      ]  Unit:''     
  uint32_t framecnt;
} RGE23_t;

// def @GPM13 CAN Message (419323902)
#define GPM13_IDE (1U)
#define GPM13_DLC (8U)
#define GPM13_CANID (0x18FE5FFEU)
#define GPM13_CYC (50U)
// -- General Purpose Message #1/3  Message to transmit data of the towing vehicle to the towed vehicle. See ISO 11992-3.
// signal: @DriversDemandEngine_PercTorque
#define DriversDemandEngine_PercTorque_CovFactor 1
#define DriversDemandEngine_PercTorque_CovS(x) ((int16_t)(x + 125))
// signal: @ActualEngine_PercTorque
#define ActualEngine_PercTorque_CovFactor 1
#define ActualEngine_PercTorque_CovS(x) ((int16_t)(x + 125))
// signal: @EngineSpeed
#define EngineSpeed_CovFactor 0.125
#define EngineSpeed_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @VehicleSpeed
#define VehicleSpeed_CovFactor 0.00390625
#define VehicleSpeed_CovS(x) ((uint16_t)((x / 0.00390625)))
typedef struct
{

  // State signal which indicates which engine torque mode is currently generating, limiting, or controlling the torque
  // 15 - "Not available" 
  // 11 - "Remote accelerator" 
  // 10 - "Braking system" 
  // 9 - "High speed governor" 
  // 8 - "Torque limiting" 
  // 7 - "ABS control" 
  // 6 - "Transmission control" 
  // 5 - "ASR control" 
  // 4 - "Road speed governor" 
  // 3 - "PTO governor" 
  // 2 - "Cruise control" 
  // 1 - "Accelerator pedal/operator selec" 
  // 0 - "Low idle governor/no request (de" 

  uint8_t EngineTorqueMode;                 //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Switch signal which indicates that engine control is allowed.
  // 1 - "Engine control allowed" 
  // 0 - "Engine control not allowed" 

  uint8_t EngineControlAllowed;             //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates whether the engine is running.
  // 1 - "Engine running" 
  // 0 - "Engine not running" 

  uint8_t EngineRunning;                    //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // The torque output of the engine requested by the driver.
  int16_t DriversDemandEngine_PercTorque;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // The calculated output torque of the engine.
  int16_t ActualEngine_PercTorque;          //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // Actual engine speed which is calculated over a minimum crankshaft angle of 720 degrees divided by  the number of cylinders.
  uint16_t EngineSpeed;                     //      Bits=16.  [ 0     , 8031.88 ]  Unit:'rpm'   Factor= 0.125 

  // The ratio of actual engine percent torque to maximum indicated torque available at the current engine speed, clipped to zero torque during engine braking.
  uint8_t PercentLoadAtCurrentSpeed;        //      Bits=08.  [ 0     , 125    ]  Unit:'%'    

  uint16_t VehicleSpeed;                    //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/hr' Factor= 0.00390625
  uint32_t framecnt;
} GPM13_t;

// def @GPM23 CAN Message (419324158)
#define GPM23_IDE (1U)
#define GPM23_DLC (8U)
#define GPM23_CANID (0x18FE60FEU)
#define GPM23_CYC (100U)
// -- General Purpose Message #2/3  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-3.
// signal: @ReqEngineSpeed
#define ReqEngineSpeed_CovFactor 0.125
#define ReqEngineSpeed_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @ReqEngineSpeedUpperLim
#define ReqEngineSpeedUpperLim_CovFactor 0.125
#define ReqEngineSpeedUpperLim_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @ReqEngineSpeedLowerLim
#define ReqEngineSpeedLowerLim_CovFactor 0.125
#define ReqEngineSpeedLowerLim_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @ReqEngineTorqueLimit
#define ReqEngineTorqueLimit_CovFactor 1
#define ReqEngineTorqueLimit_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // This is the engine speed which the engine is expected to operate at.
  uint16_t ReqEngineSpeed;               //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // The requested engine speed which is not to be exceeded.
  uint16_t ReqEngineSpeedUpperLim;       //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // The requested minimum engine speed which the engine is to allow.
  uint16_t ReqEngineSpeedLowerLim;       //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // The requested engine torque that the engine is not allowed to exceed, indicated as a ratio of the reference engine torque.
  int16_t ReqEngineTorqueLimit;          //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // The requested vehicle speed which the vehicle is not allowed to exceed.
  uint8_t ReqEngineSpeedLimit;           //      Bits=08.  [ 0     , 250    ]  Unit:'km/hr'
  uint32_t framecnt;
} GPM23_t;

// def @GPM14 CAN Message (419324414)
#define GPM14_IDE (1U)
#define GPM14_DLC (8U)
#define GPM14_CANID (0x18FE61FEU)
#define GPM14_CYC (100U)
// -- General Purpose Message #1/4  Message to transmit data of the towing vehicle to the towed vehicle. See ISO 11992-3.
// signal: @PercentClutchSlip
#define PercentClutchSlip_CovFactor 0.4
#define PercentClutchSlip_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @CurrentGear
#define CurrentGear_CovFactor 1
#define CurrentGear_CovS(x) ((int16_t)(x + 125))
// signal: @TorqueConvOilTemp
#define TorqueConvOilTemp_CovFactor 0.03125
#define TorqueConvOilTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @AccelPedalPosition
#define AccelPedalPosition_CovFactor 0.4
#define AccelPedalPosition_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Parameter which represents the ratio of input shaft speed to current engine speed (in percent).    Percent Clutch Slip = ((Engine rpm - Input shaft rpm)/(Engine rpm)) x 100
  uint8_t PercentClutchSlip;             //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The gear currently engaged in the transmission or the last gear engaged while the transmission is in process of shifting to the new or selected gear.
  int16_t CurrentGear;                   //      Bits=08.  [ -125  , 125    ]  Unit:''      Offset= -125     

  // Signal which indicates the current state of the first clutch dependent power take off.
  // 1 - "Engaged" 
  // 0 - "Not engaged" 

  uint8_t FirstClutchDpdtPTOFeedback;    //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the current state of the second clutch dependent power take off.
  // 1 - "Engaged" 
  // 0 - "Not engaged" 

  uint8_t SecClutchDptdPTOFeedback;      //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the current state of the clutch independent power take off.
  // 1 - "Engaged" 
  // 0 - "Not engaged" 

  uint8_t ClutchIndptdPTOFeedback;       //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the current state of the first engine mounted power take off.
  // 1 - "Limits activated" 
  // 0 - "Limits not activated" 

  uint8_t FirstEngineMtdPTOFeedback;     //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the current state of the second engine mounted power take off.
  // 1 - "Limits activated" 
  // 0 - "Limits not activated" 

  uint8_t SecEngineMtdPTOFeedback;       //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Switch signal which indicates that PTO control is allowed.
  // 1 - "PTO control allowed" 
  // 0 - "PTO control not allowed" 

  uint8_t PTOControlAllowed;             //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates that the torque converter oil temperature has reached its warning level.
  // 2 - "Warning" 
  // 1 - "Prewarning" 
  // 0 - "No warning" 

  uint8_t TorqueConvtOilTempWarning;     //      Bits=03.  [ 0     , 2      ]  Unit:''     

  // Temperature of the torque converter lubricant.
  int32_t TorqueConvOilTemp;             //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Signal which indicates whether the starter is in use.
  // 1 - "Starter active" 
  // 0 - "Starter not active" 

  uint8_t StarterActive;                 //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Switch signal which indicates whether the accelerator pedal low idle switch is opened or closed.
  // 1 - "In low idle condition" 
  // 0 - "Not in low idle condition" 

  uint8_t AccelPedalLowIdleSwitch;       //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // The ratio of actual accelerator pedal position to maximum pedal position.
  uint8_t AccelPedalPosition;            //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} GPM14_t;

// def @GPM24 CAN Message (419324670)
#define GPM24_IDE (1U)
#define GPM24_DLC (8U)
#define GPM24_CANID (0x18FE62FEU)
#define GPM24_CYC (100U)
// -- General Purpose Message #2/4  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-3.
// signal: @RqstedPercentClutchSlip
#define RqstedPercentClutchSlip_CovFactor 0.4
#define RqstedPercentClutchSlip_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Command signal to influence the clutch.
  uint8_t RqstedPercentClutchSlip;       //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Signal which indicates the state of the starter lockout switch.
  // 1 - "Switched on" 
  // 0 - "Switched off" 

  uint8_t StarterLockoutSwitch;          //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the state of the engine start switch.
  // 1 - "Switched on" 
  // 0 - "Switched off" 

  uint8_t EngineStartSwitch;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates the state of the engine stop switch.
  // 1 - "Switched on" 
  // 0 - "Switched off" 

  uint8_t EngineStopSwitch;              //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the state of the refuse packer step switch.
  // 1 - "Switched on" 
  // 0 - "Switched off" 

  uint8_t RefusePackerStepSwitch;        //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates that the operating panel is active.
  // 1 - "Operating panel active" 
  // 0 - "Operating panel not active" 

  uint8_t OperatingPanelActive;          //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the state of the first clutch dependent power take off switch.
  // 1 - "Switched on" 
  // 0 - "Switched off" 

  uint8_t FirstClutchDpdtPTOSwitch;      //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the state of the second clutch dependent power take off switch.
  // 1 - "Switched on" 
  // 0 - "Switched off" 

  uint8_t SecClutchDpdtPTOSwitch;        //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the state of the clutch independent power take off switch.
  // 1 - "Switched on" 
  // 0 - "Switched off" 

  uint8_t ClutchIndpdtPTOSwitch;         //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the state of the first engine mounted power take off switch.
  // 1 - "Switched on" 
  // 0 - "Switched off" 

  uint8_t FirstEngineMtdPTOSwitch;       //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the state of the second engine mounted power take off switch.
  // 1 - "Switched on" 
  // 0 - "Switched off" 

  uint8_t SecEngineMtdPTOSwitch;         //      Bits=02.  [ 0     , 1      ]  Unit:''     
  uint32_t framecnt;
} GPM24_t;

// def @GPM15 CAN Message (419324926)
#define GPM15_IDE (1U)
#define GPM15_DLC (8U)
#define GPM15_CANID (0x18FE63FEU)
#define GPM15_CYC (1000U)
// -- General Purpose Message #1/5  Message to transmit data of the towing vehicle to the towed vehicle. See ISO 11992-3.
// signal: @EngineOilTemperature
#define EngineOilTemperature_CovFactor 0.03125
#define EngineOilTemperature_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngCoolantTemp
#define EngCoolantTemp_CovFactor 1
#define EngCoolantTemp_CovS(x) ((int16_t)(x + 40))
// signal: @EngineOilPressure
#define EngineOilPressure_CovFactor 4
#define EngineOilPressure_CovS(x) ((uint8_t)((x / 4)))
typedef struct
{

  // Temperature of the engine lubricant.
  int32_t EngineOilTemperature;          //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of liquid found in engine cooling system.
  int16_t EngCoolantTemp;                //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Gauge pressure of the oil in the engine lubrication system as provided by the oil pump.
  uint8_t EngineOilPressure;             //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Signal which indicates that the engine coolant temperature has reached its warning level.
  // 2 - "Warning" 
  // 1 - "Prewarning" 
  // 0 - "No warning" 

  uint8_t EngineCoolantTempWarning;      //      Bits=03.  [ 0     , 2      ]  Unit:''     

  // Signal which indicates that the engine oil pressure has reached its warning level.
  // 1 - "Warning" 
  // 0 - "No warning" 

  uint8_t EngineOilPressureWarning;      //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // This signal indicates the decrease of the fuel level to a certain minimum.
  // 1 - "Fuel level warning on" 
  // 0 - "Fuel level warning off" 

  uint8_t FuelLevelWarning;              //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // The 100 % reference value for all defined indicated engine torque parameters.
  uint16_t ReferenceEngineTorque;        //      Bits=16.  [ 0     , 64255  ]  Unit:'Nm'   
  uint32_t framecnt;
} GPM15_t;

// def @GPM25 CAN Message (419325182)
#define GPM25_IDE (1U)
#define GPM25_DLC (8U)
#define GPM25_CANID (0x18FE64FEU)
#define GPM25_CYC (100U)
// -- General Purpose Message #2/5  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-3.
typedef struct
{

  // This signal indicates the state of the trailer left-hand stop light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerLeftStopLight;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer right-hand stop light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerRightStopLight;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer left-hand direction indicator light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerLeftDirIndLight;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer right-hand direction indicator light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerRightDirIndLight;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer left-hand rear light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerLeftRearLight;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer right-hand rear light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerRightRearLight;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer left-hand rear fog light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerLeftRearFogLight;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer right-hand rear fog light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerRightRearFogLight;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer left-hand reversing light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerLeftReversingLight;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer right-hand reversing light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerRightReversingLight;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer left-hand side marker light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerLeftSideMarkerLight;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer right-hand side marker light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerRightSideMrkLight;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer left-hand rear width indicator light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerLeftRearWidIndLight;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer right-hand rear width indicator light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailRightRearWidIndLight;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer left-hand corner marker light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerLeftCrnMarkerLight;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer right-hand corner marker light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerRightCrnMarkerLight;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer left-hand rear registration-plate light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerLeftRearRegPltLight;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer right-hand rear registration-plate light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerRightRearRegPltLight;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer rear warning light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerRearWarningLight;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer rotating identification light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerRotatingIdentLight;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer interior light(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerInteriorLight;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This signal indicates the state of the trailer work lamp(s).
  // 1 - "Lamp(s) lit" 
  // 0 - "Lamp(s) not lit" 

  uint8_t TrailerWorkLamp;               //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} GPM25_t;

// def @GPM16 CAN Message (419325438)
#define GPM16_IDE (1U)
#define GPM16_DLC (8U)
#define GPM16_CANID (0x18FE65FEU)
#define GPM16_CYC (100U)
// -- General Purpose Message #1/6  Message to transmit data of the towing vehicle to the towed vehicle. See ISO 11992-3.
// signal: @AmbientAirTemperature
#define AmbientAirTemperature_CovFactor 0.03125
#define AmbientAirTemperature_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of air surrounding vehicle.
  int32_t AmbientAirTemperature;         //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} GPM16_t;

// def @BM CAN Message (419325694)
#define BM_IDE (1U)
#define BM_DLC (8U)
#define BM_CANID (0x18FE66FEU)
#define BM_CYC (1000U)
// -- Battery Main Switch Information
typedef struct
{

  // Parameter indicating whether the battery main switch is held due to an external request or not. The state battery main switch held indicates that the battery main switch is about to switch off.  00 Battery main switch not held  01 Battery main ...
  // 3 - "Don't care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Battery main switch held" 
  // 0 - "Battery main switch not held" 

  uint8_t BatteryMainSwitchHoldState;    //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} BM_t;

// def @CCC CAN Message (419325950)
#define CCC_IDE (1U)
#define CCC_DLC (8U)
#define CCC_CANID (0x18FE67FEU)
// -- Climate Control Configuration
// signal: @AuxHeaterMaxOutputPower
#define AuxHeaterMaxOutputPower_CovFactor 2
#define AuxHeaterMaxOutputPower_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // The maximum output power of the auxiliary heater.
  uint16_t AuxHeaterMaxOutputPower;      //      Bits=16.  [ 0     , 128510 ]  Unit:'W'     Factor= 2     
  uint32_t framecnt;
} CCC_t;

// def @VF CAN Message (419326206)
#define VF_IDE (1U)
#define VF_DLC (8U)
#define VF_CANID (0x18FE68FEU)
#define VF_CYC (1000U)
// -- Vehicle Fluids
// signal: @HydTemp
#define HydTemp_CovFactor 1
#define HydTemp_CovS(x) ((int16_t)(x + 40))
// signal: @HydOilLevel
#define HydOilLevel_CovFactor 0.4
#define HydOilLevel_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Temperature of hydraulic fluid.
  int16_t HydTemp;                         //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // This switch indicates whether hydraulic oil filter is clogged. This is not the transmission oil filter restriction switch, which is SPN 3359.    00 No restriction  01 Restriction exists on oil filter  10 Error  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Restriction exists on oil filter" 
  // 0 - "No restriction" 

  uint8_t HydOilFilterRestrictionSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State of switch used to determine if Winch Oil Pressure is above desired minimum    00 NOT OK- Oil pressure is too low  01 OK - Oil pressure is above minimum  10 Error - Switch state cannot be determined  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "OK" 
  // 0 - "NOT OK- Oil pressure is too low" 

  uint8_t WinchOilPressSwitch;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter indicates the level of the hydraulic fluid in tank as a ratio of current volume to total tank volume.  This parameter is intended for reporting the hydraulic fluid level in the system tank or reservoir.  This hydraulic fluid is for ...
  uint8_t HydOilLevel;                     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} VF_t;

// def @ET3 CAN Message (419326462)
#define ET3_IDE (1U)
#define ET3_DLC (8U)
#define ET3_CANID (0x18FE69FEU)
#define ET3_CYC (1000U)
// -- Engine Temperature 3  This parameter group is used to transmit high resolution engine temperatures for control purposes.
// signal: @EngIntakeManifold1AirTemp
#define EngIntakeManifold1AirTemp_CovFactor 0.03125
#define EngIntakeManifold1AirTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngCoolantTemp
#define EngCoolantTemp_CovFactor 0.03125
#define EngCoolantTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngIntkVlvActuationSystemOilTemp
#define EngIntkVlvActuationSystemOilTemp_CovFactor 0.03125
#define EngIntkVlvActuationSystemOilTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngChargeAirCooler1OutletTemp
#define EngChargeAirCooler1OutletTemp_CovFactor 0.03125
#define EngChargeAirCooler1OutletTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of pre-combustion air found in intake manifold of engine air supply system. The higher resolution is required for control purposes.
  int32_t EngIntakeManifold1AirTemp;          //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of liquid found in engine cooling system. The higher resolution is required for control purposes.
  int32_t EngCoolantTemp;                     //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // The temperature of the oil in the hydraulic system that powers the intake valve actuation system.
  int32_t EngIntkVlvActuationSystemOilTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of combustion air after it exits from the Charge Air Cooler 1 but before any mixing of recirculated exhaust gas.
  int32_t EngChargeAirCooler1OutletTemp;      //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} ET3_t;

// def @EFS CAN Message (419326718)
#define EFS_IDE (1U)
#define EFS_DLC (8U)
#define EFS_CANID (0x18FE6AFEU)
#define EFS_CYC (5000U)
// -- Engine Fuel/Lube Systems
// signal: @EngOilLevelRemoteReservoir
#define EngOilLevelRemoteReservoir_CovFactor 0.4
#define EngOilLevelRemoteReservoir_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngFuelSupplyPumpIntakeAbsPress
#define EngFuelSupplyPumpIntakeAbsPress_CovFactor 2
#define EngFuelSupplyPumpIntakeAbsPress_CovS(x) ((uint8_t)((x / 2)))
// signal: @EngFuelFilterDiffPress
#define EngFuelFilterDiffPress_CovFactor 2
#define EngFuelFilterDiffPress_CovS(x) ((uint8_t)((x / 2)))
// signal: @EngWasteOilReservoirLevel
#define EngWasteOilReservoirLevel_CovFactor 0.4
#define EngWasteOilReservoirLevel_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngOilFilterOutletPress
#define EngOilFilterOutletPress_CovFactor 4
#define EngOilFilterOutletPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @EngFuelSupplyPumpIntakePress
#define EngFuelSupplyPumpIntakePress_CovFactor 2
#define EngFuelSupplyPumpIntakePress_CovS(x) ((uint8_t)((x / 2)))
typedef struct
{

  // Ratio of current volume of engine oil in a remote reservoir to the maximum required volume.  If a single switch (on/off) is used, 20% and 100% respectively will be used where 100% means no oil needs to be added and 20% means oil needs to be added ...
  uint8_t EngOilLevelRemoteReservoir;        //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Absolute pressure of fuel at the fuel supply pump intake.  See Figures SPN16_A & SPN16_B.  See SPN 7472 for alternate resolution.
  uint8_t EngFuelSupplyPumpIntakeAbsPress;   //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // Differential pressure measured across the fuel filter located between the fuel tank and the supply pump.  See Figures SPN16_A and SPN16_B.
  uint8_t EngFuelFilterDiffPress;            //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // Level of crankcase blowby emulsion collected by a container.  Normalized to percent, 0% represents completely empty and 100% represents completely full.
  uint8_t EngWasteOilReservoirLevel;         //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Oil pressure (gage) measured just downstream of oil filter.Used in conjunction with SPN1208 (pre-filter oil pressure) to determine oil filter health.
  uint8_t EngOilFilterOutletPress;           //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Switch input for activating the engine oil priming pump.    00 = Off  01 = On  10 = Error  11 = Not available or not installed
  // 3 - "Not available or not installed" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngOilPrimingPumpSwitch;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Determination of whether or not the engine is (or has recently been) sufficiently lubricated for starting purposes.  00 = Not sufficiently lubricated  01 = Sufficiently lubricated  10 = Unable to determine if sufficiently lubricated  11 = Not ...
  // 3 - "Not available or not installed" 
  // 2 - "Unable to determine if sufficiently lubricated" 
  // 1 - "Sufficiently lubricated" 
  // 0 - "Not sufficiently lubricated" 

  uint8_t EngOilPrimingState;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the engine oil pre-heated sufficiently for starting purposes.    00 = Not sufficiently pre-heated  01 = Sufficiently pre-heated  10 = Unable to determine if engine oil is pre-heated sufficiently  11 = Not available or not installed
  // 1 - "Sufficiently pre-heated" 
  // 3 - "Not available or not installed" 
  // 2 - "Unable to determine if engine oil is pre-heated sufficiently" 
  // 0 - "Not sufficiently pre-heated" 

  uint8_t EngOilPreHeatedState;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the engine coolant is pre-heated sufficiently for starting purposes.  00 = Not sufficiently pre-heated  01 = Sufficiently pre-heated  10 = Unable to determine  engine coolant pre-heated sufficiently  11 = Not available or not ...
  // 3 - "Not available or not installed" 
  // 2 - "Unable to determine  engine coolant pre-heated sufficiently" 
  // 1 - "Sufficiently pre-heated" 
  // 0 - "Not sufficiently pre-heated" 

  uint8_t EngCoolantPreheatedState;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Engine ventilation control states.  000 = Sufficiently vented (all combustible gases have been evacuated from intake and exhaust systems)  001 = Ventilation needed (combustible gases may be present in intake and exhaust systems)  010 = Ventilation ...
  // 7 - "Not available or not installe" 
  // 6 - "Not able to determine if sufficiently vented" 
  // 5 - "Reserved for SAE assignment " 
  // 4 - "Reserved for SAE assignment" 
  // 3 - "Currently venting" 
  // 2 - "Ventilation delay" 
  // 1 - "Ventilation needed" 
  // 0 - "Sufficiently vented" 

  uint8_t EngVentilationStatus;              //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Parameter used to transmit the actual status of the fuel priming system.  The fuel priming system is a system that purges air in the fuel lines and may assist fuel delivery to a second pump at lower speeds.  00 - Off  01 - On  10 - Error  11 - ...
  // 3 - "Unavailable" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t FuelPumpPrimerStatus;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Gage pressure of fuel at the fuel supply pump intake.  See Figures SPN16_A & SPN16_B.    See also SPN 1381.
  uint8_t EngFuelSupplyPumpIntakePress;      //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     
  uint32_t framecnt;
} EFS_t;

// def @DI CAN Message (419326974)
#define DI_IDE (1U)
#define DI_DLC (8U)
#define DI_CANID (0x18FE6BFEU)
// -- Driver's Identification  Field:  a Driver 1 Identification  Delimiter (ASCII ?*?)  b Driver 2 Identification  Delimiter (ASCII ?*?)  NOTE - If only driver card 1 is present, only the parameter driver 1 identification and two delimiters shall be ...
typedef struct
{

  // Used to obtain the driver identity.
  uint8_t Driver1Identification;         //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Used to obtain the driver identity.
  uint8_t Driver2Identification;         //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} DI_t;

// def @HTR CAN Message (419327486)
#define HTR_IDE (1U)
#define HTR_DLC (8U)
#define HTR_CANID (0x18FE6DFEU)
#define HTR_CYC (1000U)
// -- Heater Information
// signal: @AuxHeaterOutputCoolantTemp
#define AuxHeaterOutputCoolantTemp_CovFactor 1
#define AuxHeaterOutputCoolantTemp_CovS(x) ((int16_t)(x + 40))
// signal: @AuxHeaterInputAirTemp
#define AuxHeaterInputAirTemp_CovFactor 1
#define AuxHeaterInputAirTemp_CovS(x) ((int16_t)(x + 40))
// signal: @AuxHeaterOutputPowerPercent
#define AuxHeaterOutputPowerPercent_CovFactor 0.4
#define AuxHeaterOutputPowerPercent_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Temperature of the auxiliary heater output coolant (I.e. water in a water heater system.)
  int16_t AuxHeaterOutputCoolantTemp;       //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of the input air in an auxiliary heater system.
  int16_t AuxHeaterInputAirTemp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Current auxiliary heater output power, relative to the auxiliary heater maximum output power.
  uint8_t AuxHeaterOutputPowerPercent;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // State of the auxiliary heater  0000 Heater not active  0001 Off due to ADR per European Regulations for Transport of hazardous materials  0010 Economy mode  0011 Normal mode  0100 Heater pump up-keep   (running the equipment in order to keep it in ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 8 - "Heater Locked" 
  // 7 - "Diagnose Active" 
  // 6 - "Heater Stopping" 
  // 5 - "Heater Starting" 
  // 4 - "Heater pump up-keep  " 
  // 3 - "Normal mode" 
  // 2 - "Economy mode" 
  // 1 - "Off due to ADR per European Regulations for Transport of hazardous materials" 
  // 0 - "Heater not active" 

  uint8_t AuxHeaterMode;                    //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Parameter indicating whether the auxiliary heater water pump is running    00 Water Pump is not running  01 Water Pump is  running  10 Reserved  11 Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Water Pump is  running" 
  // 0 - "Water Pump is not running" 

  uint8_t AuxHeaterWaterPumpStatus;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the cab is being ventilated or not.    00 Cab not ventilated  01 Cab is ventilated  10 Reserved  11 Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Cab is ventilated" 
  // 0 - "Cab not ventilated" 

  uint8_t CabVentilation;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Parameter indicating whether the engine zone is being heated.    00 Engine heating zone off  01 Engine heating zone on  10 Reserved  11 Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Engine heating zone on" 
  // 0 - "Engine heating zone off" 

  uint8_t EngHeatingZone;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Parameter indicating whether the cab zone is being heated.    00 Cab heating zone off  01 Cab heating zone on  10 Reserved  11 Not available
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Cab heating zone on" 
  // 0 - "Cab heating zone off" 

  uint8_t CabHeatingZone;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the heater is installed in an ADR compliant vehicle.  00 -  Heater installation is not ADR compliant  01 -  Heater installation is ADR compliant  10 -  Error  11 -  Not Available  Note:  ADR is a European agreement concerning the ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Heater installation is ADR compliant" 
  // 0 - "Heater installation is not ADR compliant" 

  uint8_t ADRCompliantHeaterInstallation;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} HTR_t;

// def @CVW CAN Message (419328254)
#define CVW_IDE (1U)
#define CVW_DLC (8U)
#define CVW_CANID (0x18FE70FEU)
// -- Combination Vehicle Weight
// signal: @PoweredVehicleWeight
#define PoweredVehicleWeight_CovFactor 10
#define PoweredVehicleWeight_CovS(x) ((uint16_t)((x / 10)))
// signal: @GrossCombinationVehicleWeight
#define GrossCombinationVehicleWeight_CovFactor 10
#define GrossCombinationVehicleWeight_CovS(x) ((uint16_t)((x / 10)))
typedef struct
{

  // Total mass imposed by the tires of the powered vehicle on the road surface.  Does not include the trailer.
  uint16_t PoweredVehicleWeight;           //      Bits=16.  [ 0     , 642550 ]  Unit:'kg'    Factor= 10    

  // The total weight of the truck and all attached trailers.
  uint16_t GrossCombinationVehicleWeight;  //      Bits=16.  [ 0     , 642550 ]  Unit:'kg'    Factor= 10    
  uint32_t framecnt;
} CVW_t;

// def @VEP2 CAN Message (419335678)
#define VEP2_IDE (1U)
#define VEP2_DLC (8U)
#define VEP2_CANID (0x18FE8DFEU)
#define VEP2_CYC (1000U)
// -- Vehicle Electrical Power #2  Voltage data for the main vehicle Power Distribution system.
// signal: @BatteryPotential_PowerInput2
#define BatteryPotential_PowerInput2_CovFactor 0.05
#define BatteryPotential_PowerInput2_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @ECUPowerOutputSupplyVoltage1
#define ECUPowerOutputSupplyVoltage1_CovFactor 0.05
#define ECUPowerOutputSupplyVoltage1_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @ECUPowerOutputSupplyVoltage2
#define ECUPowerOutputSupplyVoltage2_CovFactor 0.05
#define ECUPowerOutputSupplyVoltage2_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @ECUPowerOutputSupplyVoltage3
#define ECUPowerOutputSupplyVoltage3_CovFactor 0.05
#define ECUPowerOutputSupplyVoltage3_CovS(x) ((uint16_t)((x / 0.05)))
typedef struct
{

  // This parameter measures the second source of battery potential as measured at the input of the ECU/actuator etc. coming from one or more batteries, irrespective of the distance between the component and the battery.  This SPN is also used when ECUs ...
  uint16_t BatteryPotential_PowerInput2;  //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  

  // The first power output from an ECU.
  uint16_t ECUPowerOutputSupplyVoltage1;  //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  

  // The second power output from an ECU.
  uint16_t ECUPowerOutputSupplyVoltage2;  //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  

  // The third power output from an ECU.
  uint16_t ECUPowerOutputSupplyVoltage3;  //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  
  uint32_t framecnt;
} VEP2_t;

// def @SP2 CAN Message (419336190)
#define SP2_IDE (1U)
#define SP2_DLC (8U)
#define SP2_CANID (0x18FE8FFEU)
#define SP2_CYC (1000U)
// -- Supply Pressure 2
// signal: @EngExtlShutdownAirSupplyPress
#define EngExtlShutdownAirSupplyPress_CovFactor 0.5
#define EngExtlShutdownAirSupplyPress_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // Pressure of the air used to shut off the fuel supply to the engine.
  uint16_t EngExtlShutdownAirSupplyPress;  //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   
  uint32_t framecnt;
} SP2_t;

// def @ETH CAN Message (419336446)
#define ETH_IDE (1U)
#define ETH_DLC (8U)
#define ETH_CANID (0x18FE90FEU)
// -- Engine Torque History  NOTE - The torque history PGN is variable in length and may contain up to 125 torque history records.  Each torque history record MUST BE 38 bytes in length.  Any unused bytes must be 0xFF.  The last six bytes of each record ...
// signal: @EngPower
#define EngPower_CovFactor 0.5
#define EngPower_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @CalibRecordStartDay
#define CalibRecordStartDay_CovFactor 0.25
#define CalibRecordStartDay_CovS(x) ((uint8_t)((x / 0.25)))
// signal: @CalibRecordStartYear
#define CalibRecordStartYear_CovFactor 1
#define CalibRecordStartYear_CovS(x) ((uint16_t)(x - 1985))
// signal: @CalibRecordDurationTime
#define CalibRecordDurationTime_CovFactor 0.05
#define CalibRecordDurationTime_CovS(x) ((uint32_t)((x / 0.05)))
// signal: @TransGearRatio1
#define TransGearRatio1_CovFactor 0.01
#define TransGearRatio1_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @TransGearRatio2
#define TransGearRatio2_CovFactor 0.01
#define TransGearRatio2_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @TransGearRatio3
#define TransGearRatio3_CovFactor 0.01
#define TransGearRatio3_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngTorqueLimit6AxleInput
#define EngTorqueLimit6AxleInput_CovFactor 2
#define EngTorqueLimit6AxleInput_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // Number of torque history records contained in the engine torque history PGN.  A value of 0 is broadcast if no torque history records are stored in the ECU.
  uint8_t NumberOfEngTorqueHistoryRecords;   //      Bits=08.  [ 0     , 250    ]  Unit:'records'

  // Advertised engine power capability.  Advertised power is what a customer will find on a sales sheet for an engine with a certain calibration.
  uint16_t EngPower;                         //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kW'    Factor= 0.5   

  // Maximum torque output of the current ECU calibration when the engine operates on torque curve 1.  For calibrations that support two torque curves, this parameter shall be assigned the value of the lower curve.  For calibrations that support only one ...
  uint16_t EngPeakTorque1;                   //      Bits=16.  [ 0     , 64255  ]  Unit:'Nm'   

  // Maximum torque output of the current ECU calibration when the engine operates on torque curve 2.  For calibrations that support two torque curves, this parameter shall be assigned the value of the higher curve.  For calibrations that support only ...
  uint16_t EngPeakTorque2;                   //      Bits=16.  [ 0     , 64255  ]  Unit:'Nm'   

  // Calendar month timestamp when an ECU record was established.    NOTE - A value of 0 for the month is null.  The value 1 identifies January; 2 identifies February; etc.
  uint8_t CalibRecordStartMonth;             //      Bits=08.  [ 1     , 12     ]  Unit:'months'

  // Calendar day timestamp when an ECU record was established.    NOTE - A value of 0 for the date is null.  The values 1, 2, 3, and 4 are used to identify the first day of the month; 5, 6, 7, and 8 identify the second day of the month; etc.
  uint8_t CalibRecordStartDay;               //      Bits=08.  [ 0.25  , 31.75  ]  Unit:'days'  Factor= 0.25  

  // Calendar year timestamp when an ECU record was established.    NOTE - A value of 0 for the year identifies the year 1985; a value of 1 identifies 1986; etc.
  uint16_t CalibRecordStartYear;             //      Bits=08.  [ 1985  , 2235   ]  Unit:'years' Offset= 1985     

  // Duration in hours for which the engine operated in the conditions captured in the current record.
  uint32_t CalibRecordDurationTime;          //      Bits=32.  [ 0     , 210554060.75 ]  Unit:'h'     Factor= 0.05  

  // Status of an ECU feature which limits the torque output of the engine.     00 - Disabled  01 - Enabled  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Enabled" 
  // 0 - "Disabled" 

  uint8_t TorqueLimitingFeatureStatus;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Torque limit rating described in the current record.  000 Reserved  001 Highest torque rating  010 First torque rating  011 Previous torque rating (rating prior to the current rating)  100 Current torque rating  101-110 Reserved  111 Not available   ...
  // 7 - "Not available" 
  // 4 - "Current torque rating" 
  // 3 - "Previous torque rating" 
  // 2 - "First torque rating" 
  // 1 - "Highest torque rating" 
  // 0 - "Reserved" 

  uint8_t EngTorqueLimitFeature;             //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Gear ratio value stored in the ECU that is used to define a range of transmission gears for which a limit is applied to the engine output torque.  Transmission gear ratio 1 should be the numerically highest transmission gear ratio breakpoint that ...
  uint16_t TransGearRatio1;                  //      Bits=16.  [ 0     , 642.55 ]  Unit:''      Factor= 0.01  

  // Limit applied to the engine output torque during vehicle operation in transmission gear ratios numerically greater than transmission gear ratio 1 (see SPN 1255).
  uint16_t EngTorqueLimit1Trans;             //      Bits=16.  [ 0     , 64255  ]  Unit:'Nm'   

  // Gear ratio value stored in the ECU that is used to define a range of transmission gears for which a limit is applied to the engine output torque.  Transmission gear ratio 2 should be the numerically highest transmission gear ratio breakpoint less ...
  uint16_t TransGearRatio2;                  //      Bits=16.  [ 0     , 642.55 ]  Unit:''      Factor= 0.01  

  // Limit applied to the engine output torque during vehicle operation in transmission gear ratios numerically less than or equal to transmission gear ratio 1 (see SPN 1255) and numerically greater than transmission gear ratio 2 (see.SPN 1257).  For ...
  uint16_t EngTorqueLimit2Trans;             //      Bits=16.  [ 0     , 64255  ]  Unit:'Nm'   

  // Gear ratio value stored in the ECU that is used to define a range of transmission gears for which a limit is applied to the engine output torque.  Transmission gear ratio 3 should be the numerically highest transmission gear ratio breakpoint less ...
  uint16_t TransGearRatio3;                  //      Bits=16.  [ 0     , 642.55 ]  Unit:''      Factor= 0.01  

  // Limit applied to the engine output torque during vehicle operation in transmission gear ratios numerically less than or equal to transmission gear ratio 2 (see SPN 1257) and numerically greater than transmission gear ratio 3 (see.SPN 1259).  For ...
  uint16_t EngTorqueLimit3Trans;             //      Bits=16.  [ 0     , 64255  ]  Unit:'Nm'   

  // Limit applied to the engine output torque during vehicle operation in transmission gear ratios numerically less than or equal to transmission gear ratio 3 (see SPN 1259).
  uint16_t EngTorqueLimit4Trans;             //      Bits=16.  [ 0     , 64255  ]  Unit:'Nm'   

  // Limit applied to the engine output torque based on activation of an ECU switch input.
  uint16_t EngTorqueLimit5Switch;            //      Bits=16.  [ 0     , 64255  ]  Unit:'Nm'   

  // Limit applied to the engine output torque based on the maximum allowable axle input torque.  Axle input torque is calculated as the current engine torque output multiplied by the transmission gear ratio.
  uint16_t EngTorqueLimit6AxleInput;         //      Bits=16.  [ 0     , 128510 ]  Unit:'Nm'    Factor= 2     
  uint32_t framecnt;
} ETH_t;

// def @EAC CAN Message (419337470)
#define EAC_IDE (1U)
#define EAC_DLC (8U)
#define EAC_CANID (0x18FE94FEU)
#define EAC_CYC (5000U)
// -- Engine Auxiliary Coolant
// signal: @EngAuxCoolantPress
#define EngAuxCoolantPress_CovFactor 4
#define EngAuxCoolantPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @EngAuxCoolantTemp
#define EngAuxCoolantTemp_CovFactor 1
#define EngAuxCoolantTemp_CovS(x) ((int16_t)(x + 40))
// signal: @SeaWaterPumpOutletPress
#define SeaWaterPumpOutletPress_CovFactor 2
#define SeaWaterPumpOutletPress_CovS(x) ((uint8_t)((x / 2)))
// signal: @EngExRangeCoolantPress
#define EngExRangeCoolantPress_CovFactor 4
#define EngExRangeCoolantPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @EngCoolantPress2
#define EngCoolantPress2_CovFactor 4
#define EngCoolantPress2_CovS(x) ((uint8_t)((x / 4)))
typedef struct
{

  // Gage pressure of coolant found in the intercooler which is located after the turbocharger.
  uint8_t EngAuxCoolantPress;            //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Temperature of coolant found in the intercooler which is located after the turbocharger.
  int16_t EngAuxCoolantTemp;             //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Gauge pressure of liquid found at outlet of sea water pump in sea water cooling system.
  uint8_t SeaWaterPumpOutletPress;       //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // Gage pressure of liquid found in engine cooling system.    See also SPN 109 for alternate range and resolution.
  uint8_t EngExRangeCoolantPress;        //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Gage pressure of liquid found in engine coolant system - second instance.    See also SPN 5708 for alternate range and resolution.
  uint8_t EngCoolantPress2;              //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     
  uint32_t framecnt;
} EAC_t;

// def @TCW CAN Message (419337982)
#define TCW_IDE (1U)
#define TCW_DLC (8U)
#define TCW_CANID (0x18FE96FEU)
#define TCW_CYC (100U)
// -- Turbocharger Wastegate
// signal: @EngTurboWastegateActuator1Pos
#define EngTurboWastegateActuator1Pos_CovFactor 0.4
#define EngTurboWastegateActuator1Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngTurboWastegateActuator2Pos
#define EngTurboWastegateActuator2Pos_CovFactor 0.4
#define EngTurboWastegateActuator2Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngTurboWastegateActuator3Pos
#define EngTurboWastegateActuator3Pos_CovFactor 0.4
#define EngTurboWastegateActuator3Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngTurboWastegateActuator4Pos
#define EngTurboWastegateActuator4Pos_CovFactor 0.4
#define EngTurboWastegateActuator4Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngTrbWstgteActuatorCtrlAirPress
#define EngTrbWstgteActuatorCtrlAirPress_CovFactor 4
#define EngTrbWstgteActuatorCtrlAirPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @EngDsrdTrboWastegateActuator1Pos
#define EngDsrdTrboWastegateActuator1Pos_CovFactor 0.4
#define EngDsrdTrboWastegateActuator1Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngDsrdTrboWastegateActuator2Pos
#define EngDsrdTrboWastegateActuator2Pos_CovFactor 0.4
#define EngDsrdTrboWastegateActuator2Pos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Position of the wastegate drive.  A value of 0% represents fully closed and a value of 100% represents fully open.
  uint8_t EngTurboWastegateActuator1Pos;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Position of the wastegate drive.  A value of 0% represents fully closed and a value of 100% represents fully open.
  uint8_t EngTurboWastegateActuator2Pos;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Position of the wastegate drive.  A value of 0% represents fully closed and a value of 100% represents fully open.
  uint8_t EngTurboWastegateActuator3Pos;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Position of the wastegate drive.  A value of 0% represents fully closed and a value of 100% represents fully open.
  uint8_t EngTurboWastegateActuator4Pos;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Gage pressure of the air used to control the actuator which opens and closes the wastegate valve.
  uint8_t EngTrbWstgteActuatorCtrlAirPress;   //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // The Requested Valve position of the Turbocharger Wastegate Valve 1, commanded by the engine ECU. A value of 0% represents fully closed and a value of 100% represents fully open.    This is the position that the device is attempting to achieve.
  uint8_t EngDsrdTrboWastegateActuator1Pos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Used to identify the applicable J1939-73 FMI detected in the Engine Turbocharger Wastegate Actuator 1 by the manufacturers software. When there is no failure FMI 31 is transmitted. When there is multiple failures, the most severe is transmitted
  uint8_t EngTrbWstgtActtor1PreliminaryFMI;   //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // Used to identify the status of the Engine Turbocharger Wastegate Actuator 1 drive circuitry temperature.  Temperature excursions may affect the torque output.  000 - High Most severe  001 - High Least severe  010 - In Range  011 - Low Least severe   ...
  // 7 - "Not available" 
  // 6 - "Error" 
  // 5 - "Not Defined" 
  // 4 - "Low Most severe" 
  // 3 - "Low Least severe" 
  // 2 - "In Range" 
  // 1 - "High Least severe" 
  // 0 - "High Most severe" 

  uint8_t EngTrbWstgateActuator1TempStatus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // The Requested Valve position of the Turbocharger Wastegate Valve 2, commanded by the engine ECU. A value of 0% represents fully closed and a value of 100% represents fully open.    This is the position that the device is attempting to achieve.
  uint8_t EngDsrdTrboWastegateActuator2Pos;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} TCW_t;

// def @TCI5 CAN Message (419338238)
#define TCI5_IDE (1U)
#define TCI5_DLC (8U)
#define TCI5_CANID (0x18FE97FEU)
#define TCI5_CYC (1000U)
// -- Turbocharger Information 5
// signal: @EngTurbo1TurbineOutletTemp
#define EngTurbo1TurbineOutletTemp_CovFactor 0.03125
#define EngTurbo1TurbineOutletTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngTurbo2TurbineOutletTemp
#define EngTurbo2TurbineOutletTemp_CovFactor 0.03125
#define EngTurbo2TurbineOutletTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngTurbo3TurbineOutletTemp
#define EngTurbo3TurbineOutletTemp_CovFactor 0.03125
#define EngTurbo3TurbineOutletTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngTurbo4TurbineOutletTemp
#define EngTurbo4TurbineOutletTemp_CovFactor 0.03125
#define EngTurbo4TurbineOutletTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of the combustion by-products exiting the turbine side of the turbocharger.
  int32_t EngTurbo1TurbineOutletTemp;    //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the combustion by-products exiting the turbine side of the turbocharger.
  int32_t EngTurbo2TurbineOutletTemp;    //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the combustion by-products exiting the turbine side of the turbocharger.
  int32_t EngTurbo3TurbineOutletTemp;    //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the combustion by-products exiting the turbine side of the turbocharger.
  int32_t EngTurbo4TurbineOutletTemp;    //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} TCI5_t;

// def @TCI4 CAN Message (419338494)
#define TCI4_IDE (1U)
#define TCI4_DLC (8U)
#define TCI4_CANID (0x18FE98FEU)
#define TCI4_CYC (1000U)
// -- Turbocharger Information 4
// signal: @EngTurbo1TurbineIntakeTemp
#define EngTurbo1TurbineIntakeTemp_CovFactor 0.03125
#define EngTurbo1TurbineIntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngTurbo2TurbineIntakeTemp
#define EngTurbo2TurbineIntakeTemp_CovFactor 0.03125
#define EngTurbo2TurbineIntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngTurbo3TurbineIntakeTemp
#define EngTurbo3TurbineIntakeTemp_CovFactor 0.03125
#define EngTurbo3TurbineIntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngTurbo4TurbineIntakeTemp
#define EngTurbo4TurbineIntakeTemp_CovFactor 0.03125
#define EngTurbo4TurbineIntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of the combustion by-products entering the turbine side of the turbocharger.
  int32_t EngTurbo1TurbineIntakeTemp;    //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the combustion by-products entering the turbine side of the turbocharger.
  int32_t EngTurbo2TurbineIntakeTemp;    //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the combustion by-products entering the turbine side of the turbocharger.
  int32_t EngTurbo3TurbineIntakeTemp;    //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the combustion by-products entering the turbine side of the turbocharger.
  int32_t EngTurbo4TurbineIntakeTemp;    //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} TCI4_t;

// def @TCI3 CAN Message (419338750)
#define TCI3_IDE (1U)
#define TCI3_DLC (8U)
#define TCI3_CANID (0x18FE99FEU)
#define TCI3_CYC (1000U)
// -- Turbocharger Information 3
// signal: @EngTurbo1CompressorIntakePress
#define EngTurbo1CompressorIntakePress_CovFactor 0.0078125
#define EngTurbo1CompressorIntakePress_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngTurbo2CompressorIntakePress
#define EngTurbo2CompressorIntakePress_CovFactor 0.0078125
#define EngTurbo2CompressorIntakePress_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngTurbo3CompressorIntakePress
#define EngTurbo3CompressorIntakePress_CovFactor 0.0078125
#define EngTurbo3CompressorIntakePress_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngTurbo4CompressorIntakePress
#define EngTurbo4CompressorIntakePress_CovFactor 0.0078125
#define EngTurbo4CompressorIntakePress_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
typedef struct
{

  // Gage pressure of the air entering the compressor side of the turbocharger.
  int32_t EngTurbo1CompressorIntakePress;   //      Bits=16.  [ -250  , 251.99 ]  Unit:'kPa'   Offset= -250      Factor= 0.0078125

  // Gage pressure of the air entering the compressor side of the turbocharger.
  int32_t EngTurbo2CompressorIntakePress;   //      Bits=16.  [ -250  , 251.99 ]  Unit:'kPa'   Offset= -250      Factor= 0.0078125

  // Gage pressure of the air entering the compressor side of the turbocharger.
  int32_t EngTurbo3CompressorIntakePress;   //      Bits=16.  [ -250  , 251.99 ]  Unit:'kPa'   Offset= -250      Factor= 0.0078125

  // Gage pressure of the air entering the compressor side of the turbocharger.
  int32_t EngTurbo4CompressorIntakePress;   //      Bits=16.  [ -250  , 251.99 ]  Unit:'kPa'   Offset= -250      Factor= 0.0078125
  uint32_t framecnt;
} TCI3_t;

// def @TCI2 CAN Message (419339006)
#define TCI2_IDE (1U)
#define TCI2_DLC (8U)
#define TCI2_CANID (0x18FE9AFEU)
#define TCI2_CYC (1000U)
// -- Turbocharger Information 2
// signal: @EngTurbo1CompressorIntakeTemp
#define EngTurbo1CompressorIntakeTemp_CovFactor 0.03125
#define EngTurbo1CompressorIntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngTurbo2CompressorIntakeTemp
#define EngTurbo2CompressorIntakeTemp_CovFactor 0.03125
#define EngTurbo2CompressorIntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngTurbo3CompressorIntakeTemp
#define EngTurbo3CompressorIntakeTemp_CovFactor 0.03125
#define EngTurbo3CompressorIntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngTurbo4CompressorIntakeTemp
#define EngTurbo4CompressorIntakeTemp_CovFactor 0.03125
#define EngTurbo4CompressorIntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of the air entering the compressor side of the turbocharger.
  int32_t EngTurbo1CompressorIntakeTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the air entering the compressor side of the turbocharger.
  int32_t EngTurbo2CompressorIntakeTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the air entering the compressor side of the turbocharger.
  int32_t EngTurbo3CompressorIntakeTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the air entering the compressor side of the turbocharger.
  int32_t EngTurbo4CompressorIntakeTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} TCI2_t;

// def @MBT3 CAN Message (419339518)
#define MBT3_IDE (1U)
#define MBT3_DLC (8U)
#define MBT3_CANID (0x18FE9CFEU)
#define MBT3_CYC (1000U)
// -- Main Bearing Temperature 3
// signal: @EngMainBearing9Temp
#define EngMainBearing9Temp_CovFactor 0.03125
#define EngMainBearing9Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngMainBearing10Temp
#define EngMainBearing10Temp_CovFactor 0.03125
#define EngMainBearing10Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngMainBearing11Temp
#define EngMainBearing11Temp_CovFactor 0.03125
#define EngMainBearing11Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngMainBearing12Temp
#define EngMainBearing12Temp_CovFactor 0.03125
#define EngMainBearing12Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of the main bearing which supports the crankshaft of the engine.
  int32_t EngMainBearing9Temp;           //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the main bearing which supports the crankshaft of the engine.
  int32_t EngMainBearing10Temp;          //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the main bearing which supports the crankshaft of the engine.
  int32_t EngMainBearing11Temp;          //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the main bearing which supports the crankshaft of the engine.
  int32_t EngMainBearing12Temp;          //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} MBT3_t;

// def @MBT2 CAN Message (419339774)
#define MBT2_IDE (1U)
#define MBT2_DLC (8U)
#define MBT2_CANID (0x18FE9DFEU)
#define MBT2_CYC (1000U)
// -- Main Bearing Temperature 2
// signal: @EngMainBearing5Temp
#define EngMainBearing5Temp_CovFactor 0.03125
#define EngMainBearing5Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngMainBearing6Temp
#define EngMainBearing6Temp_CovFactor 0.03125
#define EngMainBearing6Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngMainBearing7Temp
#define EngMainBearing7Temp_CovFactor 0.03125
#define EngMainBearing7Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngMainBearing8Temp
#define EngMainBearing8Temp_CovFactor 0.03125
#define EngMainBearing8Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of the main bearing which supports the crankshaft of the engine.
  int32_t EngMainBearing5Temp;           //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the main bearing which supports the crankshaft of the engine.
  int32_t EngMainBearing6Temp;           //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the main bearing which supports the crankshaft of the engine.
  int32_t EngMainBearing7Temp;           //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the main bearing which supports the crankshaft of the engine.
  int32_t EngMainBearing8Temp;           //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} MBT2_t;

// def @MBT1 CAN Message (419340030)
#define MBT1_IDE (1U)
#define MBT1_DLC (8U)
#define MBT1_CANID (0x18FE9EFEU)
#define MBT1_CYC (1000U)
// -- Main Bearing Temperature 1
// signal: @EngMainBearing1Temp
#define EngMainBearing1Temp_CovFactor 0.03125
#define EngMainBearing1Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngMainBearing2Temp
#define EngMainBearing2Temp_CovFactor 0.03125
#define EngMainBearing2Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngMainBearing3Temp
#define EngMainBearing3Temp_CovFactor 0.03125
#define EngMainBearing3Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngMainBearing4Temp
#define EngMainBearing4Temp_CovFactor 0.03125
#define EngMainBearing4Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of the main bearing which supports the crankshaft of the engine.
  int32_t EngMainBearing1Temp;           //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the main bearing which supports the crankshaft of the engine.
  int32_t EngMainBearing2Temp;           //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the main bearing which supports the crankshaft of the engine.
  int32_t EngMainBearing3Temp;           //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the main bearing which supports the crankshaft of the engine.
  int32_t EngMainBearing4Temp;           //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} MBT1_t;

// def @EPT4 CAN Message (419340542)
#define EPT4_IDE (1U)
#define EPT4_DLC (8U)
#define EPT4_CANID (0x18FEA0FEU)
#define EPT4_CYC (1000U)
// -- Exhaust Port Temperature 4
// signal: @EngExhaustGasPort13Temp
#define EngExhaustGasPort13Temp_CovFactor 0.03125
#define EngExhaustGasPort13Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasPort14Temp
#define EngExhaustGasPort14Temp_CovFactor 0.03125
#define EngExhaustGasPort14Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasPort15Temp
#define EngExhaustGasPort15Temp_CovFactor 0.03125
#define EngExhaustGasPort15Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasPort16Temp
#define EngExhaustGasPort16Temp_CovFactor 0.03125
#define EngExhaustGasPort16Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort13Temp;       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort14Temp;       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort15Temp;       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort16Temp;       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} EPT4_t;

// def @ET2 CAN Message (419341566)
#define ET2_IDE (1U)
#define ET2_DLC (8U)
#define ET2_CANID (0x18FEA4FEU)
#define ET2_CYC (1000U)
// -- Engine Temperature 2
// signal: @EngOilTemp2
#define EngOilTemp2_CovFactor 0.03125
#define EngOilTemp2_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngECUTemp
#define EngECUTemp_CovFactor 0.03125
#define EngECUTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhstGsRcirculation1DiffPress
#define EngExhstGsRcirculation1DiffPress_CovFactor 0.0078125
#define EngExhstGsRcirculation1DiffPress_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngExhaustGasRecirculation1Temp
#define EngExhaustGasRecirculation1Temp_CovFactor 0.03125
#define EngExhaustGasRecirculation1Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature of the engine lubricant.    Note:  If there is only one engine oil temperature measurement, SPN 175 should be used.     See also SPNs 175 and 5925 for additional engine oil temperature measurements.
  int32_t EngOilTemp2;                        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the engine electronic control unit.
  int32_t EngECUTemp;                         //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Differential pressure across the Exhaust Gas Recirculation (EGR) system
  int32_t EngExhstGsRcirculation1DiffPress;   //      Bits=16.  [ -250  , 251.99 ]  Unit:'kPa'   Offset= -250      Factor= 0.0078125

  // Temperature of Recirculated Exhaust Gas.  This should not be used for Exhaust Gas Recirculation Mixer Intake Temperature.  See SPN 5020.
  int32_t EngExhaustGasRecirculation1Temp;    //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} ET2_t;

// def @IMT1 CAN Message (419342078)
#define IMT1_IDE (1U)
#define IMT1_DLC (8U)
#define IMT1_CANID (0x18FEA6FEU)
#define IMT1_CYC (5000U)
// -- Intake Manifold Information 1
// signal: @EngTurbo1BoostPress
#define EngTurbo1BoostPress_CovFactor 0.125
#define EngTurbo1BoostPress_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @EngTurbo2BoostPress
#define EngTurbo2BoostPress_CovFactor 0.125
#define EngTurbo2BoostPress_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @EngTurbo3BoostPress
#define EngTurbo3BoostPress_CovFactor 0.125
#define EngTurbo3BoostPress_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @EngTurbo4BoostPress
#define EngTurbo4BoostPress_CovFactor 0.125
#define EngTurbo4BoostPress_CovS(x) ((uint16_t)((x / 0.125)))
typedef struct
{

  // Gage pressure of air measured downstream of the compressor discharge side of the turbocharger.  See also SPN 102 for alternate range and resolution. If there is only one boost pressure to report and the range and resolution in SPN 102 is adequate, ...
  uint16_t EngTurbo1BoostPress;          //      Bits=16.  [ 0     , 8031.875 ]  Unit:'kPa'   Factor= 0.125 

  // Gage pressure of air measured downstream of the compressor discharge side of the turbocharger.  See also SPN 102 for alternate range and resolution. If there is only one boost pressure to report and the range and resolution in SPN 102  is adequate, ...
  uint16_t EngTurbo2BoostPress;          //      Bits=16.  [ 0     , 8031.875 ]  Unit:'kPa'   Factor= 0.125 

  // Gage pressure of air measured downstream of the compressor discharge side of the turbocharger.  See also SPN 102 for alternate range and resolution. If there is only one boost pressure to report and the range and resolution in SPN 102 is adequate, ...
  uint16_t EngTurbo3BoostPress;          //      Bits=16.  [ 0     , 8031.875 ]  Unit:'kPa'   Factor= 0.125 

  // Gage pressure of air measured downstream of the compressor discharge side of the turbocharger.  See also SPN 102 for alternate range and resolution. If there is only one boost pressure to report and the range and resolution in SPN 102 is adequate, ...
  uint16_t EngTurbo4BoostPress;          //      Bits=16.  [ 0     , 8031.875 ]  Unit:'kPa'   Factor= 0.125 
  uint32_t framecnt;
} IMT1_t;

// def @EBC3 CAN Message (419343870)
#define EBC3_IDE (1U)
#define EBC3_DLC (8U)
#define EBC3_CANID (0x18FEADFEU)
#define EBC3_CYC (100U)
// -- Wheel Application Pressure High Range Information
// signal: @BrkAppPrssHghRngFrntAxlLeftWheel
#define BrkAppPrssHghRngFrntAxlLeftWheel_CovFactor 5
#define BrkAppPrssHghRngFrntAxlLeftWheel_CovS(x) ((uint8_t)((x / 5)))
// signal: @BrkAppPrssHghRngFrntAxlRghtWheel
#define BrkAppPrssHghRngFrntAxlRghtWheel_CovFactor 5
#define BrkAppPrssHghRngFrntAxlRghtWheel_CovS(x) ((uint8_t)((x / 5)))
// signal: @BrkAppPrssHghRngRrAxle1LeftWheel
#define BrkAppPrssHghRngRrAxle1LeftWheel_CovFactor 5
#define BrkAppPrssHghRngRrAxle1LeftWheel_CovS(x) ((uint8_t)((x / 5)))
// signal: @BrkAppPrssHghRngRrAxl1RightWheel
#define BrkAppPrssHghRngRrAxl1RightWheel_CovFactor 5
#define BrkAppPrssHghRngRrAxl1RightWheel_CovS(x) ((uint8_t)((x / 5)))
// signal: @BrkAppPrssHghRngRrAxle2LeftWheel
#define BrkAppPrssHghRngRrAxle2LeftWheel_CovFactor 5
#define BrkAppPrssHghRngRrAxle2LeftWheel_CovS(x) ((uint8_t)((x / 5)))
// signal: @BrkAppPrssHghRngRrAxl2RightWheel
#define BrkAppPrssHghRngRrAxl2RightWheel_CovFactor 5
#define BrkAppPrssHghRngRrAxl2RightWheel_CovS(x) ((uint8_t)((x / 5)))
// signal: @BrkAppPrssHghRngRrAxle3LeftWheel
#define BrkAppPrssHghRngRrAxle3LeftWheel_CovFactor 5
#define BrkAppPrssHghRngRrAxle3LeftWheel_CovS(x) ((uint8_t)((x / 5)))
// signal: @BrkAppPrssHghRngRrAxl3RightWheel
#define BrkAppPrssHghRngRrAxl3RightWheel_CovFactor 5
#define BrkAppPrssHghRngRrAxl3RightWheel_CovS(x) ((uint8_t)((x / 5)))
typedef struct
{

  // The brake application pressure for the left wheel on the front axle.
  uint8_t BrkAppPrssHghRngFrntAxlLeftWheel;   //      Bits=08.  [ 0     , 1250   ]  Unit:'kPa'   Factor= 5     

  // The brake application pressure for the right wheel on the front axle.
  uint8_t BrkAppPrssHghRngFrntAxlRghtWheel;   //      Bits=08.  [ 0     , 1250   ]  Unit:'kPa'   Factor= 5     

  // The brake application pressure for the left wheel on the rear axle #1.
  uint8_t BrkAppPrssHghRngRrAxle1LeftWheel;   //      Bits=08.  [ 0     , 1250   ]  Unit:'kPa'   Factor= 5     

  // The brake application pressure for the right wheel on the rear axle #1.
  uint8_t BrkAppPrssHghRngRrAxl1RightWheel;   //      Bits=08.  [ 0     , 1250   ]  Unit:'kPa'   Factor= 5     

  // The brake application pressure for the left wheel on the rear axle #2.
  uint8_t BrkAppPrssHghRngRrAxle2LeftWheel;   //      Bits=08.  [ 0     , 1250   ]  Unit:'kPa'   Factor= 5     

  // The brake application pressure for the right wheel on the rear axle #2.
  uint8_t BrkAppPrssHghRngRrAxl2RightWheel;   //      Bits=08.  [ 0     , 1250   ]  Unit:'kPa'   Factor= 5     

  // The brake application pressure for the left wheel on the rear axle #3.
  uint8_t BrkAppPrssHghRngRrAxle3LeftWheel;   //      Bits=08.  [ 0     , 1250   ]  Unit:'kPa'   Factor= 5     

  // The brake application pressure for the right wheel on the rear axle #3.
  uint8_t BrkAppPrssHghRngRrAxl3RightWheel;   //      Bits=08.  [ 0     , 1250   ]  Unit:'kPa'   Factor= 5     
  uint32_t framecnt;
} EBC3_t;

// def @AIR1 CAN Message (419344126)
#define AIR1_IDE (1U)
#define AIR1_DLC (8U)
#define AIR1_CANID (0x18FEAEFEU)
#define AIR1_CYC (1000U)
// -- Air Supply Pressure  Air Supply Pressure
// signal: @PneumaticSupplyPress
#define PneumaticSupplyPress_CovFactor 8
#define PneumaticSupplyPress_CovS(x) ((uint8_t)((x / 8)))
// signal: @ParkingAnd_orTrailerAirPress
#define ParkingAnd_orTrailerAirPress_CovFactor 8
#define ParkingAnd_orTrailerAirPress_CovS(x) ((uint8_t)((x / 8)))
// signal: @ServiceBrakeCircuit1AirPress
#define ServiceBrakeCircuit1AirPress_CovFactor 8
#define ServiceBrakeCircuit1AirPress_CovS(x) ((uint8_t)((x / 8)))
// signal: @ServiceBrakeCircuit2AirPress
#define ServiceBrakeCircuit2AirPress_CovFactor 8
#define ServiceBrakeCircuit2AirPress_CovS(x) ((uint8_t)((x / 8)))
// signal: @AuxEquipmentSupplyPress
#define AuxEquipmentSupplyPress_CovFactor 8
#define AuxEquipmentSupplyPress_CovS(x) ((uint8_t)((x / 8)))
// signal: @AirSuspensionSupplyPress
#define AirSuspensionSupplyPress_CovFactor 8
#define AirSuspensionSupplyPress_CovS(x) ((uint8_t)((x / 8)))
// signal: @PowertrainCircuitAirSupplyPress
#define PowertrainCircuitAirSupplyPress_CovFactor 8
#define PowertrainCircuitAirSupplyPress_CovS(x) ((uint8_t)((x / 8)))
typedef struct
{

  // The pneumatic pressure in the main reservoir, sometimes referred to as the wet tank.
  uint8_t PneumaticSupplyPress;              //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // The pneumatic pressure in the circuit or reservoir for the parking brake and/or the trailer supply.
  uint8_t ParkingAnd_orTrailerAirPress;      //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // The pneumatic pressure in the primary service brake circuit or reservoir, supplying the rear axle.
  uint8_t ServiceBrakeCircuit1AirPress;      //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // The pneumatic pressure in the secondary service brake circuit or reservoir, supplying the front axle.
  uint8_t ServiceBrakeCircuit2AirPress;      //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // The pneumatic pressure in the auxiliary circuit.
  uint8_t AuxEquipmentSupplyPress;           //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // The pneumatic pressure in the circuit for the electronically controlled air suspension system.
  uint8_t AirSuspensionSupplyPress;          //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     

  // Indicates whether the air compressor is actively compressing air.      00     Compressor not active  01     Compressor active  10     Error indicator  11     Not available
  // 3 - "Not available" 
  // 2 - "Error indicator" 
  // 1 - "Compressor active" 
  // 0 - "Compressor not active" 

  uint8_t AirCompressorStatus;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Supply pressure to carry the pressure information for the powertrain circuit. This circuit typically would feed powertrain components such as throttles, gearbox actuators and aftertreatment actuators for EGR and SCR systems.
  uint8_t PowertrainCircuitAirSupplyPress;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     
  uint32_t framecnt;
} AIR1_t;

// def @FD1 CAN Message (419347966)
#define FD1_IDE (1U)
#define FD1_DLC (8U)
#define FD1_CANID (0x18FEBDFEU)
#define FD1_CYC (1000U)
// -- Fan Drive #1  This parameter group transfers status and measured information for an engine coolant fan.  This PGN is used for the primary fan if there are more than one fan in the syste.  PGN 64817 may be used for a second fan.
// signal: @EstPercentFanSpeed
#define EstPercentFanSpeed_CovFactor 0.4
#define EstPercentFanSpeed_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @FanSpeed
#define FanSpeed_CovFactor 0.125
#define FanSpeed_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @HydFanMotorPress
#define HydFanMotorPress_CovFactor 0.5
#define HydFanMotorPress_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @FanDriveBypassCmdStatus
#define FanDriveBypassCmdStatus_CovFactor 0.4
#define FanDriveBypassCmdStatus_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Estimated fan speed as a ratio of the fan drive (current speed) to the fully engaged fan drive (maximum fan speed).  A two state fan (off/on) will use 0% and 100% respectively.  A three state fan (off/intermediate/on) will use 0%, 50% and 100% ...
  uint8_t EstPercentFanSpeed;            //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // This parameter is used to indicate the current state or mode of operation by the fan drive.  0000 Fan off  0001 Engine system-General  0010 Excessive engine air temperature  0011 Excessive engine oil temperature  0100 Excessive engine coolant ...
  // 15 - "Not available" 
  // 14 - "Other" 
  // 13 - "Engine brake" 
  // 12 - "Timer" 
  // 11 - "A/C system" 
  // 10 - "Transmission retarder" 
  // 9 - "Manual control" 
  // 8 - "Reverse Operation" 
  // 7 - "Default Operation" 
  // 6 - "Excessive hydraulic oil temperature" 
  // 5 - "Excessive transmission oil temperature" 
  // 4 - "Excessive engine coolant temperature" 
  // 3 - "Excessive engine oil temperature" 
  // 2 - "Excessive engine air temperature" 
  // 1 - "Engine system-General" 
  // 0 - "Fan off" 

  uint8_t FanDriveState;                 //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The speed of the fan associated with engine coolant system.
  uint16_t FanSpeed;                     //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // The hydraulic pressure used to drive the fan system, sensed before the hydraulic fan motor.
  uint16_t HydFanMotorPress;             //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // Status of the Fan Drive Bypass Command as being commanded by the ECU.  The fan drive bypass diverts pump pressure away from the hydraulic motor to maintain the fan drive pressure.  0% is defined as no bypass (i.e. diverting no fan drive pressure) ...
  uint8_t FanDriveBypassCmdStatus;       //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} FD1_t;

// def @EBC2 CAN Message (419348478)
#define EBC2_IDE (1U)
#define EBC2_DLC (8U)
#define EBC2_CANID (0x18FEBFFEU)
#define EBC2_CYC (100U)
// -- Wheel Speed Information
// signal: @FrontAxleSpeed
#define FrontAxleSpeed_CovFactor 0.00390625
#define FrontAxleSpeed_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @RelativeSpeedFrontAxleLeftWheel
#define RelativeSpeedFrontAxleLeftWheel_CovFactor 0.0625
#define RelativeSpeedFrontAxleLeftWheel_CovS(x) ((int16_t)((x / 0.0625) + 125))
// signal: @RelativeSpeedFrontAxleRightWheel
#define RelativeSpeedFrontAxleRightWheel_CovFactor 0.0625
#define RelativeSpeedFrontAxleRightWheel_CovS(x) ((int16_t)((x / 0.0625) + 125))
// signal: @RelativeSpeedRearAxle1LeftWheel
#define RelativeSpeedRearAxle1LeftWheel_CovFactor 0.0625
#define RelativeSpeedRearAxle1LeftWheel_CovS(x) ((int16_t)((x / 0.0625) + 125))
// signal: @RelativeSpeedRearAxle1RightWheel
#define RelativeSpeedRearAxle1RightWheel_CovFactor 0.0625
#define RelativeSpeedRearAxle1RightWheel_CovS(x) ((int16_t)((x / 0.0625) + 125))
// signal: @RelativeSpeedRearAxle2LeftWheel
#define RelativeSpeedRearAxle2LeftWheel_CovFactor 0.0625
#define RelativeSpeedRearAxle2LeftWheel_CovS(x) ((int16_t)((x / 0.0625) + 125))
// signal: @RelativeSpeedRearAxle2RightWheel
#define RelativeSpeedRearAxle2RightWheel_CovFactor 0.0625
#define RelativeSpeedRearAxle2RightWheel_CovS(x) ((int16_t)((x / 0.0625) + 125))
typedef struct
{

  // The average speed of the two front wheels.
  uint16_t FrontAxleSpeed;                    //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/h'  Factor= 0.00390625

  // The speed of the front axle, left wheel relative to the front axle speed, SPN 904.
  int16_t RelativeSpeedFrontAxleLeftWheel;    //      Bits=08.  [ -7.8125, 7.8125 ]  Unit:'km/h'  Offset= -7.8125   Factor= 0.0625

  // The speed of the front axle, right wheel relative to the front axle speed, SPN 904.
  int16_t RelativeSpeedFrontAxleRightWheel;   //      Bits=08.  [ -7.8125, 7.8125 ]  Unit:'km/h'  Offset= -7.8125   Factor= 0.0625

  // The speed of the rear axle #1, left wheel relative to the front axle speed, SPN 904.
  int16_t RelativeSpeedRearAxle1LeftWheel;    //      Bits=08.  [ -7.8125, 7.8125 ]  Unit:'km/h'  Offset= -7.8125   Factor= 0.0625

  // The speed of the rear axle #1, right wheel relative to the front axle speed, SPN 904.
  int16_t RelativeSpeedRearAxle1RightWheel;   //      Bits=08.  [ -7.8125, 7.8125 ]  Unit:'km/h'  Offset= -7.8125   Factor= 0.0625

  // The speed of the rear axle #2, left wheel relative to the front axle speed, SPN 904.
  int16_t RelativeSpeedRearAxle2LeftWheel;    //      Bits=08.  [ -7.8125, 7.8125 ]  Unit:'km/h'  Offset= -7.8125   Factor= 0.0625

  // The speed of the rear axle #2, right wheel relative to the front axle speed, SPN 904.
  int16_t RelativeSpeedRearAxle2RightWheel;   //      Bits=08.  [ -7.8125, 7.8125 ]  Unit:'km/h'  Offset= -7.8125   Factor= 0.0625
  uint32_t framecnt;
} EBC2_t;

// def @SERV CAN Message (419348734)
#define SERV_IDE (1U)
#define SERV_DLC (8U)
#define SERV_CANID (0x18FEC0FEU)
// -- Service Information  Transmitted with the service component identification that has the shortest distance or nearest time until the next service inspection.  NOTE - There are two acceptable formats for the Service PGN.  Format 1 has only 8 bytes of ...
// signal: @ServiceDistance
#define ServiceDistance_CovFactor 5
#define ServiceDistance_CovS(x) ((int32_t)((x / 5) + 32127))
// signal: @ServiceDelay_CalendarTimeBased
#define ServiceDelay_CalendarTimeBased_CovFactor 1
#define ServiceDelay_CalendarTimeBased_CovS(x) ((int16_t)(x + 125))
// signal: @SrviceDelay_OperationalTimeBased
#define SrviceDelay_OperationalTimeBased_CovFactor 1
#define SrviceDelay_OperationalTimeBased_CovS(x) ((int32_t)(x + 32127))
typedef struct
{

  // Identification of component needing service.  See Table SPN911_A.
  uint8_t ServiceComponentIdentification;     //      Bits=08.  [ 0     , 250    ]  Unit:'ID'   

  // The distance which can be traveled by the vehicle before the next service inspection is required.  A negative distance is transmitted if the service inspection has been passed.  The component that requires service is identified by the service ...
  int32_t ServiceDistance;                    //      Bits=16.  [ -160635, 160640 ]  Unit:'km'    Offset= -160635   Factor= 5     

  // Identification of component needing service.  See Table SPN911_A.
  uint8_t ServiceComponentIdentificatio912;   //      Bits=08.  [ 0     , 250    ]  Unit:'ID'   

  // The time in weeks until the next vehicle service inspection is required.  A negative value is transmitted if the service inspection has been passed.  The component that requires service is identified by the service component identification (see SPN ...
  int16_t ServiceDelay_CalendarTimeBased;     //      Bits=08.  [ -125  , 125    ]  Unit:'weeks' Offset= -125     

  // Identification of component needing service.  See Table SPN911_A.
  uint8_t ServiceComponentIdentificatio913;   //      Bits=08.  [ 0     , 250    ]  Unit:'ID'   

  // The time in vehicle operational time until the next vehicle service inspection is required.  A negative value is transmitted if the service inspection has been passed.  The component that requires service is identified by the service component ...
  int32_t SrviceDelay_OperationalTimeBased;   //      Bits=16.  [ -32127, 32128  ]  Unit:'h'     Offset= -32127   
  uint32_t framecnt;
} SERV_t;

// def @VDHR CAN Message (419348990)
#define VDHR_IDE (1U)
#define VDHR_DLC (8U)
#define VDHR_CANID (0x18FEC1FEU)
#define VDHR_CYC (1000U)
// -- High Resolution Vehicle Distance
// signal: @HghRsolutionTotalVehicleDistance
#define HghRsolutionTotalVehicleDistance_CovFactor 5
#define HghRsolutionTotalVehicleDistance_CovS(x) ((uint32_t)((x / 5)))
// signal: @HighResolutionTripDistance
#define HighResolutionTripDistance_CovFactor 5
#define HighResolutionTripDistance_CovS(x) ((uint32_t)((x / 5)))
typedef struct
{

  // Accumulated distance traveled by the vehicle during its operation.    NOTE - See SPN 245 for alternate resolution.
  uint32_t HghRsolutionTotalVehicleDistance;  //      Bits=32.  [ 0     , 21055406075 ]  Unit:'m'     Factor= 5     

  // Distance traveled during all or part of a journey.    NOTE - See SPN 244 for alternate resolution.
  uint32_t HighResolutionTripDistance;        //      Bits=32.  [ 0     , 21055406075 ]  Unit:'m'     Factor= 5     
  uint32_t framecnt;
} VDHR_t;

// def @EBS22 CAN Message (419349758)
#define EBS22_IDE (1U)
#define EBS22_DLC (8U)
#define EBS22_CANID (0x18FEC4FEU)
#define EBS22_CYC (100U)
// -- Electronic Brake System #2/2  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-2.
// signal: @AxleLoadSum
#define AxleLoadSum_CovFactor 2
#define AxleLoadSum_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // Signal indicating the ABS is active/passive.
  // 1 - "Active" 
  // 0 - "Passiv, but installed" 

  uint8_t VehicleABSActive;              //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // This signal indicates the active/passive state in all cases when the installed retarder is applied by the driver?s demand or by other systems (brakes).
  // 1 - "Active" 
  // 0 - "Passive" 

  uint8_t VehicleRetarderCtrlActive;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal indicating the service brake of the towed vehicle is active/passive, by observing the brake pressure.
  // 1 - "Active" 
  // 0 - "Passive" 

  uint8_t VehicleServiceBrakeActive;     //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal indicating the automatic towed vehicle braking is active/passive.
  // 1 - "Active" 
  // 0 - "Passive" 

  uint8_t AutomTowedVehBreakActive;      //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal indicating the actual supply voltage is sufficient/insufficient for proper brake function (including over voltage).
  // 1 - "Vehicle el. supply sufficient" 
  // 0 - "Vehicle el. supply insufficient" 

  uint8_t VehicleElectrSupplySuff;       //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Request from the towed vehicle to the commercial vehicle to activate the red warning signal on the commercial vehicle, which indicates certain specified failures within the braking equipment of the towed vehicles.
  // 1 - "Towed vehicle failure indicated" 
  // 0 - "No towed vehicle failure indicat" 

  uint8_t RedWarningSignalRequest;       //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Request from the towed vehicle to the commercial vehicle to activate the amber warning signal on the commercial vehicle.
  // 1 - "Towed vehicle failure indicated" 
  // 0 - "No towed vehicle failure indicat" 

  uint8_t AmberWarningSignalReq;         //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates the status of the supply of non-braking systems.
  // 1 - "Supply switched on" 
  // 0 - "Supply switched off" 

  uint8_t ElecSupplyOfNonBrakingSys;     //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal indicating the vehicle has one or more axle(s) fitted with spring brakes.
  // 1 - "Vehicle with spring brakes" 
  // 0 - "Vehicle without spring brakes" 

  uint8_t SpringBrakeInstalled;          //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal indicating the vehicle is equipped with an electrical load proportional function.
  // 1 - "Vehicle with el. load proportion" 
  // 0 - "Vehicle without el. load proport" 

  uint8_t ElectrLoadPropFunc;            //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Information to identify a dolly axle within the road train.
  // 1 - "Dolly axle" 
  // 0 - "Towing or towed vehicle" 

  uint8_t VehicleType;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal indicating the vehicle spring brake is engaged.
  // 1 - "Vehicle spring brake is engaged" 
  // 0 - "Vehicle spring brake is released" 

  uint8_t SpringBrakeEngaged;            //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // The parameter indicates whether the loading ramp approach assistance is activated.
  // 1 - "Assistance active" 
  // 0 - "Assistance not active" 

  uint8_t LoadingRampApproachAssist;     //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal indicating the trailer is requesting to be braked by the commercial vehicle by means of bleeding the pneumatic supply line.
  // 1 - "Supply line braking request" 
  // 0 - "No supply line braking request" 

  uint8_t SupplyLineBrakingRequest;      //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Sum of the static vertical loads of the vehicle axles.
  uint16_t AxleLoadSum;                  //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     

  // This parameter is the 100% reference value for all defined indicated retarder torque parameters.  It is only defined once and doesn't change if a different retarder torque map becomes valid.
  uint16_t ReferenceRetarderTorque;      //      Bits=16.  [ 0     , 64255  ]  Unit:'Nm'   
  uint32_t framecnt;
} EBS22_t;

// def @EBS23 CAN Message (419350270)
#define EBS23_IDE (1U)
#define EBS23_DLC (8U)
#define EBS23_CANID (0x18FEC6FEU)
#define EBS23_CYC (100U)
// -- Electronic Brake System #2/3  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-2.
// signal: @TyrePressure
#define TyrePressure_CovFactor 10
#define TyrePressure_CovS(x) ((uint8_t)((x / 10)))
// signal: @BrakeLining
#define BrakeLining_CovFactor 0.4
#define BrakeLining_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @BrakeTemperature
#define BrakeTemperature_CovFactor 10
#define BrakeTemperature_CovS(x) ((uint8_t)((x / 10)))
// signal: @PneumaticSupplyPressure
#define PneumaticSupplyPressure_CovFactor 5
#define PneumaticSupplyPressure_CovS(x) ((uint8_t)((x / 5)))
typedef struct
{

  // Signal which indicates that the tyre pressure is insufficient
  // 1 - "Tyre pressure sufficient" 
  // 0 - "Tyre pressure insufficient" 

  uint8_t TyrePressureSufficient;        //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates that the brake lining is sufficient/insufficient.
  // 1 - "Brake linings sufficient" 
  // 0 - "Brake linings insufficient" 

  uint8_t BrakeLiningSufficient;         //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates that the brake temperature is higher than a specific level.
  // 1 - "Brake temperature normal" 
  // 0 - "Brake temperature out of range" 

  uint8_t BrakeTemperatureStatus;        //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal indicating the actual supply pressure of the reservoir of the braking system is insufficient or sufficient.
  // 1 - "Pneumatic supply sufficient" 
  // 0 - "Pneumatic supply insufficient" 

  uint8_t VehiclePneumSupplySuff;        //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // First part of identification number of the tyre or wheel (position on each axle).
  // 15 - "Wheel position 15" 
  // 14 - "Wheel position 14" 
  // 13 - "Wheel position 13" 
  // 12 - "Wheel position 12" 
  // 11 - "Wheel position 11" 
  // 10 - "Wheel position 10" 
  // 9 - "Wheel position 9" 
  // 8 - "Wheel position 8" 
  // 7 - "Wheel position 7" 
  // 6 - "Wheel position 6" 
  // 5 - "Wheel position 5" 
  // 4 - "Wheel position 4" 
  // 3 - "Wheel position 3" 
  // 2 - "Wheel position 2" 
  // 1 - "Wheel position 1" 
  // 0 - "Wheel position not identified" 

  uint8_t TyreWheelIdentPressure1;       //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Second part of identification number of the tyre or wheel (the number of axles).
  // 15 - "Axle position 15" 
  // 14 - "Axle position 14" 
  // 13 - "Axle position 13" 
  // 12 - "Axle position 12" 
  // 11 - "Axle position 11" 
  // 10 - "Axle position 10" 
  // 9 - "Axle position 9" 
  // 8 - "Axle position 8" 
  // 7 - "Axle position 7" 
  // 6 - "Axle position 6" 
  // 5 - "Axle position 5" 
  // 4 - "Axle position 4" 
  // 3 - "Axle position 3" 
  // 2 - "Axle position 2" 
  // 1 - "Axle position 1" 
  // 0 - "Axle position not identified" 

  uint8_t TyreWheelIdentPressure2;       //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // First part of identification number of the tyre or wheel (position on each axle).
  // 15 - "Wheel position 15" 
  // 14 - "Wheel position 14" 
  // 13 - "Wheel position 13" 
  // 12 - "Wheel position 12" 
  // 11 - "Wheel position 11" 
  // 10 - "Wheel position 10" 
  // 9 - "Wheel position 9" 
  // 8 - "Wheel position 8" 
  // 7 - "Wheel position 7" 
  // 6 - "Wheel position 6" 
  // 5 - "Wheel position 5" 
  // 4 - "Wheel position 4" 
  // 3 - "Wheel position 3" 
  // 2 - "Wheel position 2" 
  // 1 - "Wheel position 1" 
  // 0 - "Wheel position not identified" 

  uint8_t TyreWheelIdentLining1;         //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Second part of identification number of the tyre or wheel (the number of axles).
  // 15 - "Axle position 15" 
  // 14 - "Axle position 14" 
  // 13 - "Axle position 13" 
  // 12 - "Axle position 12" 
  // 11 - "Axle position 11" 
  // 10 - "Axle position 10" 
  // 9 - "Axle position 9" 
  // 8 - "Axle position 8" 
  // 7 - "Axle position 7" 
  // 6 - "Axle position 6" 
  // 5 - "Axle position 5" 
  // 4 - "Axle position 4" 
  // 3 - "Axle position 3" 
  // 2 - "Axle position 2" 
  // 1 - "Axle position 1" 
  // 0 - "Axle position not identified" 

  uint8_t TyreWheelIdentLining2;         //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // First part of identification number of the tyre or wheel (position on each axle).
  // 15 - "Wheel position 15" 
  // 14 - "Wheel position 14" 
  // 13 - "Wheel position 13" 
  // 12 - "Wheel position 12" 
  // 11 - "Wheel position 11" 
  // 10 - "Wheel position 10" 
  // 9 - "Wheel position 9" 
  // 8 - "Wheel position 8" 
  // 7 - "Wheel position 7" 
  // 6 - "Wheel position 6" 
  // 5 - "Wheel position 5" 
  // 4 - "Wheel position 4" 
  // 3 - "Wheel position 3" 
  // 2 - "Wheel position 2" 
  // 1 - "Wheel position 1" 
  // 0 - "Wheel position not identified" 

  uint8_t TyreWheelIdentTemp1;           //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Second part of identification number of the tyre or wheel (the number of axles).
  // 15 - "Axle position 15" 
  // 14 - "Axle position 14" 
  // 13 - "Axle position 13" 
  // 12 - "Axle position 12" 
  // 11 - "Axle position 11" 
  // 10 - "Axle position 10" 
  // 9 - "Axle position 9" 
  // 8 - "Axle position 8" 
  // 7 - "Axle position 7" 
  // 6 - "Axle position 6" 
  // 5 - "Axle position 5" 
  // 4 - "Axle position 4" 
  // 3 - "Axle position 3" 
  // 2 - "Axle position 2" 
  // 1 - "Axle position 1" 
  // 0 - "Axle position not identified" 

  uint8_t TyreWheelIdentTemp2;           //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Actual tyre pressure without corrections.
  uint8_t TyrePressure;                  //      Bits=08.  [ 0     , 2500   ]  Unit:'kPa'   Factor= 10    

  // Actual relative value of brake lining of a specific brake.
  uint8_t BrakeLining;                   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Actual brake temperature.
  uint8_t BrakeTemperature;              //      Bits=08.  [ 0     , 2500   ]  Unit:'?C'    Factor= 10    

  // Actual supply pressure of the reservoir of the braking system.
  uint8_t PneumaticSupplyPressure;       //      Bits=08.  [ 0     , 1250   ]  Unit:'kPa'   Factor= 5     
  uint32_t framecnt;
} EBS23_t;

// def @GPM22 CAN Message (419350782)
#define GPM22_IDE (1U)
#define GPM22_DLC (8U)
#define GPM22_CANID (0x18FEC8FEU)
#define GPM22_CYC (100U)
// -- General Purpose Message #2/2  Message to transmit data of the towed vehicle to the towing vehicle. See ISO 11992-3.
// signal: @RearObstacleDistance
#define RearObstacleDistance_CovFactor 2
#define RearObstacleDistance_CovS(x) ((uint8_t)((x / 2)))
// signal: @ThermalBodyTemperature
#define ThermalBodyTemperature_CovFactor 1
#define ThermalBodyTemperature_CovS(x) ((int16_t)(x + 125))
// signal: @BodyFluidLevel
#define BodyFluidLevel_CovFactor 2
#define BodyFluidLevel_CovS(x) ((uint16_t)((x / 2)))
// signal: @BodyPressure
#define BodyPressure_CovFactor 0.1
#define BodyPressure_CovS(x) ((uint8_t)((x / 0.1)))
typedef struct
{

  // Signal which indicates that an obstacle detection device (ODD) is active/inactive.
  // 1 - "ODD active" 
  // 0 - "ODD inactive" 

  uint8_t ODDStatus;                     //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates that the anti-theft device is switched on or off.
  // 1 - "Anti-theft device on" 
  // 0 - "Anti-theft device off" 

  uint8_t AntiTheftDeviceStatus;         //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // The actual distance between the back of the towed vehicle and any obstacle.
  uint8_t RearObstacleDistance;          //      Bits=08.  [ 0     , 500    ]  Unit:'cm'    Factor= 2     

  // The actual temperature in a thermal body on the towed vehicle.
  int16_t ThermalBodyTemperature;        //      Bits=08.  [ -125  , 125    ]  Unit:'?C'    Offset= -125     

  // The actual fluid level in a body on the towed vehicle.
  uint16_t BodyFluidLevel;               //      Bits=16.  [ 0     , 128510 ]  Unit:'L'     Factor= 2     

  // The actual pressure in a body on the towed vehicle.
  uint8_t BodyPressure;                  //      Bits=08.  [ 0     , 25     ]  Unit:'bar'   Factor= 0.1   
  uint32_t framecnt;
} GPM22_t;

// def @EBS12 CAN Message (419351038)
#define EBS12_IDE (1U)
#define EBS12_DLC (8U)
#define EBS12_CANID (0x18FEC9FEU)
#define EBS12_CYC (100U)
// -- Electronic Brake System #1/2  Message to transmit data of the towing vehicle to the towed vehicle. See ISO 11992-2.
// signal: @RoadCurvature
#define RoadCurvature_CovFactor 0.0078125
#define RoadCurvature_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
typedef struct
{

  // This signal indicates the active/passive state in all cases when the installed retarder is applied by the driver?s demand or by other systems (brakes).
  // 1 - "Active" 
  // 0 - "Passive" 

  uint8_t VehicleRetarderCtrlActive;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Signal which indicates that the service brake demand value sent by the towing vehicle can be generated by one or two independent electrical braking circuit(s).
  // 1 - "Two el. circuit brake available" 
  // 0 - "One el. circuit brake available" 

  uint8_t TwoElCircuitsBrakeDemand;      //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Request to activate the ABS off-road function. The switch signal is independent of an actual ABS control situation.
  // 1 - "ABS off-road switch on" 
  // 0 - "ABS off-road switch off" 

  uint8_t ABSOffroadRequest;             //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Signal which indicates that the towing vehicle has a pneumatic control line for the towed vehicle service braking system
  // 1 - "Towing veh with pn ctrl line" 
  // 0 - "Towing veh without pn ctrl line" 

  uint8_t PneumaticControlLine;          //      Bits=02.  [ 0     , 1      ]  Unit:''     

  // Estimated value of the current road curvature for use by the adaptive cruise control system.  Positive values are used for left curves.  Curvature is the inverse of the radius and is zero for straight roads.
  int32_t RoadCurvature;                 //      Bits=16.  [ -250  , 251.992 ]  Unit:'1/km'  Offset= -250      Factor= 0.0078125
  uint32_t framecnt;
} EBS12_t;

// def @DM05 CAN Message (419352318)
#define DM05_IDE (1U)
#define DM05_DLC (8U)
#define DM05_CANID (0x18FECEFEU)
// -- Diagnostic Readiness 1  Reports the diagnostics information that relates to diagnostic readiness.
typedef struct
{

  // Identifies the number of active trouble codes that are present in a specific controller. If no DTCs are active, this field should be set to zero.
  uint8_t ActiveTroubleCodes;                 //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the number of previously active trouble codes that are present in a specific controller. If no DTCs have been previously active, this field should be set to zero.
  uint8_t PreviouslyActiveTroubleCodes;       //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Identifies the OBD compliance capability of the responding controller. Identifies the requirements level to which the controller was built.
  // 10 - "JOBD" 
  // 11 - "JOBD and OBD II" 
  // 12 - "JOBD and EOBD" 
  // 13 - "JOBD, EOBD and OBD II" 
  // 14 - "Heavy Duty Vehicles (EURO IV) B1" 
  // 15 - "Heavy Duty Vehicles (EURO V) B2" 
  // 16 - "Heavy Duty Vehicles (EURO EEC) C" 
  // 17 - "EMD" 
  // 18 - "EMD+" 
  // 19 - "HD OBD P" 
  // 20 - "HD OBD" 
  // 21 - "WWH OBD" 
  // 22 - "OBD II (California, ARB 07/08)" 
  // 23 - "HD EOBD" 
  // 25 - "OBD-M (SI-SD/I)" 
  // 6 - "EOBD" 
  // 7 - "EOBD and OBD II" 
  // 8 - "EOBD and OBD" 
  // 9 - "EOBD, OBD and OBD II" 
  // 5 - "Not intended to meet OBD II req." 
  // 4 - "OBD I" 
  // 3 - "OBD and OBD II" 
  // 2 - "OBD (Federal, EPA)" 
  // 1 - "OBD II (California, ARB)" 
  // 0 - "Reserver for assignment by SAE" 

  uint8_t OBDCompliance;                      //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "test supported" 
  // 0 - "test not supported" 

  uint8_t MisfireMonitoringSupport;           //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // 1 - "test supported" 
  // 0 - "test not supported" 

  uint8_t FuelSystemMonitoringSupport;        //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "test supported" 
  // 0 - "test not supported" 

  uint8_t ComprehensiveComponentMonSupp;      //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // 1 - "test not complete" 
  // 0 - "test complete" 

  uint8_t MisfireMonitoringStatus;            //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // 1 - "test not complete" 
  // 0 - "test complete" 

  uint8_t FuelSystemMonitoringStatus;         //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "test not complete" 
  // 0 - "test complete" 

  uint8_t ComprehensiveCompMonStatus;         //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "TestSupported" 
  // 0 - "TestNotSupported" 

  uint8_t CatalystMonSupp;                    //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "TestSupported" 
  // 0 - "TestNotSupported" 

  uint8_t HeatedCatalystMonSupp;              //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // 1 - "TestSupported" 
  // 0 - "TestNotSupported" 

  uint8_t EvaporativeSystemMonSupp;           //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "TestSupported" 
  // 0 - "TestNotSupported" 

  uint8_t SecondAirSystemMonSupp;             //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "TestSupported" 
  // 0 - "TestNotSupported" 

  uint8_t ACSystemRefrigerantMonSupp;         //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "TestSupported" 
  // 0 - "TestNotSupported" 

  uint8_t OxygenSensorMonSupp;                //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "TestSupported" 
  // 0 - "TestNotSupported" 

  uint8_t OxygenSensorHeaterMonSupp;          //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "TestSupported" 
  // 0 - "TestNotSupported" 

  uint8_t EGRSystemMonitoringSupp;            //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "TestSupported" 
  // 0 - "TestNotSupported" 

  uint8_t ColdStartAidSystemMonSupp;          //      Bits=01.  [ 0     , 1      ]  Unit:''     

  int8_t BoostPressureControlSystemSuppor;    //  [-] Bits=01.  [ 0     , 0      ]  Unit:''     

  int8_t DieselParticulateFilterSupport;      //  [-] Bits=01.  [ 0     , 0      ]  Unit:''     

  int8_t NOxConvertingCatalystAdsorberSup;    //  [-] Bits=01.  [ 0     , 0      ]  Unit:''     

  int8_t NMHCConvertingCatalystSupport;       //  [-] Bits=01.  [ 0     , 0      ]  Unit:''     

  // 0 - "TestComplete" 
  // 1 - "TestNotComplete" 

  uint8_t CatalystMonStatus;                  //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "TestNotComplete" 
  // 0 - "TestComplete" 

  uint8_t HeatedCatalystMonStatus;            //      Bits=01.  [ 0     , 0      ]  Unit:''     

  // 1 - "TestNotComplete" 
  // 0 - "TestComplete" 

  uint8_t EvaporativeSystemMonStatus;         //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "TestNotComplete" 
  // 0 - "TestComplete" 

  uint8_t SecondAirSystemMonStatus;           //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "TestNotComplete" 
  // 0 - "TestComplete" 

  uint8_t ACSystemRefrigerantMonStatus;       //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "test not complete" 
  // 0 - "test complete" 

  uint8_t OxygenSensorMonStatus;              //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "TestNotComplete" 
  // 0 - "TestComplete" 

  uint8_t OxygenSensorHeaterMonStatus;        //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "TestNotComplete" 
  // 0 - "TestComplete" 

  uint8_t EGRSystemMonitoringStatus;          //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // 1 - "TestNotComplete" 
  // 0 - "TestComplete" 

  uint8_t ColdStartAidSystemMonStatus;        //      Bits=01.  [ 0     , 1      ]  Unit:''     

  int8_t BoostPressureControlSystemStatus;    //  [-] Bits=01.  [ 0     , 0      ]  Unit:''     

  int8_t DieselParticulateFilterStatus;       //  [-] Bits=01.  [ 0     , 0      ]  Unit:''     

  int8_t NOxConvertingCatalystAdsorberSta;    //  [-] Bits=01.  [ 0     , 0      ]  Unit:''     

  int8_t NMHCConvertingCatalystStatus;        //  [-] Bits=01.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} DM05_t;

// def @DM08 CAN Message (419352830)
#define DM08_IDE (1U)
#define DM08_DLC (8U)
#define DM08_CANID (0x18FED0FEU)
// -- Test Results for Non-continuously Monitored Systems  The purpose of this response PG is to report the test results for one of the non-continuously monitored tests invoked using DM7
typedef struct
{

  // The TID has 2 methods to designate the test to be run. The first method uses the TID alone and these test identifiers are manufacturer-defined test identifiers. For this first use there are 64 valid test identifiers, 1 to 64. The second method uses ...
  // 250 - "Last Measured Scaled Results" 
  // 249 - "Command Standard Test" 
  // 247 - "All scaled test results" 

  uint8_t TestIdentifier;                //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // This parameter identifies the non-continuously monitored component identifier that was tested. These component identifiers are defined by the manufacturer. They are necessary when multiple components or systems are present on the vehicle and have ...
  uint8_t TestType;                      //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // The test value collected during the test. If the test performed does not have both a test limit minimum and maximum, then the appropriate limit value (Maximum or Minimum) should be set to all ones. SAE J1939-71 defines this to mean not available.
  uint16_t TestValue;                    //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The test value must be less than or equal to Test Limit Maximum in order for the test to pass.
  uint16_t TestLimitMaximum;             //      Bits=16.  [ 0     , 0      ]  Unit:''     

  // The test value must be greater than or equal to Test Limit Minimum in order for the test to pass.
  uint16_t TestLimitMinimum;             //      Bits=16.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} DM08_t;

// def @DM09 CAN Message (419353086)
#define DM09_IDE (1U)
#define DM09_DLC (8U)
#define DM09_CANID (0x18FED1FEU)
// -- Oxygen Sensor Test Results  SAE J1939 will not specify an implementation for this DM.  Oxygen sensor test and results should be communicated using DM7 and DM8
typedef struct
{
  uint32_t framecnt;
} DM09_t;

// def @DM10 CAN Message (419353342)
#define DM10_IDE (1U)
#define DM10_DLC (8U)
#define DM10_CANID (0x18FED2FEU)
// -- Non-continuously Monitored System Test Identifiers Support  The purpose of this PG is to report the list of non-continuously monitored systems tests supported by the controller.
typedef struct
{

  // Indicates the test identifiers that the controller supports. Each bit is assigned to one test. Therefore, we can have up to 64 tests without having to use the transport protocol of SAE J1939-21. The assignment of a given test identifier to a given ...
  int64_t TestIdentifierSupported;       //      Bits=64.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} DM10_t;

// def @AS CAN Message (419354110)
#define AS_IDE (1U)
#define AS_DLC (8U)
#define AS_CANID (0x18FED5FEU)
#define AS_CYC (1000U)
// -- Alternator Information
// signal: @AltSpeed
#define AltSpeed_CovFactor 0.5
#define AltSpeed_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // Actual rotation speed of the alternator.
  uint16_t AltSpeed;                     //      Bits=16.  [ 0     , 32127.5 ]  Unit:'rpm'   Factor= 0.5   

  // Alternator 1 operating status.    00 Alternator 1 not charging  01 Alternator 1 charging  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "Alternator 1 charging" 
  // 0 - "Alternator 1 not charging" 

  uint8_t Alt1Status;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Alternator 2 operating status.    00 Alternator 2 not charging  01 Alternator 2 charging  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "Alternator 2 charging" 
  // 0 - "Alternator 2 not charging" 

  uint8_t Alt2Status;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Alternator 3 operating status.    00 Alternator 3 not charging  01 Alternator 3 charging  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "Alternator 3 charging" 
  // 0 - "Alternator 3 not charging" 

  uint8_t Alt3Status;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Alternator 4 operating status.    00 Alternator 4 not charging  01 Alternator 4 charging  10 error  11 not available
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "Alternator 4 charging" 
  // 0 - "Alternator 4 not charging" 

  uint8_t Alt4Status;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} AS_t;

// def @HSI1 CAN Message (419354366)
#define HSI1_IDE (1U)
#define HSI1_DLC (8U)
#define HSI1_CANID (0x18FED6FEU)
#define HSI1_CYC (1000U)
// -- Hybrid System Inputs 1  This message can be sent by any controller that has hybrid system related information.
// signal: @HybrdSystmCstngRgnrtvBrkngLvlSlc
#define HybrdSystmCstngRgnrtvBrkngLvlSlc_CovFactor 0.4
#define HybrdSystmCstngRgnrtvBrkngLvlSlc_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Indicates the Protection Override switch position.  This switch allows the operator to override hybrid system protection features and failure modes allowing hybrid system to continue to operate if possible.  00 = Not Active  01 = Active  10 = Error   ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Active" 
  // 0 - "Not Active" 

  uint8_t HybrdSystmPrtctionOverrideSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the coolant level switch position in the hybrid system propulsion (e.g. electric motor, generator) cooling system.    00 = Coolant Level is not sufficient  01 = Coolant Level is sufficient  10 = Error  11 = Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Coolant Level is sufficient" 
  // 0 - "Coolant Level is not sufficient" 

  uint8_t HybrdSystmPrplsnClantLevelSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the coolant level switch position in the hybrid system power electronics (e.g. Inverters, DC/DC converters) cooling system.    00 = Coolant Level is not sufficient  01 = Coolant Level is sufficient  10 = Error  11 = Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Coolant Level is sufficient" 
  // 0 - "Coolant Level is not sufficient" 

  uint8_t HybrdSystmPwrElctrncsClntLvlSwtc;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the off-board plug-in charger connection status.  One of the uses of this signal is to protect against vehicle motion while a charger is plugged in.  00 = Off-board charger is not connected  01 = Off-board charger is connected  10 = Error   ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Off-board charger is connected" 
  // 0 - "Off-board charger is not connected" 

  uint8_t HybrdSystmOffBrdChrgrCnnctnSttus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the regenerative braking disable switch position.  This switch gives the operator the ability to disable all regenerative braking from all inputs (e.g. such as during slippery road conditions).  00 = Regenerative Braking Disable Switch is ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Regenerative Braking  Disable Switch is on" 
  // 0 - "Regenerative Braking Disable Switch is off" 

  uint8_t HybrdSystmRgnrtvBrkngDsbleSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the brake pedal regenerative braking disable switch position.  This switch allows the operator to disable regenerative braking (e.g. such as during slippery road conditions) that is controlled by brake pedal application.   Regenerative ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Brake pedal regenerative braking disable switch is on" 
  // 0 - "Brake pedal regenerative braking disable switch is off" 

  uint8_t HybrdSystmBrkPdlRgnrtvBrkngDsblS;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // When the operator enables this switch, the propulsion aspect of hybrid system operation will be disabled.  However, hybrid powered accessories may be on and the engine may still run.  Regenerative braking is allowed unless disabled by SPN 7552 ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t PropulsionDisableSw;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // When the operator enables this switch, all hybrid system functionality is disabled including propulsion, regenerative braking, and hybrid powered accessories.  For electric hybrids, the hybrid system shall be placed in an electrically off state ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t ShutdownSw;                         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the coasting regenerative braking level selector position.  Coasting regenerative braking occurs when neither the accelerator nor the brake pedal are depressed.  The coasting regenerative braking level is the position of the driver?s ...
  uint8_t HybrdSystmCstngRgnrtvBrkngLvlSlc;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} HSI1_t;

// def @AUXIO1 CAN Message (419355134)
#define AUXIO1_IDE (1U)
#define AUXIO1_DLC (8U)
#define AUXIO1_CANID (0x18FED9FEU)
// -- Auxiliary Input/Output Status 1  Notes:  Implementers are encouraged to use specific functional SPNs whenever possible.  AUXIO PGNs are intended for two categories of use in which fixed mapping to functions is not possible:  1)  Generic I/O devices   ...
typedef struct
{

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O04;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O03;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O02;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O01;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O08;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O07;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 
  // 3 - "Not available" 

  uint8_t AuxI_O06;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O05;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O12;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O11;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O10;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O09;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O16;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O15;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O14;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the current status of auxiliary input/output functions that are configured uniquely per application.    00 - Auxiliary channel off  01 - Auxiliary channel on  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Auxiliary channel on" 
  // 0 - "Auxiliary channel off" 

  uint8_t AuxI_O13;                      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Auxiliary channel of data (16 bit) read by the ECU.  This data is in A/D counts and is manufacturer specific.  It may be configured uniquely per application.
  uint16_t AuxI_OChannel1;               //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Auxiliary channel of data (16 bit) read by the ECU.  This data is in A/D counts and is manufacturer specific.  It may be configured uniquely per application.
  uint16_t AuxI_OChannel2;               //      Bits=16.  [ 0     , 64255  ]  Unit:''     
  uint32_t framecnt;
} AUXIO1_t;

// def @SOFT CAN Message (419355390)
#define SOFT_IDE (1U)
#define SOFT_DLC (8U)
#define SOFT_CANID (0x18FEDAFEU)
// -- Software Identification  Byte: 1 Number of software identification fields  2-n Software identification(s)  Delimiter (ASCII ?*?)  NOTE- The software identification field is variable in length and may contain up to 125 software identification ...
typedef struct
{

  // Number of software identification designators represented in the software identification parameter group.
  uint8_t NmbrOfSftwreIdentificationFields;   //      Bits=08.  [ 0     , 125    ]  Unit:'steps'

  // Software identification of an electronic module.  As an example, this parameter may be represented with ASCII characters MMDDYYaa where MM is the month, DD is the day, YY is the year, and aa is the revision number.  NOTE The ASCII character ?*? is ...
  uint8_t SoftwareIdentification;             //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} SOFT_t;

// def @EFL_P2 CAN Message (419355646)
#define EFL_P2_IDE (1U)
#define EFL_P2_DLC (8U)
#define EFL_P2_CANID (0x18FEDBFEU)
#define EFL_P2_CYC (5000U)
// -- Engine Fluid Level/Pressure 2  2nd PGN which identifies parameters that are either measuring various pressures within the engine or identifying engine fluid levels
// signal: @EngInjectionCtrlPress
#define EngInjectionCtrlPress_CovFactor 0.00390625
#define EngInjectionCtrlPress_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @EngInjectorMeteringRail1Press
#define EngInjectorMeteringRail1Press_CovFactor 0.00390625
#define EngInjectorMeteringRail1Press_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @EngInjectorTimingRail1Press
#define EngInjectorTimingRail1Press_CovFactor 0.00390625
#define EngInjectorTimingRail1Press_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @EngInjectorMeteringRail2Press
#define EngInjectorMeteringRail2Press_CovFactor 0.00390625
#define EngInjectorMeteringRail2Press_CovS(x) ((uint16_t)((x / 0.00390625)))
typedef struct
{

  // The gage pressure of the engine oil in the hydraulic accumulator that powers an intensifier used for fuel injection.
  uint16_t EngInjectionCtrlPress;          //      Bits=16.  [ 0     , 250.996 ]  Unit:'MPa'   Factor= 0.00390625

  // The gage pressure of fuel in the primary, or first, metering rail as delivered from the supply pump to the injector metering intake.
  uint16_t EngInjectorMeteringRail1Press;  //      Bits=16.  [ 0     , 250.996 ]  Unit:'MPa'   Factor= 0.00390625

  // The gage pressure of fuel in the timing rail delivered from the supply pump to the injector timing intake.
  uint16_t EngInjectorTimingRail1Press;    //      Bits=16.  [ 0     , 250.996 ]  Unit:'MPa'   Factor= 0.00390625

  // The gage pressure of fuel in the metering rail #2 as delivered from the supply pump to the injector metering intake.  See Figure SPN16_A for fuel system related parameters.  Although the figure does not show rail #2 it does show the relationship of ...
  uint16_t EngInjectorMeteringRail2Press;  //      Bits=16.  [ 0     , 250.996 ]  Unit:'MPa'   Factor= 0.00390625
  uint32_t framecnt;
} EFL_P2_t;

//// def @IO CAN Message (419355902)
//#define IO_IDE (1U)
//#define IO_DLC (8U)
//#define IO_CANID (0x18FEDCFEU)
//// -- Idle Operation
//// signal: @EngTotalIdleFuelUsed
//#define EngTotalIdleFuelUsed_CovFactor 0.5
//#define EngTotalIdleFuelUsed_CovS(x) ((uint32_t)((x / 0.5)))
//// signal: @EngTotalIdleHours
//#define EngTotalIdleHours_CovFactor 0.05
//#define EngTotalIdleHours_CovS(x) ((uint32_t)((x / 0.05)))
//typedef struct
//{

//  // Accumulated amount of fuel used during vehicle operation while under idle conditions.
//  uint32_t EngTotalIdleFuelUsed;         //      Bits=32.  [ 0     , 2105540607.5 ]  Unit:'L'     Factor= 0.5

//  // Accumulated time of operation of the engine while under idle conditions.
//  uint32_t EngTotalIdleHours;            //      Bits=32.  [ 0     , 210554060.75 ]  Unit:'h'     Factor= 0.05
//  uint32_t framecnt;
//} IO_t;

// def @TC CAN Message (419356158)
#define TC_IDE (1U)
#define TC_DLC (8U)
#define TC_CANID (0x18FEDDFEU)
#define TC_CYC (1000U)
// -- Turbocharger
// signal: @EngTurboLubeOilPress1
#define EngTurboLubeOilPress1_CovFactor 4
#define EngTurboLubeOilPress1_CovS(x) ((uint8_t)((x / 4)))
// signal: @EngTurbo1Speed
#define EngTurbo1Speed_CovFactor 4
#define EngTurbo1Speed_CovS(x) ((uint16_t)((x / 4)))
// signal: @EngTurboDiffSpeed
#define EngTurboDiffSpeed_CovFactor 4
#define EngTurboDiffSpeed_CovS(x) ((uint16_t)((x / 4)))
typedef struct
{

  // Gage pressure of oil in turbocharger lubrication system.
  uint8_t EngTurboLubeOilPress1;         //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Rotational velocity of rotor in the turbocharger.
  uint16_t EngTurbo1Speed;               //      Bits=16.  [ 0     , 257020 ]  Unit:'rpm'   Factor= 4     

  // Switch signal which indicates the presence of oil at the turbocharger         00 = No oil present at turbocharger       01 = Oil present at turbocharger       10 = Error       11 = Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Oil present at turbocharger" 
  // 0 - "No oil present at turbocharger" 

  uint8_t EngTurboOilLevelSwitch;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The difference between turbocharger speeds on engine systems with 2 or more turbochargers. If there are are more than 2 turbochargers, it will be the difference between the fastest and the slowest turbocharger speed.
  uint16_t EngTurboDiffSpeed;            //      Bits=16.  [ 0     , 257020 ]  Unit:'rpm'   Factor= 4     
  uint32_t framecnt;
} TC_t;

// def @AIR2 CAN Message (419356414)
#define AIR2_IDE (1U)
#define AIR2_DLC (8U)
#define AIR2_CANID (0x18FEDEFEU)
// -- Engine Air Start Pressure
// signal: @EngAirStartPress
#define EngAirStartPress_CovFactor 4
#define EngAirStartPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @EngAirStartPress6831
#define EngAirStartPress6831_CovFactor 16
#define EngAirStartPress6831_CovS(x) ((uint8_t)((x / 16)))
// signal: @EngAirStopPress
#define EngAirStopPress_CovFactor 4
#define EngAirStopPress_CovS(x) ((uint8_t)((x / 4)))
typedef struct
{

  // Gage pressure of air in an engine starting system that utilizes compressed air to provide the force required to rotate the crankshaft.
  uint8_t EngAirStartPress;              //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Gage pressure of air in an engine starting system that utilizes compressed air to provide the force required to rotate the crankshaft.    See SPN 82 for higher resolution.
  uint8_t EngAirStartPress6831;          //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa'   Factor= 16    

  // Gage pressure of air in an engine stopping system that utilizes compressed air to provide the force required to stop the crankshaft. Engine stopping air is typically used for emergency engine stopping.
  uint8_t EngAirStopPress;               //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     
  uint32_t framecnt;
} AIR2_t;

// def @EEC3 CAN Message (419356670)
#define EEC3_IDE (1U)
#define EEC3_DLC (8U)
#define EEC3_CANID (0x18FEDFFEU)
#define EEC3_CYC (250U)
// -- Electronic Engine Controller 3
// signal: @NominalFrictionPercentTorque
#define NominalFrictionPercentTorque_CovFactor 1
#define NominalFrictionPercentTorque_CovS(x) ((int16_t)(x + 125))
// signal: @EnginesDesiredOperatingSpeed
#define EnginesDesiredOperatingSpeed_CovFactor 0.125
#define EnginesDesiredOperatingSpeed_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @EstEngPrsiticLossesPercentTorque
#define EstEngPrsiticLossesPercentTorque_CovFactor 1
#define EstEngPrsiticLossesPercentTorque_CovS(x) ((int16_t)(x + 125))
// signal: @AFT1ExhGasMFR
#define AFT1ExhGasMFR_CovFactor 0.2
#define AFT1ExhGasMFR_CovS(x) ((uint16_t)((x / 0.2)))
typedef struct
{

  // The calculated torque that indicates the amount of torque required by the basic engine itself added by the loss torque of accessories. It contains the frictional and thermodynamic loss of the engine itself, pumping torque loss (SPN 5398), and the ...
  int16_t NominalFrictionPercentTorque;       //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // An indication by the engine of the optimal operating speed of the engine for the current existing conditions.  These conditions may include the torque generated to accommodate powertrain demands from the operator (via the accelerator pedal), cruise ...
  uint16_t EnginesDesiredOperatingSpeed;      //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // This byte is utilized in transmission gear selection routines and indicates the engine's preference of lower versus higher engine speeds should its desired speed not be achievable.  This is a scaled ratio such that 125 represents an equal preference ...
  uint8_t EngnsDsrdOprtngSpdAsymmtryAdjstm;   //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // The calculated torque that indicates the estimated amount of torque loss due to engine parasitics, such as cooling fan, air compressor, air conditioning, etc. It is expressed as a percent of Engine Reference Torque.  If there are multiple devices on ...
  int16_t EstEngPrsiticLossesPercentTorque;   //      Bits=08.  [ 0     , 125    ]  Unit:'%'     Offset= -125     

  // Measured/calculated exhaust gas mass upstream of the aftertreatment?system in exhaust bank 1 and 2.
  uint16_t AFT1ExhGasMFR;                     //      Bits=16.  [ 0     , 12851  ]  Unit:'kg/h'  Factor= 0.2   

  // Indicates that the temperature on the intake side of the aftertreatment system has exceeded the dew point, as estimated by the ECU in exhaust bank 1.    00 - Not exceeded the dew point  01 - Exceeded the dew point  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Exceeded the dew point" 
  // 0 - "Not exceeded the dew point" 

  uint8_t AFT1InDewPoint;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the temperature on the exhaust side of the aftertreatment has exceeded the dew point, as estimated by the ECU in exhaust bank 1.    00 - Not exceeded the dew point  01 - Exceeded the dew point  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Exceeded the dew point" 
  // 0 - "Not exceeded the dew point" 

  uint8_t AFT1ExhDewPoint;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the temperature on the intake side of the aftertreatment system has exceeded the dew point, as estimated by the ECU in exhaust bank 2.    00 - Not exceeded the dew point  01 - Exceeded the dew point  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Exceeded the dew point" 
  // 0 - "Not exceeded the dew point" 

  uint8_t AFT2InDewPoint;                     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the temperature on the exhaust side of the aftertreatment has exceeded the dew point, as estimated by the ECU in exhaust bank 2.    00 - Not exceeded the dew point  01 - Exceeded the dew point  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Exceeded the dew point" 
  // 0 - "Not exceeded the dew point" 

  uint8_t AFT2ExhDewPoint;                    //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EEC3_t;

// def @VD CAN Message (419356926)
#define VD_IDE (1U)
#define VD_DLC (8U)
#define VD_CANID (0x18FEE0FEU)
#define VD_CYC (100U)
// -- Vehicle Distance
// signal: @TripDistance
#define TripDistance_CovFactor 0.125
#define TripDistance_CovS(x) ((uint32_t)((x / 0.125)))
// signal: @TotalVehicleDistance
#define TotalVehicleDistance_CovFactor 0.125
#define TotalVehicleDistance_CovS(x) ((uint32_t)((x / 0.125)))
typedef struct
{

  // Distance traveled during all or part of a journey.    NOTE See SPN 918 for alternate resolution.
  uint32_t TripDistance;                 //      Bits=32.  [ 0     , 526385151.875 ]  Unit:'km'    Factor= 0.125 

  // Accumulated distance traveled by vehicle during its operation.    NOTE See SPN 917 for alternate resolution.
  uint32_t TotalVehicleDistance;         //      Bits=32.  [ 0     , 526385151.875 ]  Unit:'km'    Factor= 0.125 
  uint32_t framecnt;
} VD_t;

// def @TCFG CAN Message (419357438)
#define TCFG_IDE (1U)
#define TCFG_DLC (8U)
#define TCFG_CANID (0x18FEE2FEU)
// -- Transmission Configuration  Total message length depends on total number of forward and reverse gear ratios.  NOTE:  The first gear ratio transmitted in bytes 3,4 will be the highest reverse gear ratio.  Additional 2-byte gear ratios will follow:   ...
// signal: @TransGearRatio
#define TransGearRatio_CovFactor 0.001
#define TransGearRatio_CovS(x) ((uint16_t)((x / 0.001)))
typedef struct
{

  // Number of reverse gear ratios in the transmission, provided as part of the transmission configuration.
  uint8_t NumberOfReverseGearRatios;     //      Bits=08.  [ 0     , 125    ]  Unit:''     

  // Number of forward gear ratios in the transmission, provided as part of the configuration.
  uint8_t NumberOfForwardGearRatios;     //      Bits=08.  [ 0     , 125    ]  Unit:''     

  // The transmission configuration describes the number of forward gears, the number of reverse gears, and the ratio of each gear with the following resolution.
  uint16_t TransGearRatio;               //      Bits=16.  [ 0     , 64.255 ]  Unit:''      Factor= 0.001 
  uint32_t framecnt;
} TCFG_t;

// def @SHUTDN CAN Message (419357950)
#define SHUTDN_IDE (1U)
#define SHUTDN_DLC (8U)
#define SHUTDN_CANID (0x18FEE4FEU)
#define SHUTDN_CYC (1000U)
// -- Shutdown
typedef struct
{

  // Status signal which identifies whether or not the engine has been shutdown by the idle shutdown timer system.  See Figure SPN590_A.    00 - No  01 - Yes  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Yes" 
  // 0 - "No" 

  uint8_t EngIdleShutdownHasShutdownEng;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status signal which indicates the status of the driver alert mode of the idle shutdown timer system.  While the driver alert mode is active, the idle shutdown timer may be overridden.  See Figure SPN590_A.  00 - Inactive  01 - Active  10 - Error  11 ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Active" 
  // 0 - "Inactive" 

  uint8_t EngIdleShutdownDriverAlertMode;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status signal which indicates the status of the override feature of the idle shutdown timer system.  See Figure SPN590_A.    00 - Inactive  01 - Active  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Active" 
  // 0 - "Inactive" 

  uint8_t EngIdleShutdownTimerOverride;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status signal which indicates the current mode of operation of the idle shutdown timer system.  See Figure SPN590_A.    00 - Inactive  01 - Active  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Active" 
  // 0 - "Inactive" 

  uint8_t EngIdleShutdownTimerState;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Parameter which indicates the configuration of the idle shutdown timer system.    00 - Disabled in calibration  01 - Enabled in calibration  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Enabled in calibration" 
  // 0 - "Disabled in calibration" 

  uint8_t EngIdleShutdownTimerFunction;       //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates that the pressure in the coolant circuit of an air conditioning system is high and the fan may be engaged.    00 - Pressure normal  01 - Pressure high, fan may be engaged  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Pressure high" 
  // 0 - "Pressure normal" 

  uint8_t A_CHighPressFanSwitch;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates the position of the low pressure switch in the coolant circuit of an air conditioning system.  When the switch is enabled, the pressure inside the circuit is too low and the compressor clutch may be disengaged.  00 - ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Pressure too low" 
  // 0 - "Pressure normal" 

  uint8_t RefrigerantLowPressSwitch;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates the position of the high pressure switch in the coolant circuit of an air conditioning system.  When the switch is enabled, the pressure inside the circuit is too high and the compressor clutch may be disengaged.  00 - ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Pressure too high" 
  // 0 - "Pressure normal" 

  uint8_t RefrigerantHighPressSwitch;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Lamp signal which indicates that the engine is too cold to start and the operator should wait until the signal becomes inactive (turns off).  See SPN 5416 for the lamp operating condition.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngWaitToStartLamp;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status signal which indicates whether or not the engine protection system has shutdown the engine.  See Figure SPN1107_A.    00 - No  01 - Yes  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Yes" 
  // 0 - "No" 

  uint8_t EngPrtectionSystemHasShutdownEng;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status signal which indicates that engine shutdown is imminent.  This engine protection signal can be a result of different systems failing, i.e., engine overheating. See Figure SPN1107_A.  00 - Not approaching  01 - Approaching  10 - Error  11 - ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Approaching" 
  // 0 - "Not approaching" 

  uint8_t EngPrtctnSystmApprachingShutdown;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status signal which indicates the status of the override feature of the engine protection system timer. See Figure SPN1107_A.    00 - Inactive  01 - Active  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Active" 
  // 0 - "Inactive" 

  uint8_t EngProtectionSystemTimerOverride;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status signal which indicates the current mode of the engine protection system timer system.  See Figure SPN1107_A.    00 - Inactive  01 - Active  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Active" 
  // 0 - "Inactive" 

  uint8_t EngProtectionSystemTimerState;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Parameter which indicates the configuration of the engine shutdown system.    00 - Disabled in calibration  01 - Enabled in calibration  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Enabled in calibration" 
  // 0 - "Disabled in calibration" 

  uint8_t EngProtectionSystemConfig;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The Engine Alarm Acknowledge Input signal as measured by the reporting ECU.  The Engine Alarm Acknowledge is a mechanism for external acknowledgement of the SPN 2814,  Engine Alarm Output Command.  00 Engine Alarm Acknowledge  Not Active  01 Engine ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Engine Alarm Acknowledge Active" 
  // 0 - "Engine Alarm Acknowledge  Not Active " 

  uint8_t EngAlarmAcknowledge;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates when the Alarm driver output is being driven. Not active means the Controller has no alarm level conditions.  00 Engine Alarm Output Command Not Active  01 Engine Alarm Output Command Active  10 Reserved  11 Not ...
  // 3 - "Not Available" 
  // 2 - "Reserved" 
  // 1 - "Engine Alarm Output Command Active" 
  // 0 - "Engine Alarm Output Command Not Active" 

  uint8_t EngAlarmOutputCmdStatus;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates when the Air Shutoff  driver output is being driven. Disabled means controller wants air flowing to the engine. Status of the airflow  shutoff as being commanded by the ECU.  00 Air Shutoff Disabled, not attempting to ...
  // 3 - "Not Available" 
  // 2 - "Reserved" 
  // 1 - "Air Shutoff Enabled" 
  // 0 - "Air Shutoff Disabled" 

  uint8_t EngAirShutoffCmdStatus;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The engine overspeed test signal as measured by the reporting ECM.  Engine Overspeed Test is a mechanism to simulate engine overspeed situations, while operating the engine within the engine's safe operating range.  State signal which indicates when ...
  // 3 - "Not Available" 
  // 2 - "Reserved" 
  // 1 - "Engine Overspeed Test Active" 
  // 0 - "Engine Overspeed Test Not Active" 

  uint8_t EngOverspeedTest;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal which indicates the actual measured position of the Air Shutoff.  00 - Air flow allowed to engine  01 - Air flow restricted  10 - Error  11 - Not Available  Note:   This parameter, in conjunction with SPN 2813 - \
  // 2 - "Error" 
  // 1 - "Air flow restricted" 
  // 0 - "Air flow allowed to engine" 
  // 3 - "Not Available" 

  uint8_t EngAirShutoffStatus;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status signal which identifies whether or not the engine has been shutdown by the PTO shutdown system.    00 - No  01 - Yes  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Yes" 
  // 0 - "No" 

  uint8_t PTOShutdownHasShutdownEng;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Parameter which indicates the configuration of the coolant level engine protection shutdown.  00 - Disabled - calibration does not allow engine protection due to low coolant level or the override is currently active  01 - Enabled - calibration ...
  // 3 - "Not Available" 
  // 2 - "Reserved" 
  // 1 - "Enabled" 
  // 0 - "Disabled" 

  uint8_t ClntLvlEngPrtctionShutdownStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} SHUTDN_t;

// def @HOURS CAN Message (419358206)
#define HOURS_IDE (1U)
#define HOURS_DLC (8U)
#define HOURS_CANID (0x18FEE5FEU)
// -- Engine Hours, Revolutions
// signal: @EngTotalHoursOfOperation
#define EngTotalHoursOfOperation_CovFactor 0.05
#define EngTotalHoursOfOperation_CovS(x) ((uint32_t)((x / 0.05)))
// signal: @EngTotalRevolutions
#define EngTotalRevolutions_CovFactor 1000
#define EngTotalRevolutions_CovS(x) ((uint32_t)((x / 1000)))
typedef struct
{

  // Accumulated time of operation of engine.
  uint32_t EngTotalHoursOfOperation;     //      Bits=32.  [ 0     , 210554060.75 ]  Unit:'h'     Factor= 0.05  

  // Accumulated number of revolutions of engine crankshaft during its operation.
  uint32_t EngTotalRevolutions;          //      Bits=32.  [ 0     , 4211081215000 ]  Unit:'r'     Factor= 1000  
  uint32_t framecnt;
} HOURS_t;

// def @TD CAN Message (419358462)
#define TD_IDE (1U)
#define TD_DLC (8U)
#define TD_CANID (0x18FEE6FEU)
// -- Time/Date
// signal: @Seconds
#define Seconds_CovFactor 0.25
#define Seconds_CovS(x) ((uint8_t)((x / 0.25)))
// signal: @Day
#define Day_CovFactor 0.25
#define Day_CovS(x) ((uint8_t)((x / 0.25)))
// signal: @Year
#define Year_CovFactor 1
#define Year_CovS(x) ((uint16_t)(x - 1985))
// signal: @LocalMinuteOffset
#define LocalMinuteOffset_CovFactor 1
#define LocalMinuteOffset_CovS(x) ((int16_t)(x + 125))
// signal: @LocalHourOffset
#define LocalHourOffset_CovFactor 1
#define LocalHourOffset_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // The seconds component of the current time of day.  This should be reported as the seconds component of the current time at UTC (Universal Time Coordinate), a.k.a. GMT; however, it may be reported as the seconds component of the current time at a ...
  uint8_t Seconds;                       //      Bits=08.  [ 0     , 59.75  ]  Unit:'s'     Factor= 0.25  

  // The minutes component of the current time of day.  This should be reported as the minutes component of the current time at UTC (Universal Time Coordinate), a.k.a. GMT; however, it may be reported as the minutes component of the current time at a ...
  uint8_t Minutes;                       //      Bits=08.  [ 0     , 59     ]  Unit:'min'  

  // The hour component of the current time of day.  This should be reported as the hour component of the current time at UTC (Universal Time Coordinate), a.k.a. GMT; however, it may be reported as the hour component of the current time at a local time ...
  uint8_t Hours;                         //      Bits=08.  [ 0     , 23     ]  Unit:'h'    

  // The month component of the current calendar date.  This should be reported as the month component of the current date at UTC (Universal Time Coordinate), a.k.a. GMT; however, it may be reported as the month component of the current date at a local ...
  uint8_t Month;                         //      Bits=08.  [ 1     , 12     ]  Unit:'months'

  // The day component of the current calendar date.  This should be reported as the day component of the current date at UTC (Universal Time Coordinate), a.k.a. GMT; however, it may be reported as the day component of the current date at a local time ...
  uint8_t Day;                           //      Bits=08.  [ 0.25  , 31.75  ]  Unit:'days'  Factor= 0.25  

  // The year component of the current calendar date.  This should be reported as the year component of the current date at UTC (Universal Time Coordinate), a.k.a. GMT; however, it may be reported as the year component of the current date at a local time ...
  uint16_t Year;                         //      Bits=08.  [ 1985  , 2235   ]  Unit:'years' Offset= 1985     

  // The minute component of the offset between the UTC time and date and a local time zone time and date.  This is the number of minutes to add to UTC (Universal Time Coordinate) time and date to convert to the time and date in the local time zone  ...
  int16_t LocalMinuteOffset;             //      Bits=08.  [ -59   , 59     ]  Unit:'min'   Offset= -125     

  // The hour component of the offset between the UTC (Universal Time Coordinate) time and date and a local time zone time and date.  This is the number of hours to add to UTC, a.k.a. GMT, time and date to convert to the time and date in the local time ...
  int16_t LocalHourOffset;               //      Bits=08.  [ -23   , 23     ]  Unit:'h'     Offset= -125     
  uint32_t framecnt;
} TD_t;

// def @VH CAN Message (419358718)
#define VH_IDE (1U)
#define VH_DLC (8U)
#define VH_CANID (0x18FEE7FEU)
// -- Vehicle Hours
// signal: @TotalVehicleHours
#define TotalVehicleHours_CovFactor 0.05
#define TotalVehicleHours_CovS(x) ((uint32_t)((x / 0.05)))
// signal: @TotalPowerTakeoffHours
#define TotalPowerTakeoffHours_CovFactor 0.05
#define TotalPowerTakeoffHours_CovS(x) ((uint32_t)((x / 0.05)))
typedef struct
{

  // Accumulated time of operation of vehicle.
  uint32_t TotalVehicleHours;            //      Bits=32.  [ 0     , 210554060.75 ]  Unit:'h'     Factor= 0.05  

  // Accumulated time of operation of power takeoff device.
  uint32_t TotalPowerTakeoffHours;       //      Bits=32.  [ 0     , 210554060.75 ]  Unit:'h'     Factor= 0.05  
  uint32_t framecnt;
} VH_t;

// def @VDS CAN Message (419358974)
#define VDS_IDE (1U)
#define VDS_DLC (8U)
#define VDS_CANID (0x18FEE8FEU)
// -- Vehicle Direction/Speed
// signal: @CompassBearing
#define CompassBearing_CovFactor 0.0078125
#define CompassBearing_CovS(x) ((uint16_t)((x / 0.0078125)))
// signal: @NavigationBasedVehicleSpeed
#define NavigationBasedVehicleSpeed_CovFactor 0.00390625
#define NavigationBasedVehicleSpeed_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @Pitch
#define Pitch_CovFactor 0.0078125
#define Pitch_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @Altitude
#define Altitude_CovFactor 0.125
#define Altitude_CovS(x) ((int32_t)((x / 0.125) + 20000))
typedef struct
{

  // Present compass bearing of vehicle.
  uint16_t CompassBearing;               //      Bits=16.  [ 0     , 501.99 ]  Unit:'deg'   Factor= 0.0078125

  // Speed of the vehicle as calculated from a device such as a Global Positioning System (GPS).
  uint16_t NavigationBasedVehicleSpeed;  //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/h'  Factor= 0.00390625

  // Pitch (rotation about the y-axis) of the vehicle as calculated by the navigation device(s).  The pitch angle for an angle of ascent is reported with a positive value. This parameter is defined according to a Z-Down axis system and the sign of the ...
  int32_t Pitch;                         //      Bits=16.  [ -200  , 301.992 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // Altitude of the vehicle referenced to sea level at standard atmospheric pressure and temperature.
  int32_t Altitude;                      //      Bits=16.  [ -2500 , 5531.875 ]  Unit:'m'     Offset= -2500     Factor= 0.125 
  uint32_t framecnt;
} VDS_t;

// def @LFC1 CAN Message (419359230)
#define LFC1_IDE (1U)
#define LFC1_DLC (8U)
#define LFC1_CANID (0x18FEE9FEU)
// -- Fuel Consumption (Liquid) 1  Engine fuel consumption accumulators.  See PGN 64777 for alternate resolution.
// signal: @EngTripFuel
#define EngTripFuel_CovFactor 0.5
#define EngTripFuel_CovS(x) ((uint32_t)((x / 0.5)))
// signal: @EngTotalFuelUsed
#define EngTotalFuelUsed_CovFactor 0.5
#define EngTotalFuelUsed_CovS(x) ((uint32_t)((x / 0.5)))
typedef struct
{

  // Fuel consumed during all or part of a journey.  See SPN 5053 for alternate resolution.
  uint32_t EngTripFuel;                  //      Bits=32.  [ 0     , 2105540607.5 ]  Unit:'L'     Factor= 0.5   

  // Accumulated amount of fuel used during vehicle operation.  See SPN 5054 for alternate resolution.
  uint32_t EngTotalFuelUsed;             //      Bits=32.  [ 0     , 2105540607.5 ]  Unit:'L'     Factor= 0.5   
  uint32_t framecnt;
} LFC1_t;

// def @VW CAN Message (419359486)
#define VW_IDE (1U)
#define VW_DLC (8U)
#define VW_CANID (0x18FEEAFEU)
// -- Vehicle Weight  NOTE?Request has to be responded to with as many messages as necessary to transmit all available information.
// signal: @AxleWeight_30
#define AxleWeight_30_CovFactor 0.5
#define AxleWeight_30_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @AxleWeight_20
#define AxleWeight_20_CovFactor 0.5
#define AxleWeight_20_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @AxleWeight_10
#define AxleWeight_10_CovFactor 0.5
#define AxleWeight_10_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @AxleWeight_00
#define AxleWeight_00_CovFactor 0.5
#define AxleWeight_00_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @TrailerWeight_30
#define TrailerWeight_30_CovFactor 2
#define TrailerWeight_30_CovS(x) ((uint16_t)((x / 2)))
// signal: @TrailerWeight_20
#define TrailerWeight_20_CovFactor 2
#define TrailerWeight_20_CovS(x) ((uint16_t)((x / 2)))
// signal: @TrailerWeight_10
#define TrailerWeight_10_CovFactor 2
#define TrailerWeight_10_CovS(x) ((uint16_t)((x / 2)))
// signal: @TrailerWeight_00
#define TrailerWeight_00_CovFactor 2
#define TrailerWeight_00_CovS(x) ((uint16_t)((x / 2)))
// signal: @CargoWeight_30
#define CargoWeight_30_CovFactor 2
#define CargoWeight_30_CovS(x) ((uint16_t)((x / 2)))
// signal: @CargoWeight_20
#define CargoWeight_20_CovFactor 2
#define CargoWeight_20_CovS(x) ((uint16_t)((x / 2)))
// signal: @CargoWeight_10
#define CargoWeight_10_CovFactor 2
#define CargoWeight_10_CovS(x) ((uint16_t)((x / 2)))
// signal: @CargoWeight_00
#define CargoWeight_00_CovFactor 2
#define CargoWeight_00_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // To identify to which of several similar devices (such as tires or fuel tanks) the information applies.  The low order 4 bits represent a position number, counting left to right when facing in the direction of normal vehicle travel (forward).  The ...
  // 48 - "Axle3_Position0" 
  // 32 - "Axle2_Position0" 
  // 16 - "Axle1_Position0" 
  // 0 - "Axle0_Position0" 

  uint8_t AxleLocation;                  //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Total mass imposed by the tires on the road surface at the specified axle.
  uint16_t AxleWeight_30;                //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kg'    Factor= 0.5   

  // Total mass imposed by the tires on the road surface at the specified axle.
  uint16_t AxleWeight_20;                //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kg'    Factor= 0.5   

  // Total mass imposed by the tires on the road surface at the specified axle.
  uint16_t AxleWeight_10;                //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kg'    Factor= 0.5   

  // Total mass imposed by the tires on the road surface at the specified axle.
  uint16_t AxleWeight_00;                //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kg'    Factor= 0.5   

  // Total mass of freight-carrying vehicle designed to be pulled by truck, including the weight of the contents.
  uint16_t TrailerWeight_30;             //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     

  // Total mass of freight-carrying vehicle designed to be pulled by truck, including the weight of the contents.
  uint16_t TrailerWeight_20;             //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     

  // Total mass of freight-carrying vehicle designed to be pulled by truck, including the weight of the contents.
  uint16_t TrailerWeight_10;             //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     

  // Total mass of freight-carrying vehicle designed to be pulled by truck, including the weight of the contents.
  uint16_t TrailerWeight_00;             //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     

  // The mass of freight carried.
  uint16_t CargoWeight_30;               //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     

  // The mass of freight carried.
  uint16_t CargoWeight_20;               //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     

  // The mass of freight carried.
  uint16_t CargoWeight_10;               //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     

  // The mass of freight carried.
  uint16_t CargoWeight_00;               //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     
  uint32_t framecnt;
} VW_t;

// def @CI CAN Message (419359742)
#define CI_IDE (1U)
#define CI_DLC (8U)
#define CI_CANID (0x18FEEBFEU)
// -- Component Identification  NOTE - The make, model, serial number and unit number fields in this message are optional and separated by an ASCII ?*?.  It is not necessary to include all fields; however, the delimiter (?*?) is always required.  Field:   ...
typedef struct
{

  // Make of the component corresponding to the codes defined in the American Trucking Association Vehicle Maintenance Reporting Standard (ATA/VMRS).  Note:  This parameter is to be transmitted as a 5 character ASCII string;  as a zero length string, if ...
  uint8_t Make;                          //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Model of the component.    NOTE - The ASCII character
  uint8_t Model;                         //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Serial number of the component.    NOTE - The ASCII character
  uint8_t SerialNumber;                  //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Owner assigned unit number for the power unit of the vehicle.    NOTE: The ASCII character
  uint8_t UnitNumber;                    //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} CI_t;

// def @VI CAN Message (419359998)
#define VI_IDE (1U)
#define VI_DLC (8U)
#define VI_CANID (0x18FEECFEU)
// -- Vehicle Identification  Byte: 1-n Vehicle Identification Number  Delimiter (ASCII ?*?)
typedef struct
{

  // Vehicle Identification Number (VIN) as assigned by the vehicle manufacturer.    NOTE The ASCII character ?*? is reserved as a delimiter.
  uint8_t VehicleIdentificationNumber;   //      Bits=08.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} VI_t;

// def @CCSS CAN Message (419360254)
#define CCSS_IDE (1U)
#define CCSS_DLC (8U)
#define CCSS_CANID (0x18FEEDFEU)
// -- Cruise Control/Vehicle Speed Setup
// signal: @MaxVehicleSpeedLimit6808
#define MaxVehicleSpeedLimit6808_CovFactor 0.00390625
#define MaxVehicleSpeedLimit6808_CovS(x) ((uint16_t)((x / 0.00390625)))
typedef struct
{

  // Maximum vehicle velocity allowed.   See SPN 6808 for an alternate resolution.
  uint8_t MaxVehicleSpeedLimit;          //      Bits=08.  [ 0     , 250    ]  Unit:'km/h' 

  // Maximum vehicle velocity at which cruise can be set.    If Cruise Control Adjusted Maximum Speed (SPN 7495) is supported, then SPN 7495 has priority over SPN 87. See the definition for SPN 7495 for more details.
  uint8_t CruiseCtrlHighSetLimitSpeed;   //      Bits=08.  [ 0     , 250    ]  Unit:'km/h' 

  // Minimum vehicle velocity at which cruise can be set or minimum vehicle velocity for cruise operation before it will exit cruise control operation.
  uint8_t CruiseCtrlLowSetLimitSpeed;    //      Bits=08.  [ 0     , 250    ]  Unit:'km/h' 

  // Maximum vehicle velocity allowed. See SPN 74 for an alternate resolution.
  uint16_t MaxVehicleSpeedLimit6808;     //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/h'  Factor= 0.00390625
  uint32_t framecnt;
} CCSS_t;

// def @ET1 CAN Message (419360510)
#define ET1_IDE (1U)
#define ET1_DLC (8U)
#define ET1_CANID (0x18FEEEFEU)
#define ET1_CYC (1000U)
// -- Engine Temperature 1
// signal: @EngCoolantTemp
#define EngCoolantTemp_CovFactor 1
#define EngCoolantTemp_CovS(x) ((int16_t)(x + 40))
// signal: @EngFuelTemp1
#define EngFuelTemp1_CovFactor 1
#define EngFuelTemp1_CovS(x) ((int16_t)(x + 40))
// signal: @EngOilTemp1
#define EngOilTemp1_CovFactor 0.03125
#define EngOilTemp1_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngTurboOilTemp
#define EngTurboOilTemp_CovFactor 0.03125
#define EngTurboOilTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngIntercoolerTemp
#define EngIntercoolerTemp_CovFactor 1
#define EngIntercoolerTemp_CovS(x) ((int16_t)(x + 40))
// signal: @EngIntercoolerThermostatOpening
#define EngIntercoolerThermostatOpening_CovFactor 0.4
#define EngIntercoolerThermostatOpening_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Temperature of liquid found in engine cooling system.
  int16_t EngCoolantTemp;                    //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of fuel (or gas) of the first fuel type. See SPN 3468 for a second temperature measurement of the first fuel type.
  int16_t EngFuelTemp1;                      //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of the engine lubricant.  Note:  If there is only one engine oil temperature measurement, this SPN should be used.  This is the SPN that is typically displayed on an on-highway truck instrument cluster.  See also SPNs 1135 and 5925 for ...
  int32_t EngOilTemp1;                       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of the turbocharger lubricant.
  int32_t EngTurboOilTemp;                   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of liquid found in the intercooler located after the turbocharger.
  int16_t EngIntercoolerTemp;                //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The current position of the thermostat used to regulate the temperature of the engine charge air cooler.  A value of 0% represents the thermostat being completely closed and 100% represents the thermostat being completely open.
  uint8_t EngIntercoolerThermostatOpening;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} ET1_t;

// def @EFL_P1 CAN Message (419360766)
#define EFL_P1_IDE (1U)
#define EFL_P1_DLC (8U)
#define EFL_P1_CANID (0x18FEEFFEU)
#define EFL_P1_CYC (5000U)
// -- Engine Fluid Level/Pressure 1  PGN which identifies parameters that are either measuring various pressures within the engine or identifying engine fluid levels
// signal: @EngFuelDeliveryPress
#define EngFuelDeliveryPress_CovFactor 4
#define EngFuelDeliveryPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @EngExCrankcaseBlowbyPress
#define EngExCrankcaseBlowbyPress_CovFactor 0.05
#define EngExCrankcaseBlowbyPress_CovS(x) ((uint8_t)((x / 0.05)))
// signal: @EngOilLevel
#define EngOilLevel_CovFactor 0.4
#define EngOilLevel_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngOilPress
#define EngOilPress_CovFactor 4
#define EngOilPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @EngCrankcasePress
#define EngCrankcasePress_CovFactor 0.0078125
#define EngCrankcasePress_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngCoolantPress
#define EngCoolantPress_CovFactor 2
#define EngCoolantPress_CovS(x) ((uint8_t)((x / 2)))
// signal: @EngCoolantLevel
#define EngCoolantLevel_CovFactor 0.4
#define EngCoolantLevel_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Gage pressure of fuel in system as delivered from supply pump to the injection pump.  See SPN 7469 for alternate resolution.    See also SPN 5578 for Fuel Delivery Absolute Pressure.
  uint8_t EngFuelDeliveryPress;          //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Differential crankcase blow-by pressure as measured through a tube with a venturi.     (SPN 1264 is not to be used - obsolete)
  uint8_t EngExCrankcaseBlowbyPress;     //      Bits=08.  [ 0     , 12.5   ]  Unit:'kPa'   Factor= 0.05  

  // Ratio of current volume of engine sump oil to maximum required volume.
  uint8_t EngOilLevel;                   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Gage pressure of oil in engine lubrication system as provided by oil pump.  See SPN 7468 for alternate resolution.
  uint8_t EngOilPress;                   //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // First instance of the gage pressure inside engine crankcase.
  int32_t EngCrankcasePress;             //      Bits=16.  [ -250  , 251.99 ]  Unit:'kPa'   Offset= -250      Factor= 0.0078125

  // Gage pressure of liquid found in engine cooling system.    See SPN 20 for alternate range and resolution.
  uint8_t EngCoolantPress;               //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // Ratio of volume of liquid found in engine cooling system to total cooling system volume.  Typical monitoring location is in the coolant expansion tank.
  uint8_t EngCoolantLevel;               //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} EFL_P1_t;

// def @PTO CAN Message (419361022)
#define PTO_IDE (1U)
#define PTO_DLC (8U)
#define PTO_CANID (0x18FEF0FEU)
#define PTO_CYC (100U)
// -- Power Takeoff Information
// signal: @PowerTakeoffOilTemp
#define PowerTakeoffOilTemp_CovFactor 1
#define PowerTakeoffOilTemp_CovS(x) ((int16_t)(x + 40))
// signal: @PowerTakeoffSpeed
#define PowerTakeoffSpeed_CovFactor 0.125
#define PowerTakeoffSpeed_CovS(x) ((uint16_t)((x / 0.125)))
// signal: @PowerTakeoffSetSpeed
#define PowerTakeoffSetSpeed_CovFactor 0.125
#define PowerTakeoffSetSpeed_CovS(x) ((uint16_t)((x / 0.125)))
typedef struct
{

  // Temperature of lubricant in device used to transmit engine power to auxiliary equipment.
  int16_t PowerTakeoffOilTemp;                //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Rotational velocity of device used to transmit engine power to auxiliary equipment.
  uint16_t PowerTakeoffSpeed;                 //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // Rotational velocity selected by operator for device used to transmit engine power to auxiliary equipment.
  uint16_t PowerTakeoffSetSpeed;              //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // Switch signal which indicates that the PTO governor toggle switch is in the enabled (ON) position and therefore it is possible to manage the PTO control function.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngPTOGovernorEnableSwitch;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates that the remote PTO governor  toggle switch is in the enabled (ON) position.  If the toggle switch is enabled and other conditions are satisfied then the remote PTO governor feature is activated and the PTO governor ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngRmtPTOGvrnrPrprgrmmdSpdCtrlSw;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates that the remote PTO governor toggle switch is in the enabled (ON) position.  If the toggle switch is enabled and other conditions are satisfied then the remote PTO governor feature is activated and the PTO governor will ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngRmtPTOGvrnrVrblSpedCtrlSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal of the PTO control activator which indicates that the activator is in the position to \    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngPTOGovernorSetSwitch;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal of the PTO control activator which indicates that the activator is in the position to \    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngPTOGvrnrCast_DecelerateSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal of the PTO control activator which indicates that the activator is in the position to \    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngPTOGovernorResumeSwitch;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal of the PTO control activator which indicates that the activator is in the position to \    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngPTOGovernorAccelerateSwitch;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Measured state of the operator?s engine PTO governor memory select switch. This switch selects which of the two available memory locations is to be used to store the dynamically assigned value. This speed will be set using the PTO governor set ...
  // 3 - "not available" 
  // 2 - "error" 
  // 1 - "PTO set speed memory 2 selected" 
  // 0 - "PTO set speed memory 1 selected" 

  uint8_t OprtrEngPTOGvrnrMmrySelectSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates that the remote PTO governor toggle switch #2 is in the enabled (ON) position. If the toggle switch is enabled and other conditions are satisfied then the remote PTO governor control feature is activated and the PTO ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t RmtPTOGvrnrPrprgrmmdSpdCtrlSwtch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which overrides other switch input's ability to disable an engine's operating condition.  00 - Off  01 - On  10 - Error  11 - Not Available  This switch input can be used to prevent the PTO from disengaging if another switch input's ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t AuxInputIgnoreSwitch;               //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} PTO_t;

// def @CCVS1 CAN Message (419361278)
#define CCVS1_IDE (1U)
#define CCVS1_DLC (8U)
#define CCVS1_CANID (0x18FEF1FEU)
#define CCVS1_CYC (100U)
// -- Cruise Control/Vehicle Speed 1  Cruise Control/Vehicle Speed 1
// signal: @WheelBasedVehicleSpeed
#define WheelBasedVehicleSpeed_CovFactor 0.00390625
#define WheelBasedVehicleSpeed_CovS(x) ((uint16_t)((x / 0.00390625)))
typedef struct
{

  // Switch signal which indicates the current axle range.    00 - Low speed range  01 - High speed range  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "High speed range" 
  // 0 - "Low speed range" 

  uint8_t TwoSpeedAxleSwitch;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates when the parking brake is set. In general the switch actuated by the operator's park brake control, whether a pedal, lever or other control mechanism  (see also SPN 619 and 5275).  00 - Parking brake not set  01 - ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Parking brake set" 
  // 0 - "Parking brake not set" 

  uint8_t ParkingBrakeSwitch;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates the position of the Cruise Control Pause Switch used on Remote Cruise Control applications. The Cruise Control Pause Switch signal temporarily disables the Cruise Control function.  00 - Off  01 - On  10 - Error ...
  // 3 - "-Take No Action" 
  // 2 - "- Error Indicator" 
  // 1 - "- On" 
  // 0 - "- Off" 

  uint8_t CruiseCtrlPauseSwitch;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Park Brake Release Inhibit Request signals the desire that an applied park brake remain applied and limit the ability of the vehicle to be moved.  00 - Park Brake Release Inhibit not requested  01 - Park Brake Release Inhibit requested  10 - SAE ...
  // 3 - "Unavailable" 
  // 2 - "SAE reserved" 
  // 1 - "Park Brake Release Inhibit requested" 
  // 0 - "Park Brake Release Inhibit not requested" 

  uint8_t ParkBrakeReleaseInhibitRq;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Speed of the vehicle as calculated from wheel or tailshaft speed.
  uint16_t WheelBasedVehicleSpeed;       //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/h'  Factor= 0.00390625

  // Cruise control is switched on.  It is not ensured that the engine is controlled by cruise control, as in the case of a large driver's demand the engine is controlled by the driver while cruise control is active (maximum selection of cruise control ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Cruise control switched on" 
  // 0 - "Cruise control switched off" 

  uint8_t CruiseCtrlActive;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates that it is possible to manage the cruise control function.    00 - Cruise control disabled  01 - Cruise control enabled  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Cruise control enabled" 
  // 0 - "Cruise control disabled" 

  uint8_t CruiseCtrlEnableSwitch;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates that the driver operated brake foot pedal is being pressed.  This brake foot pedal is controlling the vehicles? service brake (total vehicle braking application, not park brakes).  It is necessary for safe drivetrain ...
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Brake pedal depressed" 
  // 0 - "Brake pedal released" 

  uint8_t BrakeSwitch;                   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates that the clutch pedal is being pressed. It is necessary for a safe drivetrain behavior that the clutch switch is set before the clutch is opened (cruise control function).  00 - Clutch pedal released  01 - Clutch pedal ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Clutch pedal depressed" 
  // 0 - "Clutch pedal released" 

  uint8_t ClutchSwitch;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal of the cruise control activator which indicates that the activator is in the position ?set.?    00 - Cruise control activator not in the position ?set?  01 - Cruise control activator in position ?set?  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Cruise control activator in position ?set?" 
  // 0 - "Cruise control activator not in the position ?set?" 

  uint8_t CruiseCtrlSetSwitch;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal of the cruise control activator which indicates that the activator is in the position ?coast (decelerate).?  00 - Cruise control activator not in the position ?coast?  01 - Cruise control activator in position ?coast?  10 - Error  11 - ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Cruise control activator in position ?coast?" 
  // 0 - "Cruise control activator not in the position ?coast?" 

  uint8_t CruiseCtrlCoastSwitch;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal of the cruise control activator which indicates that the activator is in the position ?resume.?  00 - Cruise control activator not in the position ?resume?  01 - Cruise control activator in position ?resume?  10 - Error  11 - Not ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Cruise control activator in position ?resume?" 
  // 0 - "Cruise control activator not in the position ?resume?" 

  uint8_t CruiseCtrlResumeSwitch;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal of the cruise control activator which indicates that the activator is in the position ?accelerate.?  00 - Cruise control activator not in the position ?accelerate?  01 - Cruise control activator in position ?accelerate?  10 - Error  11 ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Cruise control activator in position ?accelerate?" 
  // 0 - "Cruise control activator not in the position ?accelerate?" 

  uint8_t CruiseCtrlAccelerateSwitch;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Value of set (chosen) velocity of velocity control system.  See SPN 6809 for an alternate resolution.  If an algorithm that can modify the cruise control set point exists in the system, such as Predictive Cruise Control or Adaptive Cruise Control, ...
  uint8_t CruiseCtrlSetSpeed;            //      Bits=08.  [ 0     , 250    ]  Unit:'km/h' 

  // This parameter is used to indicate the current state or mode of operation by the power takeoff (PTO) governor.  In lieu of support for PTO Drive Engagement parameters, this parameter may represent the status of a PTO drive.  The broadcasting device ...
  // 31 - "Not available" 
  // 19 - "PTO set speed memory 2" 
  // 18 - "PTO set speed memory 1" 
  // 17 - "Preprogrammed set speed 8" 
  // 16 - "Preprogrammed set speed 7" 
  // 15 - "Preprogrammed set speed 6" 
  // 14 - "Preprogrammed set speed 5" 
  // 13 - "Preprogrammed set speed 4" 
  // 12 - "Preprogrammed set speed 3" 
  // 11 - "Preprogrammed set speed 2" 
  // 10 - "Preprogrammed set speed 1" 
  // 9 - "Accelerator Override" 
  // 8 - "Accelerate" 
  // 7 - "Resume" 
  // 6 - "Decelerate/Coast" 
  // 5 - "Set" 
  // 4 - "Remote Standby" 
  // 3 - "Standby" 
  // 2 - "Remote Hold" 
  // 1 - "Hold" 
  // 0 - "Off/Disabled" 

  uint8_t PTOGovernorState;              //      Bits=05.  [ 0     , 31     ]  Unit:''     

  // This parameter is used to indicate the current state, or mode, of operation by the cruise control device.  This is a status parameter.  000 - Off/Disabled  001 - Hold  010 - Accelerate  011 - Decelerate  100 - Resume  101 - Set  110 - Accelerator ...
  // 7 - "Not available" 
  // 6 - "Accelerator Override" 
  // 5 - "Set" 
  // 4 - "Resume" 
  // 3 - "Decelerate" 
  // 2 - "Accelerate" 
  // 1 - "Hold" 
  // 0 - "Off/Disabled" 

  uint8_t CruiseCtrlStates;              //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Switch signal which indicates the position of the idle increment switch.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngIdleIncrementSwitch;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates the position of the idle decrement switch.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngIdleDecrementSwitch;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates the position of the engine diagnostic test mode switch.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngTestModeSwitch;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Switch signal which indicates the position of the engine shutdown override switch.  This switch function allows the operator to override an impending engine shutdown.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t EngShutdownOverrideSwitch;     //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} CCVS1_t;

// def @LFE1 CAN Message (419361534)
#define LFE1_IDE (1U)
#define LFE1_DLC (8U)
#define LFE1_CANID (0x18FEF2FEU)
#define LFE1_CYC (100U)
// -- Fuel Economy (Liquid)
// signal: @EngFuelRate
#define EngFuelRate_CovFactor 0.05
#define EngFuelRate_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @EngInstantaneousFuelEconomy
#define EngInstantaneousFuelEconomy_CovFactor 0.001953125
#define EngInstantaneousFuelEconomy_CovS(x) ((uint16_t)((x / 0.001953125)))
// signal: @EngAverageFuelEconomy
#define EngAverageFuelEconomy_CovFactor 0.001953125
#define EngAverageFuelEconomy_CovS(x) ((uint16_t)((x / 0.001953125)))
// signal: @EngThrottleValve1Pos
#define EngThrottleValve1Pos_CovFactor 0.4
#define EngThrottleValve1Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngThrottleValve2Pos
#define EngThrottleValve2Pos_CovFactor 0.4
#define EngThrottleValve2Pos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Amount of fuel consumed by engine per unit of time.    NOTE - See SPN 1600 for alternate resolution.
  uint16_t EngFuelRate;                  //      Bits=16.  [ 0     , 3212.75 ]  Unit:'L/h'   Factor= 0.05  

  // Current fuel economy at current vehicle velocity.    0xFB00 = Infinite (for example, during engine motoring)
  uint16_t EngInstantaneousFuelEconomy;  //      Bits=16.  [ 0     , 125.498046875 ]  Unit:'km/L'  Factor= 0.001953125

  // Average of instantaneous fuel economy for that segment of vehicle operation of interest.
  uint16_t EngAverageFuelEconomy;        //      Bits=16.  [ 0     , 125.498046875 ]  Unit:'km/L'  Factor= 0.001953125

  // The position of the valve used to regulate the supply of a fluid, usually air or fuel/air mixture, to an engine.  0% represents no supply and 100% is full supply.
  uint8_t EngThrottleValve1Pos;          //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The sensed position feedback of the valve, coming from a second electrical actuator for a second throttle plate, used to regulate the supply of a fluid, usually air or fuel//air mixture.  0% represents no supply and 100% is full supply. SPN 51 is ...
  uint8_t EngThrottleValve2Pos;          //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} LFE1_t;

// def @VP CAN Message (419361790)
#define VP_IDE (1U)
#define VP_DLC (8U)
#define VP_CANID (0x18FEF3FEU)
#define VP_CYC (5000U)
// -- Vehicle Position
// signal: @Latitude
#define Latitude_CovFactor 1E-07
#define Latitude_CovS(x) ((int64_t)((x / 1E-07) + 2100000000))
// signal: @Longitude
#define Longitude_CovFactor 1E-07
#define Longitude_CovS(x) ((int64_t)((x / 1E-07) + 2100000000))
typedef struct
{

  // Latitude position of the vehicle.
  int64_t Latitude;                      //      Bits=32.  [ -210  , 211.1081215 ]  Unit:'deg'   Offset= -210      Factor= 1E-07 

  // Longitude position of the vehicle.
  int64_t Longitude;                     //      Bits=32.  [ -210  , 211.1081215 ]  Unit:'deg'   Offset= -210      Factor= 1E-07 
  uint32_t framecnt;
} VP_t;

// def @TIRE1 CAN Message (419362046)
#define TIRE1_IDE (1U)
#define TIRE1_DLC (8U)
#define TIRE1_CANID (0x18FEF4FEU)
#define TIRE1_CYC (10000U)
// -- Tire Condition Message 1  Tire Condition Message  NOTE ? Multiple instances of this message will be required to transmit data for all tire locations.  When reporting data for multiple tire locations, each successive message, which provides data for ...
// signal: @TirePress_33
#define TirePress_33_CovFactor 4
#define TirePress_33_CovS(x) ((uint8_t)((x / 4)))
// signal: @TirePress_32
#define TirePress_32_CovFactor 4
#define TirePress_32_CovS(x) ((uint8_t)((x / 4)))
// signal: @TirePress_31
#define TirePress_31_CovFactor 4
#define TirePress_31_CovS(x) ((uint8_t)((x / 4)))
// signal: @TirePress_30
#define TirePress_30_CovFactor 4
#define TirePress_30_CovS(x) ((uint8_t)((x / 4)))
// signal: @TirePress_23
#define TirePress_23_CovFactor 4
#define TirePress_23_CovS(x) ((uint8_t)((x / 4)))
// signal: @TirePress_22
#define TirePress_22_CovFactor 4
#define TirePress_22_CovS(x) ((uint8_t)((x / 4)))
// signal: @TirePress_21
#define TirePress_21_CovFactor 4
#define TirePress_21_CovS(x) ((uint8_t)((x / 4)))
// signal: @TirePress_20
#define TirePress_20_CovFactor 4
#define TirePress_20_CovS(x) ((uint8_t)((x / 4)))
// signal: @TirePress_13
#define TirePress_13_CovFactor 4
#define TirePress_13_CovS(x) ((uint8_t)((x / 4)))
// signal: @TirePress_12
#define TirePress_12_CovFactor 4
#define TirePress_12_CovS(x) ((uint8_t)((x / 4)))
// signal: @TirePress_11
#define TirePress_11_CovFactor 4
#define TirePress_11_CovS(x) ((uint8_t)((x / 4)))
// signal: @TirePress_10
#define TirePress_10_CovFactor 4
#define TirePress_10_CovS(x) ((uint8_t)((x / 4)))
// signal: @TirePress_01
#define TirePress_01_CovFactor 4
#define TirePress_01_CovS(x) ((uint8_t)((x / 4)))
// signal: @TirePress_00
#define TirePress_00_CovFactor 4
#define TirePress_00_CovS(x) ((uint8_t)((x / 4)))
// signal: @TireTemp_11
#define TireTemp_11_CovFactor 0.03125
#define TireTemp_11_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TireTemp_33
#define TireTemp_33_CovFactor 0.03125
#define TireTemp_33_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TireTemp_32
#define TireTemp_32_CovFactor 0.03125
#define TireTemp_32_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TireTemp_31
#define TireTemp_31_CovFactor 0.03125
#define TireTemp_31_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TireTemp_30
#define TireTemp_30_CovFactor 0.03125
#define TireTemp_30_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TireTemp_23
#define TireTemp_23_CovFactor 0.03125
#define TireTemp_23_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TireTemp_22
#define TireTemp_22_CovFactor 0.03125
#define TireTemp_22_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TireTemp_21
#define TireTemp_21_CovFactor 0.03125
#define TireTemp_21_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TireTemp_20
#define TireTemp_20_CovFactor 0.03125
#define TireTemp_20_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TireTemp_13
#define TireTemp_13_CovFactor 0.03125
#define TireTemp_13_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TireTemp_12
#define TireTemp_12_CovFactor 0.03125
#define TireTemp_12_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TireTemp_10
#define TireTemp_10_CovFactor 0.03125
#define TireTemp_10_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TireTemp_01
#define TireTemp_01_CovFactor 0.03125
#define TireTemp_01_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TireTemp_00
#define TireTemp_00_CovFactor 0.03125
#define TireTemp_00_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TireAirLeakageRate_33
#define TireAirLeakageRate_33_CovFactor 0.1
#define TireAirLeakageRate_33_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @TireAirLeakageRate_32
#define TireAirLeakageRate_32_CovFactor 0.1
#define TireAirLeakageRate_32_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @TireAirLeakageRate_31
#define TireAirLeakageRate_31_CovFactor 0.1
#define TireAirLeakageRate_31_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @TireAirLeakageRate_30
#define TireAirLeakageRate_30_CovFactor 0.1
#define TireAirLeakageRate_30_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @TireAirLeakageRate_23
#define TireAirLeakageRate_23_CovFactor 0.1
#define TireAirLeakageRate_23_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @TireAirLeakageRate_22
#define TireAirLeakageRate_22_CovFactor 0.1
#define TireAirLeakageRate_22_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @TireAirLeakageRate_21
#define TireAirLeakageRate_21_CovFactor 0.1
#define TireAirLeakageRate_21_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @TireAirLeakageRate_20
#define TireAirLeakageRate_20_CovFactor 0.1
#define TireAirLeakageRate_20_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @TireAirLeakageRate_13
#define TireAirLeakageRate_13_CovFactor 0.1
#define TireAirLeakageRate_13_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @TireAirLeakageRate_12
#define TireAirLeakageRate_12_CovFactor 0.1
#define TireAirLeakageRate_12_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @TireAirLeakageRate_11
#define TireAirLeakageRate_11_CovFactor 0.1
#define TireAirLeakageRate_11_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @TireAirLeakageRate_10
#define TireAirLeakageRate_10_CovFactor 0.1
#define TireAirLeakageRate_10_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @TireAirLeakageRate_01
#define TireAirLeakageRate_01_CovFactor 0.1
#define TireAirLeakageRate_01_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @TireAirLeakageRate_00
#define TireAirLeakageRate_00_CovFactor 0.1
#define TireAirLeakageRate_00_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Identifies which tire is associated with the parametric data in this PGN.  The low order 4 bits represent a position number, counting left to right when facing in the direction of normal vehicle travel (forward).  The high order 4 bits represent a ...
  // 51 - "TirePress_33_MUX_51" 
  // 50 - "TirePress_32_MUX_50" 
  // 49 - "TirePress_31_MUX_49" 
  // 48 - "TirePress_30_MUX_48" 
  // 35 - "TirePress_23_MUX_35" 
  // 34 - "TirePress_22_MUX_34" 
  // 33 - "TirePress_21_MUX_33" 
  // 32 - "TirePress_20_MUX_32" 
  // 19 - "TirePress_13_MUX_19" 
  // 18 - "TirePress_12_MUX_18" 
  // 17 - "TirePress_11_MUX_17" 
  // 16 - "TirePress_10_MUX_16" 
  // 1 - "TirePress_01_MUX_1" 
  // 0 - "TirePress_00_MUX_0" 

  uint8_t TireLocation;                     //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Pressure at which air is contained in cavity formed by tire and rim.
  uint8_t TirePress_33;                     //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Pressure at which air is contained in cavity formed by tire and rim.
  uint8_t TirePress_32;                     //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Pressure at which air is contained in cavity formed by tire and rim.
  uint8_t TirePress_31;                     //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Pressure at which air is contained in cavity formed by tire and rim.
  uint8_t TirePress_30;                     //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Pressure at which air is contained in cavity formed by tire and rim.
  uint8_t TirePress_23;                     //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Pressure at which air is contained in cavity formed by tire and rim.
  uint8_t TirePress_22;                     //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Pressure at which air is contained in cavity formed by tire and rim.
  uint8_t TirePress_21;                     //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Pressure at which air is contained in cavity formed by tire and rim.
  uint8_t TirePress_20;                     //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Pressure at which air is contained in cavity formed by tire and rim.
  uint8_t TirePress_13;                     //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Pressure at which air is contained in cavity formed by tire and rim.
  uint8_t TirePress_12;                     //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Pressure at which air is contained in cavity formed by tire and rim.
  uint8_t TirePress_11;                     //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Pressure at which air is contained in cavity formed by tire and rim.
  uint8_t TirePress_10;                     //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Pressure at which air is contained in cavity formed by tire and rim.
  uint8_t TirePress_01;                     //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Pressure at which air is contained in cavity formed by tire and rim.
  uint8_t TirePress_00;                     //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Temperature at the surface of the tire sidewall.
  int32_t TireTemp_11;                      //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the surface of the tire sidewall.
  int32_t TireTemp_33;                      //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the surface of the tire sidewall.
  int32_t TireTemp_32;                      //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the surface of the tire sidewall.
  int32_t TireTemp_31;                      //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the surface of the tire sidewall.
  int32_t TireTemp_30;                      //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the surface of the tire sidewall.
  int32_t TireTemp_23;                      //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the surface of the tire sidewall.
  int32_t TireTemp_22;                      //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the surface of the tire sidewall.
  int32_t TireTemp_21;                      //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the surface of the tire sidewall.
  int32_t TireTemp_20;                      //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the surface of the tire sidewall.
  int32_t TireTemp_13;                      //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the surface of the tire sidewall.
  int32_t TireTemp_12;                      //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the surface of the tire sidewall.
  int32_t TireTemp_10;                      //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the surface of the tire sidewall.
  int32_t TireTemp_01;                      //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the surface of the tire sidewall.
  int32_t TireTemp_00;                      //      Bits=16.  [ -273  , 1735   ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Indicates whether the wheel is being monitored by the CTI controller.
  // 3 - "NotSupported" 
  // 2 - "NotDefined" 
  // 1 - "On" 
  // 0 - "Off_IsolatedFromCTIPressCtrl" 

  uint8_t CTIWheelSensorStatus_33;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the wheel is being monitored by the CTI controller.
  // 3 - "NotSupported" 
  // 2 - "NotDefined" 
  // 1 - "On" 
  // 0 - "Off_IsolatedFromCTIPressCtrl" 

  uint8_t CTIWheelSensorStatus_32;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the wheel is being monitored by the CTI controller.
  // 3 - "NotSupported" 
  // 2 - "NotDefined" 
  // 1 - "On" 
  // 0 - "Off_IsolatedFromCTIPressCtrl" 

  uint8_t CTIWheelSensorStatus_31;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the wheel is being monitored by the CTI controller.
  // 3 - "NotSupported" 
  // 2 - "NotDefined" 
  // 1 - "On" 
  // 0 - "Off_IsolatedFromCTIPressCtrl" 

  uint8_t CTIWheelSensorStatus_30;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the wheel is being monitored by the CTI controller.
  // 3 - "NotSupported" 
  // 2 - "NotDefined" 
  // 1 - "On" 
  // 0 - "Off_IsolatedFromCTIPressCtrl" 

  uint8_t CTIWheelSensorStatus_23;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the wheel is being monitored by the CTI controller.
  // 3 - "NotSupported" 
  // 2 - "NotDefined" 
  // 1 - "On" 
  // 0 - "Off_IsolatedFromCTIPressCtrl" 

  uint8_t CTIWheelSensorStatus_22;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the wheel is being monitored by the CTI controller.
  // 3 - "NotSupported" 
  // 2 - "NotDefined" 
  // 1 - "On" 
  // 0 - "Off_IsolatedFromCTIPressCtrl" 

  uint8_t CTIWheelSensorStatus_21;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the wheel is being monitored by the CTI controller.
  // 3 - "NotSupported" 
  // 2 - "NotDefined" 
  // 1 - "On" 
  // 0 - "Off_IsolatedFromCTIPressCtrl" 

  uint8_t CTIWheelSensorStatus_20;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the wheel is being monitored by the CTI controller.
  // 3 - "NotSupported" 
  // 2 - "NotDefined" 
  // 1 - "On" 
  // 0 - "Off_IsolatedFromCTIPressCtrl" 

  uint8_t CTIWheelSensorStatus_13;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the wheel is being monitored by the CTI controller.
  // 3 - "NotSupported" 
  // 2 - "NotDefined" 
  // 1 - "On" 
  // 0 - "Off_IsolatedFromCTIPressCtrl" 

  uint8_t CTIWheelSensorStatus_12;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the wheel is being monitored by the CTI controller.
  // 3 - "NotSupported" 
  // 2 - "NotDefined" 
  // 1 - "On" 
  // 0 - "Off_IsolatedFromCTIPressCtrl" 

  uint8_t CTIWheelSensorStatus_11;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the wheel is being monitored by the CTI controller.
  // 3 - "NotSupported" 
  // 2 - "NotDefined" 
  // 1 - "On" 
  // 0 - "Off_IsolatedFromCTIPressCtrl" 

  uint8_t CTIWheelSensorStatus_10;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the wheel is being monitored by the CTI controller.
  // 3 - "NotSupported" 
  // 2 - "NotDefined" 
  // 1 - "On" 
  // 0 - "Off_IsolatedFromCTIPressCtrl" 

  uint8_t CTIWheelSensorStatus_01;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether the wheel is being monitored by the CTI controller.
  // 3 - "NotSupported" 
  // 2 - "NotDefined" 
  // 1 - "On" 
  // 0 - "Off_IsolatedFromCTIPressCtrl" 

  uint8_t CTIWheelSensorStatus_00;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of the tire.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "TireLeakDetected" 
  // 0 - "Ok" 

  uint8_t CTITireStatus_33;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of the tire.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "TireLeakDetected" 
  // 0 - "Ok" 

  uint8_t CTITireStatus_32;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of the tire.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "TireLeakDetected" 
  // 0 - "Ok" 

  uint8_t CTITireStatus_31;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of the tire.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "TireLeakDetected" 
  // 0 - "Ok" 

  uint8_t CTITireStatus_30;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of the tire.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "TireLeakDetected" 
  // 0 - "Ok" 

  uint8_t CTITireStatus_23;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of the tire.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "TireLeakDetected" 
  // 0 - "Ok" 

  uint8_t CTITireStatus_22;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of the tire.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "TireLeakDetected" 
  // 0 - "Ok" 

  uint8_t CTITireStatus_21;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of the tire.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "TireLeakDetected" 
  // 0 - "Ok" 

  uint8_t CTITireStatus_20;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of the tire.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "TireLeakDetected" 
  // 0 - "Ok" 

  uint8_t CTITireStatus_13;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of the tire.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "TireLeakDetected" 
  // 0 - "Ok" 

  uint8_t CTITireStatus_12;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of the tire.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "TireLeakDetected" 
  // 0 - "Ok" 

  uint8_t CTITireStatus_11;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of the tire.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "TireLeakDetected" 
  // 0 - "Ok" 

  uint8_t CTITireStatus_10;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of the tire.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "TireLeakDetected" 
  // 0 - "Ok" 

  uint8_t CTITireStatus_01;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of the tire.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "TireLeakDetected" 
  // 0 - "Ok" 

  uint8_t CTITireStatus_00;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of electrical fault on CTI wheel interface.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "NotDefined" 
  // 0 - "Ok" 

  uint8_t CTIWheelEndElectricalFault_33;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of electrical fault on CTI wheel interface.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "NotDefined" 
  // 0 - "Ok" 

  uint8_t CTIWheelEndElectricalFault_32;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of electrical fault on CTI wheel interface.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "NotDefined" 
  // 0 - "Ok" 

  uint8_t CTIWheelEndElectricalFault_31;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of electrical fault on CTI wheel interface.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "NotDefined" 
  // 0 - "Ok" 

  uint8_t CTIWheelEndElectricalFault_30;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of electrical fault on CTI wheel interface.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "NotDefined" 
  // 0 - "Ok" 

  uint8_t CTIWheelEndElectricalFault_23;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of electrical fault on CTI wheel interface.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "NotDefined" 
  // 0 - "Ok" 

  uint8_t CTIWheelEndElectricalFault_22;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of electrical fault on CTI wheel interface.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "NotDefined" 
  // 0 - "Ok" 

  uint8_t CTIWheelEndElectricalFault_21;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of electrical fault on CTI wheel interface.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "NotDefined" 
  // 0 - "Ok" 

  uint8_t CTIWheelEndElectricalFault_20;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of electrical fault on CTI wheel interface.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "NotDefined" 
  // 0 - "Ok" 

  uint8_t CTIWheelEndElectricalFault_13;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of electrical fault on CTI wheel interface.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "NotDefined" 
  // 0 - "Ok" 

  uint8_t CTIWheelEndElectricalFault_12;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of electrical fault on CTI wheel interface.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "NotDefined" 
  // 0 - "Ok" 

  uint8_t CTIWheelEndElectricalFault_11;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of electrical fault on CTI wheel interface.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "NotDefined" 
  // 0 - "Ok" 

  uint8_t CTIWheelEndElectricalFault_10;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of electrical fault on CTI wheel interface.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "NotDefined" 
  // 0 - "Ok" 

  uint8_t CTIWheelEndElectricalFault_01;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the status of electrical fault on CTI wheel interface.
  // 3 - "NotSupported" 
  // 2 - "Error" 
  // 1 - "NotDefined" 
  // 0 - "Ok" 

  uint8_t CTIWheelEndElectricalFault_00;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Defines the choice of using the tire pressure (PGN 65268) or Extended Tire Pressure (PGN 64578). The state value '01' indicates the extended tire pressure SPN is used for the pressure data. Any other value indicates the extended tire pressure SPN is ...
  // 3 - "Not Available/Not Supported" 
  // 2 - "Error" 
  // 1 - "Using Extended Tire Pressure" 
  // 0 - "Not Using Extended Tire Pressure" 

  uint8_t ExTirePressSupport;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The pressure loss rate of a tire.
  uint16_t TireAirLeakageRate_33;           //      Bits=16.  [ 0     , 6425.5 ]  Unit:'Pa/s'  Factor= 0.1   

  // The pressure loss rate of a tire.
  uint16_t TireAirLeakageRate_32;           //      Bits=16.  [ 0     , 6425.5 ]  Unit:'Pa/s'  Factor= 0.1   

  // The pressure loss rate of a tire.
  uint16_t TireAirLeakageRate_31;           //      Bits=16.  [ 0     , 6425.5 ]  Unit:'Pa/s'  Factor= 0.1   

  // The pressure loss rate of a tire.
  uint16_t TireAirLeakageRate_30;           //      Bits=16.  [ 0     , 6425.5 ]  Unit:'Pa/s'  Factor= 0.1   

  // The pressure loss rate of a tire.
  uint16_t TireAirLeakageRate_23;           //      Bits=16.  [ 0     , 6425.5 ]  Unit:'Pa/s'  Factor= 0.1   

  // The pressure loss rate of a tire.
  uint16_t TireAirLeakageRate_22;           //      Bits=16.  [ 0     , 6425.5 ]  Unit:'Pa/s'  Factor= 0.1   

  // The pressure loss rate of a tire.
  uint16_t TireAirLeakageRate_21;           //      Bits=16.  [ 0     , 6425.5 ]  Unit:'Pa/s'  Factor= 0.1   

  // The pressure loss rate of a tire.
  uint16_t TireAirLeakageRate_20;           //      Bits=16.  [ 0     , 6425.5 ]  Unit:'Pa/s'  Factor= 0.1   

  // The pressure loss rate of a tire.
  uint16_t TireAirLeakageRate_13;           //      Bits=16.  [ 0     , 6425.5 ]  Unit:'Pa/s'  Factor= 0.1   

  // The pressure loss rate of a tire.
  uint16_t TireAirLeakageRate_12;           //      Bits=16.  [ 0     , 6425.5 ]  Unit:'Pa/s'  Factor= 0.1   

  // The pressure loss rate of a tire.
  uint16_t TireAirLeakageRate_11;           //      Bits=16.  [ 0     , 6425.5 ]  Unit:'Pa/s'  Factor= 0.1   

  // The pressure loss rate of a tire.
  uint16_t TireAirLeakageRate_10;           //      Bits=16.  [ 0     , 6425.5 ]  Unit:'Pa/s'  Factor= 0.1   

  // The pressure loss rate of a tire.
  uint16_t TireAirLeakageRate_01;           //      Bits=16.  [ 0     , 6425.5 ]  Unit:'Pa/s'  Factor= 0.1   

  // The pressure loss rate of a tire.
  uint16_t TireAirLeakageRate_00;           //      Bits=16.  [ 0     , 6425.5 ]  Unit:'Pa/s'  Factor= 0.1   

  // Signal indicating the pressure level of the tire.
  // 7 - "NotAvailable" 
  // 6 - "ErrorIndicator" 
  // 5 - "NotDefined" 
  // 4 - "ExtrmUndrPrssTrPrssrIsAtALvlWhr" 
  // 3 - "UndrPrssTrPrssrIsLwrThnThPrssrD" 
  // 2 - "NWrnngPrssTrPrssrIsWthnThThrshl" 
  // 1 - "OvrPrssTrPrssrIsHghrThnThPrssrD" 
  // 0 - "ExtrmOvrPrssTrPrssrIsAtALvlWhrT" 

  uint8_t TirePressThresholdDetection_13;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Signal indicating the pressure level of the tire.
  // 7 - "NotAvailable" 
  // 6 - "ErrorIndicator" 
  // 5 - "NotDefined" 
  // 4 - "ExtrmUndrPrssTrPrssrIsAtALvlWhr" 
  // 3 - "UndrPrssTrPrssrIsLwrThnThPrssrD" 
  // 2 - "NWrnngPrssTrPrssrIsWthnThThrshl" 
  // 1 - "OvrPrssTrPrssrIsHghrThnThPrssrD" 
  // 0 - "ExtrmOvrPrssTrPrssrIsAtALvlWhrT" 

  uint8_t TirePressThresholdDetection_12;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Signal indicating the pressure level of the tire.
  // 7 - "NotAvailable" 
  // 6 - "ErrorIndicator" 
  // 5 - "NotDefined" 
  // 4 - "ExtrmUndrPrssTrPrssrIsAtALvlWhr" 
  // 3 - "UndrPrssTrPrssrIsLwrThnThPrssrD" 
  // 2 - "NWrnngPrssTrPrssrIsWthnThThrshl" 
  // 1 - "OvrPrssTrPrssrIsHghrThnThPrssrD" 
  // 0 - "ExtrmOvrPrssTrPrssrIsAtALvlWhrT" 

  uint8_t TirePressThresholdDetection_11;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Signal indicating the pressure level of the tire.
  // 7 - "NotAvailable" 
  // 6 - "ErrorIndicator" 
  // 5 - "NotDefined" 
  // 4 - "ExtrmUndrPrssTrPrssrIsAtALvlWhr" 
  // 3 - "UndrPrssTrPrssrIsLwrThnThPrssrD" 
  // 2 - "NWrnngPrssTrPrssrIsWthnThThrshl" 
  // 1 - "OvrPrssTrPrssrIsHghrThnThPrssrD" 
  // 0 - "ExtrmOvrPrssTrPrssrIsAtALvlWhrT" 

  uint8_t TirePressThresholdDetection_10;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Signal indicating the pressure level of the tire.
  // 7 - "NotAvailable" 
  // 6 - "ErrorIndicator" 
  // 5 - "NotDefined" 
  // 4 - "ExtrmUndrPrssTrPrssrIsAtALvlWhr" 
  // 3 - "UndrPrssTrPrssrIsLwrThnThPrssrD" 
  // 2 - "NWrnngPrssTrPrssrIsWthnThThrshl" 
  // 1 - "OvrPrssTrPrssrIsHghrThnThPrssrD" 
  // 0 - "ExtrmOvrPrssTrPrssrIsAtALvlWhrT" 

  uint8_t TirePressThresholdDetection_01;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Signal indicating the pressure level of the tire.
  // 7 - "NotAvailable" 
  // 6 - "ErrorIndicator" 
  // 5 - "NotDefined" 
  // 4 - "ExtrmUndrPrssTrPrssrIsAtALvlWhr" 
  // 3 - "UndrPrssTrPrssrIsLwrThnThPrssrD" 
  // 2 - "NWrnngPrssTrPrssrIsWthnThThrshl" 
  // 1 - "OvrPrssTrPrssrIsHghrThnThPrssrD" 
  // 0 - "ExtrmOvrPrssTrPrssrIsAtALvlWhrT" 

  uint8_t TirePressThresholdDetection_33;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Signal indicating the pressure level of the tire.
  // 7 - "NotAvailable" 
  // 6 - "ErrorIndicator" 
  // 5 - "NotDefined" 
  // 4 - "ExtrmUndrPrssTrPrssrIsAtALvlWhr" 
  // 3 - "UndrPrssTrPrssrIsLwrThnThPrssrD" 
  // 2 - "NWrnngPrssTrPrssrIsWthnThThrshl" 
  // 1 - "OvrPrssTrPrssrIsHghrThnThPrssrD" 
  // 0 - "ExtrmOvrPrssTrPrssrIsAtALvlWhrT" 

  uint8_t TirePressThresholdDetection_32;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Signal indicating the pressure level of the tire.
  // 7 - "NotAvailable" 
  // 6 - "ErrorIndicator" 
  // 5 - "NotDefined" 
  // 4 - "ExtrmUndrPrssTrPrssrIsAtALvlWhr" 
  // 3 - "UndrPrssTrPrssrIsLwrThnThPrssrD" 
  // 2 - "NWrnngPrssTrPrssrIsWthnThThrshl" 
  // 1 - "OvrPrssTrPrssrIsHghrThnThPrssrD" 
  // 0 - "ExtrmOvrPrssTrPrssrIsAtALvlWhrT" 

  uint8_t TirePressThresholdDetection_31;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Signal indicating the pressure level of the tire.
  // 7 - "NotAvailable" 
  // 6 - "ErrorIndicator" 
  // 5 - "NotDefined" 
  // 4 - "ExtrmUndrPrssTrPrssrIsAtALvlWhr" 
  // 3 - "UndrPrssTrPrssrIsLwrThnThPrssrD" 
  // 2 - "NWrnngPrssTrPrssrIsWthnThThrshl" 
  // 1 - "OvrPrssTrPrssrIsHghrThnThPrssrD" 
  // 0 - "ExtrmOvrPrssTrPrssrIsAtALvlWhrT" 

  uint8_t TirePressThresholdDetection_30;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Signal indicating the pressure level of the tire.
  // 7 - "NotAvailable" 
  // 6 - "ErrorIndicator" 
  // 5 - "NotDefined" 
  // 4 - "ExtrmUndrPrssTrPrssrIsAtALvlWhr" 
  // 3 - "UndrPrssTrPrssrIsLwrThnThPrssrD" 
  // 2 - "NWrnngPrssTrPrssrIsWthnThThrshl" 
  // 1 - "OvrPrssTrPrssrIsHghrThnThPrssrD" 
  // 0 - "ExtrmOvrPrssTrPrssrIsAtALvlWhrT" 

  uint8_t TirePressThresholdDetection_23;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Signal indicating the pressure level of the tire.
  // 7 - "NotAvailable" 
  // 6 - "ErrorIndicator" 
  // 5 - "NotDefined" 
  // 4 - "ExtrmUndrPrssTrPrssrIsAtALvlWhr" 
  // 3 - "UndrPrssTrPrssrIsLwrThnThPrssrD" 
  // 2 - "NWrnngPrssTrPrssrIsWthnThThrshl" 
  // 1 - "OvrPrssTrPrssrIsHghrThnThPrssrD" 
  // 0 - "ExtrmOvrPrssTrPrssrIsAtALvlWhrT" 

  uint8_t TirePressThresholdDetection_22;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Signal indicating the pressure level of the tire.
  // 7 - "NotAvailable" 
  // 6 - "ErrorIndicator" 
  // 5 - "NotDefined" 
  // 4 - "ExtrmUndrPrssTrPrssrIsAtALvlWhr" 
  // 3 - "UndrPrssTrPrssrIsLwrThnThPrssrD" 
  // 2 - "NWrnngPrssTrPrssrIsWthnThThrshl" 
  // 1 - "OvrPrssTrPrssrIsHghrThnThPrssrD" 
  // 0 - "ExtrmOvrPrssTrPrssrIsAtALvlWhrT" 

  uint8_t TirePressThresholdDetection_21;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Signal indicating the pressure level of the tire.
  // 7 - "NotAvailable" 
  // 6 - "ErrorIndicator" 
  // 5 - "NotDefined" 
  // 4 - "ExtrmUndrPrssTrPrssrIsAtALvlWhr" 
  // 3 - "UndrPrssTrPrssrIsLwrThnThPrssrD" 
  // 2 - "NWrnngPrssTrPrssrIsWthnThThrshl" 
  // 1 - "OvrPrssTrPrssrIsHghrThnThPrssrD" 
  // 0 - "ExtrmOvrPrssTrPrssrIsAtALvlWhrT" 

  uint8_t TirePressThresholdDetection_20;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Signal indicating the pressure level of the tire.
  // 7 - "NotAvailable" 
  // 6 - "ErrorIndicator" 
  // 5 - "NotDefined" 
  // 4 - "ExtrmUndrPrssTrPrssrIsAtALvlWhr" 
  // 3 - "UndrPrssTrPrssrIsLwrThnThPrssrD" 
  // 2 - "NWrnngPrssTrPrssrIsWthnThThrshl" 
  // 1 - "OvrPrssTrPrssrIsHghrThnThPrssrD" 
  // 0 - "ExtrmOvrPrssTrPrssrIsAtALvlWhrT" 

  uint8_t TirePressThresholdDetection_00;   //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} TIRE1_t;

// def @AMB CAN Message (419362302)
#define AMB_IDE (1U)
#define AMB_DLC (8U)
#define AMB_CANID (0x18FEF5FEU)
#define AMB_CYC (1000U)
// -- Ambient Conditions
// signal: @BarometricPress
#define BarometricPress_CovFactor 0.5
#define BarometricPress_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @CabInteriorTemp
#define CabInteriorTemp_CovFactor 0.03125
#define CabInteriorTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @AmbientAirTemp
#define AmbientAirTemp_CovFactor 0.03125
#define AmbientAirTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngAirIntakeTemp
#define EngAirIntakeTemp_CovFactor 1
#define EngAirIntakeTemp_CovS(x) ((int16_t)(x + 40))
// signal: @RoadSurfaceTemp
#define RoadSurfaceTemp_CovFactor 0.03125
#define RoadSurfaceTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Absolute air pressure of the atmosphere.
  uint8_t BarometricPress;               //      Bits=08.  [ 0     , 125    ]  Unit:'kPa'   Factor= 0.5   

  // Temperature of air inside the part of the vehicle that encloses the driver and vehicle operating controls.    Note: See also SPN 1691.  SPN 1662 is an additional diagnostic SPN associated with cab temperature.
  int32_t CabInteriorTemp;               //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of air surrounding vehicle.
  int32_t AmbientAirTemp;                //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature of air entering vehicle air induction system.
  int16_t EngAirIntakeTemp;              //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Indicated temperature of road surface over which vehicle is operating.
  int32_t RoadSurfaceTemp;               //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} AMB_t;

// def @IC1 CAN Message (419362558)
#define IC1_IDE (1U)
#define IC1_DLC (8U)
#define IC1_CANID (0x18FEF6FEU)
#define IC1_CYC (5000U)
// -- Intake/Exhaust Conditions 1
// signal: @AFT1DPFInPress
#define AFT1DPFInPress_CovFactor 0.5
#define AFT1DPFInPress_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @EngIntakeManifold1Press
#define EngIntakeManifold1Press_CovFactor 2
#define EngIntakeManifold1Press_CovS(x) ((uint8_t)((x / 2)))
// signal: @EngIntakeManifold1Temp
#define EngIntakeManifold1Temp_CovFactor 1
#define EngIntakeManifold1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngAirIntakePress
#define EngAirIntakePress_CovFactor 2
#define EngAirIntakePress_CovS(x) ((uint8_t)((x / 2)))
// signal: @EngAirFilter1DiffPress
#define EngAirFilter1DiffPress_CovFactor 0.05
#define EngAirFilter1DiffPress_CovS(x) ((uint8_t)((x / 0.05)))
// signal: @EngExhaustGasTemp
#define EngExhaustGasTemp_CovFactor 0.03125
#define EngExhaustGasTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngCoolantFilterDiffPress
#define EngCoolantFilterDiffPress_CovFactor 0.5
#define EngCoolantFilterDiffPress_CovS(x) ((uint8_t)((x / 0.5)))
typedef struct
{

  // Exhaust pressure as a result of particle accumulation on filter media placed in the exhaust stream.  It is recommended that SPN 3609 be used as it has better resolution.
  uint8_t AFT1DPFInPress;                //      Bits=08.  [ 0     , 125    ]  Unit:'kPa'   Factor= 0.5   

  // The gage pressure measurement of the air intake manifold. If there are multiple air pressure sensors in the intake stream, this is the last one in flow direction before entering the combustion chamber.  This should be the pressure used to drive ...
  uint8_t EngIntakeManifold1Press;       //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // Temperature of pre-combustion air found in intake manifold of engine air supply system.
  int16_t EngIntakeManifold1Temp;        //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Absolute air pressure at input port to intake manifold or air box.
  uint8_t EngAirIntakePress;             //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // Change in engine air system pressure, measured across the filter, due to the filter and any accumulation of solid foreign matter on or in the filter.  This is the measurement of the first filter in a multiple air filter system.  In a single air ...
  uint8_t EngAirFilter1DiffPress;        //      Bits=08.  [ 0     , 12.5   ]  Unit:'kPa'   Factor= 0.05  

  // Temperature of combustion byproducts leaving the engine.  See SPNs 2433, 2434, 5969 and 5970 for engines with more than one exhaust temperature measurement.
  int32_t EngExhaustGasTemp;             //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Change in coolant pressure, measured across the filter, due to the filter and any accumulation of solid or semisolid matter on or in the filter.
  uint8_t EngCoolantFilterDiffPress;     //      Bits=08.  [ 0     , 125    ]  Unit:'kPa'   Factor= 0.5   
  uint32_t framecnt;
} IC1_t;

// def @VEP1 CAN Message (419362814)
#define VEP1_IDE (1U)
#define VEP1_DLC (8U)
#define VEP1_CANID (0x18FEF7FEU)
#define VEP1_CYC (1000U)
// -- Vehicle Electrical Power 1
// signal: @NetBatteryCurrent
#define NetBatteryCurrent_CovFactor 1
#define NetBatteryCurrent_CovS(x) ((int16_t)(x + 125))
// signal: @ChargingSystemPotential
#define ChargingSystemPotential_CovFactor 0.05
#define ChargingSystemPotential_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @BatteryPotential_PowerInput1
#define BatteryPotential_PowerInput1_CovFactor 0.05
#define BatteryPotential_PowerInput1_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @KeyswitchBatteryPotential
#define KeyswitchBatteryPotential_CovFactor 0.05
#define KeyswitchBatteryPotential_CovS(x) ((uint16_t)((x / 0.05)))
typedef struct
{

  // Net flow of electrical current into/out of the first battery or first set of batteries used for starting the engine, for lighting, and for ignition (SLI). See SPN 2579 for alternate range and resolution.
  int16_t NetBatteryCurrent;              //      Bits=08.  [ -125  , 125    ]  Unit:'A'     Offset= -125     

  // Measure of electrical current flow from the alternator.  Alternator Current (High Range/Resolution) parameter SPN 1795 has a higher range and resolution of the same parameter.
  uint8_t AltCurrent;                     //      Bits=08.  [ 0     , 250    ]  Unit:'A'    

  // Electrical potential measured at the charging system output.  The charging system may be any device charging the batteries.  This includes alternators, generators, solid state charger and other charging devices.
  uint16_t ChargingSystemPotential;       //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  

  // This parameter measures the first source of battery potential as measured at the input of the ECU/actuator etc. coming from one or more batteries, irrespective of the distance between the component and the battery.  This SPN is also used when ECUs ...
  uint16_t BatteryPotential_PowerInput1;  //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  

  // Battery potential measured at the input of the electronic control unit supplied through a key switch or similar switching device.
  uint16_t KeyswitchBatteryPotential;     //      Bits=16.  [ 0     , 3212.75 ]  Unit:'V'     Factor= 0.05  
  uint32_t framecnt;
} VEP1_t;

// def @TRF1 CAN Message (419363070)
#define TRF1_IDE (1U)
#define TRF1_DLC (8U)
#define TRF1_CANID (0x18FEF8FEU)
#define TRF1_CYC (1000U)
// -- Transmission Fluids 1
// signal: @ClutchPress
#define ClutchPress_CovFactor 16
#define ClutchPress_CovS(x) ((uint8_t)((x / 16)))
// signal: @TransOilLevel1
#define TransOilLevel1_CovFactor 0.4
#define TransOilLevel1_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransFilterDiffPress
#define TransFilterDiffPress_CovFactor 2
#define TransFilterDiffPress_CovS(x) ((uint8_t)((x / 2)))
// signal: @TransOilPress
#define TransOilPress_CovFactor 16
#define TransOilPress_CovS(x) ((uint8_t)((x / 16)))
// signal: @TransOilTemp1
#define TransOilTemp1_CovFactor 0.03125
#define TransOilTemp1_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @TransOilLevel1High_Low
#define TransOilLevel1High_Low_CovFactor 0.5
#define TransOilLevel1High_Low_CovS(x) ((int16_t)((x / 0.5) + 125))
typedef struct
{

  // Gage pressure of oil within a wet clutch.
  uint8_t ClutchPress;                       //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa'   Factor= 16    

  // First instance of a transmission oil level indicator. Conveys the ratio of volume of transmission sump oil to recommended volume.
  uint8_t TransOilLevel1;                    //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Change in transmission fluid pressure, measured after the filter, due to accumulation of solid or semisolid material on or in the filter.
  uint8_t TransFilterDiffPress;              //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // Gage pressure of lubrication fluid in transmission, measured after pump.
  uint8_t TransOilPress;                     //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa'   Factor= 16    

  // First instance of transmission lubricant temperature.
  int32_t TransOilTemp1;                     //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // First instance of a transmission oil level indicator. Conveys the amount of current volume of transmission sump oil compared to recommended volume. Positive values indicate overfill. Zero means the transmission fluild is filled to the recommended ...
  int16_t TransOilLevel1High_Low;            //      Bits=08.  [ -62.5 , 62.5   ]  Unit:'L'     Offset= -62.5     Factor= 0.5   

  // Countdown timer for the first instance of a transmission oil level indicator.  Once all vehicle conditions (such as vehicle stopped, etc) are met, some transmissions may require a ?settling time? to allow the fluid level to normalize.  This ...
  // 15 - "Not Available" 
  // 14 - "Error" 
  // 13 - "Thirteen minutes" 
  // 12 - "Twelve minutes" 
  // 11 - "Eleven minutes" 
  // 10 - "Ten minutes" 
  // 9 - "Nine minutes" 
  // 8 - "Eight minutes" 
  // 7 - "Seven minutes" 
  // 6 - "Six minutes" 
  // 5 - "Five minutes" 
  // 4 - "Four minutes" 
  // 3 - "Three minutes" 
  // 2 - "Two minutes" 
  // 1 - "One minute" 
  // 0 - "less than 1 minute" 

  uint8_t TransOilLevel1CountdownTimer;      //      Bits=04.  [ 0     , 13     ]  Unit:''     

  // Measurement status for the first instance of a transmission oil level indicator.  Indicates if conditions are acceptable to obtain a valid transmission oil level measurement as conveyed in SPN 124 Transmission Oil Level or SPN 3027 Transmission Oil ...
  // 15 - "Not available" 
  // 14 - "Error" 
  // 13 - "Conditions not valid, Other" 
  // 12 - "Not defined" 
  // 11 - "Not defined" 
  // 10 - "Not defined" 
  // 9 - "Conditions not valid, No request for reading" 
  // 8 - "Conditions not valid, Engine speed too high" 
  // 7 - "Conditions not valid, Engine speed too low" 
  // 6 - "Conditions not valid, Vehicle not level" 
  // 5 - "Conditions not valid, Vehicle moving" 
  // 4 - "Conditions not valid, Transmission fluid temperature too high" 
  // 3 - "Conditions not valid, Transmission fluid temperature too low" 
  // 2 - "Conditions not valid, Transmission in gear" 
  // 1 - "Conditions not valid, Settling timer still counting down" 
  // 0 - "Conditions valid for transmission oil level measurement" 

  uint8_t TransOilLevel1MeasurementStatus;   //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} TRF1_t;

// def @AI CAN Message (419363326)
#define AI_IDE (1U)
#define AI_DLC (8U)
#define AI_CANID (0x18FEF9FEU)
#define AI_CYC (1000U)
// -- Axle Information  Axle information message  NOTE?Message must be repeated as necessary to transmit all available information.   This method of location identification requires individual SPNs to be assigned to report failures specific to each ...
// signal: @SteerAxleTemp
#define SteerAxleTemp_CovFactor 1
#define SteerAxleTemp_CovS(x) ((int16_t)(x + 40))
// signal: @DriveAxleLiftAirPress
#define DriveAxleLiftAirPress_CovFactor 4
#define DriveAxleLiftAirPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @DriveAxleTemp
#define DriveAxleTemp_CovFactor 1
#define DriveAxleTemp_CovS(x) ((int16_t)(x + 40))
// signal: @DriveAxleLubePress
#define DriveAxleLubePress_CovFactor 4
#define DriveAxleLubePress_CovS(x) ((uint8_t)((x / 4)))
// signal: @SteerAxleLubePress
#define SteerAxleLubePress_CovFactor 4
#define SteerAxleLubePress_CovS(x) ((uint8_t)((x / 4)))
typedef struct
{

  // Temperature of lubricant in steering axle.
  int16_t SteerAxleTemp;                 //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // To identify to which of several similar devices (such as tires or fuel tanks) the information applies.  The low order 4 bits represent a position number, counting left to right when facing in the direction of normal vehicle travel (forward).  The ...
  uint8_t DriveAxleLocation;             //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Gage pressure of air in system that utilizes compressed air to provide force between axle and frame.
  uint8_t DriveAxleLiftAirPress;         //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Temperature of axle lubricant in drive axle.
  int16_t DriveAxleTemp;                 //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // The drive axle lubricant pressure with location determined by Drive Axle Location (SPN 930).
  uint8_t DriveAxleLubePress;            //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // The steering axle lubricant pressure.
  uint8_t SteerAxleLubePress;            //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     
  uint32_t framecnt;
} AI_t;

// def @B CAN Message (419363582)
#define B_IDE (1U)
#define B_DLC (8U)
#define B_CANID (0x18FEFAFEU)
#define B_CYC (1000U)
// -- Brakes
// signal: @BrakeAppPress
#define BrakeAppPress_CovFactor 4
#define BrakeAppPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @BrakePrimaryPress
#define BrakePrimaryPress_CovFactor 4
#define BrakePrimaryPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @BrakeSecondPress
#define BrakeSecondPress_CovFactor 4
#define BrakeSecondPress_CovS(x) ((uint8_t)((x / 4)))
typedef struct
{

  // Gage pressure of compressed air or fluid in vehicle braking system measured at the brake chamber when brake shoe (or pad) is placed against brake drum (or disc).
  uint8_t BrakeAppPress;                   //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Gage pressure of air in the primary, or supply side, of the air brake system.
  uint8_t BrakePrimaryPress;               //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Gage pressure of air in the secondary, or service side, of the air brake system.
  uint8_t BrakeSecondPress;                //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Signal which indicates the current state of the actuator(s) that control the parking brake (see also SPN 70 and 5275).    00 - Parking brake actuator inactive  01 - Parking brake actuator active  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Parking brake actuator active" 
  // 0 - "Parking brake actuator inactive" 

  uint8_t ParkingBrakeActuator;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter commands the Parking Brake red optical warning signal.    00 - off  01 - on  10 - Reserved   11 - Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved " 
  // 1 - "on" 
  // 0 - "off" 

  uint8_t ParkingBrakeRedWarningSignal;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter provides reports on the status of the Park Brake Release Inhibit function.  00 - Park Brake release is not inhibited  01 - Park Brake release is inhibited  10 - Error (for example: Park Brake release is not inhibited, but is requested ...
  // 2 - "Error" 
  // 1 - "Park Brake release is inhibited" 
  // 0 - "Park Brake release is not inhibited" 
  // 3 - "Unavailable" 

  uint8_t ParkBrakeReleaseInhibitStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} B_t;

// def @RF CAN Message (419363838)
#define RF_IDE (1U)
#define RF_DLC (8U)
#define RF_CANID (0x18FEFBFEU)
#define RF_CYC (1000U)
// -- Retarder fluids
// signal: @HydRetarderPress
#define HydRetarderPress_CovFactor 16
#define HydRetarderPress_CovS(x) ((uint8_t)((x / 16)))
// signal: @HydRetarderOilTemp
#define HydRetarderOilTemp_CovFactor 1
#define HydRetarderOilTemp_CovS(x) ((int16_t)(x + 40))
// signal: @RetarderCoolantOutletTemp
#define RetarderCoolantOutletTemp_CovFactor 1
#define RetarderCoolantOutletTemp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Gage pressure of oil in hydraulic retarder system.
  uint8_t HydRetarderPress;                   //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa'   Factor= 16    

  // Temperature of oil found in a hydraulic retarder.
  int16_t HydRetarderOilTemp;                 //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Signal from the driveline retarder indicating that its fluid temperature is above normal acceptable limits, and as a result, retarder operation may be altered or restricted.  The indicator is typically a lamp.  Distinctions in meaning between the ...
  // 3 - "Not available" 
  // 2 - "Driveline Retarder Overheat Indicator is flashing" 
  // 1 - "Driveline Retarder Overheat Indicator is on continuously" 
  // 0 - "Driveline Retarder Overheat Indicator is off" 

  uint8_t DrvlineRetarderOverheatIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Temperature of liquid found in retarder cooling system.
  int16_t RetarderCoolantOutletTemp;          //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} RF_t;

// def @DD1 CAN Message (419364094)
#define DD1_IDE (1U)
#define DD1_DLC (8U)
#define DD1_CANID (0x18FEFCFEU)
#define DD1_CYC (1000U)
// -- Dash Display 1
// signal: @WasherFluidLevel
#define WasherFluidLevel_CovFactor 0.4
#define WasherFluidLevel_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @FuelLevel1
#define FuelLevel1_CovFactor 0.4
#define FuelLevel1_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngFuelFilterDiffPress
#define EngFuelFilterDiffPress_CovFactor 2
#define EngFuelFilterDiffPress_CovS(x) ((uint8_t)((x / 2)))
// signal: @EngOilFilterDiffPress
#define EngOilFilterDiffPress_CovFactor 0.5
#define EngOilFilterDiffPress_CovS(x) ((uint8_t)((x / 0.5)))
// signal: @CargoAmbientTemp
#define CargoAmbientTemp_CovFactor 0.03125
#define CargoAmbientTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @FuelLevel2
#define FuelLevel2_CovFactor 0.4
#define FuelLevel2_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngOilFilterDiffPress7471
#define EngOilFilterDiffPress7471_CovFactor 5
#define EngOilFilterDiffPress7471_CovS(x) ((uint8_t)((x / 5)))
typedef struct
{

  // Ratio of volume of liquid to total container volume of fluid reservoir in windshield wash system.
  uint8_t WasherFluidLevel;              //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Ratio of volume of fuel to the total volume of fuel storage container.  When Fuel Level 2 (SPN 38) is not used, Fuel Level 1 represents the total fuel in all fuel storage containers.  When Fuel Level 2 is used, Fuel Level 1 represents the fuel level ...
  uint8_t FuelLevel1;                    //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Change in fuel delivery pressure, measured across the filter, due to accumulation of solid or semisolid matter on the filter element.
  uint8_t EngFuelFilterDiffPress;        //      Bits=08.  [ 0     , 500    ]  Unit:'kPa'   Factor= 2     

  // Change in engine oil pressure, measured across the filter, due to the filter and any accumulation of solid or semisolid material on or in the filter.  See SPN 7471 for alternate resolution.
  uint8_t EngOilFilterDiffPress;         //      Bits=08.  [ 0     , 125    ]  Unit:'kPa'   Factor= 0.5   

  // Temperature of air inside vehicle container used to accommodate cargo.
  int32_t CargoAmbientTemp;              //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Ratio of volume of fuel to the total volume of fuel in the second or right-side storage container.  When Fuel Level 2 is not used, Fuel Level 1 (SPN 96) represents the total fuel in all fuel storage containers.
  uint8_t FuelLevel2;                    //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Change in engine oil pressure, measured across the filter, due to the filter and any accumulation of solid or semisolid material on or in the filter. See SPN 99 for alternate resolution.
  uint8_t EngOilFilterDiffPress7471;     //      Bits=08.  [ 0     , 1250   ]  Unit:'kPa'   Factor= 5     
  uint32_t framecnt;
} DD1_t;

// def @AF1 CAN Message (419364350)
#define AF1_IDE (1U)
#define AF1_DLC (8U)
#define AF1_CANID (0x18FEFDFEU)
#define AF1_CYC (500U)
// -- Alternate Fuel 1
// signal: @EngBlowerBypassValvePos
#define EngBlowerBypassValvePos_CovFactor 0.4
#define EngBlowerBypassValvePos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngGasSupplyPress
#define EngGasSupplyPress_CovFactor 0.5
#define EngGasSupplyPress_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @EngGasFuelVentPress
#define EngGasFuelVentPress_CovFactor 0.5
#define EngGasFuelVentPress_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @LNGVaporizerCoolantOutletTemp
#define LNGVaporizerCoolantOutletTemp_CovFactor 1
#define LNGVaporizerCoolantOutletTemp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Relative position of the blower bypass valve.
  uint8_t EngBlowerBypassValvePos;         //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Gage pressure of gaseous fuel supply to fuel metering device.
  uint16_t EngGasSupplyPress;              //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // Gaseous fuel pressure through a vent pipe.
  uint16_t EngGasFuelVentPress;            //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // Temperature of coolant at outlet of liquified natural gas vaporizer. This parameter is also used to determine if coolant has reached freezing temperature.
  int16_t LNGVaporizerCoolantOutletTemp;   //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} AF1_t;

// def @AWPP CAN Message (419364606)
#define AWPP_IDE (1U)
#define AWPP_DLC (8U)
#define AWPP_CANID (0x18FEFEFEU)
#define AWPP_CYC (1000U)
// -- Auxiliary Water Pump Pressure
// signal: @AuxPumpPress
#define AuxPumpPress_CovFactor 16
#define AuxPumpPress_CovS(x) ((uint8_t)((x / 16)))
typedef struct
{

  // Gage pressure of auxiliary water pump driven as a PTO device.
  uint8_t AuxPumpPress;                  //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa'   Factor= 16    
  uint32_t framecnt;
} AWPP_t;

// def @OI CAN Message (419364862)
#define OI_IDE (1U)
#define OI_DLC (8U)
#define OI_CANID (0x18FEFFFEU)
#define OI_CYC (10000U)
// -- Operator indicators
typedef struct
{

  // Signal which indicates the presence of water in the fuel.    00 - No  01 - Yes  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Yes" 
  // 0 - "No" 

  uint8_t WaterInFuelIndicator;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command to activate an indicator that advises the operator to shift to a different gear.  Typically this would be used as part of a fuel economy improvement or drivability aid.  00 - indicator(s) inactive  01 - upshift indicator active  10 - ...
  // 3 - "don't care/take no action" 
  // 2 - "downshift indicator active" 
  // 1 - "upshift indicator active" 
  // 0 - "indicator(s) inactive" 

  uint8_t OperatorShiftPrompt;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // A second indicator of the presense of water in the fuel.  See also SPN 97.    00 - No  01 - Yes  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Yes" 
  // 0 - "No" 

  uint8_t WaterInFuelIndicator2;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The desired illumination of the Euro VI defined driver warning system indicator for relevant malfunctions and diesel exhaust fluid (reagent) tank low level.  Used for Euro VI implementations.  See Euro VI implementing regulation Annex XIII, Section ...
  // 7 - "not available" 
  // 6 - "reserved for SAE assignment" 
  // 5 - "reserved for SAE assignment" 
  // 4 - "On, fast blink" 
  // 3 - "reserved for SAE assignment" 
  // 2 - "reserved for SAE assignment" 
  // 1 - "On, solid" 
  // 0 - "Off" 

  uint8_t DrvrWarningSystemIndicatorStatus;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Severity status of the operator inducement system for anomalies with the emission control system, such as tampering, low diesel exhaust fluid (reagent) quality, diesel exhaust fluid (reagent) tank level, or EGR system errors.  Higher numerical ...
  // 7 - "Not Available / Not Supported" 
  // 6 - "Temporary Override of Inducement" 
  // 5 - "Inducement Level 5 .." 
  // 4 - "Inducement Level 4 .." 
  // 3 - "Inducement Level 3 .." 
  // 2 - "Inducement Level 2 .." 
  // 1 - "Inducement Level 1.." 
  // 0 - "Driver Warning" 

  uint8_t EmssnCtrlSystmOprtrIndcmntSvrity;   //      Bits=03.  [ 0     , 7      ]  Unit:''     
  uint32_t framecnt;
} OI_t;

// def @Hubner CAN Message (419366887)
#define Hubner_IDE (1U)
#define Hubner_DLC (8U)
#define Hubner_CANID (0x18FF07E7U)
// signal: @Steering_angle
#define Steering_angle_CovFactor 0.5
#define Steering_angle_CovS(x) ((int16_t)((x / 0.5) + 125))
// signal: @Tilt_angle
#define Tilt_angle_CovFactor 0.5
#define Tilt_angle_CovS(x) ((int16_t)((x / 0.5) + 125))
typedef struct
{

  int16_t Steering_angle;                //      Bits=08.  [ -62.5 , 62.5   ]  Unit:'''     Offset= -62.5     Factor= 0.5   

  int16_t Tilt_angle;                    //      Bits=08.  [ -62.5 , 62.5   ]  Unit:'''     Offset= -62.5     Factor= 0.5   
  uint32_t framecnt;
} Hubner_t;

// def @PropA2 CAN Message (435158782)
#define PropA2_IDE (1U)
#define PropA2_DLC (8U)
#define PropA2_CANID (0x19EFFEFEU)
// -- Proprietary A2  This proprietary PG uses the Destination Specific PDU Format allowing manufacturers to direct their proprietary communications to a specific destination node.
typedef struct
{

  int64_t ManufacturerSpecificInformation;   //      Bits=64.  [ 0     , 0      ]  Unit:''     
  uint32_t framecnt;
} PropA2_t;

// def @ATS CAN Message (484245246)
#define ATS_IDE (1U)
#define ATS_DLC (8U)
#define ATS_CANID (0x1CDCFEFEU)
// -- Anti-theft Status  NOTE?See Figures PGN56320_A to PGN56320_F for examples of Anti-theft message transfers.  Bit 1 is the right most bit in each byte.
typedef struct
{

  // Indicates the presence of the encryption seed random number.    00 - Random number is not present  01 - Random number is present  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Random number is present" 
  // 0 - "Random number is not present" 

  uint8_t AntthftEncryptnSdPrsentIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates the presence of a validated password.    00 - Password is not a validated password  01 - Password is a validated password  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Password is a validated password" 
  // 0 - "Password is not a validated password" 

  uint8_t AntitheftPwdValidIndicator;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates whether or not the component can be started.  00 Unlocked  01 Locked  10 Blocked  11 Not defined  00b -  Unlocked = This state indicates that the component can be started without the end user being required to enter a password.  01b - ...
  // 3 - "Not defined" 
  // 2 - "Blocked" 
  // 1 - "Locked" 
  // 0 - "Unlocked" 

  uint8_t AntitheftComponentStatusStates;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to indicate whether a password request was successfully performed, or if the request could not be perform due to system constraints or if the request was not a valid request.  00 Ok  01 Full_of_Passwords  10 Empty_of_Passwords   ...
  // 3 - "Not_valid" 
  // 2 - "Empty_of_Passwords" 
  // 1 - "Full_of_Passwords" 
  // 0 - "Ok" 

  uint8_t AntitheftModifyPwdStates;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // A seven byte random numeric code provided by the component in response to an anti-theft request.  This parameter is sent as a numeric value utilizing the full range of 0 to 0xFFFFFFFFFFFFFF.  The most significant byte is sent first, not following ...
  int64_t AntitheftRandomNumber;              //      Bits=56.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} ATS_t;

// def @ATR CAN Message (484310782)
#define ATR_IDE (1U)
#define ATR_DLC (8U)
#define ATR_CANID (0x1CDDFEFEU)
// -- Anti-theft Request  NOTE?See Figures PGN56320_A thru PGN56320_F for examples of Anti-theft message transfers.  Bit 1 is the right most bit in each byte.
typedef struct
{

  // This parameter is used to indicate if a random number seed is being requested, or if an encrypted password is being provided to the component.  00 Encryption_Seed_Request  01 Encrypted_Code_Present  10 Not defined  11 Not_Available  00b - ...
  // 3 - "Not_Available" 
  // 2 - "Not defined" 
  // 1 - "Encrypted_Code_Present" 
  // 0 - "Encryption_Seed_Request" 

  uint8_t AntthftEncryptionIndicatorStates;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to specify the desired triggers that are to be used by the component in deciding when to transition to the Locked state.  00 Lock_Upon_Operator_Request  01 Lock_When_Key_Off  10 Not defined  11 Not_Available  00b - ...
  // 3 - "Not_Available" 
  // 2 - "Not defined" 
  // 1 - "Lock_When_Key_Off" 
  // 0 - "Lock_Upon_Operator_Request" 

  uint8_t AntitheftDesiredExitModeStates;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // This parameter is used to identify the specific requests being sent to the component.  000 Add_Password  001 Delete_Password  010 Change_Password  011 Lock_or_Unlock  100 Check_Status  101 Login  110-111 Not defined  000b - Add_Password?This state ...
  // 5 - "Login" 
  // 4 - "Check_Status" 
  // 3 - "Lock_or_Unlock" 
  // 2 - "Change_Password" 
  // 1 - "Delete_Password" 
  // 0 - "Add_Password" 

  uint8_t AntitheftCmdStates;                 //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // This parameter is the seven byte numeric code (i.e., ?encrypted password? or ?key?) that is generated based on the encryption algorithm, the password supplied by the end user, and the random number seed given by the component.  This parameter is ...
  int64_t AntitheftPwdRepresentation;         //      Bits=56.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} ATR_t;

// def @RESET CAN Message (484376318)
#define RESET_IDE (1U)
#define RESET_DLC (8U)
#define RESET_CANID (0x1CDEFEFEU)
// -- Reset  NOTE?This message requires an Acknowledgement response (See J1939-21, PGN 59392) from the receiving node.  The use of individual proprietary protocols can still be used instead of the
typedef struct
{

  // Command signal used to reset the PGNs and parameters as defined in Table SPN988_A.    00 Take no action  01 Reset  10 Reserved  11 Not applicable
  // 3 - "Not applicable" 
  // 2 - "Reserved" 
  // 1 - "Reset" 
  // 0 - "Take no action" 

  uint8_t TripGroup1;                         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to reset proprietary parameters associated with a trip but not defined within this document.    00 Take no action  01 Reset  10 Reserved  11 Not applicable
  // 3 - "Not applicable" 
  // 2 - "Reserved" 
  // 1 - "Reset" 
  // 0 - "Take no action" 

  uint8_t TripGroup2Proprietary;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identification of component needing service.  See Table SPN911_A.
  uint8_t ServiceComponentIdentification;     //      Bits=08.  [ 0     , 250    ]  Unit:'ID'   

  // Command signal used to reset the engine rebuild hours.    00 Do not reset  01 Reset  10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Reset" 
  // 0 - "Do not reset" 

  uint8_t EngBuildHoursReset;                 //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to reset the straight ahead position for a steering sensor in the steering column or a steering controller's straight ahead position on any steerable axle.  00 Take no action - Do not Reset  01 Reset  10 Reserved, take no action  11 Not ...
  // 3 - "Not applicable" 
  // 2 - "Reserved" 
  // 1 - "Reset" 
  // 0 - "Take no action" 

  uint8_t SteerStraightAheadPosReset;         //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to reset the ignition controller average, maximum, and minimum level tracking of the spark plug secondary voltages and to reset the learned misfire rate.  Average secondary voltage tracking is reported in PGNs 64882 - 64887 ...
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Reset" 
  // 0 - "Do not reset" 

  uint8_t EngSprkPlgScndVltgeTrackingReset;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to reset the maintenance hour counter for an engine ignition control module.  The hours remaining until required maintenance is performed are reported in PGN 64688.    00 Do not reset  01 Reset  10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Reset" 
  // 0 - "Do not reset" 

  uint8_t EngIgntCtrlMaintenanceHoursReset;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to reset the bin lift count as reported in PGN 64594.    00 Do not reset  01 Reset  10 Reserved  11 Take no action
  // 3 - "Take no action" 
  // 2 - "Reserved" 
  // 1 - "Reset" 
  // 0 - "Do not reset" 

  uint8_t BinLiftCountReset;                  //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to initiate change in the tire configuration of the vehicle system. On receipt of this reset, necessary changes will be made in the tire configuration command information.  00 - Take No Action  01 - Reset  10 - Reserved  11 - Not ...
  // 3 - "Not Applicable" 
  // 2 - "Reserved" 
  // 1 - "Reset" 
  // 0 - "Take No Action" 

  uint8_t TireConfigInformation;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Command signal used to initiate change in the tire sensor identification information.    00 Take no action  01 Reset  10 Reserved  11 Not applicable
  // 3 - "Not applicable" 
  // 2 - "Reserved" 
  // 1 - "Reset" 
  // 0 - "Take no action" 

  uint8_t TireSensorInformation;              //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} RESET_t;

// def @EEC19 CAN Message (486286078)
#define EEC19_IDE (1U)
#define EEC19_DLC (8U)
#define EEC19_CANID (0x1CFC22FEU)
// -- Electronic Engine Controller 19  Engine related parameters
typedef struct
{

  // The total amount of energy delivered by the engine. It is accumulated over the life of the engine.
  uint32_t TotalEngEnergy;               //      Bits=32.  [ 0     , 4211081215 ]  Unit:'kWh'  
  uint32_t framecnt;
} EEC19_t;

// def @FSAS CAN Message (486289406)
#define FSAS_IDE (1U)
#define FSAS_DLC (8U)
#define FSAS_CANID (0x1CFC2FFEU)
#define FSAS_CYC (1000U)
// -- Fire Suppression Agent Status  Represents the status of various agents used for fire  suppression and solutions.
// signal: @FireSuppressionWaterTankLevel
#define FireSuppressionWaterTankLevel_CovFactor 0.4
#define FireSuppressionWaterTankLevel_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @FrSuppressionClassAFoamTankLevel
#define FrSuppressionClassAFoamTankLevel_CovFactor 0.4
#define FrSuppressionClassAFoamTankLevel_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @FrSuppressionClassBFoamTankLevel
#define FrSuppressionClassBFoamTankLevel_CovFactor 0.4
#define FrSuppressionClassBFoamTankLevel_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @FrSpprssnCmprssdArFmSystmArPress
#define FrSpprssnCmprssdArFmSystmArPress_CovFactor 8
#define FrSpprssnCmprssdArFmSystmArPress_CovS(x) ((uint8_t)((x / 8)))
typedef struct
{

  // Liquid level of the fire apparatus water tank.
  uint8_t FireSuppressionWaterTankLevel;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Liquid level of the Class-A foam agent tank.
  uint8_t FrSuppressionClassAFoamTankLevel;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Liquid level of the Class-B foam agent tank.
  uint8_t FrSuppressionClassBFoamTankLevel;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Compressed Air Foam System (CAFS) air compressor pressure.
  uint8_t FrSpprssnCmprssdArFmSystmArPress;   //      Bits=08.  [ 0     , 2000   ]  Unit:'kPa'   Factor= 8     
  uint32_t framecnt;
} FSAS_t;

// def @SCROII4 CAN Message (486289662)
#define SCROII4_IDE (1U)
#define SCROII4_DLC (8U)
#define SCROII4_CANID (0x1CFC30FEU)
// -- SCR Operator Inducement Information 4  Contains parameters that are related to SCR inducement.
typedef struct
{

  // The total number of times the feature, which allows the operator to override the inducement strategies (as described in SPN 6880) during emergencies, such as hurricanes, has been reset.    This counter can not be reset.
  uint16_t SCROprtrIndcmntEmrgncyOvrrdTtlRs;  //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Indicates the functional mode of SCR operator inducement override.  000          Not Available  001          Available - Not Active  010          Active  011          Active Extended  100          Expired  101-110  Not Defined  111          Not ...
  // 4 - "Expired" 
  // 3 - "Active Extended" 
  // 2 - "Active" 
  // 1 - "Available" 
  // 0 - "Not Available" 
  // 7 - "Not Available" 

  uint8_t SCROpratorInducementOverrideMode;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // Indicates the required operator inducement override renewal state.    00 = Not Required  01 = Required  10 = Error  11 = Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Required" 
  // 0 - "Not Required" 

  uint8_t SCROprtrIndcmntOvrrdRnwlRequired;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Used to indicate the time remaining during an operator inducement override event.  When an operator inducement is active this parameter indicates the remaining time that the currently active operator inducement may be overridden.  See also SPN 6878 ...
  uint16_t SCROprtrIndcmntOvrrdTmeRemaining;  //      Bits=16.  [ 0     , 64255  ]  Unit:'min'  
  uint32_t framecnt;
} SCROII4_t;

// def @BWLN CAN Message (486298366)
#define BWLN_IDE (1U)
#define BWLN_DLC (8U)
#define BWLN_CANID (0x1CFC52FEU)
#define BWLN_CYC (10000U)
// -- Bin Weight and Lift Count  Used to transmit bin weights.    Note:  This PGN is transmitted for as many Bin Instances as exist on the vehicle.
// signal: @NetBinWeight
#define NetBinWeight_CovFactor 2
#define NetBinWeight_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // Gives the instance of the bin on the vehicle whose parameters are transmitted in the remainder of the PGN, with the first or only bin as instance 1.
  uint8_t BinInstance;                   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Bin weighing error status    0 = No error  1 = Bad lift cycle  2 = Weighing error: bin lifted, not emptied  3 = Weighing error: empty bin lifted, emptied  4 - 14 = Reserved  15 = Not available / not applicable
  // 15 - "Not available / not applicable" 
  // 3 - "Weighing error: empty bin lifted" 
  // 2 - "Weighing error: bin lifted" 
  // 1 - "Bad lift cycle" 
  // 0 - "No error" 

  uint8_t BinWeighingErrorStatus;        //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Increments with each lift, whether or not net bin weight changes.  The count rolls over at data range limit.    The count can be reset using SPN 6898 in PGN 56832.
  uint16_t BinLiftCount;                 //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Mass of bin contents at most recent unload
  uint16_t NetBinWeight;                 //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     
  uint32_t framecnt;
} BWLN_t;

// def @MFEH CAN Message (486318334)
#define MFEH_IDE (1U)
#define MFEH_DLC (8U)
#define MFEH_CANID (0x1CFCA0FEU)
// -- Multi-fuel Engine Hours  Engine hours parameters for multi-fuel engines
// signal: @EngTotalHoursOfGasFuelOperation
#define EngTotalHoursOfGasFuelOperation_CovFactor 0.05
#define EngTotalHoursOfGasFuelOperation_CovS(x) ((uint32_t)((x / 0.05)))
// signal: @EngTtlHoursOfDieselFuelOperation
#define EngTtlHoursOfDieselFuelOperation_CovFactor 0.05
#define EngTtlHoursOfDieselFuelOperation_CovS(x) ((uint32_t)((x / 0.05)))
typedef struct
{

  // Accumulated time of operation of engine when gaseous fuel is used.  This parameter should be used only in multi-fuel engines.  See SPN 247 for single fuel engines and for total hours for multi-fuel engines.
  uint32_t EngTotalHoursOfGasFuelOperation;   //      Bits=32.  [ 0     , 210554060.75 ]  Unit:'h'     Factor= 0.05  

  // Accumulated time of operation of engine when diesel fuel is used.  This parameter should be used only in multi-fuel engines.  See SPN 247 for single fuel engines and for total hours for multi-fuel engines.
  uint32_t EngTtlHoursOfDieselFuelOperation;  //      Bits=32.  [ 0     , 210554060.75 ]  Unit:'h'     Factor= 0.05  
  uint32_t framecnt;
} MFEH_t;

// def @ESMR3 CAN Message (486318590)
#define ESMR3_IDE (1U)
#define ESMR3_DLC (8U)
#define ESMR3_CANID (0x1CFCA1FEU)
// -- Engine Spark Misfire Rate 3  The PGN contains information about spark misfire rate for cylinders 17 through 24. The misfire rate is conveyed as the number of cylinder spark misfires divided by the number of in spark ignition events on the same ...
// signal: @EngSparkPlug17MisfireRate
#define EngSparkPlug17MisfireRate_CovFactor 0.4
#define EngSparkPlug17MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug18MisfireRate
#define EngSparkPlug18MisfireRate_CovFactor 0.4
#define EngSparkPlug18MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug19MisfireRate
#define EngSparkPlug19MisfireRate_CovFactor 0.4
#define EngSparkPlug19MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug20MisfireRate
#define EngSparkPlug20MisfireRate_CovFactor 0.4
#define EngSparkPlug20MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug21MisfireRate
#define EngSparkPlug21MisfireRate_CovFactor 0.4
#define EngSparkPlug21MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug22MisfireRate
#define EngSparkPlug22MisfireRate_CovFactor 0.4
#define EngSparkPlug22MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug23MisfireRate
#define EngSparkPlug23MisfireRate_CovFactor 0.4
#define EngSparkPlug23MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug24MisfireRate
#define EngSparkPlug24MisfireRate_CovFactor 0.4
#define EngSparkPlug24MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // The spark misfire rate for Cylinder #17. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #17 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug17MisfireRate;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #18. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #18 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug18MisfireRate;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #19. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #19 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug19MisfireRate;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #20. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #20 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug20MisfireRate;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #21. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #21 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug21MisfireRate;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #22. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #22 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug22MisfireRate;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #23. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #23 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug23MisfireRate;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #24. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #24 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug24MisfireRate;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} ESMR3_t;

// def @ESMR2 CAN Message (486318846)
#define ESMR2_IDE (1U)
#define ESMR2_DLC (8U)
#define ESMR2_CANID (0x1CFCA2FEU)
// -- Engine Spark Misfire Rate 2  The PGN contains information about spark misfire rate for cylinders 9 through 16. The misfire rate is conveyed as the number of cylinder spark misfires divided by the number of in spark ignition events on the same ...
// signal: @EngSparkPlug9MisfireRate
#define EngSparkPlug9MisfireRate_CovFactor 0.4
#define EngSparkPlug9MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug10MisfireRate
#define EngSparkPlug10MisfireRate_CovFactor 0.4
#define EngSparkPlug10MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug11MisfireRate
#define EngSparkPlug11MisfireRate_CovFactor 0.4
#define EngSparkPlug11MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug12MisfireRate
#define EngSparkPlug12MisfireRate_CovFactor 0.4
#define EngSparkPlug12MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug13MisfireRate
#define EngSparkPlug13MisfireRate_CovFactor 0.4
#define EngSparkPlug13MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug14MisfireRate
#define EngSparkPlug14MisfireRate_CovFactor 0.4
#define EngSparkPlug14MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug15MisfireRate
#define EngSparkPlug15MisfireRate_CovFactor 0.4
#define EngSparkPlug15MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug16MisfireRate
#define EngSparkPlug16MisfireRate_CovFactor 0.4
#define EngSparkPlug16MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // The spark misfire rate for Cylinder #9. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #9 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug9MisfireRate;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #10. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #10 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug10MisfireRate;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #11. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #11 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug11MisfireRate;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #12. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #12 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug12MisfireRate;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #13. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #13 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug13MisfireRate;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #14. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #14 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug14MisfireRate;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #15. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #15 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug15MisfireRate;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #16. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #16 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug16MisfireRate;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} ESMR2_t;

// def @ESMR1 CAN Message (486319102)
#define ESMR1_IDE (1U)
#define ESMR1_DLC (8U)
#define ESMR1_CANID (0x1CFCA3FEU)
// -- Engine Spark Misfire Rate 1  The PGN contains information about spark misfire rate for cylinders 1 through 8. The misfire rate is conveyed as the number of cylinder spark misfires divided by the number of in spark ignition events on the same ...
// signal: @EngSparkPlug1MisfireRate
#define EngSparkPlug1MisfireRate_CovFactor 0.4
#define EngSparkPlug1MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug2MisfireRate
#define EngSparkPlug2MisfireRate_CovFactor 0.4
#define EngSparkPlug2MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug3MisfireRate
#define EngSparkPlug3MisfireRate_CovFactor 0.4
#define EngSparkPlug3MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug4MisfireRate
#define EngSparkPlug4MisfireRate_CovFactor 0.4
#define EngSparkPlug4MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug5MisfireRate
#define EngSparkPlug5MisfireRate_CovFactor 0.4
#define EngSparkPlug5MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug6MisfireRate
#define EngSparkPlug6MisfireRate_CovFactor 0.4
#define EngSparkPlug6MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug7MisfireRate
#define EngSparkPlug7MisfireRate_CovFactor 0.4
#define EngSparkPlug7MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngSparkPlug8MisfireRate
#define EngSparkPlug8MisfireRate_CovFactor 0.4
#define EngSparkPlug8MisfireRate_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // The spark misfire rate for Cylinder #1. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #1 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug1MisfireRate;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #2. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #2 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug2MisfireRate;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #3. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #3 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug3MisfireRate;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #4. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #4 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug4MisfireRate;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #5. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #5 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug5MisfireRate;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #6. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #6 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug6MisfireRate;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #7. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #7 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug7MisfireRate;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The spark misfire rate for Cylinder #8. The misfire rate is conveyed as the percentage of total cylinder spark misfires compared to the total number of ignition events on Cylinder #8 since the last time this tracking data was reset.  Any averaging ...
  uint8_t EngSparkPlug8MisfireRate;      //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} ESMR1_t;

// def @ESVMAX6 CAN Message (486319358)
#define ESVMAX6_IDE (1U)
#define ESVMAX6_DLC (8U)
#define ESVMAX6_CANID (0x1CFCA4FEU)
// -- Engine Spark Maximum Voltage 6  The PGN contains information about maximum spark voltage values for cylinders 21 through 24.  This is the secondary voltage of the combustion event.  This PGN may be used together with PGN 64882 which conveys the ...
typedef struct
{

  // The largest measured spark voltage of all measured spark events on Cylinder #21 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug21MaxVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #22 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug22MaxVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #23 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug23MaxVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #24 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug24MaxVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESVMAX6_t;

// def @ESVMAX5 CAN Message (486319614)
#define ESVMAX5_IDE (1U)
#define ESVMAX5_DLC (8U)
#define ESVMAX5_CANID (0x1CFCA5FEU)
// -- Engine Spark Maximum Voltage 5  The PGN contains information about maximum spark voltage values for cylinders 17 through 20.  This is the secondary voltage of the combustion event.  This PGN may be used together with PGN 64883 which conveys the ...
typedef struct
{

  // The largest measured spark voltage of all measured spark events on Cylinder #17 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug17MaxVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #18 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug18MaxVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #19 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug19MaxVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #20 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug20MaxVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESVMAX5_t;

// def @ESVMAX4 CAN Message (486319870)
#define ESVMAX4_IDE (1U)
#define ESVMAX4_DLC (8U)
#define ESVMAX4_CANID (0x1CFCA6FEU)
// -- Engine Spark Maximum Voltage 4  The PGN contains information about maximum spark voltage values for cylinders 13 through 16.  This is the secondary voltage of the combustion event.  This PGN may be used together with PGN 64884 which conveys the ...
typedef struct
{

  // The largest measured spark voltage of all measured spark events on Cylinder #13 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug13MaxVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #14 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug14MaxVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #15 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug15MaxVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #16 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug16MaxVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESVMAX4_t;

// def @ESVMAX3 CAN Message (486320126)
#define ESVMAX3_IDE (1U)
#define ESVMAX3_DLC (8U)
#define ESVMAX3_CANID (0x1CFCA7FEU)
// -- Engine Spark Maximum Voltage 3  The PGN contains information about maximum spark voltage values for cylinders 9 through 12. This is the secondary voltage of the combustion event.  This PGN may be used together with PGN 64885 which conveys the ...
typedef struct
{

  // The largest measured spark voltage of all measured spark events on Cylinder #9 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug9MaxVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #10 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug10MaxVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #11 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug11MaxVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #12 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug12MaxVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESVMAX3_t;

// def @ESVMAX2 CAN Message (486320382)
#define ESVMAX2_IDE (1U)
#define ESVMAX2_DLC (8U)
#define ESVMAX2_CANID (0x1CFCA8FEU)
// -- Engine Spark Maximum Voltage 2  The PGN contains information about maximum spark voltage values for cylinders 5 through 8. This is the secondary voltage of the combustion event.  This PGN may be used together with PGN 64886 which conveys the average ...
typedef struct
{

  // The largest measured spark voltage of all measured spark events on Cylinder #5 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug5MaxVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #6 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug6MaxVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #7 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug7MaxVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #8 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug8MaxVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESVMAX2_t;

// def @ESVMAX1 CAN Message (486320638)
#define ESVMAX1_IDE (1U)
#define ESVMAX1_DLC (8U)
#define ESVMAX1_CANID (0x1CFCA9FEU)
// -- Engine Spark Maximum Voltage 1  The PGN contains information about maximum spark voltage values for cylinders 1 through 4. This is the secondary voltage of the combustion event.  This PGN may be used together with PGN 64887 which conveys the average ...
typedef struct
{

  // The largest measured spark voltage of all measured spark events on Cylinder #1 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug1MaxVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #2 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug2MaxVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #3 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug3MaxVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The largest measured spark voltage of all measured spark events on Cylinder #4 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug4MaxVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESVMAX1_t;

// def @ESVMIN6 CAN Message (486320894)
#define ESVMIN6_IDE (1U)
#define ESVMIN6_DLC (8U)
#define ESVMIN6_CANID (0x1CFCAAFEU)
// -- Engine Spark Minimum Voltage 6  The PGN contains information about minimum spark voltage values for cylinders 21 through 24. This is the secondary voltage of the combustion event.  This PGN may be used together with PGN 64882 which conveys the ...
typedef struct
{

  // The smallest measured spark voltage of all measured spark events on Cylinder #21 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug21MinVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #22 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug22MinVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #23 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug23MinVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #24 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug24MinVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESVMIN6_t;

// def @ESVMIN5 CAN Message (486321150)
#define ESVMIN5_IDE (1U)
#define ESVMIN5_DLC (8U)
#define ESVMIN5_CANID (0x1CFCABFEU)
// -- Engine Spark Minimum Voltage 5  The PGN contains information about minimum spark voltage values for cylinders 17 through 20. This is the secondary voltage of the combustion event.  This PGN may be used together with PGN 64883 which conveys the ...
typedef struct
{

  // The smallest measured spark voltage of all measured spark events on Cylinder #17 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug17MinVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #18 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug18MinVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #19 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug19MinVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #20 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug20MinVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESVMIN5_t;

// def @ESVMIN4 CAN Message (486321406)
#define ESVMIN4_IDE (1U)
#define ESVMIN4_DLC (8U)
#define ESVMIN4_CANID (0x1CFCACFEU)
// -- Engine Spark Minimum Voltage 4  The PGN contains information about minimum spark voltage values for cylinders 13 through 16. This is the secondary voltage of the combustion event.  This PGN may be used together with PGN 64884 which conveys the ...
typedef struct
{

  // The smallest measured spark voltage of all measured spark events on Cylinder #13 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug13MinVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #14 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug14MinVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #15 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug15MinVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #16 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug16MinVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESVMIN4_t;

// def @ESVMIN3 CAN Message (486321662)
#define ESVMIN3_IDE (1U)
#define ESVMIN3_DLC (8U)
#define ESVMIN3_CANID (0x1CFCADFEU)
// -- Engine Spark Minimum Voltage 3  The PGN contains information about minimum spark voltage values for cylinders 9 through 12. This is the secondary voltage of the combustion event.  This PGN may be used together with PGN 64885 which conveys the ...
typedef struct
{

  // The smallest measured spark voltage of all measured spark events on Cylinder #9 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug9MinVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #10 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug10MinVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #11 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug11MinVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #12 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug12MinVoltage;     //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESVMIN3_t;

// def @ESVMIN2 CAN Message (486321918)
#define ESVMIN2_IDE (1U)
#define ESVMIN2_DLC (8U)
#define ESVMIN2_CANID (0x1CFCAEFEU)
// -- Engine Spark Minimum Voltage 2  The PGN contains information about minimum spark voltage values for cylinders 5 through 8. This is the secondary voltage of the combustion event.  This PGN may be used together with PGN 64886 which conveys the average ...
typedef struct
{

  // The smallest measured spark voltage of all measured spark events on Cylinder #5 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug5MinVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #6 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug6MinVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #7 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug7MinVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #8 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug8MinVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESVMIN2_t;

// def @ESVMIN1 CAN Message (486322174)
#define ESVMIN1_IDE (1U)
#define ESVMIN1_DLC (8U)
#define ESVMIN1_CANID (0x1CFCAFFEU)
// -- Engine Spark Minimum Voltage 1  The PGN contains information about minimum spark voltage values for cylinders 1 through 4. This is the secondary voltage of the combustion event.  This PGN may be used together with PGN 64887 which conveys the average ...
typedef struct
{

  // The smallest measured spark voltage of all measured spark events on Cylinder #1 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug1MinVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #2 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug2MinVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #3 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug3MinVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    

  // The smallest measured spark voltage of all measured spark events on Cylinder #4 since the last time this tracking data was reset.  It is reset using Reset PGN 56832, Engine Spark Plug Secondary Voltage Tracking Reset SPN 6218.
  uint16_t EngSparkPlug4MinVoltage;      //      Bits=16.  [ 0     , 64255  ]  Unit:'V'    
  uint32_t framecnt;
} ESVMIN1_t;

// def @EICMH CAN Message (486322430)
#define EICMH_IDE (1U)
#define EICMH_DLC (8U)
#define EICMH_CANID (0x1CFCB0FEU)
// -- Engine Ignition Controller Maintenance Hours  Contains Maintenance Hours of the Engine Ignition Control Module
// signal: @EngIgntCtrlModule1TimeRemaining
#define EngIgntCtrlModule1TimeRemaining_CovFactor 0.05
#define EngIgntCtrlModule1TimeRemaining_CovS(x) ((uint32_t)((x / 0.05)))
// signal: @EngIgntCtrlModule2TimeRemaining
#define EngIgntCtrlModule2TimeRemaining_CovFactor 0.05
#define EngIgntCtrlModule2TimeRemaining_CovS(x) ((uint32_t)((x / 0.05)))
typedef struct
{

  // This parameter reports the time remaining before maintenance should be performed on engine ignition control module instance 1.  Upon maintenance, the time is reset to its starting value using Reset PGN 56832, Ignition Control Maintenance Hours ...
  uint32_t EngIgntCtrlModule1TimeRemaining;  //      Bits=32.  [ 0     , 210554060.75 ]  Unit:'h'     Factor= 0.05  

  // This parameter reports the time remaining before maintenance should be performed on engine ignition control module instance 2.  Upon maintenance, the time is reset to its starting value using Reset PGN 56832, Ignition Control Maintenance Hours ...
  uint32_t EngIgntCtrlModule2TimeRemaining;  //      Bits=32.  [ 0     , 210554060.75 ]  Unit:'h'     Factor= 0.05  
  uint32_t framecnt;
} EICMH_t;

// def @EEC11 CAN Message (486341374)
#define EEC11_IDE (1U)
#define EEC11_DLC (8U)
#define EEC11_CANID (0x1CFCFAFEU)
// -- Electronic Engine Controller 11  Engine related parameters
// signal: @EngExhstGsRcirculation2ValveCtrl
#define EngExhstGsRcirculation2ValveCtrl_CovFactor 0.0025
#define EngExhstGsRcirculation2ValveCtrl_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngExhstGsRcrculation2Valve2Ctrl
#define EngExhstGsRcrculation2Valve2Ctrl_CovFactor 0.0025
#define EngExhstGsRcrculation2Valve2Ctrl_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngExhstGsRcrcltn2Valve1PosError
#define EngExhstGsRcrcltn2Valve1PosError_CovFactor 0.004
#define EngExhstGsRcrcltn2Valve1PosError_CovS(x) ((int32_t)((x / 0.004) + 31250))
// signal: @EngExhstGsRcrcltn2Valve2PosError
#define EngExhstGsRcrcltn2Valve2PosError_CovFactor 0.004
#define EngExhstGsRcrcltn2Valve2PosError_CovS(x) ((int32_t)((x / 0.004) + 31250))
typedef struct
{

  // Desired percentage of maximum Exhaust Gas Recirculation 2 (EGR2) valve opening. 0% means the valve is closed. 100% means maximum opening (full gas flow).
  uint16_t EngExhstGsRcirculation2ValveCtrl;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Desired percentage of maximum Exhaust Gas Recirculation 2 (EGR2) valve 2 opening. 0% means the valve is closed. 100% means maximum opening (full gas flow).
  uint16_t EngExhstGsRcrculation2Valve2Ctrl;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // The position error of the Exhaust Gas Recirculation 2 valve, determined as the actual position (SPN 5264) minus the commanded position (SPN 5262).
  int32_t EngExhstGsRcrcltn2Valve1PosError;   //      Bits=16.  [ -125  , 132.02 ]  Unit:'%'     Offset= -125      Factor= 0.004 

  // The position error of the Exhaust Gas Recirculation 2 valve 2, determined as the actual position (SPN 5265) minus the commanded position (SPN 5263).
  int32_t EngExhstGsRcrcltn2Valve2PosError;   //      Bits=16.  [ -125  , 132.02 ]  Unit:'%'     Offset= -125      Factor= 0.004 
  uint32_t framecnt;
} EEC11_t;

// def @EMAC CAN Message (486341886)
#define EMAC_IDE (1U)
#define EMAC_DLC (8U)
#define EMAC_CANID (0x1CFCFCFEU)
// -- Engine Manifold Actuator Control  Engine manifold actuator control parameters.
// signal: @EngExhstMnfldBnk1FlwBlncVlvActtr
#define EngExhstMnfldBnk1FlwBlncVlvActtr_CovFactor 0.0025
#define EngExhstMnfldBnk1FlwBlncVlvActtr_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngExhstMnfldBnk2FlwBlncVlvActtr
#define EngExhstMnfldBnk2FlwBlncVlvActtr_CovFactor 0.0025
#define EngExhstMnfldBnk2FlwBlncVlvActtr_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // Commanded percentage of maximum Engine Exhaust Manifold Bank 1 Balance valve opening. 0% means valve is closed. 100% means maximum valve opening (full gas flow).
  uint16_t EngExhstMnfldBnk1FlwBlncVlvActtr;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // Commanded percentage of maximum Engine Ehaust Manifold Bank 2 Balance valve opening. 0% means valve is closed. 100% means maximum valve opening (full gas flow).
  uint16_t EngExhstMnfldBnk2FlwBlncVlvActtr;  //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} EMAC_t;

// def @EEC10 CAN Message (486342398)
#define EEC10_IDE (1U)
#define EEC10_DLC (8U)
#define EEC10_CANID (0x1CFCFEFEU)
// -- Electronic Engine Controller 10  Engine related parameters
// signal: @EngExhstGsRcrcltn2ClerIntakeTemp
#define EngExhstGsRcrcltn2ClerIntakeTemp_CovFactor 0.03125
#define EngExhstGsRcrcltn2ClerIntakeTemp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhstGsRcrcltn2ClrIntkGsAbsPr
#define EngExhstGsRcrcltn2ClrIntkGsAbsPr_CovFactor 0.5
#define EngExhstGsRcrcltn2ClrIntkGsAbsPr_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @EngExhstGsRcrcltn2ClerEfficiency
#define EngExhstGsRcrcltn2ClerEfficiency_CovFactor 0.4
#define EngExhstGsRcrcltn2ClerEfficiency_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EGR2CoolerBypassActuatorPos
#define EGR2CoolerBypassActuatorPos_CovFactor 0.4
#define EGR2CoolerBypassActuatorPos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Exhaust Gas Recirculation 2 (EGR2) Temperature measured at EGR2 cooler intake. See SPN 5255 for Engine EGR2 temperature.
  int32_t EngExhstGsRcrcltn2ClerIntakeTemp;   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Exhaust Gas Recirculation 2 gas absolute pressure is measured at EGR2 cooler intake. See SPN 5253 for EGR2 pressure measured at the EGR2 cooler outlet before the valve.
  uint16_t EngExhstGsRcrcltn2ClrIntkGsAbsPr;  //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // Exhaust Gas Recirculation 2 cooler efficiency is an indication of the cooler?s ability to reduce the temperature of the exhaust gas that is being recirculated back to the intake. 0% = no reduction in temperature, 100% = maximum cooling. The EGR 2 ...
  uint8_t EngExhstGsRcrcltn2ClerEfficiency;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // EGR2 Cooler Bypass Actuator position, where 0% = Fully Closed (no gas flowing through the bypass), and 100% = Fully Open..
  uint8_t EGR2CoolerBypassActuatorPos;        //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} EEC10_t;

// def @EOM CAN Message (486344958)
#define EOM_IDE (1U)
#define EOM_DLC (8U)
#define EOM_CANID (0x1CFD08FEU)
#define EOM_CYC (30000U)
// -- Engine oil message  Engine oil related parameters
// signal: @EngOilViscosity
#define EngOilViscosity_CovFactor 0.015625
#define EngOilViscosity_CovS(x) ((uint16_t)((x / 0.015625)))
// signal: @EngOilDensity
#define EngOilDensity_CovFactor 3.052E-05
#define EngOilDensity_CovS(x) ((uint16_t)((x / 3.052E-05)))
// signal: @EngOilRelativeDielectricity
#define EngOilRelativeDielectricity_CovFactor 0.0001220703125
#define EngOilRelativeDielectricity_CovS(x) ((uint16_t)((x / 0.0001220703125)))
// signal: @EngOilTemp3
#define EngOilTemp3_CovFactor 0.03125
#define EngOilTemp3_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Dynamic viscosity of the engine oil
  uint16_t EngOilViscosity;              //      Bits=16.  [ 0     , 1003.984375 ]  Unit:'Cp'    Factor= 0.015625

  // Density of the engine oil
  uint16_t EngOilDensity;                //      Bits=16.  [ 0     , 1.961  ]  Unit:'g/cc'  Factor= 3.052E-05

  // Engine oil relative dielectricity used to describe the engine oil quality.
  uint16_t EngOilRelativeDielectricity;  //      Bits=16.  [ 0     , 7.844  ]  Unit:''      Factor= 0.0001220703125

  // Temperature of the engine lubricant.    Note:  If there is only one engine oil temperature measurement, SPN 175 should be used.     See also SPNs 175 and 1135 for additional engine oil temperature measurements.
  int32_t EngOilTemp3;                   //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} EOM_t;

// def @CSI CAN Message (486349054)
#define CSI_IDE (1U)
#define CSI_DLC (8U)
#define CSI_CANID (0x1CFD18FEU)
// -- Collision Sensor Information  Message containing type and serial number for every sensor of the restraint-system. The Collision Sensor Type is required for all possible sensors, but only the serial numbers of sensors with a type that is different ...
typedef struct
{

  // Type of Frontal Collision Sensor 1.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 =  Reserved   ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t FrontalCollisionSensor1Type;        //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Frontal Collision Sensor 2.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 =  Reserved   ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t FrontalCollisionSensor2Type;        //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Frontal Collision Sensor 3.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 =  Reserved   ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t FrontalCollisionSensor3Type;        //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Frontal Collision Sensor 4.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 =  Reserved   ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t FrontalCollisionSensor4Type;        //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Side Collision Sensor Front - Left.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 = ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t SideCollisionSensorFrontLeftType;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Side Collision Sensor Mid Front - Left.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 = ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t SdCllisionSensorMidFrontLeftType;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Side Collision Sensor Mid Rear - Left.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 = ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t SdCollisionSensorMidRearLeftType;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Side Collision Sensor Rear - Left.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 = ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t SideCollisionSensorRearLeftType;    //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Side Collision Sensor Front - Right.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 = ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t SdeCollisionSensorFrontRightType;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Side Collision Sensor Mid Front - Right.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t SdCllsionSensorMidFrontRightType;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Side Collision Sensor Mid Rear - Right.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 = ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t SdCllisionSensorMidRearRightType;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Side Collision Sensor Rear - Right.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 = ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t SideCollisionSensorRearRightType;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Rear Collision Sensor 1.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 =  Reserved   ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t RearCollisionSensor1Type;           //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Rear Collision Sensor 2.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 =  Reserved   ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t RearCollisionSensor2Type;           //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Rear Collision Sensor 3.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 =  Reserved   ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t RearCollisionSensor3Type;           //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Rear Collision Sensor 4.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 =  Reserved   ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t RearCollisionSensor4Type;           //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Type of Rollover Sensor.  0000 = acceleration sensor  0001 = pressure sensor  0010 = rollrate sensor  0011 = sonic sensor  0100 = fiber-optic sensor  0101 = radar sensor  0110 = lidar sensor  0111 = optical sensor  1000-1101 =  Reserved  1110 = ...
  // 15 - "not available" 
  // 14 - "Error" 
  // 7 - "optical sensor" 
  // 6 - "lidar sensor" 
  // 5 - "radar sensor" 
  // 4 - "fiber-optic sensor" 
  // 3 - "sonic sensor" 
  // 2 - "rollrate sensor" 
  // 1 - "pressure sensor" 
  // 0 - "acceleration sensor" 

  uint8_t RolloverSensorType;                 //      Bits=04.  [ 0     , 15     ]  Unit:''     
  uint32_t framecnt;
} CSI_t;

// def @ILI CAN Message (486349310)
#define ILI_IDE (1U)
#define ILI_DLC (8U)
#define ILI_CANID (0x1CFD19FEU)
// -- Ignitor Loop Information  Message containing resistance values for every equipped ignitor loop of the restraint-system. (Maximum of 100 Ignitor Loops.)  .  .  Byte 21-22    Special Ignitor Loop [1], if installed  Byte 23-24    Special Ignitor Loop ...
// signal: @DrvrArbgIgntrLp1stStgeResistance
#define DrvrArbgIgntrLp1stStgeResistance_CovFactor 0.1
#define DrvrArbgIgntrLp1stStgeResistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @PssngrArbgIgntrLp1stStgRsistance
#define PssngrArbgIgntrLp1stStgRsistance_CovFactor 0.1
#define PssngrArbgIgntrLp1stStgRsistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @DrvrArbgIgntrLp2ndStgeResistance
#define DrvrArbgIgntrLp2ndStgeResistance_CovFactor 0.1
#define DrvrArbgIgntrLp2ndStgeResistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @PssngrArbgIgntrLp2ndStgRsistance
#define PssngrArbgIgntrLp2ndStgRsistance_CovFactor 0.1
#define PssngrArbgIgntrLp2ndStgRsistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @DrvrBltTnsnrIgntorLoopResistance
#define DrvrBltTnsnrIgntorLoopResistance_CovFactor 0.1
#define DrvrBltTnsnrIgntorLoopResistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @PssngrBltTnsnrIgntrLopResistance
#define PssngrBltTnsnrIgntrLopResistance_CovFactor 0.1
#define PssngrBltTnsnrIgntrLopResistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SdeBagIgnitorLoop1LeftResistance
#define SdeBagIgnitorLoop1LeftResistance_CovFactor 0.1
#define SdeBagIgnitorLoop1LeftResistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SdeBagIgnitorLoop2LeftResistance
#define SdeBagIgnitorLoop2LeftResistance_CovFactor 0.1
#define SdeBagIgnitorLoop2LeftResistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SdBagIgnitorLoop1RightResistance
#define SdBagIgnitorLoop1RightResistance_CovFactor 0.1
#define SdBagIgnitorLoop1RightResistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SdBagIgnitorLoop2RightResistance
#define SdBagIgnitorLoop2RightResistance_CovFactor 0.1
#define SdBagIgnitorLoop2RightResistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop1Resistance
#define SpecialIgnitorLoop1Resistance_CovFactor 0.1
#define SpecialIgnitorLoop1Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop2Resistance
#define SpecialIgnitorLoop2Resistance_CovFactor 0.1
#define SpecialIgnitorLoop2Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop3Resistance
#define SpecialIgnitorLoop3Resistance_CovFactor 0.1
#define SpecialIgnitorLoop3Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop4Resistance
#define SpecialIgnitorLoop4Resistance_CovFactor 0.1
#define SpecialIgnitorLoop4Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop5Resistance
#define SpecialIgnitorLoop5Resistance_CovFactor 0.1
#define SpecialIgnitorLoop5Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop6Resistance
#define SpecialIgnitorLoop6Resistance_CovFactor 0.1
#define SpecialIgnitorLoop6Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop7Resistance
#define SpecialIgnitorLoop7Resistance_CovFactor 0.1
#define SpecialIgnitorLoop7Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop8Resistance
#define SpecialIgnitorLoop8Resistance_CovFactor 0.1
#define SpecialIgnitorLoop8Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop9Resistance
#define SpecialIgnitorLoop9Resistance_CovFactor 0.1
#define SpecialIgnitorLoop9Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop10Resistance
#define SpecialIgnitorLoop10Resistance_CovFactor 0.1
#define SpecialIgnitorLoop10Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop11Resistance
#define SpecialIgnitorLoop11Resistance_CovFactor 0.1
#define SpecialIgnitorLoop11Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop12Resistance
#define SpecialIgnitorLoop12Resistance_CovFactor 0.1
#define SpecialIgnitorLoop12Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop13Resistance
#define SpecialIgnitorLoop13Resistance_CovFactor 0.1
#define SpecialIgnitorLoop13Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop14Resistance
#define SpecialIgnitorLoop14Resistance_CovFactor 0.1
#define SpecialIgnitorLoop14Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop15Resistance
#define SpecialIgnitorLoop15Resistance_CovFactor 0.1
#define SpecialIgnitorLoop15Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop16Resistance
#define SpecialIgnitorLoop16Resistance_CovFactor 0.1
#define SpecialIgnitorLoop16Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop17Resistance
#define SpecialIgnitorLoop17Resistance_CovFactor 0.1
#define SpecialIgnitorLoop17Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop18Resistance
#define SpecialIgnitorLoop18Resistance_CovFactor 0.1
#define SpecialIgnitorLoop18Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop19Resistance
#define SpecialIgnitorLoop19Resistance_CovFactor 0.1
#define SpecialIgnitorLoop19Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop20Resistance
#define SpecialIgnitorLoop20Resistance_CovFactor 0.1
#define SpecialIgnitorLoop20Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop21Resistance
#define SpecialIgnitorLoop21Resistance_CovFactor 0.1
#define SpecialIgnitorLoop21Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop22Resistance
#define SpecialIgnitorLoop22Resistance_CovFactor 0.1
#define SpecialIgnitorLoop22Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop23Resistance
#define SpecialIgnitorLoop23Resistance_CovFactor 0.1
#define SpecialIgnitorLoop23Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop24Resistance
#define SpecialIgnitorLoop24Resistance_CovFactor 0.1
#define SpecialIgnitorLoop24Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop25Resistance
#define SpecialIgnitorLoop25Resistance_CovFactor 0.1
#define SpecialIgnitorLoop25Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop26Resistance
#define SpecialIgnitorLoop26Resistance_CovFactor 0.1
#define SpecialIgnitorLoop26Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop27Resistance
#define SpecialIgnitorLoop27Resistance_CovFactor 0.1
#define SpecialIgnitorLoop27Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop28Resistance
#define SpecialIgnitorLoop28Resistance_CovFactor 0.1
#define SpecialIgnitorLoop28Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop29Resistance
#define SpecialIgnitorLoop29Resistance_CovFactor 0.1
#define SpecialIgnitorLoop29Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop30Resistance
#define SpecialIgnitorLoop30Resistance_CovFactor 0.1
#define SpecialIgnitorLoop30Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop31Resistance
#define SpecialIgnitorLoop31Resistance_CovFactor 0.1
#define SpecialIgnitorLoop31Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop32Resistance
#define SpecialIgnitorLoop32Resistance_CovFactor 0.1
#define SpecialIgnitorLoop32Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop33Resistance
#define SpecialIgnitorLoop33Resistance_CovFactor 0.1
#define SpecialIgnitorLoop33Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop34Resistance
#define SpecialIgnitorLoop34Resistance_CovFactor 0.1
#define SpecialIgnitorLoop34Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop35Resistance
#define SpecialIgnitorLoop35Resistance_CovFactor 0.1
#define SpecialIgnitorLoop35Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop36Resistance
#define SpecialIgnitorLoop36Resistance_CovFactor 0.1
#define SpecialIgnitorLoop36Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop37Resistance
#define SpecialIgnitorLoop37Resistance_CovFactor 0.1
#define SpecialIgnitorLoop37Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop38Resistance
#define SpecialIgnitorLoop38Resistance_CovFactor 0.1
#define SpecialIgnitorLoop38Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop39Resistance
#define SpecialIgnitorLoop39Resistance_CovFactor 0.1
#define SpecialIgnitorLoop39Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop40Resistance
#define SpecialIgnitorLoop40Resistance_CovFactor 0.1
#define SpecialIgnitorLoop40Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop41Resistance
#define SpecialIgnitorLoop41Resistance_CovFactor 0.1
#define SpecialIgnitorLoop41Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop42Resistance
#define SpecialIgnitorLoop42Resistance_CovFactor 0.1
#define SpecialIgnitorLoop42Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop43Resistance
#define SpecialIgnitorLoop43Resistance_CovFactor 0.1
#define SpecialIgnitorLoop43Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop44Resistance
#define SpecialIgnitorLoop44Resistance_CovFactor 0.1
#define SpecialIgnitorLoop44Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop45Resistance
#define SpecialIgnitorLoop45Resistance_CovFactor 0.1
#define SpecialIgnitorLoop45Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop46Resistance
#define SpecialIgnitorLoop46Resistance_CovFactor 0.1
#define SpecialIgnitorLoop46Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop47Resistance
#define SpecialIgnitorLoop47Resistance_CovFactor 0.1
#define SpecialIgnitorLoop47Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop48Resistance
#define SpecialIgnitorLoop48Resistance_CovFactor 0.1
#define SpecialIgnitorLoop48Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop49Resistance
#define SpecialIgnitorLoop49Resistance_CovFactor 0.1
#define SpecialIgnitorLoop49Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop50Resistance
#define SpecialIgnitorLoop50Resistance_CovFactor 0.1
#define SpecialIgnitorLoop50Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop51Resistance
#define SpecialIgnitorLoop51Resistance_CovFactor 0.1
#define SpecialIgnitorLoop51Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop52Resistance
#define SpecialIgnitorLoop52Resistance_CovFactor 0.1
#define SpecialIgnitorLoop52Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop53Resistance
#define SpecialIgnitorLoop53Resistance_CovFactor 0.1
#define SpecialIgnitorLoop53Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop54Resistance
#define SpecialIgnitorLoop54Resistance_CovFactor 0.1
#define SpecialIgnitorLoop54Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop55Resistance
#define SpecialIgnitorLoop55Resistance_CovFactor 0.1
#define SpecialIgnitorLoop55Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop56Resistance
#define SpecialIgnitorLoop56Resistance_CovFactor 0.1
#define SpecialIgnitorLoop56Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop57Resistance
#define SpecialIgnitorLoop57Resistance_CovFactor 0.1
#define SpecialIgnitorLoop57Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop58Resistance
#define SpecialIgnitorLoop58Resistance_CovFactor 0.1
#define SpecialIgnitorLoop58Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop59Resistance
#define SpecialIgnitorLoop59Resistance_CovFactor 0.1
#define SpecialIgnitorLoop59Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop60Resistance
#define SpecialIgnitorLoop60Resistance_CovFactor 0.1
#define SpecialIgnitorLoop60Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop61Resistance
#define SpecialIgnitorLoop61Resistance_CovFactor 0.1
#define SpecialIgnitorLoop61Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop62Resistance
#define SpecialIgnitorLoop62Resistance_CovFactor 0.1
#define SpecialIgnitorLoop62Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop63Resistance
#define SpecialIgnitorLoop63Resistance_CovFactor 0.1
#define SpecialIgnitorLoop63Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop64Resistance
#define SpecialIgnitorLoop64Resistance_CovFactor 0.1
#define SpecialIgnitorLoop64Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop65Resistance
#define SpecialIgnitorLoop65Resistance_CovFactor 0.1
#define SpecialIgnitorLoop65Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop66Resistance
#define SpecialIgnitorLoop66Resistance_CovFactor 0.1
#define SpecialIgnitorLoop66Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop67Resistance
#define SpecialIgnitorLoop67Resistance_CovFactor 0.1
#define SpecialIgnitorLoop67Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop68Resistance
#define SpecialIgnitorLoop68Resistance_CovFactor 0.1
#define SpecialIgnitorLoop68Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop69Resistance
#define SpecialIgnitorLoop69Resistance_CovFactor 0.1
#define SpecialIgnitorLoop69Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop70Resistance
#define SpecialIgnitorLoop70Resistance_CovFactor 0.1
#define SpecialIgnitorLoop70Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop71Resistance
#define SpecialIgnitorLoop71Resistance_CovFactor 0.1
#define SpecialIgnitorLoop71Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop72Resistance
#define SpecialIgnitorLoop72Resistance_CovFactor 0.1
#define SpecialIgnitorLoop72Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop73Resistance
#define SpecialIgnitorLoop73Resistance_CovFactor 0.1
#define SpecialIgnitorLoop73Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop74Resistance
#define SpecialIgnitorLoop74Resistance_CovFactor 0.1
#define SpecialIgnitorLoop74Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop75Resistance
#define SpecialIgnitorLoop75Resistance_CovFactor 0.1
#define SpecialIgnitorLoop75Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop76Resistance
#define SpecialIgnitorLoop76Resistance_CovFactor 0.1
#define SpecialIgnitorLoop76Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop77Resistance
#define SpecialIgnitorLoop77Resistance_CovFactor 0.1
#define SpecialIgnitorLoop77Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop78Resistance
#define SpecialIgnitorLoop78Resistance_CovFactor 0.1
#define SpecialIgnitorLoop78Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop79Resistance
#define SpecialIgnitorLoop79Resistance_CovFactor 0.1
#define SpecialIgnitorLoop79Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop80Resistance
#define SpecialIgnitorLoop80Resistance_CovFactor 0.1
#define SpecialIgnitorLoop80Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop81Resistance
#define SpecialIgnitorLoop81Resistance_CovFactor 0.1
#define SpecialIgnitorLoop81Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop82Resistance
#define SpecialIgnitorLoop82Resistance_CovFactor 0.1
#define SpecialIgnitorLoop82Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop83Resistance
#define SpecialIgnitorLoop83Resistance_CovFactor 0.1
#define SpecialIgnitorLoop83Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop84Resistance
#define SpecialIgnitorLoop84Resistance_CovFactor 0.1
#define SpecialIgnitorLoop84Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop85Resistance
#define SpecialIgnitorLoop85Resistance_CovFactor 0.1
#define SpecialIgnitorLoop85Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop86Resistance
#define SpecialIgnitorLoop86Resistance_CovFactor 0.1
#define SpecialIgnitorLoop86Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop87Resistance
#define SpecialIgnitorLoop87Resistance_CovFactor 0.1
#define SpecialIgnitorLoop87Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop88Resistance
#define SpecialIgnitorLoop88Resistance_CovFactor 0.1
#define SpecialIgnitorLoop88Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop89Resistance
#define SpecialIgnitorLoop89Resistance_CovFactor 0.1
#define SpecialIgnitorLoop89Resistance_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @SpecialIgnitorLoop90Resistance
#define SpecialIgnitorLoop90Resistance_CovFactor 0.1
#define SpecialIgnitorLoop90Resistance_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // Resistance of Driver Airbag Ignitor Loop 1st Stage.
  uint16_t DrvrArbgIgntrLp1stStgeResistance;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Passenger Airbag Ignitor Loop 1st Stage.
  uint16_t PssngrArbgIgntrLp1stStgRsistance;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Driver Airbag Ignitor Loop 2nd Stage.
  uint16_t DrvrArbgIgntrLp2ndStgeResistance;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Passenger Airbag Ignitor Loop 2nd Stage.
  uint16_t PssngrArbgIgntrLp2ndStgRsistance;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Driver Belt Tensioner Ignitor Loop 1st Stage.
  uint16_t DrvrBltTnsnrIgntorLoopResistance;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Passenger Belt Tensioner Ignitor Loop 1st Stage.
  uint16_t PssngrBltTnsnrIgntrLopResistance;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Side Bag Ignitor Loop 1 - Left.
  uint16_t SdeBagIgnitorLoop1LeftResistance;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Side Bag Ignitor Loop 2 - Left.
  uint16_t SdeBagIgnitorLoop2LeftResistance;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Side Bag Ignitor Loop 1 - Right.
  uint16_t SdBagIgnitorLoop1RightResistance;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Side Bag Ignitor Loop 2 - Right.
  uint16_t SdBagIgnitorLoop2RightResistance;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 1.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop1Resistance;     //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 2.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop2Resistance;     //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 3.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop3Resistance;     //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 4.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop4Resistance;     //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 5.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop5Resistance;     //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 6.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop6Resistance;     //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 7.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop7Resistance;     //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 8.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop8Resistance;     //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 9.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop9Resistance;     //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 10.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop10Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 11.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop11Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 12.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop12Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 13.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop13Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 14.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop14Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 15.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop15Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 16.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop16Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 17.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop17Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 18.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop18Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 19.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop19Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 20.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop20Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 21.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop21Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 22.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop22Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 23.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop23Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 24.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop24Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 25.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop25Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 26.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop26Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 27.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop27Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 28.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop28Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 29.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop29Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 30.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop30Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 31.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop31Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 32.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop32Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 33.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop33Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 34.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop34Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 35.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop35Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 36.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop36Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 37.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop37Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 38.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop38Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 39.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop39Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 40.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop40Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 41.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop41Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 42.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop42Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 43.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop43Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 44.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop44Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 45.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop45Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 46.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop46Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 47.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop47Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 48.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop48Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 49.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop49Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 50.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop50Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 51.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop51Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 52.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop52Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 53.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop53Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 54.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop54Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 55.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop55Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 56.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop56Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 57.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop57Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 58.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop58Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 59.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop59Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 60.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop60Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 61.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop61Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 62.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop62Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 63.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop63Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 64.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop64Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 65.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop65Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 66.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop66Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 67.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop67Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 68.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop68Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 69.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop69Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 70.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop70Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 71.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop71Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 72.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop72Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 73.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop73Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 74.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop74Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 75.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop75Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 76.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop76Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 77.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop77Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 78.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop78Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 79.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop79Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 80.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop80Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 81.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop81Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 82.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop82Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 83.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop83Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 84.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop84Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 85.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop85Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 86.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop86Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 87.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop87Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 88.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop88Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 89.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop89Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   

  // Resistance of Special Ignitor Loop 90.   Since there are many different vehicle types (e.g. truck, bus, firetruck or ambulance), the ignitor loop configuration has a wide variation.
  uint16_t SpecialIgnitorLoop90Resistance;    //      Bits=16.  [ 0     , 6425.5 ]  Unit:'ohm'   Factor= 0.1   
  uint32_t framecnt;
} ILI_t;

// def @TML CAN Message (486361086)
#define TML_IDE (1U)
#define TML_DLC (8U)
#define TML_CANID (0x1CFD47FEU)
// -- Transmission Mode Labels  ASCII text string describing a manufacturer-specific Transmission Mode.  This PGN may contain up to 8 instances of the Transmission Mode Label field (for Transmission Mode 1 through Transmission Mode 8) with each separated ...
typedef struct
{

  // Conveys ASCII ?labels? for each of the manufacturer-specified TC1 Transmission Mode ?x? / ETC7 Transmission Mode Indicator ?x? pairs.  Intended for use with on-board or service tool displays.  NOTE - Non-printable or non-graphic ASCII characters are ...
  uint8_t TransModeLabel;                //      Bits=08.  [ 0     , 255    ]  Unit:''     

  // Conveys ASCII ?labels? for each of the manufacturer-specified TC1 Transmission Mode ?x? / ETC7 Transmission Mode ...
  uint8_t TransModeLabel2;               //      Bits=08.  [ 0     , 255    ]  Unit:'per byte'

  // Conveys ASCII ?labels? for each of the manufacturer-specified TC1 Transmission Mode ?x? / ETC7 Transmission Mode ...
  uint8_t TransModeLabel3;               //      Bits=08.  [ 0     , 255    ]  Unit:'per byte'

  // Conveys ASCII ?labels? for each of the manufacturer-specified TC1 Transmission Mode ?x? / ETC7 Transmission Mode ...
  uint8_t TransModeLabel4;               //      Bits=08.  [ 0     , 255    ]  Unit:'per byte'

  // Conveys ASCII ?labels? for each of the manufacturer-specified TC1 Transmission Mode ?x? / ETC7 Transmission Mode ...
  uint8_t TransModeLabel5;               //      Bits=08.  [ 0     , 255    ]  Unit:'per byte'

  // Conveys ASCII ?labels? for each of the manufacturer-specified TC1 Transmission Mode ?x? / ETC7 Transmission Mode ...
  uint8_t TransModeLabel6;               //      Bits=08.  [ 0     , 255    ]  Unit:'per byte'

  // Conveys ASCII ?labels? for each of the manufacturer-specified TC1 Transmission Mode ?x? / ETC7 Transmission Mode ...
  uint8_t TransModeLabel7;               //      Bits=08.  [ 0     , 255    ]  Unit:'per byte'

  // Conveys ASCII ?labels? for each of the manufacturer-specified TC1 Transmission Mode ?x? / ETC7 Transmission Mode ...
  uint8_t TransModeLabel8;               //      Bits=08.  [ 0     , 255    ]  Unit:'per byte'
  uint32_t framecnt;
} TML_t;

// def @AGCW CAN Message (486369790)
#define AGCW_IDE (1U)
#define AGCW_DLC (8U)
#define AGCW_CANID (0x1CFD69FEU)
// -- Axle Group Calibration Weights  Indicates axle group calibration weights
// signal: @AxleGroupEmptyWeightCalib
#define AxleGroupEmptyWeightCalib_CovFactor 2
#define AxleGroupEmptyWeightCalib_CovS(x) ((uint16_t)((x / 2)))
// signal: @AxleGroupFullWeightCalib
#define AxleGroupFullWeightCalib_CovFactor 2
#define AxleGroupFullWeightCalib_CovS(x) ((uint16_t)((x / 2)))
typedef struct
{

  // Specific axle group used in conjunction with and when communicating the axle group calibration, listed from the front of the vehicle to the rear.  If the value of SPN 5936 is 15, then this SPN is used to indicate the axle group referred to by this ...
  // 15 - "Reserved" 
  // 14 - "Additional trailer axle group" 
  // 13 - "Trailer H axle group" 
  // 12 - "Trailer G axle group" 
  // 11 - "Trailer F axle group" 
  // 10 - "Trailer E axle group" 
  // 9 - "Trailer D axle group" 
  // 8 - "Trailer C axle group" 
  // 7 - "Trailer B axle group" 
  // 6 - "Trailer A axle group" 
  // 5 - "Additional tractor axle group" 
  // 4 - "Tag axle group" 
  // 3 - "Sole or Forward-most Drive axle group" 
  // 2 - "Lift axle group" 
  // 1 - "Sole or Forward-most Steer axle group" 
  // 0 - "Reserved" 

  uint8_t AxleGroupLocation;             //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Location of the axle group, listed from front of the vehicle to rear.  If the value of SPN 4074 is 15, then this SPN is used to indicate the axle group referred to by this PGN. Otherwise, this SPN should be broadcast as 15.  0 = Reserved  1 = Rear ...
  // 2 - "Rear Drive axle group" 
  // 1 - "Rear Steer axle group" 
  // 0 - "Reserved" 

  uint8_t AdditionalAxleGroupLocation;   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // The empty weight calibration measurement of an axle group
  uint16_t AxleGroupEmptyWeightCalib;    //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     

  // The full weight calibration measurement of an axle group
  uint16_t AxleGroupFullWeightCalib;     //      Bits=16.  [ 0     , 128510 ]  Unit:'kg'    Factor= 2     
  uint32_t framecnt;
} AGCW_t;

// def @J2012 CAN Message (486378238)
#define J2012_IDE (1U)
#define J2012_DLC (8U)
#define J2012_CANID (0x1CFD8AFEU)
// -- SAE J2012 DTC Display  Conveys basic SAE J2012 DTC information for on-board or service tool displays.  If PGN 64906 is requested and a supporting device has no active or inactive J2012 DTCs, PGN 64906 shall be sent with the first data byte ( Number ...
typedef struct
{

  // The number J2012 DTCs being conveyed in PGN 64906.  If the value of this parameter is zero, the device broadcasting PGN 64906 has no active or previously active J2012 DTCs.
  uint8_t NumberOfJ2012DTCs;             //      Bits=08.  [ 0     , 250    ]  Unit:''     

  // Five character ASCII SAE J2012 DTC, sent most significant byte first.
  int64_t J2012DTC;                      //      Bits=40.  [ 0     , 255    ]  Unit:''     

  // Indicates if the respective SAE J2012 DTC is active or previously active.    0 - DTC is previously active  1 - DTC is active
  // 1 - "DTC is active" 
  // 0 - "DTC is previously active" 

  uint8_t J2012DTCStatus;                //      Bits=01.  [ 0     , 1      ]  Unit:''     

  // Number of occurrences of the respective SAE J2012 DTC being conveyed.  If more than 126 occurrences happen the value shall be set to 126.  If the occurrence count is not available to be sent then this value shall be set to 127.
  uint8_t J2012DTCOccurrenceCount;       //      Bits=07.  [ 0     , 126    ]  Unit:''     
  uint32_t framecnt;
} J2012_t;

// def @VROM CAN Message (486385662)
#define VROM_IDE (1U)
#define VROM_DLC (8U)
#define VROM_CANID (0x1CFDA7FEU)
#define VROM_CYC (1000U)
// -- Voltage Regulator Operating Mode  Contains operating modes for the following voltage regulator functions:  Unit Mode, Soft Start Mode, Under Frequency Mode, Operating Mode, Load Compensation Mode.
typedef struct
{

  // State signal indicating the voltage regulator load compensation mode.  Load compensation is when the voltage is adjusted based on the magnitude of load current  000 - load compensation disabled  001 - Voltage droop compensation enabled  010 - IR ...
  // 7 - "Not available" 
  // 6 - "Reserved" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Reserved" 
  // 2 - "IR line drop compensation enabled" 
  // 1 - "Voltage droop compensation enabled" 
  // 0 - "load compensation disabled" 

  uint8_t VltgRglatorLoadCompensationMode;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // State signal indicating the operating mode for the Voltage regulator VAr/Power Factor  000 - VAr/Power Factor regulation disabled  001 - Power factor regulation enabled  010 - VAr regulation enabled  011 - Reserved  100 - Reserved  101 - Reserved   ...
  // 7 - "Not available" 
  // 6 - "Reserved" 
  // 5 - "Reserved" 
  // 4 - "Reserved" 
  // 3 - "Reserved" 
  // 2 - "VAr regulation enabled" 
  // 1 - "Power factor regulation enabled" 
  // 0 - "VAr/Power Factor regulation disabled" 

  uint8_t VltgRgltrVAr_PwrFctrOprtingMode;   //      Bits=03.  [ 0     , 7      ]  Unit:''     

  // State signal indicating the operating mode for underfrequency compensation.  00 - Underfrequency compensation disabled  01 - Underfrequency compensation enabled  10 - Reserved  11 - Not available  Note:  Underfrequency compensation is when the ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Underfrequency compensation enabled" 
  // 0 - "Underfrequency compensation disabled" 

  uint8_t VltgRgltrUndrfrqncyCmpnstnEnbld;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal indicating the mode of the Voltage regulator soft start function.  Soft start controls the generator voltage overshoot by controlling the rate of rise of the generator output voltage at generator start up.  00 - Soft start is inactive   ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Soft start is active" 
  // 0 - "Soft start is inactive" 

  uint8_t VoltageRegulatorSoftStartState;    //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // State signal indicating the Voltage Regulator is enabled.  This parameter indicates whether the regulator is regulating or not regulating generator output voltage.  00 - Not regulating voltage - unit disabled  01 - Regulating voltage  10 - Reserved   ...
  // 3 - "Not available" 
  // 2 - "Reserved" 
  // 1 - "Regulating voltage" 
  // 0 - "Not regulating voltage" 

  uint8_t VoltageRegulatorEnabled;           //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} VROM_t;

// def @CMI CAN Message (486394366)
#define CMI_IDE (1U)
#define CMI_DLC (8U)
#define CMI_CANID (0x1CFDC9FEU)
// -- Electronic Control Module Information  Information relating to electronic control modules
typedef struct
{

  // Total number of times changes have been made to any of the configurable parameters.
  uint16_t TotalCountOfConfigChangesMade;  //      Bits=16.  [ 0     , 64255  ]  Unit:''     
  uint32_t framecnt;
} CMI_t;

// def @FMS CAN Message (486396414)
#define FMS_IDE (1U)
#define FMS_DLC (8U)
#define FMS_CANID (0x1CFDD1FEU)
#define FMS_CYC (10000U)
// -- FMS-standard Interface Identity/Capabilities  Information which specifies the capabilities of the Fleet Management System (FMS) - standard interface device. This PGN typically is sourced from the network interconnect FMS - standard interface device.
typedef struct
{

  // Status signal which indicates if the FMS Vehicle Interface (FMS Gateway) supports the handling of diagnostic messages from the vehicle network onto the FMS network.  The FMS gateway does NOT support the re-broadcast of diagnostics messages present ...
  // 1 - "Diagnostics Is Supported" 
  // 0 - "Diagnostics Is Not Supported" 
  // 3 - "Don't care" 
  // 2 - "Reserved" 

  uint8_t FMSstandardDiagnosticsSupported;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status signal which indicates if the FMS Vehicle Interface (FMS Gateway) will respond to requests from the FMS device for the PGNs listed in the FMS Interface Specification.  This mode is to support FMS  gateway devices that only operate in a ...
  // 3 - "Don't care" 
  // 2 - "Reserved" 
  // 1 - "On request mode is supported" 
  // 0 - "On request mode is not supported" 

  uint8_t FMSstandardRequestsSupported;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Information that identifies which issue level of the FMS-standard document the software included in the FMS gateway supports. Four bytes, representing xx.yy type revision level identification.  Information to be ASCII equivalent of the numeric ...
  uint32_t FMSstandardSWversionSupported;    //      Bits=32.  [ 0     , 255    ]  Unit:''     
  uint32_t framecnt;
} FMS_t;

// def @FWD CAN Message (486399998)
#define FWD_IDE (1U)
#define FWD_DLC (8U)
#define FWD_CANID (0x1CFDDFFEU)
#define FWD_CYC (5000U)
// -- Front Wheel Drive Status  Front wheel drive ECU information
typedef struct
{

  // Feedback on the front wheel drive actuator.    00 Front Wheel Drive Actuator not engaged  01 Front Wheel Drive Actuator engaged  10 Error  11 Not Available
  // 3 - "Not Available" 
  // 2 - "Error" 
  // 1 - "Front Wheel Drive Actuator engaged" 
  // 0 - "Front Wheel Drive Actuator not engaged" 

  uint8_t FrontWheelDriveActuatorStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} FWD_t;

// def @TAVG CAN Message (486428158)
#define TAVG_IDE (1U)
#define TAVG_DLC (8U)
#define TAVG_CANID (0x1CFE4DFEU)
// -- Total Averaged Information  Averages of information accumulated over the life of the engine
// signal: @EngTotalAverageFuelRate
#define EngTotalAverageFuelRate_CovFactor 0.05
#define EngTotalAverageFuelRate_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @EngTotalAverageFuelEconomy
#define EngTotalAverageFuelEconomy_CovFactor 0.001953125
#define EngTotalAverageFuelEconomy_CovS(x) ((uint16_t)((x / 0.001953125)))
typedef struct
{

  // Average fuel rate, equal to total fuel used divided by total engine hours, over the life of the engine
  uint16_t EngTotalAverageFuelRate;      //      Bits=16.  [ 0     , 3212.75 ]  Unit:'L/h'   Factor= 0.05  

  // Average fuel economy, equal to total vehicle distance divided by total fuel used, over the life of the engine
  uint16_t EngTotalAverageFuelEconomy;   //      Bits=16.  [ 0     , 125.498046875 ]  Unit:'km/L'  Factor= 0.001953125
  uint32_t framecnt;
} TAVG_t;

// def @AP CAN Message (486438910)
#define AP_IDE (1U)
#define AP_DLC (8U)
#define AP_CANID (0x1CFE77FEU)
// -- Auxiliary Pressures
// signal: @AuxVacuumPressReading
#define AuxVacuumPressReading_CovFactor 0.5
#define AuxVacuumPressReading_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @AuxGagePressReading1
#define AuxGagePressReading1_CovFactor 0.5
#define AuxGagePressReading1_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @AuxAbsPressReading
#define AuxAbsPressReading_CovFactor 0.5
#define AuxAbsPressReading_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // Identifies the current vacuum pressure (relative to atmosphere) that is configured uniquely per application.  Not to be used in place of defined parameters.
  uint16_t AuxVacuumPressReading;        //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // Identifies the current gage pressure (relative to atmosphere) that is configured uniquely per application.  Not to be used in place of defined parameters.
  uint16_t AuxGagePressReading1;         //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // Identifies the current absolute pressure (relative to 0 pressure) that is configured uniquely per application.  Not to be used in place of defined parameters.
  uint16_t AuxAbsPressReading;           //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   
  uint32_t framecnt;
} AP_t;

// def @TP1 CAN Message (486439166)
#define TP1_IDE (1U)
#define TP1_DLC (8U)
#define TP1_CANID (0x1CFE78FEU)
// -- Tire Pressure Control Unit Mode and Status
typedef struct
{

  // The interval at which the system will check the tire pressures (e.g., 5, 10, 15 min.).    NOTE - A value of 0 indicates continuous (real time) pressure readings.
  uint8_t TirePressCheckInterval;             //      Bits=08.  [ 0     , 250    ]  Unit:'min'  

  // Indicates the functional mode of steer channel of the tire pressure control system.  0000 Maintain  0001 Inflate  0010 Deflate  0011 Confirm  0100 Inflate Wait - System will inflate when conditions allow  0101 Deflate Wait - System will deflate when ...
  // 1 - "Inflate" 
  // 0 - "Maintain" 
  // 15 - "Not available" 
  // 14 - "Error Condition" 
  // 6 - "Pressure Check" 
  // 5 - "Deflate Wait" 
  // 4 - "Inflate Wait" 
  // 3 - "Confirm" 
  // 2 - "Deflate" 

  uint8_t SteerChannelMode;                   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Indicates the functional mode of trailer/tag channel of the tire pressure control system.  0000 Maintain  0001 Inflate  0010 Deflate  0011 Confirm  0100 Inflate Wait - System will inflate when conditions allow  0101 Deflate Wait - System will ...
  // 15 - "Not available" 
  // 14 - "Error Condition" 
  // 6 - "Pressure Check" 
  // 5 - "Deflate Wait" 
  // 4 - "Inflate Wait" 
  // 3 - "Confirm" 
  // 2 - "Deflate" 
  // 1 - "Inflate" 
  // 0 - "Maintain" 

  uint8_t Trailer_tagChannelMode;             //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Indicates the functional mode of trailer/tag channel of the tire pressure control system.  0000 Maintain  0001 Inflate  0010 Deflate  0011 Confirm  0100 Inflate Wait - System will inflate when conditions allow  0101 Deflate Wait - System will ...
  // 15 - "Not available" 
  // 14 - "Error Condition" 
  // 6 - "Pressure Check" 
  // 5 - "Deflate Wait" 
  // 4 - "Inflate Wait" 
  // 3 - "Confirm" 
  // 2 - "Deflate" 
  // 1 - "Inflate" 
  // 0 - "Maintain" 

  uint8_t DriveChannelMode;                   //      Bits=04.  [ 0     , 15     ]  Unit:''     

  // Current state of the drive solenoid used to implement a tire pressure control system in its pneumatic control unit (PCU).    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t PCUDriveSolenoidStatus;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Current state of the steer solenoid used to implement a tire pressure control system in its pneumatic control unit (PCU).    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t PCUSteerSolenoidStatus;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Current state of an open/closed type switch used to determine if adequate pressure exists for system implementation.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TirePressSupplySwitchStatus;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Current state of the deflate solenoid used to implement a tire pressure control system in its pneumatic control unit (PCU).    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t PCUDeflateSolenoidStatus;           //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Current state of the control solenoid used to implement a tire pressure control system in its pneumatic control unit (PCU).    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t PCUCtrlSolenoidStatus;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Current state of the supply solenoid used to implement a tire pressure control system in its pneumatic control unit (PCU).    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t PCUSupplySolenoidStatus;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Current state of the trailer, tag, or push solenoid used to implement a tire pressure control system in its pneumatic control unit (PCU).    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t PCUTrilerTagOrPushSolenoidStatus;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} TP1_t;

// def @TP2 CAN Message (486439422)
#define TP2_IDE (1U)
#define TP2_DLC (8U)
#define TP2_CANID (0x1CFE79FEU)
// -- Tire Pressure Control Unit Target Pressures
// signal: @TrlrTgOrPshChnnelTirePressTarget
#define TrlrTgOrPshChnnelTirePressTarget_CovFactor 0.5
#define TrlrTgOrPshChnnelTirePressTarget_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @DriveChannelTirePressTarget
#define DriveChannelTirePressTarget_CovFactor 0.5
#define DriveChannelTirePressTarget_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @SteerChannelTirePressTarget
#define SteerChannelTirePressTarget_CovFactor 0.5
#define SteerChannelTirePressTarget_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // The tire pressure control system?s target gage pressure for the trailer, tag, or push group of tires.
  uint16_t TrlrTgOrPshChnnelTirePressTarget;  //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // The tire pressure control system?s target gage pressure for the drive group of tires.
  uint16_t DriveChannelTirePressTarget;       //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // The tire pressure control system?s target gage pressure for the steer group of tires.
  uint16_t SteerChannelTirePressTarget;       //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   
  uint32_t framecnt;
} TP2_t;

// def @TP3 CAN Message (486439678)
#define TP3_IDE (1U)
#define TP3_DLC (8U)
#define TP3_CANID (0x1CFE7AFEU)
// -- Tire Pressure Control Unit Current Pressures
// signal: @TrailerTagOrPushChannelTirePress
#define TrailerTagOrPushChannelTirePress_CovFactor 0.5
#define TrailerTagOrPushChannelTirePress_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @DriveChannelTirePress
#define DriveChannelTirePress_CovFactor 0.5
#define DriveChannelTirePress_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @SteerChannelTirePress
#define SteerChannelTirePress_CovFactor 0.5
#define SteerChannelTirePress_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // The latest gage pressure reading of the trailer, tag, or push group of tires, as opposed to the pressure in each tire.
  uint16_t TrailerTagOrPushChannelTirePress;  //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // The latest gage pressure reading of the drive group of tires, as opposed to the pressure in each tire.
  uint16_t DriveChannelTirePress;             //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   

  // The latest gage pressure reading of the steer group of tires, as opposed to the pressure in each tire.
  uint16_t SteerChannelTirePress;             //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kPa'   Factor= 0.5   
  uint32_t framecnt;
} TP3_t;

// def @CT1 CAN Message (486439934)
#define CT1_IDE (1U)
#define CT1_DLC (8U)
#define CT1_CANID (0x1CFE7BFEU)
// -- Combustion Time 1
// signal: @EngCyl1CombustionTime
#define EngCyl1CombustionTime_CovFactor 0.01
#define EngCyl1CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngCyl2CombustionTime
#define EngCyl2CombustionTime_CovFactor 0.01
#define EngCyl2CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngCyl3CombustionTime
#define EngCyl3CombustionTime_CovFactor 0.01
#define EngCyl3CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngCyl4CombustionTime
#define EngCyl4CombustionTime_CovFactor 0.01
#define EngCyl4CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
typedef struct
{

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl1CombustionTime;        //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl2CombustionTime;        //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl3CombustionTime;        //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl4CombustionTime;        //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  
  uint32_t framecnt;
} CT1_t;

// def @CT2 CAN Message (486440190)
#define CT2_IDE (1U)
#define CT2_DLC (8U)
#define CT2_CANID (0x1CFE7CFEU)
// -- Combustion Time 2
// signal: @EngCyl5CombustionTime
#define EngCyl5CombustionTime_CovFactor 0.01
#define EngCyl5CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngCyl6CombustionTime
#define EngCyl6CombustionTime_CovFactor 0.01
#define EngCyl6CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngCyl7CombustionTime
#define EngCyl7CombustionTime_CovFactor 0.01
#define EngCyl7CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngCyl8CombustionTime
#define EngCyl8CombustionTime_CovFactor 0.01
#define EngCyl8CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
typedef struct
{

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl5CombustionTime;        //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl6CombustionTime;        //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl7CombustionTime;        //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl8CombustionTime;        //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  
  uint32_t framecnt;
} CT2_t;

// def @CT3 CAN Message (486440446)
#define CT3_IDE (1U)
#define CT3_DLC (8U)
#define CT3_CANID (0x1CFE7DFEU)
// -- Combustion Time 3
// signal: @EngCyl9CombustionTime
#define EngCyl9CombustionTime_CovFactor 0.01
#define EngCyl9CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngCyl10CombustionTime
#define EngCyl10CombustionTime_CovFactor 0.01
#define EngCyl10CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngCyl11CombustionTime
#define EngCyl11CombustionTime_CovFactor 0.01
#define EngCyl11CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngCyl12CombustionTime
#define EngCyl12CombustionTime_CovFactor 0.01
#define EngCyl12CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
typedef struct
{

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl9CombustionTime;        //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl10CombustionTime;       //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl11CombustionTime;       //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl12CombustionTime;       //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  
  uint32_t framecnt;
} CT3_t;

// def @CT4 CAN Message (486440702)
#define CT4_IDE (1U)
#define CT4_DLC (8U)
#define CT4_CANID (0x1CFE7EFEU)
// -- Combustion Time 4
// signal: @EngCyl13CombustionTime
#define EngCyl13CombustionTime_CovFactor 0.01
#define EngCyl13CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngCyl14CombustionTime
#define EngCyl14CombustionTime_CovFactor 0.01
#define EngCyl14CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngCyl15CombustionTime
#define EngCyl15CombustionTime_CovFactor 0.01
#define EngCyl15CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngCyl16CombustionTime
#define EngCyl16CombustionTime_CovFactor 0.01
#define EngCyl16CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
typedef struct
{

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl13CombustionTime;       //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl14CombustionTime;       //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl15CombustionTime;       //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl16CombustionTime;       //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  
  uint32_t framecnt;
} CT4_t;

// def @CT5 CAN Message (486440958)
#define CT5_IDE (1U)
#define CT5_DLC (8U)
#define CT5_CANID (0x1CFE7FFEU)
// -- Combustion Time 5
// signal: @EngCyl17CombustionTime
#define EngCyl17CombustionTime_CovFactor 0.01
#define EngCyl17CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngCyl18CombustionTime
#define EngCyl18CombustionTime_CovFactor 0.01
#define EngCyl18CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngCyl19CombustionTime
#define EngCyl19CombustionTime_CovFactor 0.01
#define EngCyl19CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngCyl20CombustionTime
#define EngCyl20CombustionTime_CovFactor 0.01
#define EngCyl20CombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
typedef struct
{

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl17CombustionTime;       //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl18CombustionTime;       //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl19CombustionTime;       //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.e., the flame front has propagated across the cylinder).
  uint16_t EngCyl20CombustionTime;       //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  
  uint32_t framecnt;
} CT5_t;

// def @CT6 CAN Message (486441214)
#define CT6_IDE (1U)
#define CT6_DLC (8U)
#define CT6_CANID (0x1CFE80FEU)
// -- Combustion Time 6
// signal: @EngDesiredCombustionTime
#define EngDesiredCombustionTime_CovFactor 0.01
#define EngDesiredCombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
// signal: @EngAverageCombustionTime
#define EngAverageCombustionTime_CovFactor 0.01
#define EngAverageCombustionTime_CovS(x) ((uint16_t)((x / 0.01)))
typedef struct
{

  // The desired combustion time based upon engine load and speed lookup maps.
  uint16_t EngDesiredCombustionTime;     //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  

  // The average combustion time of all cylinders of an engine.
  uint16_t EngAverageCombustionTime;     //      Bits=16.  [ 0     , 642.55 ]  Unit:'ms'    Factor= 0.01  
  uint32_t framecnt;
} CT6_t;

// def @GFI2 CAN Message (486441470)
#define GFI2_IDE (1U)
#define GFI2_DLC (8U)
#define GFI2_CANID (0x1CFE81FEU)
// -- Fuel Information 2 (Gaseous)  Gaseous fuel information 2
// signal: @EngFuelFlowRate1
#define EngFuelFlowRate1_CovFactor 0.1
#define EngFuelFlowRate1_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngFuelFlowRate2
#define EngFuelFlowRate2_CovFactor 0.1
#define EngFuelFlowRate2_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngFuelValve1Pos
#define EngFuelValve1Pos_CovFactor 0.4
#define EngFuelValve1Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngFuelValve2Pos
#define EngFuelValve2Pos_CovFactor 0.4
#define EngFuelValve2Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngRequestedFuelValve1Pos
#define EngRequestedFuelValve1Pos_CovFactor 0.4
#define EngRequestedFuelValve1Pos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngRequestedFuelValve2Pos
#define EngRequestedFuelValve2Pos_CovFactor 0.4
#define EngRequestedFuelValve2Pos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // The rate at which the fuel is flowing through a fuel valve.
  uint16_t EngFuelFlowRate1;             //      Bits=16.  [ 0     , 6425.5 ]  Unit:'m?/h'  Factor= 0.1   

  // The rate at which the fuel is flowing through a fuel valve.
  uint16_t EngFuelFlowRate2;             //      Bits=16.  [ 0     , 6425.5 ]  Unit:'m?/h'  Factor= 0.1   

  // The position of a gaseous fuel valve that is metering the fuel flow to the engine.  0% indicates no fuel flow through valve and 100% means maximum fuel flow through valve.
  uint8_t EngFuelValve1Pos;              //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The position of a gaseous fuel valve that is metering the fuel flow to the engine.  0% indicates no fuel flow through valve and 100% means maximum fuel flow through valve.
  uint8_t EngFuelValve2Pos;              //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The commanded position of the first fuel valve that is metering the fuel flow to the engine.
  uint8_t EngRequestedFuelValve1Pos;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The commanded position of the second fuel valve that is metering the fuel flow to the engine.
  uint8_t EngRequestedFuelValve2Pos;     //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} GFI2_t;

// def @IT1 CAN Message (486441726)
#define IT1_IDE (1U)
#define IT1_DLC (8U)
#define IT1_CANID (0x1CFE82FEU)
// -- Ignition Timing 1
// signal: @EngCyl1IgntTiming
#define EngCyl1IgntTiming_CovFactor 0.0078125
#define EngCyl1IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngCyl2IgntTiming
#define EngCyl2IgntTiming_CovFactor 0.0078125
#define EngCyl2IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngCyl3IgntTiming
#define EngCyl3IgntTiming_CovFactor 0.0078125
#define EngCyl3IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngCyl4IgntTiming
#define EngCyl4IgntTiming_CovFactor 0.0078125
#define EngCyl4IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
typedef struct
{

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl1IgntTiming;             //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl2IgntTiming;             //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl3IgntTiming;             //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl4IgntTiming;             //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125
  uint32_t framecnt;
} IT1_t;

// def @IT2 CAN Message (486441982)
#define IT2_IDE (1U)
#define IT2_DLC (8U)
#define IT2_CANID (0x1CFE83FEU)
// -- Ignition Timing 2
// signal: @EngCyl5IgntTiming
#define EngCyl5IgntTiming_CovFactor 0.0078125
#define EngCyl5IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngCyl6IgntTiming
#define EngCyl6IgntTiming_CovFactor 0.0078125
#define EngCyl6IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngCyl7IgntTiming
#define EngCyl7IgntTiming_CovFactor 0.0078125
#define EngCyl7IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngCyl8IgntTiming
#define EngCyl8IgntTiming_CovFactor 0.0078125
#define EngCyl8IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
typedef struct
{

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl5IgntTiming;             //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl6IgntTiming;             //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl7IgntTiming;             //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl8IgntTiming;             //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125
  uint32_t framecnt;
} IT2_t;

// def @IT3 CAN Message (486442238)
#define IT3_IDE (1U)
#define IT3_DLC (8U)
#define IT3_CANID (0x1CFE84FEU)
// -- Ignition Timing 3
// signal: @EngCyl9IgntTiming
#define EngCyl9IgntTiming_CovFactor 0.0078125
#define EngCyl9IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngCyl10IgntTiming
#define EngCyl10IgntTiming_CovFactor 0.0078125
#define EngCyl10IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngCyl11IgntTiming
#define EngCyl11IgntTiming_CovFactor 0.0078125
#define EngCyl11IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngCyl12IgntTiming
#define EngCyl12IgntTiming_CovFactor 0.0078125
#define EngCyl12IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
typedef struct
{

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl9IgntTiming;             //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl10IgntTiming;            //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl11IgntTiming;            //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl12IgntTiming;            //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125
  uint32_t framecnt;
} IT3_t;

// def @IT4 CAN Message (486442494)
#define IT4_IDE (1U)
#define IT4_DLC (8U)
#define IT4_CANID (0x1CFE85FEU)
// -- Ignition Timing 4
// signal: @EngCyl13IgntTiming
#define EngCyl13IgntTiming_CovFactor 0.0078125
#define EngCyl13IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngCyl14IgntTiming
#define EngCyl14IgntTiming_CovFactor 0.0078125
#define EngCyl14IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngCyl15IgntTiming
#define EngCyl15IgntTiming_CovFactor 0.0078125
#define EngCyl15IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngCyl16IgntTiming
#define EngCyl16IgntTiming_CovFactor 0.0078125
#define EngCyl16IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
typedef struct
{

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl13IgntTiming;            //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl14IgntTiming;            //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl15IgntTiming;            //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl16IgntTiming;            //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125
  uint32_t framecnt;
} IT4_t;

// def @IT5 CAN Message (486442750)
#define IT5_IDE (1U)
#define IT5_DLC (8U)
#define IT5_CANID (0x1CFE86FEU)
// -- Ignition Timing 5
// signal: @EngCyl17IgntTiming
#define EngCyl17IgntTiming_CovFactor 0.0078125
#define EngCyl17IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngCyl18IgntTiming
#define EngCyl18IgntTiming_CovFactor 0.0078125
#define EngCyl18IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngCyl19IgntTiming
#define EngCyl19IgntTiming_CovFactor 0.0078125
#define EngCyl19IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngCyl20IgntTiming
#define EngCyl20IgntTiming_CovFactor 0.0078125
#define EngCyl20IgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
typedef struct
{

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl17IgntTiming;            //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl18IgntTiming;            //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl19IgntTiming;            //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The ignition timing (SI engines) or main fuel injection timing (CI engines) of the cylinder. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngCyl20IgntTiming;            //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125
  uint32_t framecnt;
} IT5_t;

// def @IT6 CAN Message (486443006)
#define IT6_IDE (1U)
#define IT6_DLC (8U)
#define IT6_CANID (0x1CFE87FEU)
// -- Ignition Timing 6
// signal: @EngDesiredIgntTiming1
#define EngDesiredIgntTiming1_CovFactor 0.0078125
#define EngDesiredIgntTiming1_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngDesiredIgntTiming2
#define EngDesiredIgntTiming2_CovFactor 0.0078125
#define EngDesiredIgntTiming2_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngDesiredIgntTiming3
#define EngDesiredIgntTiming3_CovFactor 0.0078125
#define EngDesiredIgntTiming3_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
// signal: @EngActualIgntTiming
#define EngActualIgntTiming_CovFactor 0.0078125
#define EngActualIgntTiming_CovS(x) ((int32_t)((x / 0.0078125) + 25600))
typedef struct
{

  // A programmable timing value specific to the engine?s application. Factors affecting this value include both fuel type and the nature of the load being driven. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngDesiredIgntTiming1;         //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // A programmable timing value specific to the engine?s application. Factors affecting this value include both fuel type and the nature of the load being driven. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngDesiredIgntTiming2;         //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // A programmable timing value specific to the engine?s application. Factors affecting this value include both fuel type and the nature of the load being driven. Positive values indicate an increasingly advanced timing from TDC.
  int32_t EngDesiredIgntTiming3;         //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125

  // The actual ignition timing at the current engine conditions. This parameter may or may not be equal to one of the desired timing parameters (see SPNs 1433-1435), depending on the status of the engine. Positive values indicate an increasingly ...
  int32_t EngActualIgntTiming;           //      Bits=16.  [ -200  , 301.99 ]  Unit:'deg'   Offset= -200      Factor= 0.0078125
  uint32_t framecnt;
} IT6_t;

// def @ISO1 CAN Message (486443262)
#define ISO1_IDE (1U)
#define ISO1_DLC (8U)
#define ISO1_CANID (0x1CFE88FEU)
// -- Ignition Transformer Secondary Output 1
// signal: @EngCyl1IgntTransSecondOutput
#define EngCyl1IgntTransSecondOutput_CovFactor 1
#define EngCyl1IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl2IgntTransSecondOutput
#define EngCyl2IgntTransSecondOutput_CovFactor 1
#define EngCyl2IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl3IgntTransSecondOutput
#define EngCyl3IgntTransSecondOutput_CovFactor 1
#define EngCyl3IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl4IgntTransSecondOutput
#define EngCyl4IgntTransSecondOutput_CovFactor 1
#define EngCyl4IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl5IgntTransSecondOutput
#define EngCyl5IgntTransSecondOutput_CovFactor 1
#define EngCyl5IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl6IgntTransSecondOutput
#define EngCyl6IgntTransSecondOutput_CovFactor 1
#define EngCyl6IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl7IgntTransSecondOutput
#define EngCyl7IgntTransSecondOutput_CovFactor 1
#define EngCyl7IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl8IgntTransSecondOutput
#define EngCyl8IgntTransSecondOutput_CovFactor 1
#define EngCyl8IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl1IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl2IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl3IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl4IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl5IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl6IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl7IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl8IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     
  uint32_t framecnt;
} ISO1_t;

// def @ISO2 CAN Message (486443518)
#define ISO2_IDE (1U)
#define ISO2_DLC (8U)
#define ISO2_CANID (0x1CFE89FEU)
// -- Ignition Transformer Secondary Output 2
// signal: @EngCyl9IgntTransSecondOutput
#define EngCyl9IgntTransSecondOutput_CovFactor 1
#define EngCyl9IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl10IgntTransSecondOutput
#define EngCyl10IgntTransSecondOutput_CovFactor 1
#define EngCyl10IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl11IgntTransSecondOutput
#define EngCyl11IgntTransSecondOutput_CovFactor 1
#define EngCyl11IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl12IgntTransSecondOutput
#define EngCyl12IgntTransSecondOutput_CovFactor 1
#define EngCyl12IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl13IgntTransSecondOutput
#define EngCyl13IgntTransSecondOutput_CovFactor 1
#define EngCyl13IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl14IgntTransSecondOutput
#define EngCyl14IgntTransSecondOutput_CovFactor 1
#define EngCyl14IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl15IgntTransSecondOutput
#define EngCyl15IgntTransSecondOutput_CovFactor 1
#define EngCyl15IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl16IgntTransSecondOutput
#define EngCyl16IgntTransSecondOutput_CovFactor 1
#define EngCyl16IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl9IgntTransSecondOutput;    //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl10IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl11IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl12IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl13IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl14IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl15IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl16IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     
  uint32_t framecnt;
} ISO2_t;

// def @ISO3 CAN Message (486443774)
#define ISO3_IDE (1U)
#define ISO3_DLC (8U)
#define ISO3_CANID (0x1CFE8AFEU)
// -- Ignition Transformer Secondary Output 3
// signal: @EngCyl17IgntTransSecondOutput
#define EngCyl17IgntTransSecondOutput_CovFactor 1
#define EngCyl17IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl18IgntTransSecondOutput
#define EngCyl18IgntTransSecondOutput_CovFactor 1
#define EngCyl18IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl19IgntTransSecondOutput
#define EngCyl19IgntTransSecondOutput_CovFactor 1
#define EngCyl19IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
// signal: @EngCyl20IgntTransSecondOutput
#define EngCyl20IgntTransSecondOutput_CovFactor 1
#define EngCyl20IgntTransSecondOutput_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl17IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl18IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl19IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
  int16_t EngCyl20IgntTransSecondOutput;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     
  uint32_t framecnt;
} ISO3_t;

// def @GFP CAN Message (486444030)
#define GFP_IDE (1U)
#define GFP_DLC (8U)
#define GFP_CANID (0x1CFE8BFEU)
// -- Gaseous Fuel Pressure
// signal: @EngFuelValve1IntakeAbsPress
#define EngFuelValve1IntakeAbsPress_CovFactor 0.1
#define EngFuelValve1IntakeAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngFuelValveDiffPress
#define EngFuelValveDiffPress_CovFactor 0.1
#define EngFuelValveDiffPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngAirToFuelDiffPress
#define EngAirToFuelDiffPress_CovFactor 0.1
#define EngAirToFuelDiffPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngFuelValve1OutletAbsPress
#define EngFuelValve1OutletAbsPress_CovFactor 0.1
#define EngFuelValve1OutletAbsPress_CovS(x) ((uint16_t)((x / 0.1)))
typedef struct
{

  // The absolute pressure of gas on the intake side of the first system control valve.  See SPN 3466 for Engine Fuel Valve 2, 7505 for Engine Fuel Valve 3 & 7506 for Engine Fuel Valve 4.
  uint16_t EngFuelValve1IntakeAbsPress;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The differential pressure between the intake and the outlet of the first or only gaseous fuel valve.
  uint16_t EngFuelValveDiffPress;        //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The differential pressure between the gaseous fuel and the air intake manifold.
  uint16_t EngAirToFuelDiffPress;        //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // Absolute Pressure of gas on outlet side of the first or only fuel system control valve.  See SPN 3469 for the second fuel control valve.
  uint16_t EngFuelValve1OutletAbsPress;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   
  uint32_t framecnt;
} GFP_t;

// def @AAI CAN Message (486444286)
#define AAI_IDE (1U)
#define AAI_DLC (8U)
#define AAI_CANID (0x1CFE8CFEU)
// -- Auxiliary Analog Information  Auxiliary Analog Information
// signal: @AuxTemp1
#define AuxTemp1_CovFactor 1
#define AuxTemp1_CovS(x) ((int16_t)(x + 40))
// signal: @AuxTemp2
#define AuxTemp2_CovFactor 1
#define AuxTemp2_CovS(x) ((int16_t)(x + 40))
// signal: @AuxPress1
#define AuxPress1_CovFactor 16
#define AuxPress1_CovS(x) ((uint8_t)((x / 16)))
// signal: @AuxPress2
#define AuxPress2_CovFactor 16
#define AuxPress2_CovS(x) ((uint8_t)((x / 16)))
// signal: @AuxLevel
#define AuxLevel_CovFactor 0.1
#define AuxLevel_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @RelativeHumidity
#define RelativeHumidity_CovFactor 0.4
#define RelativeHumidity_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // Temperature measured by auxiliary temperature sensor #1.  Not to be used in place of existing SPNs.
  int16_t AuxTemp1;                      //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature measured by auxiliary temperature sensor #2.  Not to be used in place of existing SPNs.
  int16_t AuxTemp2;                      //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Pressure measured by auxiliary pressure sensor #1.  Not to be used in place of existing SPNs.
  uint8_t AuxPress1;                     //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa'   Factor= 16    

  // Pressure measured by auxiliary pressure sensor #2.  Not to be used in place of existing SPNs.
  uint8_t AuxPress2;                     //      Bits=08.  [ 0     , 4000   ]  Unit:'kPa'   Factor= 16    

  // Level measured by a sensor.
  uint16_t AuxLevel;                     //      Bits=16.  [ 0     , 6425.5 ]  Unit:'mm'    Factor= 0.1   

  // Measures humidity of combustion air prior to entry into turbocharger
  uint8_t RelativeHumidity;              //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} AAI_t;

// def @S2 CAN Message (486444798)
#define S2_IDE (1U)
#define S2_DLC (8U)
#define S2_CANID (0x1CFE8EFEU)
// -- Service 2  NOTE - There are two acceptable formats for the Service PGN.  Format 1 has only 8 bytes of data and reports the component most in need of service for each of the three categories.  Format 2, however, uses the transport protocol as ...
// signal: @TimeSinceLastService
#define TimeSinceLastService_CovFactor 1
#define TimeSinceLastService_CovS(x) ((int32_t)(x + 32127))
typedef struct
{

  // Identification of component needing service.  See Table SPN911_A.
  uint8_t ServiceComponentIdentification;   //      Bits=08.  [ 0     , 250    ]  Unit:'ID'   

  // The vehicle operation time since the last service was performed.  The type of service information is identified by the service component identification number.
  int32_t TimeSinceLastService;             //      Bits=16.  [ -32127, 32128  ]  Unit:'h'     Offset= -32127   
  uint32_t framecnt;
} S2_t;

// def @FL CAN Message (486445566)
#define FL_IDE (1U)
#define FL_DLC (8U)
#define FL_CANID (0x1CFE91FEU)
#define FL_CYC (1000U)
// -- Fuel Leakage
typedef struct
{

  // Status signal which indicates fuel leakage in the fuel rail of the engine. Location can be either before or after the fuel pump.      00 - no leakage detected  01 - leakage detected  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "leakage detected" 
  // 0 - "no leakage detected" 

  uint8_t EngFuelLeakage1;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Status signal which indicates fuel leakage in the fuel rail of the engine. Location can be either before or after the fuel pump.      00 - no leakage detected  01 - leakage detected  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "leakage detected" 
  // 0 - "no leakage detected" 

  uint8_t EngFuelLeakage2;               //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} FL_t;

// def @EI1 CAN Message (486445822)
#define EI1_IDE (1U)
#define EI1_DLC (8U)
#define EI1_CANID (0x1CFE92FEU)
#define EI1_CYC (100U)
// -- Engine Information 1
// signal: @EngPrefilterOilPress
#define EngPrefilterOilPress_CovFactor 4
#define EngPrefilterOilPress_CovS(x) ((uint8_t)((x / 4)))
// signal: @EngExhaustGasPress1
#define EngExhaustGasPress1_CovFactor 0.0078125
#define EngExhaustGasPress1_CovS(x) ((int32_t)((x / 0.0078125) + 32000))
// signal: @EngFuelRackPos
#define EngFuelRackPos_CovFactor 0.4
#define EngFuelRackPos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngGasMassFlowRate1
#define EngGasMassFlowRate1_CovFactor 0.05
#define EngGasMassFlowRate1_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @InstantaneousEstBrakePower
#define InstantaneousEstBrakePower_CovFactor 0.5
#define InstantaneousEstBrakePower_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // Gage pressure of the engine oil before the oil reaches the oil filter.   See SPN 7470 for alternate resolution.
  uint8_t EngPrefilterOilPress;          //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Gage pressure of the exhaust gases as measured at the turbine intake of the turbocharger. This SPN to be used for inline engines or exhaust bank 1 of multiple bank engines.  See SPN 5749 for exhaust bank 2 and See SPN 6384 for alternate range and ...
  int32_t EngExhaustGasPress1;           //      Bits=16.  [ -250  , 251.99 ]  Unit:'kPa'   Offset= -250      Factor= 0.0078125

  // Measured position of the engine fuel rack.  A value of 0% rack represents no fueling and a value of 100% rack represents maximum fueling.
  uint8_t EngFuelRackPos;                //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Gas mass flow rate delivered to an engine through its first fuel control system.  See SPN 3467 for the second fuel control system.
  uint16_t EngGasMassFlowRate1;          //      Bits=16.  [ 0     , 3212.75 ]  Unit:'kg/h'  Factor= 0.05  

  // Estimate of the power developed by the engine.
  uint16_t InstantaneousEstBrakePower;   //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kW'    Factor= 0.5   
  uint32_t framecnt;
} EI1_t;

// def @EES CAN Message (486446078)
#define EES_IDE (1U)
#define EES_DLC (8U)
#define EES_CANID (0x1CFE93FEU)
#define EES_CYC (100U)
// -- Engine Electrical System/Module Information
// signal: @ElectricalLoad
#define ElectricalLoad_CovFactor 0.5
#define ElectricalLoad_CovS(x) ((uint16_t)((x / 0.5)))
typedef struct
{

  // Electrical power delivered by the engine to the electrical system connected to the generator.
  uint16_t ElectricalLoad;               //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kW'    Factor= 0.5   

  // Status signal which indicates that the safety wire has been activated.  When the safety wire is activated, the engine will not operate.  This is used for maintenance purposes.  00 - Safety wire has not been activated  01 - Safety wire has been ...
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "Safety wire has been activated" 
  // 0 - "Safety wire has not been activated" 

  uint8_t SafetyWireStatus;              //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EES_t;

// def @RBI CAN Message (486446590)
#define RBI_IDE (1U)
#define RBI_DLC (8U)
#define RBI_CANID (0x1CFE95FEU)
// -- Rebuild Information
typedef struct
{

  // The time in engine operation since the last engine rebuild.
  uint32_t EngOperationTimeSinceRebuild;  //      Bits=32.  [ 0     , 4211081215 ]  Unit:'s'    
  uint32_t framecnt;
} RBI_t;

// def @TCI1 CAN Message (486448126)
#define TCI1_IDE (1U)
#define TCI1_DLC (8U)
#define TCI1_CANID (0x1CFE9BFEU)
#define TCI1_CYC (1000U)
// -- Turbocharger Information 1
// signal: @EngTurboLubeOilPress2
#define EngTurboLubeOilPress2_CovFactor 4
#define EngTurboLubeOilPress2_CovS(x) ((uint8_t)((x / 4)))
// signal: @EngTurbo2Speed
#define EngTurbo2Speed_CovFactor 4
#define EngTurbo2Speed_CovS(x) ((uint16_t)((x / 4)))
// signal: @EngTurbo3Speed
#define EngTurbo3Speed_CovFactor 4
#define EngTurbo3Speed_CovS(x) ((uint16_t)((x / 4)))
// signal: @EngTurbo4Speed
#define EngTurbo4Speed_CovFactor 4
#define EngTurbo4Speed_CovS(x) ((uint16_t)((x / 4)))
typedef struct
{

  // Gage pressure of oil in turbocharger lubrication system.
  uint8_t EngTurboLubeOilPress2;         //      Bits=08.  [ 0     , 1000   ]  Unit:'kPa'   Factor= 4     

  // Rotational velocity of rotor in the turbocharger.
  uint16_t EngTurbo2Speed;               //      Bits=16.  [ 0     , 257020 ]  Unit:'rpm'   Factor= 4     

  // Rotational velocity of rotor in the turbocharger.
  uint16_t EngTurbo3Speed;               //      Bits=16.  [ 0     , 257020 ]  Unit:'rpm'   Factor= 4     

  // Rotational velocity of rotor in the turbocharger.
  uint16_t EngTurbo4Speed;               //      Bits=16.  [ 0     , 257020 ]  Unit:'rpm'   Factor= 4     
  uint32_t framecnt;
} TCI1_t;

// def @EPT5 CAN Message (486449150)
#define EPT5_IDE (1U)
#define EPT5_DLC (8U)
#define EPT5_CANID (0x1CFE9FFEU)
#define EPT5_CYC (1000U)
// -- Exhaust Port Temperature 5
// signal: @EngExhaustGasPort17Temp
#define EngExhaustGasPort17Temp_CovFactor 0.03125
#define EngExhaustGasPort17Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasPort18Temp
#define EngExhaustGasPort18Temp_CovFactor 0.03125
#define EngExhaustGasPort18Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasPort19Temp
#define EngExhaustGasPort19Temp_CovFactor 0.03125
#define EngExhaustGasPort19Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasPort20Temp
#define EngExhaustGasPort20Temp_CovFactor 0.03125
#define EngExhaustGasPort20Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort17Temp;       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort18Temp;       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort19Temp;       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort20Temp;       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} EPT5_t;

// def @EPT3 CAN Message (486449662)
#define EPT3_IDE (1U)
#define EPT3_DLC (8U)
#define EPT3_CANID (0x1CFEA1FEU)
#define EPT3_CYC (1000U)
// -- Exhaust Port Temperature 3
// signal: @EngExhaustGasPort9Temp
#define EngExhaustGasPort9Temp_CovFactor 0.03125
#define EngExhaustGasPort9Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasPort10Temp
#define EngExhaustGasPort10Temp_CovFactor 0.03125
#define EngExhaustGasPort10Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasPort11Temp
#define EngExhaustGasPort11Temp_CovFactor 0.03125
#define EngExhaustGasPort11Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasPort12Temp
#define EngExhaustGasPort12Temp_CovFactor 0.03125
#define EngExhaustGasPort12Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort9Temp;        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort10Temp;       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort11Temp;       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort12Temp;       //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} EPT3_t;

// def @EPT2 CAN Message (486449918)
#define EPT2_IDE (1U)
#define EPT2_DLC (8U)
#define EPT2_CANID (0x1CFEA2FEU)
#define EPT2_CYC (1000U)
// -- Exhaust Port Temperature 2
// signal: @EngExhaustGasPort5Temp
#define EngExhaustGasPort5Temp_CovFactor 0.03125
#define EngExhaustGasPort5Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasPort6Temp
#define EngExhaustGasPort6Temp_CovFactor 0.03125
#define EngExhaustGasPort6Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasPort7Temp
#define EngExhaustGasPort7Temp_CovFactor 0.03125
#define EngExhaustGasPort7Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasPort8Temp
#define EngExhaustGasPort8Temp_CovFactor 0.03125
#define EngExhaustGasPort8Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort5Temp;        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort6Temp;        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort7Temp;        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort8Temp;        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} EPT2_t;

// def @EPT1 CAN Message (486450174)
#define EPT1_IDE (1U)
#define EPT1_DLC (8U)
#define EPT1_CANID (0x1CFEA3FEU)
#define EPT1_CYC (1000U)
// -- Exhaust Port Temperature 1
// signal: @EngExhaustGasPort1Temp
#define EngExhaustGasPort1Temp_CovFactor 0.03125
#define EngExhaustGasPort1Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasPort2Temp
#define EngExhaustGasPort2Temp_CovFactor 0.03125
#define EngExhaustGasPort2Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasPort3Temp
#define EngExhaustGasPort3Temp_CovFactor 0.03125
#define EngExhaustGasPort3Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
// signal: @EngExhaustGasPort4Temp
#define EngExhaustGasPort4Temp_CovFactor 0.03125
#define EngExhaustGasPort4Temp_CovS(x) ((int32_t)((x / 0.03125) + 8736))
typedef struct
{

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort1Temp;        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort2Temp;        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort3Temp;        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125

  // Temperature at the cylinder exhaust port of the engine.
  int32_t EngExhaustGasPort4Temp;        //      Bits=16.  [ -273  , 1734.96875 ]  Unit:'?C'    Offset= -273      Factor= 0.03125
  uint32_t framecnt;
} EPT1_t;

// def @IMT2 CAN Message (486450686)
#define IMT2_IDE (1U)
#define IMT2_DLC (8U)
#define IMT2_CANID (0x1CFEA5FEU)
#define IMT2_CYC (1000U)
// -- Intake Manifold Information 2
// signal: @EngIntakeManifold2Temp
#define EngIntakeManifold2Temp_CovFactor 1
#define EngIntakeManifold2Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngIntakeManifold3Temp
#define EngIntakeManifold3Temp_CovFactor 1
#define EngIntakeManifold3Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngIntakeManifold4Temp
#define EngIntakeManifold4Temp_CovFactor 1
#define EngIntakeManifold4Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngIntakeManifold5Temp
#define EngIntakeManifold5Temp_CovFactor 1
#define EngIntakeManifold5Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngIntakeManifold6Temp
#define EngIntakeManifold6Temp_CovFactor 1
#define EngIntakeManifold6Temp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Temperature of pre-combustion air found in intake manifold of engine air supply system.
  int16_t EngIntakeManifold2Temp;        //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of pre-combustion air found in intake manifold of engine air supply system.
  int16_t EngIntakeManifold3Temp;        //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of pre-combustion air found in intake manifold of engine air supply system.
  int16_t EngIntakeManifold4Temp;        //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of pre-combustion air found in intake manifold number 5 of engine air supply system.
  int16_t EngIntakeManifold5Temp;        //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of pre-combustion air found in intake manifold  number 6 of engine air supply system.
  int16_t EngIntakeManifold6Temp;        //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} IMT2_t;

// def @AT CAN Message (486451198)
#define AT_IDE (1U)
#define AT_DLC (8U)
#define AT_CANID (0x1CFEA7FEU)
#define AT_CYC (1000U)
// -- Alternator Temperature
// signal: @EngAltBearing1Temp
#define EngAltBearing1Temp_CovFactor 1
#define EngAltBearing1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngAltBearing2Temp
#define EngAltBearing2Temp_CovFactor 1
#define EngAltBearing2Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngAltWinding1Temp
#define EngAltWinding1Temp_CovFactor 1
#define EngAltWinding1Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngAltWinding2Temp
#define EngAltWinding2Temp_CovFactor 1
#define EngAltWinding2Temp_CovS(x) ((int16_t)(x + 40))
// signal: @EngAltWinding3Temp
#define EngAltWinding3Temp_CovFactor 1
#define EngAltWinding3Temp_CovS(x) ((int16_t)(x + 40))
typedef struct
{

  // Temperature of the bearing inside the alternator.  Bearing 1 is the left or rear bearing.
  int16_t EngAltBearing1Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of the bearing inside the alternator.  Bearing 2 is the right or front bearing.
  int16_t EngAltBearing2Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of the windings inside the alternator.
  int16_t EngAltWinding1Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of the windings inside the alternator.
  int16_t EngAltWinding2Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      

  // Temperature of the windings inside the alternator.
  int16_t EngAltWinding3Temp;            //      Bits=08.  [ -40   , 210    ]  Unit:'?C'    Offset= -40      
  uint32_t framecnt;
} AT_t;

// def @ACTL CAN Message (486451454)
#define ACTL_IDE (1U)
#define ACTL_DLC (8U)
#define ACTL_CANID (0x1CFEA8FEU)
// -- Articulation Control
// signal: @ArticulationAngle
#define ArticulationAngle_CovFactor 1
#define ArticulationAngle_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // Angle of deflection of an articulated transit vehicle (rotation angle about the vehicles z-axis). A right turn (clockwise) is indicated with a positive angle and a left turn is indicated with a negative angle.  This parameter is defined according to ...
  int16_t ArticulationAngle;             //      Bits=08.  [ -125  , 125    ]  Unit:'deg'   Offset= -125     
  uint32_t framecnt;
} ACTL_t;

// def @EO1 CAN Message (486451710)
#define EO1_IDE (1U)
#define EO1_DLC (8U)
#define EO1_CANID (0x1CFEA9FEU)
// -- Exhaust Oxygen 1
// signal: @EngDesiredRatedExhaustOxygen
#define EngDesiredRatedExhaustOxygen_CovFactor 0.0025
#define EngDesiredRatedExhaustOxygen_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngDesiredExhaustOxygen
#define EngDesiredExhaustOxygen_CovFactor 0.0025
#define EngDesiredExhaustOxygen_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngActualExhaustOxygen
#define EngActualExhaustOxygen_CovFactor 0.0025
#define EngActualExhaustOxygen_CovS(x) ((uint16_t)((x / 0.0025)))
// signal: @EngExhstGsOxygnSnsrFlngCrrection
#define EngExhstGsOxygnSnsrFlngCrrection_CovFactor 1
#define EngExhstGsOxygnSnsrFlngCrrection_CovS(x) ((int16_t)(x + 125))
typedef struct
{

  // The desired amount of oxygen in the exhaust at rated conditions represented as a percentage by volume with respect to the total volume of exhaust gases leaving the engine.
  uint16_t EngDesiredRatedExhaustOxygen;      //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // The desired amount of oxygen in the exhaust represented as a percentage by volume with respect to the total volume of exhaust gases leaving the engine.
  uint16_t EngDesiredExhaustOxygen;           //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // The actual amount of oxygen in the exhaust represented as a percentage by volume with respect to the total volume of exhaust gases leaving the engine.
  uint16_t EngActualExhaustOxygen;            //      Bits=16.  [ 0     , 160.6375 ]  Unit:'%'     Factor= 0.0025

  // The amount of fueling change required by the system based on the measured exhaust oxygen value compared to the maximum fueling change permitted by the system, expressed as percentages.
  int16_t EngExhstGsOxygnSnsrFlngCrrection;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // Indicates whether the engine is using the exhaust oxygen sensor to control the air/fuel ratio.  00 Engine not using the exhaust oxygen sensor (open loop)  01 Engine using the exhaust oxygen sensor for a closed loop operation  10 Reserved  11 Don't ...
  // 3 - "Don't Care/take no action" 
  // 2 - "Reserved" 
  // 1 - "Engine using the exhaust oxygen sensor for a closed loop operation" 
  // 0 - "Engine not using the exhaust oxygen sensor" 

  uint8_t EngExhstGsOxygnSnsrClsdLpOprtion;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} EO1_t;

// def @AF2 CAN Message (486451966)
#define AF2_IDE (1U)
#define AF2_DLC (8U)
#define AF2_CANID (0x1CFEAAFEU)
// -- Alternate Fuel 2
// signal: @EngDesiredAbsIntakeManifoldPress
#define EngDesiredAbsIntakeManifoldPress_CovFactor 0.1
#define EngDesiredAbsIntakeManifoldPress_CovS(x) ((uint16_t)((x / 0.1)))
// signal: @EngTurboWastegateValvePos
#define EngTurboWastegateValvePos_CovFactor 0.4
#define EngTurboWastegateValvePos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @EngGsMssFlwSnsrFuelingCorrection
#define EngGsMssFlwSnsrFuelingCorrection_CovFactor 1
#define EngGsMssFlwSnsrFuelingCorrection_CovS(x) ((int16_t)(x + 125))
// signal: @GsFlInjctonPulseCorrectionFactor
#define GsFlInjctonPulseCorrectionFactor_CovFactor 0.0078125
#define GsFlInjctonPulseCorrectionFactor_CovS(x) ((int32_t)((x / 0.0078125) + 32128))
typedef struct
{

  // A correction to a predefined gaseous fuel energy (expressed in energy per unit volume) represented as a percentage.  The actual fuel energy used to control the engine is the product of the gaseous fuel correction factor and the energy of the gas.
  uint8_t EngGasFuelCorrectionFactor;         //      Bits=08.  [ 0     , 250    ]  Unit:'%'    

  // The desired absolute intake manifold pressure (turbo boost limit) of the engine.
  uint16_t EngDesiredAbsIntakeManifoldPress;  //      Bits=16.  [ 0     , 6425.5 ]  Unit:'kPa'   Factor= 0.1   

  // The position of the turbocharger wastegate valve (not the electronic wastegate control valve).
  uint8_t EngTurboWastegateValvePos;          //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The amount of fuel the Gas Mass Flow Rate Sensor is sensing should be added or subtracted compared to the maximum amount of fuel the control system allows the sensor to add or subtract.
  int16_t EngGsMssFlwSnsrFuelingCorrection;   //      Bits=08.  [ -125  , 125    ]  Unit:'%'     Offset= -125     

  // A correction to the gaseous fuel injection pulse (expressed in msec) represented as a percentage.  100% means no correction, higher values indicate increased pulse time, lower values indicate decreased pulse time.
  int32_t GsFlInjctonPulseCorrectionFactor;   //      Bits=16.  [ 0     , 150    ]  Unit:'%'     Offset= -251      Factor= 0.0078125
  uint32_t framecnt;
} AF2_t;

// def @ETC6 CAN Message (486452222)
#define ETC6_IDE (1U)
#define ETC6_DLC (8U)
#define ETC6_CANID (0x1CFEABFEU)
// -- Electronic Transmission Controller 6
// signal: @RecommendedGear
#define RecommendedGear_CovFactor 1
#define RecommendedGear_CovS(x) ((int16_t)(x + 125))
// signal: @HighestPossibleGear
#define HighestPossibleGear_CovFactor 1
#define HighestPossibleGear_CovS(x) ((int16_t)(x + 125))
// signal: @LowestPossibleGear
#define LowestPossibleGear_CovFactor 1
#define LowestPossibleGear_CovS(x) ((int16_t)(x + 125))
// signal: @ClutchLifeRemaining
#define ClutchLifeRemaining_CovFactor 0.4
#define ClutchLifeRemaining_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // The transmission calculates this gear continuously.  In dangerous situations this gear may be selected to gain back vehicle control.
  int16_t RecommendedGear;               //      Bits=08.  [ -125  , 125    ]  Unit:''      Offset= -125     

  // The transmission calculates this gear continuously.  Together with the lowest possible gear (see  SPN 1114), it enables a management computer to know the exact range of available gears.
  int16_t HighestPossibleGear;           //      Bits=08.  [ -125  , 125    ]  Unit:''      Offset= -125     

  // The transmission calculates this gear continuously.  Together with the highest possible gear (see SPN 1115), it enables a management computer to know the exact range of available gears.
  int16_t LowestPossibleGear;            //      Bits=08.  [ -125  , 125    ]  Unit:''      Offset= -125     

  // Signal which indicates the actual clutch life remaining in percent. One hundred percent means the clutch is brand new and zero percent means the clutch is at the end of its life.
  uint8_t ClutchLifeRemaining;           //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} ETC6_t;

// def @EBC4 CAN Message (486452478)
#define EBC4_IDE (1U)
#define EBC4_DLC (8U)
#define EBC4_CANID (0x1CFEACFEU)
// -- Wheel Brake Lining Remaining Information
// signal: @BrkLnngRminingFrontAxleLeftWheel
#define BrkLnngRminingFrontAxleLeftWheel_CovFactor 0.4
#define BrkLnngRminingFrontAxleLeftWheel_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @BrkLnngRmningFrontAxleRightWheel
#define BrkLnngRmningFrontAxleRightWheel_CovFactor 0.4
#define BrkLnngRmningFrontAxleRightWheel_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @BrkLnngRminingRearAxle1LeftWheel
#define BrkLnngRminingRearAxle1LeftWheel_CovFactor 0.4
#define BrkLnngRminingRearAxle1LeftWheel_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @BrkLnngRmningRearAxle1RightWheel
#define BrkLnngRmningRearAxle1RightWheel_CovFactor 0.4
#define BrkLnngRmningRearAxle1RightWheel_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @BrkLnngRminingRearAxle2LeftWheel
#define BrkLnngRminingRearAxle2LeftWheel_CovFactor 0.4
#define BrkLnngRminingRearAxle2LeftWheel_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @BrkLnngRmningRearAxle2RightWheel
#define BrkLnngRmningRearAxle2RightWheel_CovFactor 0.4
#define BrkLnngRmningRearAxle2RightWheel_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @BrkLnngRminingRearAxle3LeftWheel
#define BrkLnngRminingRearAxle3LeftWheel_CovFactor 0.4
#define BrkLnngRminingRearAxle3LeftWheel_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @BrkLnngRmningRearAxle3RightWheel
#define BrkLnngRmningRearAxle3RightWheel_CovFactor 0.4
#define BrkLnngRmningRearAxle3RightWheel_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // The percentage of brake lining which can still be measured for the left wheel on the front axle.  100% represents new brake linings, 0% represents totally worn brake linings.
  uint8_t BrkLnngRminingFrontAxleLeftWheel;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The percentage of brake lining which can still be measured for the right wheel on the front axle.  100% represents new brake linings, 0% represents totally worn brake linings.
  uint8_t BrkLnngRmningFrontAxleRightWheel;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The percentage of brake lining which can still be measured for the left wheel on the rear axle #1.  100% represents new brake linings, 0% represents totally worn brake linings.
  uint8_t BrkLnngRminingRearAxle1LeftWheel;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The percentage of brake lining which can still be measured for the right wheel on the rear axle #1.  100% represents new brake linings, 0% represents totally worn brake linings.
  uint8_t BrkLnngRmningRearAxle1RightWheel;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The percentage of brake lining which can still be measured for the left wheel on the rear axle #2.  100% represents new brake linings, 0% represents totally worn brake linings.
  uint8_t BrkLnngRminingRearAxle2LeftWheel;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The percentage of brake lining which can still be measured for the right wheel on the rear axle #2.  100% represents new brake linings, 0% represents totally worn brake linings.
  uint8_t BrkLnngRmningRearAxle2RightWheel;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The percentage of brake lining which can still be measured for the left wheel on the rear axle #3.  100% represents new brake linings, 0% represents totally worn brake linings.
  uint8_t BrkLnngRminingRearAxle3LeftWheel;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The percentage of brake lining which can still be measured for the right wheel on the rear axle #3.  100% represents new brake linings, 0% represents totally worn brake linings.
  uint8_t BrkLnngRmningRearAxle3RightWheel;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} EBC4_t;

// def @GFC CAN Message (486453246)
#define GFC_IDE (1U)
#define GFC_DLC (8U)
#define GFC_CANID (0x1CFEAFFEU)
// -- Fuel Consumption (Gaseous)
// signal: @TripFuel
#define TripFuel_CovFactor 0.5
#define TripFuel_CovS(x) ((uint32_t)((x / 0.5)))
// signal: @TotalFuelUsed
#define TotalFuelUsed_CovFactor 0.5
#define TotalFuelUsed_CovS(x) ((uint32_t)((x / 0.5)))
typedef struct
{

  // Total fuel consumed (trip drive fuel + trip PTO governor moving fuel + trip PTO governor non-moving fuel + trip idle fuel) since the last trip reset.
  uint32_t TripFuel;                     //      Bits=32.  [ 0     , 2105540607.5 ]  Unit:'kg'    Factor= 0.5   

  // Total fuel consumed (trip drive fuel + trip PTO governor moving fuel + trip PTO governor non-moving fuel + trip idle fuel) over the life of the engine.
  uint32_t TotalFuelUsed;                //      Bits=32.  [ 0     , 2105540607.5 ]  Unit:'kg'    Factor= 0.5   
  uint32_t framecnt;
} GFC_t;

// def @EH CAN Message (486453758)
#define EH_IDE (1U)
#define EH_DLC (8U)
#define EH_CANID (0x1CFEB1FEU)
// -- ECU History
// signal: @TotalECUDistance
#define TotalECUDistance_CovFactor 0.125
#define TotalECUDistance_CovS(x) ((uint32_t)((x / 0.125)))
// signal: @TotalECURunTime
#define TotalECURunTime_CovFactor 0.05
#define TotalECURunTime_CovS(x) ((uint32_t)((x / 0.05)))
typedef struct
{

  // Total distance accumulated over the life of the ECU.  When the ECU is replaced this value shall be reset.
  uint32_t TotalECUDistance;             //      Bits=32.  [ 0     , 526385151.875 ]  Unit:'km'    Factor= 0.125 

  // Total time accumulated over the life of the ECU, from ignition switch ON to ignition switch OFF.  When the ECU is replaced this value shall be reset.
  uint32_t TotalECURunTime;              //      Bits=32.  [ 0     , 210554060.75 ]  Unit:'h'     Factor= 0.05  
  uint32_t framecnt;
} EH_t;

// def @GFI1 CAN Message (486454014)
#define GFI1_IDE (1U)
#define GFI1_DLC (8U)
#define GFI1_CANID (0x1CFEB2FEU)
// -- Fuel Information 1 (Gaseous)
// signal: @TotalEngPTOGovernorFuelUsed
#define TotalEngPTOGovernorFuelUsed_CovFactor 0.5
#define TotalEngPTOGovernorFuelUsed_CovS(x) ((uint32_t)((x / 0.5)))
// signal: @TripAverageFuelRate
#define TripAverageFuelRate_CovFactor 0.05
#define TripAverageFuelRate_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @EngFuelSpecificGravity
#define EngFuelSpecificGravity_CovFactor 0.0001
#define EngFuelSpecificGravity_CovS(x) ((uint16_t)((x / 0.0001)))
typedef struct
{

  // Total fuel used while the PTO or remote PTO governors are in the hold state and engine speed is above zero, over the life of the engine.    NOTE?This parameter is intended for gaseous fueled engines.  See SPN 1028 for alternate resolution.
  uint32_t TotalEngPTOGovernorFuelUsed;  //      Bits=32.  [ 0     , 2105540607.5 ]  Unit:'kg'    Factor= 0.5   

  // Average fuel rate, equal to trip fuel divided by trip time while the engine speed is above zero, since the last trip reset.  This includes idle, engine PTO governor (both moving and non-moving) and drive operation but excludes ignition-on time while ...
  uint16_t TripAverageFuelRate;          //      Bits=16.  [ 0     , 3212.75 ]  Unit:'kg/h'  Factor= 0.05  

  // This parameter conveys the specific gravity of the gaseous fuel being used by the engine.  The specific gravity of the fuel can then be used to compute the density of the fuel.
  uint16_t EngFuelSpecificGravity;       //      Bits=16.  [ 0     , 2      ]  Unit:''      Factor= 0.0001
  uint32_t framecnt;
} GFI1_t;

// def @LFI1 CAN Message (486454270)
#define LFI1_IDE (1U)
#define LFI1_DLC (8U)
#define LFI1_CANID (0x1CFEB3FEU)
// -- Fuel Information 1 (Liquid)
// signal: @TotalEngPTOGovernorFuelUsed
#define TotalEngPTOGovernorFuelUsed_CovFactor 0.5
#define TotalEngPTOGovernorFuelUsed_CovS(x) ((uint32_t)((x / 0.5)))
// signal: @TripAverageFuelRate
#define TripAverageFuelRate_CovFactor 0.05
#define TripAverageFuelRate_CovS(x) ((uint16_t)((x / 0.05)))
// signal: @FlexibleFuelPercentage
#define FlexibleFuelPercentage_CovFactor 0.0025
#define FlexibleFuelPercentage_CovS(x) ((uint16_t)((x / 0.0025)))
typedef struct
{

  // Total fuel used while the PTO or remote PTO governors are in the hold state and engine speed is above zero, over the life of the engine.    NOTE?This parameter is intended for liquid fueled engines.  See SPN 1030 for alternate resolution.
  uint32_t TotalEngPTOGovernorFuelUsed;  //      Bits=32.  [ 0     , 2105540607.5 ]  Unit:'L'     Factor= 0.5   

  // Average fuel rate, equal to trip fuel divided by trip time while the engine speed is above zero, since the last trip reset.  This includes idle, engine PTO governor (both moving and non-moving) and drive operation but excludes ignition-on time while ...
  uint16_t TripAverageFuelRate;          //      Bits=16.  [ 0     , 3212.75 ]  Unit:'L/h'   Factor= 0.05  

  // Measured signal that indicates the percentage of alcohol in the fuel currently being used.  0% means no alcohol in fuel, 100% means alcohol as fuel and nothing else.  EXAMPLE: If a Bi-fuel vehicle has less than 10% ethanol in the gasoline/petrol, ...
  uint16_t FlexibleFuelPercentage;       //      Bits=16.  [ 0     , 100    ]  Unit:'%'     Factor= 0.0025
  uint32_t framecnt;
} LFI1_t;

// def @TSI CAN Message (486454782)
#define TSI_IDE (1U)
#define TSI_DLC (8U)
#define TSI_CANID (0x1CFEB5FEU)
// -- Trip Shutdown Information
typedef struct
{

  // Total number of hot shutdowns since the last trip reset.  A hot shutdown is based on operation at high load or high engine speed or for long operating periods without allowing the engine to cool sufficiently.
  uint16_t TripNumberOfHotShutdowns;          //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Total number of times the engine has been shutdown due to idling too long (at normal idle or fast idle) since the last trip reset.
  uint16_t TripNumberOfIdleShutdowns;         //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Total number of times an operator disables idle shutdown to prevent an engine shutdown, since the last trip reset.
  uint16_t TrpNumberOfIdleShutdownOverrides;  //      Bits=16.  [ 0     , 64255  ]  Unit:''     

  // Total number of decelerations whenever the vehicle deceleration is more than XYZ km/h/sec (where XYZ is a calibratible threshold), since the last trip reset.  A lengthy deceleration shall be counted as one sudden deceleration.
  uint16_t TripSuddenDecelerations;           //      Bits=16.  [ 0     , 64255  ]  Unit:''     
  uint32_t framecnt;
} TSI_t;

// def @TVI CAN Message (486455038)
#define TVI_IDE (1U)
#define TVI_DLC (8U)
#define TVI_CANID (0x1CFEB6FEU)
// -- Trip Vehicle Speed/Cruise Distance Information
// signal: @TripMaxVehicleSpeed
#define TripMaxVehicleSpeed_CovFactor 0.00390625
#define TripMaxVehicleSpeed_CovS(x) ((uint16_t)((x / 0.00390625)))
// signal: @TripCruiseDistance
#define TripCruiseDistance_CovFactor 0.125
#define TripCruiseDistance_CovS(x) ((uint32_t)((x / 0.125)))
typedef struct
{

  // Maximum vehicle speed achieved while the engine speed is greater than zero and the accelerator pedal position (APS) is at a value greater than 0%, since the last trip reset.
  uint16_t TripMaxVehicleSpeed;          //      Bits=16.  [ 0     , 250.996 ]  Unit:'km/h'  Factor= 0.00390625

  // Total distance that the engine has operated in the cruise hold state, excluding time in accelerator override, since the last trip reset.
  uint32_t TripCruiseDistance;           //      Bits=32.  [ 0     , 526385151.875 ]  Unit:'km'    Factor= 0.125 
  uint32_t framecnt;
} TVI_t;

// def @EEC4 CAN Message (486457086)
#define EEC4_IDE (1U)
#define EEC4_DLC (8U)
#define EEC4_CANID (0x1CFEBEFEU)
// -- Electronic Engine Controller 4
// signal: @EngRatedPower
#define EngRatedPower_CovFactor 0.5
#define EngRatedPower_CovS(x) ((uint16_t)((x / 0.5)))
// signal: @EngRatedSpeed
#define EngRatedSpeed_CovFactor 0.125
#define EngRatedSpeed_CovS(x) ((uint16_t)((x / 0.125)))
typedef struct
{

  // Net brake power that the engine will deliver continuously, specified for a given application at a rated speed.
  uint16_t EngRatedPower;                     //      Bits=16.  [ 0     , 32127.5 ]  Unit:'kW'    Factor= 0.5   

  // The maximum governed rotational velocity of the engine crankshaft under full load conditions.  Note that the engine speed at point 2 (SPN 528) is equal to rated engine speed only in the case when the engine has not been derated.  Please also ...
  uint16_t EngRatedSpeed;                     //      Bits=16.  [ 0     , 8031.875 ]  Unit:'rpm'   Factor= 0.125 

  // Direction of engine rotation, as reported by the engine.  Direction convention as viewed by an observer standing at the rear of the engine, viewing the flywheel.  00 - CounterClockWise (CCW)  01 - ClockWise (CW)  10 - Unknown  (Rotation Direction ...
  // 3 - "Not Available" 
  // 2 - "Unknown " 
  // 1 - "ClockWise" 
  // 0 - "CounterClockWise" 

  uint8_t EngRotationDirection;               //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Indicates that the Boost Pressure Closed Loop Control status either open loop or closed loop.    00  Open loop   01  Closed loop   10  SAE reserved  11  Not available
  // 3 - "Not available" 
  // 2 - "SAE reserved" 
  // 1 - "Closed loop " 
  // 0 - "Open loop " 

  uint8_t EngIntakeManifoldPressCtrlMode;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Reports the number of cranking cycles undergone during the present start attempt.  Note:  This is intended to be used in conjunction with Maximum Crank Attempts per Start Attempt, in order to give a FMI 0 diagnostic on this parameter when the count ...
  uint8_t CrnkAttmptCntOnPrsntStartAttempt;   //      Bits=08.  [ 0     , 250    ]  Unit:''     
  uint32_t framecnt;
} EEC4_t;

// def @ERC2 CAN Message (486458110)
#define ERC2_IDE (1U)
#define ERC2_DLC (8U)
#define ERC2_CANID (0x1CFEC2FEU)
#define ERC2_CYC (1000U)
// -- Electronic Retarder Controller 2  This message will be transmitted by several types of retarding devices such as engine compression release brakes, exhaust system restriction brakes, and driveline retarders using hydraulic, electric, or mechanical ...
// signal: @CrsCtrlRetarderActiveSpeedOffset
#define CrsCtrlRetarderActiveSpeedOffset_CovFactor 0.00390625
#define CrsCtrlRetarderActiveSpeedOffset_CovS(x) ((int32_t)((x / 0.00390625) + 32000))
typedef struct
{

  // Identifies the status of the transmission output retarder.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransOutputRetarder;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // The additional speed above the operator selected cruise control set speed at which the retarder will activate when cruise control is active.
  int32_t CrsCtrlRetarderActiveSpeedOffset;   //      Bits=16.  [ 0     , 125.996 ]  Unit:'km/h'  Offset= -125      Factor= 0.00390625
  uint32_t framecnt;
} ERC2_t;

// def @ETC5 CAN Message (486458366)
#define ETC5_IDE (1U)
#define ETC5_DLC (8U)
#define ETC5_CANID (0x1CFEC3FEU)
// -- Electronic Transmission Controller 5
typedef struct
{

  // Identifies the status of the switch that represents high range.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransHighRangeSenseSwitch;     //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the switch that represents low range.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransLowRangeSenseSwitch;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the switch that indicates reverse direction.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransReverseDirectionSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the switch that indicates neutral.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransNeutralSwitch;            //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the switch that indicates forward direction.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransForwardDirectionSwitch;   //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} ETC5_t;

// def @ETC4 CAN Message (486458878)
#define ETC4_IDE (1U)
#define ETC4_DLC (8U)
#define ETC4_CANID (0x1CFEC5FEU)
// -- Electronic Transmission Controller 4
// signal: @TransSynchronizerClutchValue
#define TransSynchronizerClutchValue_CovFactor 0.4
#define TransSynchronizerClutchValue_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransSynchronizerBrakeValue
#define TransSynchronizerBrakeValue_CovFactor 0.4
#define TransSynchronizerBrakeValue_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // The current modulated value for the air supply to the synchronizer clutch.
  uint8_t TransSynchronizerClutchValue;   //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The current modulated value for the air supply to the synchronizer brake.
  uint8_t TransSynchronizerBrakeValue;    //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   
  uint32_t framecnt;
} ETC4_t;

// def @ETC3 CAN Message (486459390)
#define ETC3_IDE (1U)
#define ETC3_DLC (8U)
#define ETC3_CANID (0x1CFEC7FEU)
// -- Electronic Transmission Controller 3
// signal: @TransShiftFingerGearPos
#define TransShiftFingerGearPos_CovFactor 0.4
#define TransShiftFingerGearPos_CovS(x) ((uint8_t)((x / 0.4)))
// signal: @TransShiftFingerRailPos
#define TransShiftFingerRailPos_CovFactor 0.4
#define TransShiftFingerRailPos_CovS(x) ((uint8_t)((x / 0.4)))
typedef struct
{

  // The current position of the shift finger in the gear direction.
  uint8_t TransShiftFingerGearPos;            //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // The current position of the shift finger in the rail direction.
  uint8_t TransShiftFingerRailPos;            //      Bits=08.  [ 0     , 100    ]  Unit:'%'     Factor= 0.4   

  // Indicates the status of the shift finger in the neutral position.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransShiftFingerNeutralIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the shift finger in the engagement position.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TrnsShftFngerEngagementIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the shift finger in the center rail position.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TrnsShftFngerCenterRailIndicator;   //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the actuator that moves the shift finger identified as rail actuator #1.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransShiftFingerRailActuator1;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the actuator that moves the shift finger identified as gear actuator #1.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransShiftFingerGearActuator1;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the actuator that moves the shift finger identified as rail actuator #2.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransShiftFingerRailActuator2;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the actuator that moves the shift finger identified as gear actuator #2.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransShiftFingerGearActuator2;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the range high actuator in the auxiliary unit.    00 -Off  01 -On  10 - Error  11 - Not available
  // 3 - "- Not available" 
  // 2 - "- Error" 
  // 1 - "-On" 
  // 0 - "-Off" 

  uint8_t TransRangeHighActuator;             //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the range low actuator in the auxiliary unit.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransRangeLowActuator;              //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the splitter direct actuator in the auxiliary unit.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransSplitterDirectActuator;        //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the splitter indirect actuator in the auxiliary unit.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransSplitterIndirectActuator;      //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the actuator that controls the clutch.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransClutchActuator;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the actuator that controls the torque converter lockup clutch.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransLockupClutchActuator;          //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the actuator that controls the engine defuel mechanism.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransDefuelActuator;                //      Bits=02.  [ 0     , 3      ]  Unit:''     

  // Identifies the status of the actuator that controls the inertia brake.    00 - Off  01 - On  10 - Error  11 - Not available
  // 3 - "Not available" 
  // 2 - "Error" 
  // 1 - "On" 
  // 0 - "Off" 

  uint8_t TransInertiaBrakeActuator;          //      Bits=02.  [ 0     , 3      ]  Unit:''     
  uint32_t framecnt;
} ETC3_t;

uint32_t Unpack_AT1DPFSSC_j1939v8_5(AT1DPFSSC_t* _m, const uint8_t* _d);
uint32_t Pack_AT1DPFSSC_j1939v8_5(const AT1DPFSSC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2DPFSSC_j1939v8_5(AT2DPFSSC_t* _m, const uint8_t* _d);
uint32_t Pack_AT2DPFSSC_j1939v8_5(const AT2DPFSSC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CN_j1939v8_5(CN_t* _m, const uint8_t* _d);
uint32_t Pack_CN_j1939v8_5(const CN_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2SCRSI1_j1939v8_5(A2SCRSI1_t* _m, const uint8_t* _d);
uint32_t Pack_A2SCRSI1_j1939v8_5(const A2SCRSI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2SCRDSR2_j1939v8_5(A2SCRDSR2_t* _m, const uint8_t* _d);
uint32_t Pack_A2SCRDSR2_j1939v8_5(const A2SCRDSR2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_WAND_j1939v8_5(WAND_t* _m, const uint8_t* _d);
uint32_t Pack_WAND_j1939v8_5(const WAND_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LDISP_j1939v8_5(LDISP_t* _m, const uint8_t* _d);
uint32_t Pack_LDISP_j1939v8_5(const LDISP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_MSI2_j1939v8_5(MSI2_t* _m, const uint8_t* _d);
uint32_t Pack_MSI2_j1939v8_5(const MSI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ACCS_j1939v8_5(ACCS_t* _m, const uint8_t* _d);
uint32_t Pack_ACCS_j1939v8_5(const ACCS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETC12_j1939v8_5(ETC12_t* _m, const uint8_t* _d);
uint32_t Pack_ETC12_j1939v8_5(const ETC12_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_HRW_j1939v8_5(HRW_t* _m, const uint8_t* _d);
uint32_t Pack_HRW_j1939v8_5(const HRW_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TSC1_j1939v8_5(TSC1_t* _m, const uint8_t* _d);
uint32_t Pack_TSC1_j1939v8_5(const TSC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TC1_j1939v8_5(TC1_t* _m, const uint8_t* _d);
uint32_t Pack_TC1_j1939v8_5(const TC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_XBR_j1939v8_5(XBR_t* _m, const uint8_t* _d);
uint32_t Pack_XBR_j1939v8_5(const XBR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AUXIO5_j1939v8_5(AUXIO5_t* _m, const uint8_t* _d);
uint32_t Pack_AUXIO5_j1939v8_5(const AUXIO5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SRASI_j1939v8_5(SRASI_t* _m, const uint8_t* _d);
uint32_t Pack_SRASI_j1939v8_5(const SRASI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CCVS2_j1939v8_5(CCVS2_t* _m, const uint8_t* _d);
uint32_t Pack_CCVS2_j1939v8_5(const CCVS2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AEBS2_j1939v8_5(AEBS2_t* _m, const uint8_t* _d);
uint32_t Pack_AEBS2_j1939v8_5(const AEBS2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TC2_j1939v8_5(TC2_t* _m, const uint8_t* _d);
uint32_t Pack_TC2_j1939v8_5(const TC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TC3_j1939v8_5(TC3_t* _m, const uint8_t* _d);
uint32_t Pack_TC3_j1939v8_5(const TC3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EIC_j1939v8_5(EIC_t* _m, const uint8_t* _d);
uint32_t Pack_EIC_j1939v8_5(const EIC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ALTC_j1939v8_5(ALTC_t* _m, const uint8_t* _d);
uint32_t Pack_ALTC_j1939v8_5(const ALTC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_NM_j1939v8_5(NM_t* _m, const uint8_t* _d);
uint32_t Pack_NM_j1939v8_5(const NM_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_JLCM_j1939v8_5(JLCM_t* _m, const uint8_t* _d);
uint32_t Pack_JLCM_j1939v8_5(const JLCM_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ASC6_j1939v8_5(ASC6_t* _m, const uint8_t* _d);
uint32_t Pack_ASC6_j1939v8_5(const ASC6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ASC2_j1939v8_5(ASC2_t* _m, const uint8_t* _d);
uint32_t Pack_ASC2_j1939v8_5(const ASC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETC1_j1939v8_5(ETC1_t* _m, const uint8_t* _d);
uint32_t Pack_ETC1_j1939v8_5(const ETC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC2_j1939v8_5(EEC2_t* _m, const uint8_t* _d);
uint32_t Pack_EEC2_j1939v8_5(const EEC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC1_j1939v8_5(EEC1_t* _m, const uint8_t* _d);
uint32_t Pack_EEC1_j1939v8_5(const EEC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EGF1_j1939v8_5(EGF1_t* _m, const uint8_t* _d);
uint32_t Pack_EGF1_j1939v8_5(const EGF1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETC8_j1939v8_5(ETC8_t* _m, const uint8_t* _d);
uint32_t Pack_ETC8_j1939v8_5(const ETC8_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LOI_j1939v8_5(LOI_t* _m, const uint8_t* _d);
uint32_t Pack_LOI_j1939v8_5(const LOI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SSI_j1939v8_5(SSI_t* _m, const uint8_t* _d);
uint32_t Pack_SSI_j1939v8_5(const SSI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BI_j1939v8_5(BI_t* _m, const uint8_t* _d);
uint32_t Pack_BI_j1939v8_5(const BI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RGTACRP_j1939v8_5(RGTACRP_t* _m, const uint8_t* _d);
uint32_t Pack_RGTACRP_j1939v8_5(const RGTACRP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CCS_j1939v8_5(CCS_t* _m, const uint8_t* _d);
uint32_t Pack_CCS_j1939v8_5(const CCS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_KL1_j1939v8_5(KL1_t* _m, const uint8_t* _d);
uint32_t Pack_KL1_j1939v8_5(const KL1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_KL2_j1939v8_5(KL2_t* _m, const uint8_t* _d);
uint32_t Pack_KL2_j1939v8_5(const KL2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_KL3_j1939v8_5(KL3_t* _m, const uint8_t* _d);
uint32_t Pack_KL3_j1939v8_5(const KL3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RGAAC_j1939v8_5(RGAAC_t* _m, const uint8_t* _d);
uint32_t Pack_RGAAC_j1939v8_5(const RGAAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GC2_j1939v8_5(GC2_t* _m, const uint8_t* _d);
uint32_t Pack_GC2_j1939v8_5(const GC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1SCRDSI1_j1939v8_5(A1SCRDSI1_t* _m, const uint8_t* _d);
uint32_t Pack_A1SCRDSI1_j1939v8_5(const A1SCRDSI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1SCRDSR1_j1939v8_5(A1SCRDSR1_t* _m, const uint8_t* _d);
uint32_t Pack_A1SCRDSR1_j1939v8_5(const A1SCRDSR1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1SCRAI_j1939v8_5(A1SCRAI_t* _m, const uint8_t* _d);
uint32_t Pack_A1SCRAI_j1939v8_5(const A1SCRAI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2SCRDSI1_j1939v8_5(A2SCRDSI1_t* _m, const uint8_t* _d);
uint32_t Pack_A2SCRDSI1_j1939v8_5(const A2SCRDSI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2SCRDSR1_j1939v8_5(A2SCRDSR1_t* _m, const uint8_t* _d);
uint32_t Pack_A2SCRDSR1_j1939v8_5(const A2SCRDSR1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2SCRAI_j1939v8_5(A2SCRAI_t* _m, const uint8_t* _d);
uint32_t Pack_A2SCRAI_j1939v8_5(const A2SCRAI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SSI2_j1939v8_5(SSI2_t* _m, const uint8_t* _d);
uint32_t Pack_SSI2_j1939v8_5(const SSI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ARI_j1939v8_5(ARI_t* _m, const uint8_t* _d);
uint32_t Pack_ARI_j1939v8_5(const ARI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AEBS1_j1939v8_5(AEBS1_t* _m, const uint8_t* _d);
uint32_t Pack_AEBS1_j1939v8_5(const AEBS1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_WS_j1939v8_5(WS_t* _m, const uint8_t* _d);
uint32_t Pack_WS_j1939v8_5(const WS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETBA1_j1939v8_5(ETBA1_t* _m, const uint8_t* _d);
uint32_t Pack_ETBA1_j1939v8_5(const ETBA1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETFR_j1939v8_5(ETFR_t* _m, const uint8_t* _d);
uint32_t Pack_ETFR_j1939v8_5(const ETFR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EASI_j1939v8_5(EASI_t* _m, const uint8_t* _d);
uint32_t Pack_EASI_j1939v8_5(const EASI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI1_j1939v8_5(ECCI1_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI1_j1939v8_5(const ECCI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI2_j1939v8_5(ECCI2_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI2_j1939v8_5(const ECCI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI3_j1939v8_5(ECCI3_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI3_j1939v8_5(const ECCI3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI4_j1939v8_5(ECCI4_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI4_j1939v8_5(const ECCI4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI5_j1939v8_5(ECCI5_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI5_j1939v8_5(const ECCI5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI6_j1939v8_5(ECCI6_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI6_j1939v8_5(const ECCI6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI7_j1939v8_5(ECCI7_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI7_j1939v8_5(const ECCI7_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI8_j1939v8_5(ECCI8_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI8_j1939v8_5(const ECCI8_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI9_j1939v8_5(ECCI9_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI9_j1939v8_5(const ECCI9_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI10_j1939v8_5(ECCI10_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI10_j1939v8_5(const ECCI10_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI11_j1939v8_5(ECCI11_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI11_j1939v8_5(const ECCI11_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI12_j1939v8_5(ECCI12_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI12_j1939v8_5(const ECCI12_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI13_j1939v8_5(ECCI13_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI13_j1939v8_5(const ECCI13_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI14_j1939v8_5(ECCI14_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI14_j1939v8_5(const ECCI14_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI15_j1939v8_5(ECCI15_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI15_j1939v8_5(const ECCI15_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI16_j1939v8_5(ECCI16_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI16_j1939v8_5(const ECCI16_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI17_j1939v8_5(ECCI17_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI17_j1939v8_5(const ECCI17_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI18_j1939v8_5(ECCI18_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI18_j1939v8_5(const ECCI18_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI19_j1939v8_5(ECCI19_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI19_j1939v8_5(const ECCI19_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCI20_j1939v8_5(ECCI20_t* _m, const uint8_t* _d);
uint32_t Pack_ECCI20_j1939v8_5(const ECCI20_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GFI5_j1939v8_5(GFI5_t* _m, const uint8_t* _d);
uint32_t Pack_GFI5_j1939v8_5(const GFI5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EGFVDC1_j1939v8_5(EGFVDC1_t* _m, const uint8_t* _d);
uint32_t Pack_EGFVDC1_j1939v8_5(const EGFVDC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EGFVDC2_j1939v8_5(EGFVDC2_t* _m, const uint8_t* _d);
uint32_t Pack_EGFVDC2_j1939v8_5(const EGFVDC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EGFVDC3_j1939v8_5(EGFVDC3_t* _m, const uint8_t* _d);
uint32_t Pack_EGFVDC3_j1939v8_5(const EGFVDC3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EGFVDC4_j1939v8_5(EGFVDC4_t* _m, const uint8_t* _d);
uint32_t Pack_EGFVDC4_j1939v8_5(const EGFVDC4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EGFVDC5_j1939v8_5(EGFVDC5_t* _m, const uint8_t* _d);
uint32_t Pack_EGFVDC5_j1939v8_5(const EGFVDC5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EGFVSOAC1_j1939v8_5(EGFVSOAC1_t* _m, const uint8_t* _d);
uint32_t Pack_EGFVSOAC1_j1939v8_5(const EGFVSOAC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EGFVSOAC2_j1939v8_5(EGFVSOAC2_t* _m, const uint8_t* _d);
uint32_t Pack_EGFVSOAC2_j1939v8_5(const EGFVSOAC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EGFVSOAC3_j1939v8_5(EGFVSOAC3_t* _m, const uint8_t* _d);
uint32_t Pack_EGFVSOAC3_j1939v8_5(const EGFVSOAC3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EGFVSOAC4_j1939v8_5(EGFVSOAC4_t* _m, const uint8_t* _d);
uint32_t Pack_EGFVSOAC4_j1939v8_5(const EGFVSOAC4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EGFVSOAC5_j1939v8_5(EGFVSOAC5_t* _m, const uint8_t* _d);
uint32_t Pack_EGFVSOAC5_j1939v8_5(const EGFVSOAC5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FPAC_j1939v8_5(FPAC_t* _m, const uint8_t* _d);
uint32_t Pack_FPAC_j1939v8_5(const FPAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCR_j1939v8_5(ECCR_t* _m, const uint8_t* _d);
uint32_t Pack_ECCR_j1939v8_5(const ECCR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECBA1_j1939v8_5(ECBA1_t* _m, const uint8_t* _d);
uint32_t Pack_ECBA1_j1939v8_5(const ECBA1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC18_j1939v8_5(EEC18_t* _m, const uint8_t* _d);
uint32_t Pack_EEC18_j1939v8_5(const EEC18_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCC1_j1939v8_5(PCC1_t* _m, const uint8_t* _d);
uint32_t Pack_PCC1_j1939v8_5(const PCC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ITO1_j1939v8_5(ITO1_t* _m, const uint8_t* _d);
uint32_t Pack_ITO1_j1939v8_5(const ITO1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ITO2_j1939v8_5(ITO2_t* _m, const uint8_t* _d);
uint32_t Pack_ITO2_j1939v8_5(const ITO2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ITO3_j1939v8_5(ITO3_t* _m, const uint8_t* _d);
uint32_t Pack_ITO3_j1939v8_5(const ITO3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TFAC2_j1939v8_5(TFAC2_t* _m, const uint8_t* _d);
uint32_t Pack_TFAC2_j1939v8_5(const TFAC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ASC7_j1939v8_5(ASC7_t* _m, const uint8_t* _d);
uint32_t Pack_ASC7_j1939v8_5(const ASC7_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ELS_j1939v8_5(ELS_t* _m, const uint8_t* _d);
uint32_t Pack_ELS_j1939v8_5(const ELS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECPMSI_j1939v8_5(ECPMSI_t* _m, const uint8_t* _d);
uint32_t Pack_ECPMSI_j1939v8_5(const ECPMSI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETC9_j1939v8_5(ETC9_t* _m, const uint8_t* _d);
uint32_t Pack_ETC9_j1939v8_5(const ETC9_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2OGC2_j1939v8_5(AT2OGC2_t* _m, const uint8_t* _d);
uint32_t Pack_AT2OGC2_j1939v8_5(const AT2OGC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2OGC1_j1939v8_5(AT2OGC1_t* _m, const uint8_t* _d);
uint32_t Pack_AT2OGC1_j1939v8_5(const AT2OGC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2IGC2_j1939v8_5(AT2IGC2_t* _m, const uint8_t* _d);
uint32_t Pack_AT2IGC2_j1939v8_5(const AT2IGC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2IGC1_j1939v8_5(AT2IGC1_t* _m, const uint8_t* _d);
uint32_t Pack_AT2IGC1_j1939v8_5(const AT2IGC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1OGC2_j1939v8_5(AT1OGC2_t* _m, const uint8_t* _d);
uint32_t Pack_AT1OGC2_j1939v8_5(const AT1OGC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1OGC1_j1939v8_5(AT1OGC1_t* _m, const uint8_t* _d);
uint32_t Pack_AT1OGC1_j1939v8_5(const AT1OGC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1IGC2_j1939v8_5(AT1IGC2_t* _m, const uint8_t* _d);
uint32_t Pack_AT1IGC2_j1939v8_5(const AT1IGC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1IGC1_j1939v8_5(AT1IGC1_t* _m, const uint8_t* _d);
uint32_t Pack_AT1IGC1_j1939v8_5(const AT1IGC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EJM10_j1939v8_5(EJM10_t* _m, const uint8_t* _d);
uint32_t Pack_EJM10_j1939v8_5(const EJM10_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BJM10_j1939v8_5(BJM10_t* _m, const uint8_t* _d);
uint32_t Pack_BJM10_j1939v8_5(const BJM10_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EJM9_j1939v8_5(EJM9_t* _m, const uint8_t* _d);
uint32_t Pack_EJM9_j1939v8_5(const EJM9_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BJM9_j1939v8_5(BJM9_t* _m, const uint8_t* _d);
uint32_t Pack_BJM9_j1939v8_5(const BJM9_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EJM8_j1939v8_5(EJM8_t* _m, const uint8_t* _d);
uint32_t Pack_EJM8_j1939v8_5(const EJM8_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BJM8_j1939v8_5(BJM8_t* _m, const uint8_t* _d);
uint32_t Pack_BJM8_j1939v8_5(const BJM8_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EJM7_j1939v8_5(EJM7_t* _m, const uint8_t* _d);
uint32_t Pack_EJM7_j1939v8_5(const EJM7_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BJM7_j1939v8_5(BJM7_t* _m, const uint8_t* _d);
uint32_t Pack_BJM7_j1939v8_5(const BJM7_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EJM6_j1939v8_5(EJM6_t* _m, const uint8_t* _d);
uint32_t Pack_EJM6_j1939v8_5(const EJM6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BJM6_j1939v8_5(BJM6_t* _m, const uint8_t* _d);
uint32_t Pack_BJM6_j1939v8_5(const BJM6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EJM5_j1939v8_5(EJM5_t* _m, const uint8_t* _d);
uint32_t Pack_EJM5_j1939v8_5(const EJM5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BJM5_j1939v8_5(BJM5_t* _m, const uint8_t* _d);
uint32_t Pack_BJM5_j1939v8_5(const BJM5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EJM4_j1939v8_5(EJM4_t* _m, const uint8_t* _d);
uint32_t Pack_EJM4_j1939v8_5(const EJM4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BJM4_j1939v8_5(BJM4_t* _m, const uint8_t* _d);
uint32_t Pack_BJM4_j1939v8_5(const BJM4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EOI_j1939v8_5(EOI_t* _m, const uint8_t* _d);
uint32_t Pack_EOI_j1939v8_5(const EOI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GC1_j1939v8_5(GC1_t* _m, const uint8_t* _d);
uint32_t Pack_GC1_j1939v8_5(const GC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VREP_j1939v8_5(VREP_t* _m, const uint8_t* _d);
uint32_t Pack_VREP_j1939v8_5(const VREP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_OEL_j1939v8_5(OEL_t* _m, const uint8_t* _d);
uint32_t Pack_OEL_j1939v8_5(const OEL_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BJM1_j1939v8_5(BJM1_t* _m, const uint8_t* _d);
uint32_t Pack_BJM1_j1939v8_5(const BJM1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EJM1_j1939v8_5(EJM1_t* _m, const uint8_t* _d);
uint32_t Pack_EJM1_j1939v8_5(const EJM1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BJM2_j1939v8_5(BJM2_t* _m, const uint8_t* _d);
uint32_t Pack_BJM2_j1939v8_5(const BJM2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EJM2_j1939v8_5(EJM2_t* _m, const uint8_t* _d);
uint32_t Pack_EJM2_j1939v8_5(const EJM2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BJM3_j1939v8_5(BJM3_t* _m, const uint8_t* _d);
uint32_t Pack_BJM3_j1939v8_5(const BJM3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EJM3_j1939v8_5(EJM3_t* _m, const uint8_t* _d);
uint32_t Pack_EJM3_j1939v8_5(const EJM3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_HBS_j1939v8_5(HBS_t* _m, const uint8_t* _d);
uint32_t Pack_HBS_j1939v8_5(const HBS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BUSC_j1939v8_5(BUSC_t* _m, const uint8_t* _d);
uint32_t Pack_BUSC_j1939v8_5(const BUSC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BGSC_j1939v8_5(BGSC_t* _m, const uint8_t* _d);
uint32_t Pack_BGSC_j1939v8_5(const BGSC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BPCAC_j1939v8_5(BPCAC_t* _m, const uint8_t* _d);
uint32_t Pack_BPCAC_j1939v8_5(const BPCAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BPBAC_j1939v8_5(BPBAC_t* _m, const uint8_t* _d);
uint32_t Pack_BPBAC_j1939v8_5(const BPBAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BPAAC_j1939v8_5(BPAAC_t* _m, const uint8_t* _d);
uint32_t Pack_BPAAC_j1939v8_5(const BPAAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BAAC_j1939v8_5(BAAC_t* _m, const uint8_t* _d);
uint32_t Pack_BAAC_j1939v8_5(const BAAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_UTACE_j1939v8_5(UTACE_t* _m, const uint8_t* _d);
uint32_t Pack_UTACE_j1939v8_5(const UTACE_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_UPCACR_j1939v8_5(UPCACR_t* _m, const uint8_t* _d);
uint32_t Pack_UPCACR_j1939v8_5(const UPCACR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_UPCACP_j1939v8_5(UPCACP_t* _m, const uint8_t* _d);
uint32_t Pack_UPCACP_j1939v8_5(const UPCACP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_UPCAC_j1939v8_5(UPCAC_t* _m, const uint8_t* _d);
uint32_t Pack_UPCAC_j1939v8_5(const UPCAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_UPBACR_j1939v8_5(UPBACR_t* _m, const uint8_t* _d);
uint32_t Pack_UPBACR_j1939v8_5(const UPBACR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_UPBACP_j1939v8_5(UPBACP_t* _m, const uint8_t* _d);
uint32_t Pack_UPBACP_j1939v8_5(const UPBACP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_UPBAC_j1939v8_5(UPBAC_t* _m, const uint8_t* _d);
uint32_t Pack_UPBAC_j1939v8_5(const UPBAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_UPACCR_j1939v8_5(UPACCR_t* _m, const uint8_t* _d);
uint32_t Pack_UPACCR_j1939v8_5(const UPACCR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_UPAACP_j1939v8_5(UPAACP_t* _m, const uint8_t* _d);
uint32_t Pack_UPAACP_j1939v8_5(const UPAACP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_UPAAC_j1939v8_5(UPAAC_t* _m, const uint8_t* _d);
uint32_t Pack_UPAAC_j1939v8_5(const UPAAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_UTACR_j1939v8_5(UTACR_t* _m, const uint8_t* _d);
uint32_t Pack_UTACR_j1939v8_5(const UTACR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_UTACP_j1939v8_5(UTACP_t* _m, const uint8_t* _d);
uint32_t Pack_UTACP_j1939v8_5(const UTACP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_UAAC_j1939v8_5(UAAC_t* _m, const uint8_t* _d);
uint32_t Pack_UAAC_j1939v8_5(const UAAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GTACE_j1939v8_5(GTACE_t* _m, const uint8_t* _d);
uint32_t Pack_GTACE_j1939v8_5(const GTACE_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPCACR_j1939v8_5(GPCACR_t* _m, const uint8_t* _d);
uint32_t Pack_GPCACR_j1939v8_5(const GPCACR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPCACP_j1939v8_5(GPCACP_t* _m, const uint8_t* _d);
uint32_t Pack_GPCACP_j1939v8_5(const GPCACP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPCAC_j1939v8_5(GPCAC_t* _m, const uint8_t* _d);
uint32_t Pack_GPCAC_j1939v8_5(const GPCAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPBACRP_j1939v8_5(GPBACRP_t* _m, const uint8_t* _d);
uint32_t Pack_GPBACRP_j1939v8_5(const GPBACRP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPBACP_j1939v8_5(GPBACP_t* _m, const uint8_t* _d);
uint32_t Pack_GPBACP_j1939v8_5(const GPBACP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPBAC_j1939v8_5(GPBAC_t* _m, const uint8_t* _d);
uint32_t Pack_GPBAC_j1939v8_5(const GPBAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPAACR_j1939v8_5(GPAACR_t* _m, const uint8_t* _d);
uint32_t Pack_GPAACR_j1939v8_5(const GPAACR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPAACP_j1939v8_5(GPAACP_t* _m, const uint8_t* _d);
uint32_t Pack_GPAACP_j1939v8_5(const GPAACP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPAAC_j1939v8_5(GPAAC_t* _m, const uint8_t* _d);
uint32_t Pack_GPAAC_j1939v8_5(const GPAAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GTACR_j1939v8_5(GTACR_t* _m, const uint8_t* _d);
uint32_t Pack_GTACR_j1939v8_5(const GTACR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GTACP_j1939v8_5(GTACP_t* _m, const uint8_t* _d);
uint32_t Pack_GTACP_j1939v8_5(const GTACP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GAAC_j1939v8_5(GAAC_t* _m, const uint8_t* _d);
uint32_t Pack_GAAC_j1939v8_5(const GAAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LCMD_j1939v8_5(LCMD_t* _m, const uint8_t* _d);
uint32_t Pack_LCMD_j1939v8_5(const LCMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ASC5_j1939v8_5(ASC5_t* _m, const uint8_t* _d);
uint32_t Pack_ASC5_j1939v8_5(const ASC5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ASC1_j1939v8_5(ASC1_t* _m, const uint8_t* _d);
uint32_t Pack_ASC1_j1939v8_5(const ASC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TCO1_j1939v8_5(TCO1_t* _m, const uint8_t* _d);
uint32_t Pack_TCO1_j1939v8_5(const TCO1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LTP_j1939v8_5(LTP_t* _m, const uint8_t* _d);
uint32_t Pack_LTP_j1939v8_5(const LTP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LBC_j1939v8_5(LBC_t* _m, const uint8_t* _d);
uint32_t Pack_LBC_j1939v8_5(const LBC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LMP_j1939v8_5(LMP_t* _m, const uint8_t* _d);
uint32_t Pack_LMP_j1939v8_5(const LMP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LSP_j1939v8_5(LSP_t* _m, const uint8_t* _d);
uint32_t Pack_LSP_j1939v8_5(const LSP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LVD_j1939v8_5(LVD_t* _m, const uint8_t* _d);
uint32_t Pack_LVD_j1939v8_5(const LVD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FLI1_j1939v8_5(FLI1_t* _m, const uint8_t* _d);
uint32_t Pack_FLI1_j1939v8_5(const FLI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TFAC_j1939v8_5(TFAC_t* _m, const uint8_t* _d);
uint32_t Pack_TFAC_j1939v8_5(const TFAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1SCRAI2_j1939v8_5(A1SCRAI2_t* _m, const uint8_t* _d);
uint32_t Pack_A1SCRAI2_j1939v8_5(const A1SCRAI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2SCRAI2_j1939v8_5(A2SCRAI2_t* _m, const uint8_t* _d);
uint32_t Pack_A2SCRAI2_j1939v8_5(const A2SCRAI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ENGSC_j1939v8_5(ENGSC_t* _m, const uint8_t* _d);
uint32_t Pack_ENGSC_j1939v8_5(const ENGSC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESA_j1939v8_5(ESA_t* _m, const uint8_t* _d);
uint32_t Pack_ESA_j1939v8_5(const ESA_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AF3_j1939v8_5(AF3_t* _m, const uint8_t* _d);
uint32_t Pack_AF3_j1939v8_5(const AF3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EBCC_j1939v8_5(EBCC_t* _m, const uint8_t* _d);
uint32_t Pack_EBCC_j1939v8_5(const EBCC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC9_j1939v8_5(EEC9_t* _m, const uint8_t* _d);
uint32_t Pack_EEC9_j1939v8_5(const EEC9_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ACCVC_j1939v8_5(ACCVC_t* _m, const uint8_t* _d);
uint32_t Pack_ACCVC_j1939v8_5(const ACCVC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCVC_j1939v8_5(ECCVC_t* _m, const uint8_t* _d);
uint32_t Pack_ECCVC_j1939v8_5(const ECCVC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GFI3_j1939v8_5(GFI3_t* _m, const uint8_t* _d);
uint32_t Pack_GFI3_j1939v8_5(const GFI3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC6_j1939v8_5(EEC6_t* _m, const uint8_t* _d);
uint32_t Pack_EEC6_j1939v8_5(const EEC6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ACC1_j1939v8_5(ACC1_t* _m, const uint8_t* _d);
uint32_t Pack_ACC1_j1939v8_5(const ACC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LVDD_j1939v8_5(LVDD_t* _m, const uint8_t* _d);
uint32_t Pack_LVDD_j1939v8_5(const LVDD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI1_j1939v8_5(ECCAI1_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI1_j1939v8_5(const ECCAI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI2_j1939v8_5(ECCAI2_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI2_j1939v8_5(const ECCAI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI3_j1939v8_5(ECCAI3_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI3_j1939v8_5(const ECCAI3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI4_j1939v8_5(ECCAI4_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI4_j1939v8_5(const ECCAI4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI5_j1939v8_5(ECCAI5_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI5_j1939v8_5(const ECCAI5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI6_j1939v8_5(ECCAI6_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI6_j1939v8_5(const ECCAI6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI7_j1939v8_5(ECCAI7_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI7_j1939v8_5(const ECCAI7_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI8_j1939v8_5(ECCAI8_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI8_j1939v8_5(const ECCAI8_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI9_j1939v8_5(ECCAI9_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI9_j1939v8_5(const ECCAI9_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI10_j1939v8_5(ECCAI10_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI10_j1939v8_5(const ECCAI10_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI11_j1939v8_5(ECCAI11_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI11_j1939v8_5(const ECCAI11_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI12_j1939v8_5(ECCAI12_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI12_j1939v8_5(const ECCAI12_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI13_j1939v8_5(ECCAI13_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI13_j1939v8_5(const ECCAI13_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI14_j1939v8_5(ECCAI14_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI14_j1939v8_5(const ECCAI14_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI15_j1939v8_5(ECCAI15_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI15_j1939v8_5(const ECCAI15_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI16_j1939v8_5(ECCAI16_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI16_j1939v8_5(const ECCAI16_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI17_j1939v8_5(ECCAI17_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI17_j1939v8_5(const ECCAI17_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI18_j1939v8_5(ECCAI18_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI18_j1939v8_5(const ECCAI18_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI19_j1939v8_5(ECCAI19_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI19_j1939v8_5(const ECCAI19_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECCAI20_j1939v8_5(ECCAI20_t* _m, const uint8_t* _d);
uint32_t Pack_ECCAI20_j1939v8_5(const ECCAI20_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CDC_j1939v8_5(CDC_t* _m, const uint8_t* _d);
uint32_t Pack_CDC_j1939v8_5(const CDC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DLS_j1939v8_5(DLS_t* _m, const uint8_t* _d);
uint32_t Pack_DLS_j1939v8_5(const DLS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VEP6_j1939v8_5(VEP6_t* _m, const uint8_t* _d);
uint32_t Pack_VEP6_j1939v8_5(const VEP6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PLT2_j1939v8_5(PLT2_t* _m, const uint8_t* _d);
uint32_t Pack_PLT2_j1939v8_5(const PLT2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PLT1_j1939v8_5(PLT1_t* _m, const uint8_t* _d);
uint32_t Pack_PLT1_j1939v8_5(const PLT1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AFT1PSI3_j1939v8_5(AFT1PSI3_t* _m, const uint8_t* _d);
uint32_t Pack_AFT1PSI3_j1939v8_5(const AFT1PSI3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFIMRPI3_j1939v8_5(EFIMRPI3_t* _m, const uint8_t* _d);
uint32_t Pack_EFIMRPI3_j1939v8_5(const EFIMRPI3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFIMRPI2_j1939v8_5(EFIMRPI2_t* _m, const uint8_t* _d);
uint32_t Pack_EFIMRPI2_j1939v8_5(const EFIMRPI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GFSVI_j1939v8_5(GFSVI_t* _m, const uint8_t* _d);
uint32_t Pack_GFSVI_j1939v8_5(const GFSVI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EOMDI2_j1939v8_5(EOMDI2_t* _m, const uint8_t* _d);
uint32_t Pack_EOMDI2_j1939v8_5(const EOMDI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EOMDI1_j1939v8_5(EOMDI1_t* _m, const uint8_t* _d);
uint32_t Pack_EOMDI1_j1939v8_5(const EOMDI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GFSP2_j1939v8_5(GFSP2_t* _m, const uint8_t* _d);
uint32_t Pack_GFSP2_j1939v8_5(const GFSP2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GFSP1_j1939v8_5(GFSP1_t* _m, const uint8_t* _d);
uint32_t Pack_GFSP1_j1939v8_5(const GFSP1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFIMRPI1_j1939v8_5(EFIMRPI1_t* _m, const uint8_t* _d);
uint32_t Pack_EFIMRPI1_j1939v8_5(const EFIMRPI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VSL_j1939v8_5(VSL_t* _m, const uint8_t* _d);
uint32_t Pack_VSL_j1939v8_5(const VSL_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETAPC_j1939v8_5(ETAPC_t* _m, const uint8_t* _d);
uint32_t Pack_ETAPC_j1939v8_5(const ETAPC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETAP_j1939v8_5(ETAP_t* _m, const uint8_t* _d);
uint32_t Pack_ETAP_j1939v8_5(const ETAP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETC10_j1939v8_5(ETC10_t* _m, const uint8_t* _d);
uint32_t Pack_ETC10_j1939v8_5(const ETC10_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETC11_j1939v8_5(ETC11_t* _m, const uint8_t* _d);
uint32_t Pack_ETC11_j1939v8_5(const ETC11_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LLRE_j1939v8_5(LLRE_t* _m, const uint8_t* _d);
uint32_t Pack_LLRE_j1939v8_5(const LLRE_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFL_P11_j1939v8_5(EFL_P11_t* _m, const uint8_t* _d);
uint32_t Pack_EFL_P11_j1939v8_5(const EFL_P11_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EMAP_j1939v8_5(EMAP_t* _m, const uint8_t* _d);
uint32_t Pack_EMAP_j1939v8_5(const EMAP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFL_P10_j1939v8_5(EFL_P10_t* _m, const uint8_t* _d);
uint32_t Pack_EFL_P10_j1939v8_5(const EFL_P10_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_OCSI_j1939v8_5(OCSI_t* _m, const uint8_t* _d);
uint32_t Pack_OCSI_j1939v8_5(const OCSI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BDS_j1939v8_5(BDS_t* _m, const uint8_t* _d);
uint32_t Pack_BDS_j1939v8_5(const BDS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1SCREGT1_j1939v8_5(A1SCREGT1_t* _m, const uint8_t* _d);
uint32_t Pack_A1SCREGT1_j1939v8_5(const A1SCREGT1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EAI_j1939v8_5(EAI_t* _m, const uint8_t* _d);
uint32_t Pack_EAI_j1939v8_5(const EAI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GCVW_j1939v8_5(GCVW_t* _m, const uint8_t* _d);
uint32_t Pack_GCVW_j1939v8_5(const GCVW_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AGW_j1939v8_5(AGW_t* _m, const uint8_t* _d);
uint32_t Pack_AGW_j1939v8_5(const AGW_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EGRBV_j1939v8_5(EGRBV_t* _m, const uint8_t* _d);
uint32_t Pack_EGRBV_j1939v8_5(const EGRBV_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EBS11_j1939v8_5(EBS11_t* _m, const uint8_t* _d);
uint32_t Pack_EBS11_j1939v8_5(const EBS11_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EBS21_j1939v8_5(EBS21_t* _m, const uint8_t* _d);
uint32_t Pack_EBS21_j1939v8_5(const EBS21_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CAM11_j1939v8_5(CAM11_t* _m, const uint8_t* _d);
uint32_t Pack_CAM11_j1939v8_5(const CAM11_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CAM21_j1939v8_5(CAM21_t* _m, const uint8_t* _d);
uint32_t Pack_CAM21_j1939v8_5(const CAM21_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPV4_j1939v8_5(GPV4_t* _m, const uint8_t* _d);
uint32_t Pack_GPV4_j1939v8_5(const GPV4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC16_j1939v8_5(EEC16_t* _m, const uint8_t* _d);
uint32_t Pack_EEC16_j1939v8_5(const EEC16_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TSIC_j1939v8_5(TSIC_t* _m, const uint8_t* _d);
uint32_t Pack_TSIC_j1939v8_5(const TSIC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_HSC1_j1939v8_5(HSC1_t* _m, const uint8_t* _d);
uint32_t Pack_HSC1_j1939v8_5(const HSC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AFTSC_j1939v8_5(AFTSC_t* _m, const uint8_t* _d);
uint32_t Pack_AFTSC_j1939v8_5(const AFTSC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TCCI_j1939v8_5(TCCI_t* _m, const uint8_t* _d);
uint32_t Pack_TCCI_j1939v8_5(const TCCI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCIC_j1939v8_5(PCIC_t* _m, const uint8_t* _d);
uint32_t Pack_PCIC_j1939v8_5(const PCIC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AFT1PSC_j1939v8_5(AFT1PSC_t* _m, const uint8_t* _d);
uint32_t Pack_AFT1PSC_j1939v8_5(const AFT1PSC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CM2_j1939v8_5(CM2_t* _m, const uint8_t* _d);
uint32_t Pack_CM2_j1939v8_5(const CM2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SPOC_j1939v8_5(SPOC_t* _m, const uint8_t* _d);
uint32_t Pack_SPOC_j1939v8_5(const SPOC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESR_j1939v8_5(ESR_t* _m, const uint8_t* _d);
uint32_t Pack_ESR_j1939v8_5(const ESR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RBR_j1939v8_5(RBR_t* _m, const uint8_t* _d);
uint32_t Pack_RBR_j1939v8_5(const RBR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RGE24_j1939v8_5(RGE24_t* _m, const uint8_t* _d);
uint32_t Pack_RGE24_j1939v8_5(const RGE24_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RGE12_j1939v8_5(RGE12_t* _m, const uint8_t* _d);
uint32_t Pack_RGE12_j1939v8_5(const RGE12_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CCP_DTO_j1939v8_5(CCP_DTO_t* _m, const uint8_t* _d);
uint32_t Pack_CCP_DTO_j1939v8_5(const CCP_DTO_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CCP_CRO_j1939v8_5(CCP_CRO_t* _m, const uint8_t* _d);
uint32_t Pack_CCP_CRO_j1939v8_5(const CCP_CRO_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SCCCM_j1939v8_5(SCCCM_t* _m, const uint8_t* _d);
uint32_t Pack_SCCCM_j1939v8_5(const SCCCM_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SCMCC_j1939v8_5(SCMCC_t* _m, const uint8_t* _d);
uint32_t Pack_SCMCC_j1939v8_5(const SCMCC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECC_j1939v8_5(ECC_t* _m, const uint8_t* _d);
uint32_t Pack_ECC_j1939v8_5(const ECC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SFC_j1939v8_5(SFC_t* _m, const uint8_t* _d);
uint32_t Pack_SFC_j1939v8_5(const SFC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VLS1_j1939v8_5(VLS1_t* _m, const uint8_t* _d);
uint32_t Pack_VLS1_j1939v8_5(const VLS1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_HCDI1_j1939v8_5(HCDI1_t* _m, const uint8_t* _d);
uint32_t Pack_HCDI1_j1939v8_5(const HCDI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LVDSOM_j1939v8_5(LVDSOM_t* _m, const uint8_t* _d);
uint32_t Pack_LVDSOM_j1939v8_5(const LVDSOM_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_NCS_j1939v8_5(NCS_t* _m, const uint8_t* _d);
uint32_t Pack_NCS_j1939v8_5(const NCS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_NC1_j1939v8_5(NC1_t* _m, const uint8_t* _d);
uint32_t Pack_NC1_j1939v8_5(const NC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM18_j1939v8_5(GPM18_t* _m, const uint8_t* _d);
uint32_t Pack_GPM18_j1939v8_5(const GPM18_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PMI_j1939v8_5(PMI_t* _m, const uint8_t* _d);
uint32_t Pack_PMI_j1939v8_5(const PMI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AUXIO7_j1939v8_5(AUXIO7_t* _m, const uint8_t* _d);
uint32_t Pack_AUXIO7_j1939v8_5(const AUXIO7_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AUXIO6_j1939v8_5(AUXIO6_t* _m, const uint8_t* _d);
uint32_t Pack_AUXIO6_j1939v8_5(const AUXIO6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM29_j1939v8_5(DM29_t* _m, const uint8_t* _d);
uint32_t Pack_DM29_j1939v8_5(const DM29_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM34_j1939v8_5(DM34_t* _m, const uint8_t* _d);
uint32_t Pack_DM34_j1939v8_5(const DM34_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM32_j1939v8_5(DM32_t* _m, const uint8_t* _d);
uint32_t Pack_DM32_j1939v8_5(const DM32_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM31_j1939v8_5(DM31_t* _m, const uint8_t* _d);
uint32_t Pack_DM31_j1939v8_5(const DM31_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AUXIO4_j1939v8_5(AUXIO4_t* _m, const uint8_t* _d);
uint32_t Pack_AUXIO4_j1939v8_5(const AUXIO4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AUXIO3_j1939v8_5(AUXIO3_t* _m, const uint8_t* _d);
uint32_t Pack_AUXIO3_j1939v8_5(const AUXIO3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AUXIO2_j1939v8_5(AUXIO2_t* _m, const uint8_t* _d);
uint32_t Pack_AUXIO2_j1939v8_5(const AUXIO2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DISP1_j1939v8_5(DISP1_t* _m, const uint8_t* _d);
uint32_t Pack_DISP1_j1939v8_5(const DISP1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FLIC_j1939v8_5(FLIC_t* _m, const uint8_t* _d);
uint32_t Pack_FLIC_j1939v8_5(const FLIC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CFS_j1939v8_5(CFS_t* _m, const uint8_t* _d);
uint32_t Pack_CFS_j1939v8_5(const CFS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FSC_j1939v8_5(FSC_t* _m, const uint8_t* _d);
uint32_t Pack_FSC_j1939v8_5(const FSC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GMS_j1939v8_5(GMS_t* _m, const uint8_t* _d);
uint32_t Pack_GMS_j1939v8_5(const GMS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GSC_j1939v8_5(GSC_t* _m, const uint8_t* _d);
uint32_t Pack_GSC_j1939v8_5(const GSC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TPRS_j1939v8_5(TPRS_t* _m, const uint8_t* _d);
uint32_t Pack_TPRS_j1939v8_5(const TPRS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PLM_j1939v8_5(PLM_t* _m, const uint8_t* _d);
uint32_t Pack_PLM_j1939v8_5(const PLM_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CIM_j1939v8_5(CIM_t* _m, const uint8_t* _d);
uint32_t Pack_CIM_j1939v8_5(const CIM_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM1_j1939v8_5(PCM1_t* _m, const uint8_t* _d);
uint32_t Pack_PCM1_j1939v8_5(const PCM1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM2_j1939v8_5(PCM2_t* _m, const uint8_t* _d);
uint32_t Pack_PCM2_j1939v8_5(const PCM2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM3_j1939v8_5(PCM3_t* _m, const uint8_t* _d);
uint32_t Pack_PCM3_j1939v8_5(const PCM3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM4_j1939v8_5(PCM4_t* _m, const uint8_t* _d);
uint32_t Pack_PCM4_j1939v8_5(const PCM4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM5_j1939v8_5(PCM5_t* _m, const uint8_t* _d);
uint32_t Pack_PCM5_j1939v8_5(const PCM5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM6_j1939v8_5(PCM6_t* _m, const uint8_t* _d);
uint32_t Pack_PCM6_j1939v8_5(const PCM6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM7_j1939v8_5(PCM7_t* _m, const uint8_t* _d);
uint32_t Pack_PCM7_j1939v8_5(const PCM7_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM8_j1939v8_5(PCM8_t* _m, const uint8_t* _d);
uint32_t Pack_PCM8_j1939v8_5(const PCM8_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM9_j1939v8_5(PCM9_t* _m, const uint8_t* _d);
uint32_t Pack_PCM9_j1939v8_5(const PCM9_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM10_j1939v8_5(PCM10_t* _m, const uint8_t* _d);
uint32_t Pack_PCM10_j1939v8_5(const PCM10_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM11_j1939v8_5(PCM11_t* _m, const uint8_t* _d);
uint32_t Pack_PCM11_j1939v8_5(const PCM11_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM12_j1939v8_5(PCM12_t* _m, const uint8_t* _d);
uint32_t Pack_PCM12_j1939v8_5(const PCM12_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM13_j1939v8_5(PCM13_t* _m, const uint8_t* _d);
uint32_t Pack_PCM13_j1939v8_5(const PCM13_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM14_j1939v8_5(PCM14_t* _m, const uint8_t* _d);
uint32_t Pack_PCM14_j1939v8_5(const PCM14_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM15_j1939v8_5(PCM15_t* _m, const uint8_t* _d);
uint32_t Pack_PCM15_j1939v8_5(const PCM15_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PCM16_j1939v8_5(PCM16_t* _m, const uint8_t* _d);
uint32_t Pack_PCM16_j1939v8_5(const PCM16_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM21_j1939v8_5(DM21_t* _m, const uint8_t* _d);
uint32_t Pack_DM21_j1939v8_5(const DM21_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM22_j1939v8_5(DM22_t* _m, const uint8_t* _d);
uint32_t Pack_DM22_j1939v8_5(const DM22_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPV3_j1939v8_5(GPV3_t* _m, const uint8_t* _d);
uint32_t Pack_GPV3_j1939v8_5(const GPV3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPV2_j1939v8_5(GPV2_t* _m, const uint8_t* _d);
uint32_t Pack_GPV2_j1939v8_5(const GPV2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPV1_j1939v8_5(GPV1_t* _m, const uint8_t* _d);
uint32_t Pack_GPV1_j1939v8_5(const GPV1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETPDT_j1939v8_5(ETPDT_t* _m, const uint8_t* _d);
uint32_t Pack_ETPDT_j1939v8_5(const ETPDT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETPCM_j1939v8_5(ETPCM_t* _m, const uint8_t* _d);
uint32_t Pack_ETPCM_j1939v8_5(const ETPCM_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RQST2_j1939v8_5(RQST2_t* _m, const uint8_t* _d);
uint32_t Pack_RQST2_j1939v8_5(const RQST2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_XFER_j1939v8_5(XFER_t* _m, const uint8_t* _d);
uint32_t Pack_XFER_j1939v8_5(const XFER_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PD_j1939v8_5(PD_t* _m, const uint8_t* _d);
uint32_t Pack_PD_j1939v8_5(const PD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_REQRR_j1939v8_5(REQRR_t* _m, const uint8_t* _d);
uint32_t Pack_REQRR_j1939v8_5(const REQRR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_KWP4_j1939v8_5(KWP4_t* _m, const uint8_t* _d);
uint32_t Pack_KWP4_j1939v8_5(const KWP4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_KWP3_j1939v8_5(KWP3_t* _m, const uint8_t* _d);
uint32_t Pack_KWP3_j1939v8_5(const KWP3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CTL_j1939v8_5(CTL_t* _m, const uint8_t* _d);
uint32_t Pack_CTL_j1939v8_5(const CTL_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CL_j1939v8_5(CL_t* _m, const uint8_t* _d);
uint32_t Pack_CL_j1939v8_5(const CL_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM18_j1939v8_5(DM18_t* _m, const uint8_t* _d);
uint32_t Pack_DM18_j1939v8_5(const DM18_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TDA_j1939v8_5(TDA_t* _m, const uint8_t* _d);
uint32_t Pack_TDA_j1939v8_5(const TDA_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM17_j1939v8_5(DM17_t* _m, const uint8_t* _d);
uint32_t Pack_DM17_j1939v8_5(const DM17_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM16_j1939v8_5(DM16_t* _m, const uint8_t* _d);
uint32_t Pack_DM16_j1939v8_5(const DM16_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM15_j1939v8_5(DM15_t* _m, const uint8_t* _d);
uint32_t Pack_DM15_j1939v8_5(const DM15_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM14_j1939v8_5(DM14_t* _m, const uint8_t* _d);
uint32_t Pack_DM14_j1939v8_5(const DM14_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_KWP2_j1939v8_5(KWP2_t* _m, const uint8_t* _d);
uint32_t Pack_KWP2_j1939v8_5(const KWP2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_KWP1_j1939v8_5(KWP1_t* _m, const uint8_t* _d);
uint32_t Pack_KWP1_j1939v8_5(const KWP1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM13_j1939v8_5(DM13_t* _m, const uint8_t* _d);
uint32_t Pack_DM13_j1939v8_5(const DM13_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CM1_j1939v8_5(CM1_t* _m, const uint8_t* _d);
uint32_t Pack_CM1_j1939v8_5(const CM1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM21_j1939v8_5(GPM21_t* _m, const uint8_t* _d);
uint32_t Pack_GPM21_j1939v8_5(const GPM21_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM11_j1939v8_5(GPM11_t* _m, const uint8_t* _d);
uint32_t Pack_GPM11_j1939v8_5(const GPM11_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM07_j1939v8_5(DM07_t* _m, const uint8_t* _d);
uint32_t Pack_DM07_j1939v8_5(const DM07_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RGE11_j1939v8_5(RGE11_t* _m, const uint8_t* _d);
uint32_t Pack_RGE11_j1939v8_5(const RGE11_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RGE21_j1939v8_5(RGE21_t* _m, const uint8_t* _d);
uint32_t Pack_RGE21_j1939v8_5(const RGE21_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VT12_j1939v8_5(VT12_t* _m, const uint8_t* _d);
uint32_t Pack_VT12_j1939v8_5(const VT12_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VT21_j1939v8_5(VT21_t* _m, const uint8_t* _d);
uint32_t Pack_VT21_j1939v8_5(const VT21_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ACKM_j1939v8_5(ACKM_t* _m, const uint8_t* _d);
uint32_t Pack_ACKM_j1939v8_5(const ACKM_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RQST_j1939v8_5(RQST_t* _m, const uint8_t* _d);
uint32_t Pack_RQST_j1939v8_5(const RQST_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TPDT_j1939v8_5(TPDT_t* _m, const uint8_t* _d);
uint32_t Pack_TPDT_j1939v8_5(const TPDT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TPCMxx_j1939v8_5(TPCMxx_t* _m, const uint8_t* _d);
uint32_t Pack_TPCMxx_j1939v8_5(const TPCMxx_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_Nxx_j1939v8_5(Nxx_t* _m, const uint8_t* _d);
uint32_t Pack_Nxx_j1939v8_5(const Nxx_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AC_j1939v8_5(AC_t* _m, const uint8_t* _d);
uint32_t Pack_AC_j1939v8_5(const AC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PropA_j1939v8_5(PropA_t* _m, const uint8_t* _d);
uint32_t Pack_PropA_j1939v8_5(const PropA_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ERC1_j1939v8_5(ERC1_t* _m, const uint8_t* _d);
uint32_t Pack_ERC1_j1939v8_5(const ERC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EBC1_j1939v8_5(EBC1_t* _m, const uint8_t* _d);
uint32_t Pack_EBC1_j1939v8_5(const EBC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETC2_j1939v8_5(ETC2_t* _m, const uint8_t* _d);
uint32_t Pack_ETC2_j1939v8_5(const ETC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EAC1_j1939v8_5(EAC1_t* _m, const uint8_t* _d);
uint32_t Pack_EAC1_j1939v8_5(const EAC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_HPG_j1939v8_5(HPG_t* _m, const uint8_t* _d);
uint32_t Pack_HPG_j1939v8_5(const HPG_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VDC2_j1939v8_5(VDC2_t* _m, const uint8_t* _d);
uint32_t Pack_VDC2_j1939v8_5(const VDC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESC1_j1939v8_5(ESC1_t* _m, const uint8_t* _d);
uint32_t Pack_ESC1_j1939v8_5(const ESC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1IG1_j1939v8_5(AT1IG1_t* _m, const uint8_t* _d);
uint32_t Pack_AT1IG1_j1939v8_5(const AT1IG1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1OG1_j1939v8_5(AT1OG1_t* _m, const uint8_t* _d);
uint32_t Pack_AT1OG1_j1939v8_5(const AT1OG1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2IG1_j1939v8_5(AT2IG1_t* _m, const uint8_t* _d);
uint32_t Pack_AT2IG1_j1939v8_5(const AT2IG1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2OG1_j1939v8_5(AT2OG1_t* _m, const uint8_t* _d);
uint32_t Pack_AT2OG1_j1939v8_5(const AT2OG1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FWSS1_j1939v8_5(FWSS1_t* _m, const uint8_t* _d);
uint32_t Pack_FWSS1_j1939v8_5(const FWSS1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM17_j1939v8_5(GPM17_t* _m, const uint8_t* _d);
uint32_t Pack_GPM17_j1939v8_5(const GPM17_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SAS_j1939v8_5(SAS_t* _m, const uint8_t* _d);
uint32_t Pack_SAS_j1939v8_5(const SAS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EBS26_j1939v8_5(EBS26_t* _m, const uint8_t* _d);
uint32_t Pack_EBS26_j1939v8_5(const EBS26_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EBS25_j1939v8_5(EBS25_t* _m, const uint8_t* _d);
uint32_t Pack_EBS25_j1939v8_5(const EBS25_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESSI_j1939v8_5(ESSI_t* _m, const uint8_t* _d);
uint32_t Pack_ESSI_j1939v8_5(const ESSI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_MSS_j1939v8_5(MSS_t* _m, const uint8_t* _d);
uint32_t Pack_MSS_j1939v8_5(const MSS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETCC_j1939v8_5(ETCC_t* _m, const uint8_t* _d);
uint32_t Pack_ETCC_j1939v8_5(const ETCC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1IG3_j1939v8_5(AT1IG3_t* _m, const uint8_t* _d);
uint32_t Pack_AT1IG3_j1939v8_5(const AT1IG3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1OG3_j1939v8_5(AT1OG3_t* _m, const uint8_t* _d);
uint32_t Pack_AT1OG3_j1939v8_5(const AT1OG3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2IS2_j1939v8_5(AT2IS2_t* _m, const uint8_t* _d);
uint32_t Pack_AT2IS2_j1939v8_5(const AT2IS2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2OS2_j1939v8_5(AT2OS2_t* _m, const uint8_t* _d);
uint32_t Pack_AT2OS2_j1939v8_5(const AT2OS2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ADASIS1_j1939v8_5(ADASIS1_t* _m, const uint8_t* _d);
uint32_t Pack_ADASIS1_j1939v8_5(const ADASIS1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ADASIS2_j1939v8_5(ADASIS2_t* _m, const uint8_t* _d);
uint32_t Pack_ADASIS2_j1939v8_5(const ADASIS2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ADASIS3_j1939v8_5(ADASIS3_t* _m, const uint8_t* _d);
uint32_t Pack_ADASIS3_j1939v8_5(const ADASIS3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TGFI_j1939v8_5(TGFI_t* _m, const uint8_t* _d);
uint32_t Pack_TGFI_j1939v8_5(const TGFI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VEP3_j1939v8_5(VEP3_t* _m, const uint8_t* _d);
uint32_t Pack_VEP3_j1939v8_5(const VEP3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PLST2_j1939v8_5(PLST2_t* _m, const uint8_t* _d);
uint32_t Pack_PLST2_j1939v8_5(const PLST2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PLST1_j1939v8_5(PLST1_t* _m, const uint8_t* _d);
uint32_t Pack_PLST1_j1939v8_5(const PLST1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LFC2_j1939v8_5(LFC2_t* _m, const uint8_t* _d);
uint32_t Pack_LFC2_j1939v8_5(const LFC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2DEFT1_j1939v8_5(A2DEFT1_t* _m, const uint8_t* _d);
uint32_t Pack_A2DEFT1_j1939v8_5(const A2DEFT1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1T1I2_j1939v8_5(AT1T1I2_t* _m, const uint8_t* _d);
uint32_t Pack_AT1T1I2_j1939v8_5(const AT1T1I2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1DEFI2_j1939v8_5(A1DEFI2_t* _m, const uint8_t* _d);
uint32_t Pack_A1DEFI2_j1939v8_5(const A1DEFI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FLI3_j1939v8_5(FLI3_t* _m, const uint8_t* _d);
uint32_t Pack_FLI3_j1939v8_5(const FLI3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_OII_j1939v8_5(OII_t* _m, const uint8_t* _d);
uint32_t Pack_OII_j1939v8_5(const OII_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CCVS4_j1939v8_5(CCVS4_t* _m, const uint8_t* _d);
uint32_t Pack_CCVS4_j1939v8_5(const CCVS4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BCLC_j1939v8_5(BCLC_t* _m, const uint8_t* _d);
uint32_t Pack_BCLC_j1939v8_5(const BCLC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AF5_j1939v8_5(AF5_t* _m, const uint8_t* _d);
uint32_t Pack_AF5_j1939v8_5(const AF5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETCC3_j1939v8_5(ETCC3_t* _m, const uint8_t* _d);
uint32_t Pack_ETCC3_j1939v8_5(const ETCC3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ASI_j1939v8_5(ASI_t* _m, const uint8_t* _d);
uint32_t Pack_ASI_j1939v8_5(const ASI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2P1I_j1939v8_5(AT2P1I_t* _m, const uint8_t* _d);
uint32_t Pack_AT2P1I_j1939v8_5(const AT2P1I_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEBT3_j1939v8_5(EEBT3_t* _m, const uint8_t* _d);
uint32_t Pack_EEBT3_j1939v8_5(const EEBT3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEBT2_j1939v8_5(EEBT2_t* _m, const uint8_t* _d);
uint32_t Pack_EEBT2_j1939v8_5(const EEBT2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEBT1_j1939v8_5(EEBT1_t* _m, const uint8_t* _d);
uint32_t Pack_EEBT1_j1939v8_5(const EEBT1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_HEDPI_j1939v8_5(HEDPI_t* _m, const uint8_t* _d);
uint32_t Pack_HEDPI_j1939v8_5(const HEDPI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETCC2_j1939v8_5(ETCC2_t* _m, const uint8_t* _d);
uint32_t Pack_ETCC2_j1939v8_5(const ETCC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EHF2PC_j1939v8_5(EHF2PC_t* _m, const uint8_t* _d);
uint32_t Pack_EHF2PC_j1939v8_5(const EHF2PC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AF4_j1939v8_5(AF4_t* _m, const uint8_t* _d);
uint32_t Pack_AF4_j1939v8_5(const AF4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TIRE2_j1939v8_5(TIRE2_t* _m, const uint8_t* _d);
uint32_t Pack_TIRE2_j1939v8_5(const TIRE2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TCSI_j1939v8_5(TCSI_t* _m, const uint8_t* _d);
uint32_t Pack_TCSI_j1939v8_5(const TCSI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TWSSI_j1939v8_5(TWSSI_t* _m, const uint8_t* _d);
uint32_t Pack_TWSSI_j1939v8_5(const TWSSI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TSIS_j1939v8_5(TSIS_t* _m, const uint8_t* _d);
uint32_t Pack_TSIS_j1939v8_5(const TSIS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_MTI_j1939v8_5(MTI_t* _m, const uint8_t* _d);
uint32_t Pack_MTI_j1939v8_5(const MTI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2HI2_j1939v8_5(AT2HI2_t* _m, const uint8_t* _d);
uint32_t Pack_AT2HI2_j1939v8_5(const AT2HI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1HI2_j1939v8_5(AT1HI2_t* _m, const uint8_t* _d);
uint32_t Pack_AT1HI2_j1939v8_5(const AT1HI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SCRSC_j1939v8_5(SCRSC_t* _m, const uint8_t* _d);
uint32_t Pack_SCRSC_j1939v8_5(const SCRSC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC17_j1939v8_5(EEC17_t* _m, const uint8_t* _d);
uint32_t Pack_EEC17_j1939v8_5(const EEC17_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SCROII3_j1939v8_5(SCROII3_t* _m, const uint8_t* _d);
uint32_t Pack_SCROII3_j1939v8_5(const SCROII3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2SCRDSI3_j1939v8_5(A2SCRDSI3_t* _m, const uint8_t* _d);
uint32_t Pack_A2SCRDSI3_j1939v8_5(const A2SCRDSI3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1SCRDSI3_j1939v8_5(A1SCRDSI3_t* _m, const uint8_t* _d);
uint32_t Pack_A1SCRDSI3_j1939v8_5(const A1SCRDSI3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PWSI_j1939v8_5(PWSI_t* _m, const uint8_t* _d);
uint32_t Pack_PWSI_j1939v8_5(const PWSI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PLSS_j1939v8_5(PLSS_t* _m, const uint8_t* _d);
uint32_t Pack_PLSS_j1939v8_5(const PLSS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EGLI_j1939v8_5(EGLI_t* _m, const uint8_t* _d);
uint32_t Pack_EGLI_j1939v8_5(const EGLI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SCROII2_j1939v8_5(SCROII2_t* _m, const uint8_t* _d);
uint32_t Pack_SCROII2_j1939v8_5(const SCROII2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SCROII1_j1939v8_5(SCROII1_t* _m, const uint8_t* _d);
uint32_t Pack_SCROII1_j1939v8_5(const SCROII1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TCI7_j1939v8_5(TCI7_t* _m, const uint8_t* _d);
uint32_t Pack_TCI7_j1939v8_5(const TCI7_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AFT1PSI2_j1939v8_5(AFT1PSI2_t* _m, const uint8_t* _d);
uint32_t Pack_AFT1PSI2_j1939v8_5(const AFT1PSI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AFT1PSI1_j1939v8_5(AFT1PSI1_t* _m, const uint8_t* _d);
uint32_t Pack_AFT1PSI1_j1939v8_5(const AFT1PSI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PII_j1939v8_5(PII_t* _m, const uint8_t* _d);
uint32_t Pack_PII_j1939v8_5(const PII_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CFF_j1939v8_5(CFF_t* _m, const uint8_t* _d);
uint32_t Pack_CFF_j1939v8_5(const CFF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEN_j1939v8_5(EEN_t* _m, const uint8_t* _d);
uint32_t Pack_EEN_j1939v8_5(const EEN_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AFR_j1939v8_5(AFR_t* _m, const uint8_t* _d);
uint32_t Pack_AFR_j1939v8_5(const AFR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GFP2_j1939v8_5(GFP2_t* _m, const uint8_t* _d);
uint32_t Pack_GFP2_j1939v8_5(const GFP2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ASAI_j1939v8_5(ASAI_t* _m, const uint8_t* _d);
uint32_t Pack_ASAI_j1939v8_5(const ASAI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EI2_j1939v8_5(EI2_t* _m, const uint8_t* _d);
uint32_t Pack_EI2_j1939v8_5(const EI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESC2_j1939v8_5(ESC2_t* _m, const uint8_t* _d);
uint32_t Pack_ESC2_j1939v8_5(const ESC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AUI_j1939v8_5(AUI_t* _m, const uint8_t* _d);
uint32_t Pack_AUI_j1939v8_5(const AUI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_JS3LS_j1939v8_5(JS3LS_t* _m, const uint8_t* _d);
uint32_t Pack_JS3LS_j1939v8_5(const JS3LS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_JS2LS_j1939v8_5(JS2LS_t* _m, const uint8_t* _d);
uint32_t Pack_JS2LS_j1939v8_5(const JS2LS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_JS1LS_j1939v8_5(JS1LS_t* _m, const uint8_t* _d);
uint32_t Pack_JS1LS_j1939v8_5(const JS1LS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DD2_j1939v8_5(DD2_t* _m, const uint8_t* _d);
uint32_t Pack_DD2_j1939v8_5(const DD2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ICMSTS_j1939v8_5(ICMSTS_t* _m, const uint8_t* _d);
uint32_t Pack_ICMSTS_j1939v8_5(const ICMSTS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SPOS_j1939v8_5(SPOS_t* _m, const uint8_t* _d);
uint32_t Pack_SPOS_j1939v8_5(const SPOS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FPOS_j1939v8_5(FPOS_t* _m, const uint8_t* _d);
uint32_t Pack_FPOS_j1939v8_5(const FPOS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VEP5_j1939v8_5(VEP5_t* _m, const uint8_t* _d);
uint32_t Pack_VEP5_j1939v8_5(const VEP5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VEP4_j1939v8_5(VEP4_t* _m, const uint8_t* _d);
uint32_t Pack_VEP4_j1939v8_5(const VEP4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2S2_j1939v8_5(AT2S2_t* _m, const uint8_t* _d);
uint32_t Pack_AT2S2_j1939v8_5(const AT2S2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1S2_j1939v8_5(AT1S2_t* _m, const uint8_t* _d);
uint32_t Pack_AT1S2_j1939v8_5(const AT1S2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2ECMI_j1939v8_5(A2ECMI_t* _m, const uint8_t* _d);
uint32_t Pack_A2ECMI_j1939v8_5(const A2ECMI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1ECMI_j1939v8_5(A1ECMI_t* _m, const uint8_t* _d);
uint32_t Pack_A1ECMI_j1939v8_5(const A1ECMI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2SCRSI2_j1939v8_5(A2SCRSI2_t* _m, const uint8_t* _d);
uint32_t Pack_A2SCRSI2_j1939v8_5(const A2SCRSI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1SCRSI2_j1939v8_5(A1SCRSI2_t* _m, const uint8_t* _d);
uint32_t Pack_A1SCRSI2_j1939v8_5(const A1SCRSI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TRF3_j1939v8_5(TRF3_t* _m, const uint8_t* _d);
uint32_t Pack_TRF3_j1939v8_5(const TRF3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_HSS_j1939v8_5(HSS_t* _m, const uint8_t* _d);
uint32_t Pack_HSS_j1939v8_5(const HSS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GFI4_j1939v8_5(GFI4_t* _m, const uint8_t* _d);
uint32_t Pack_GFI4_j1939v8_5(const GFI4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2SCREGT2_j1939v8_5(A2SCREGT2_t* _m, const uint8_t* _d);
uint32_t Pack_A2SCREGT2_j1939v8_5(const A2SCREGT2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1SCREGT2_j1939v8_5(A1SCREGT2_t* _m, const uint8_t* _d);
uint32_t Pack_A1SCREGT2_j1939v8_5(const A1SCREGT2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM57_j1939v8_5(DM57_t* _m, const uint8_t* _d);
uint32_t Pack_DM57_j1939v8_5(const DM57_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC13_j1939v8_5(EEC13_t* _m, const uint8_t* _d);
uint32_t Pack_EEC13_j1939v8_5(const EEC13_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EF_TVI2_j1939v8_5(EF_TVI2_t* _m, const uint8_t* _d);
uint32_t Pack_EF_TVI2_j1939v8_5(const EF_TVI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEGR2A_j1939v8_5(EEGR2A_t* _m, const uint8_t* _d);
uint32_t Pack_EEGR2A_j1939v8_5(const EEGR2A_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEGR1A_j1939v8_5(EEGR1A_t* _m, const uint8_t* _d);
uint32_t Pack_EEGR1A_j1939v8_5(const EEGR1A_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC12_j1939v8_5(EEC12_t* _m, const uint8_t* _d);
uint32_t Pack_EEC12_j1939v8_5(const EEC12_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DSS_j1939v8_5(DSS_t* _m, const uint8_t* _d);
uint32_t Pack_DSS_j1939v8_5(const DSS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DSC_j1939v8_5(DSC_t* _m, const uint8_t* _d);
uint32_t Pack_DSC_j1939v8_5(const DSC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_NSSR_j1939v8_5(NSSR_t* _m, const uint8_t* _d);
uint32_t Pack_NSSR_j1939v8_5(const NSSR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EPSI_j1939v8_5(EPSI_t* _m, const uint8_t* _d);
uint32_t Pack_EPSI_j1939v8_5(const EPSI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_XCP_ID_j1939v8_5(XCP_ID_t* _m, const uint8_t* _d);
uint32_t Pack_XCP_ID_j1939v8_5(const XCP_ID_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1P1I_j1939v8_5(AT1P1I_t* _m, const uint8_t* _d);
uint32_t Pack_AT1P1I_j1939v8_5(const AT1P1I_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1DPF2S5_j1939v8_5(AT1DPF2S5_t* _m, const uint8_t* _d);
uint32_t Pack_AT1DPF2S5_j1939v8_5(const AT1DPF2S5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1DPF2S4_j1939v8_5(AT1DPF2S4_t* _m, const uint8_t* _d);
uint32_t Pack_AT1DPF2S4_j1939v8_5(const AT1DPF2S4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1DPF2S3_j1939v8_5(AT1DPF2S3_t* _m, const uint8_t* _d);
uint32_t Pack_AT1DPF2S3_j1939v8_5(const AT1DPF2S3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1DPF1S5_j1939v8_5(AT1DPF1S5_t* _m, const uint8_t* _d);
uint32_t Pack_AT1DPF1S5_j1939v8_5(const AT1DPF1S5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1DPF1S4_j1939v8_5(AT1DPF1S4_t* _m, const uint8_t* _d);
uint32_t Pack_AT1DPF1S4_j1939v8_5(const AT1DPF1S4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1DPF1S3_j1939v8_5(AT1DPF1S3_t* _m, const uint8_t* _d);
uint32_t Pack_AT1DPF1S3_j1939v8_5(const AT1DPF1S3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CCVS3_j1939v8_5(CCVS3_t* _m, const uint8_t* _d);
uint32_t Pack_CCVS3_j1939v8_5(const CCVS3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2AC3_j1939v8_5(AT2AC3_t* _m, const uint8_t* _d);
uint32_t Pack_AT2AC3_j1939v8_5(const AT2AC3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1AC3_j1939v8_5(AT1AC3_t* _m, const uint8_t* _d);
uint32_t Pack_AT1AC3_j1939v8_5(const AT1AC3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFL_P12_j1939v8_5(EFL_P12_t* _m, const uint8_t* _d);
uint32_t Pack_EFL_P12_j1939v8_5(const EFL_P12_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DPFC2_j1939v8_5(DPFC2_t* _m, const uint8_t* _d);
uint32_t Pack_DPFC2_j1939v8_5(const DPFC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LFE2_j1939v8_5(LFE2_t* _m, const uint8_t* _d);
uint32_t Pack_LFE2_j1939v8_5(const LFE2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SFS_j1939v8_5(SFS_t* _m, const uint8_t* _d);
uint32_t Pack_SFS_j1939v8_5(const SFS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFP_j1939v8_5(EFP_t* _m, const uint8_t* _d);
uint32_t Pack_EFP_j1939v8_5(const EFP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_HOP_j1939v8_5(HOP_t* _m, const uint8_t* _d);
uint32_t Pack_HOP_j1939v8_5(const HOP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VLS2_j1939v8_5(VLS2_t* _m, const uint8_t* _d);
uint32_t Pack_VLS2_j1939v8_5(const VLS2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EC3_j1939v8_5(EC3_t* _m, const uint8_t* _d);
uint32_t Pack_EC3_j1939v8_5(const EC3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_IVAC_j1939v8_5(IVAC_t* _m, const uint8_t* _d);
uint32_t Pack_IVAC_j1939v8_5(const IVAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ARMSWIMC_j1939v8_5(ARMSWIMC_t* _m, const uint8_t* _d);
uint32_t Pack_ARMSWIMC_j1939v8_5(const ARMSWIMC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AFT2NAI_j1939v8_5(AFT2NAI_t* _m, const uint8_t* _d);
uint32_t Pack_AFT2NAI_j1939v8_5(const AFT2NAI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AFT1NAI_j1939v8_5(AFT1NAI_t* _m, const uint8_t* _d);
uint32_t Pack_AFT1NAI_j1939v8_5(const AFT1NAI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2WUDOC_j1939v8_5(AT2WUDOC_t* _m, const uint8_t* _d);
uint32_t Pack_AT2WUDOC_j1939v8_5(const AT2WUDOC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFS2_j1939v8_5(EFS2_t* _m, const uint8_t* _d);
uint32_t Pack_EFS2_j1939v8_5(const EFS2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETWAI_j1939v8_5(ETWAI_t* _m, const uint8_t* _d);
uint32_t Pack_ETWAI_j1939v8_5(const ETWAI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFTVI1_j1939v8_5(EFTVI1_t* _m, const uint8_t* _d);
uint32_t Pack_EFTVI1_j1939v8_5(const EFTVI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETCBI_j1939v8_5(ETCBI_t* _m, const uint8_t* _d);
uint32_t Pack_ETCBI_j1939v8_5(const ETCBI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CAC2_j1939v8_5(CAC2_t* _m, const uint8_t* _d);
uint32_t Pack_CAC2_j1939v8_5(const CAC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CAC2P_j1939v8_5(CAC2P_t* _m, const uint8_t* _d);
uint32_t Pack_CAC2P_j1939v8_5(const CAC2P_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CAC1_j1939v8_5(CAC1_t* _m, const uint8_t* _d);
uint32_t Pack_CAC1_j1939v8_5(const CAC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CAC1P_j1939v8_5(CAC1P_t* _m, const uint8_t* _d);
uint32_t Pack_CAC1P_j1939v8_5(const CAC1P_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DPF2S2_j1939v8_5(DPF2S2_t* _m, const uint8_t* _d);
uint32_t Pack_DPF2S2_j1939v8_5(const DPF2S2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DPF1S2_j1939v8_5(DPF1S2_t* _m, const uint8_t* _d);
uint32_t Pack_DPF1S2_j1939v8_5(const DPF1S2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ET5_j1939v8_5(ET5_t* _m, const uint8_t* _d);
uint32_t Pack_ET5_j1939v8_5(const ET5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LVDS_j1939v8_5(LVDS_t* _m, const uint8_t* _d);
uint32_t Pack_LVDS_j1939v8_5(const LVDS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AISO_j1939v8_5(AISO_t* _m, const uint8_t* _d);
uint32_t Pack_AISO_j1939v8_5(const AISO_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_IOS_j1939v8_5(IOS_t* _m, const uint8_t* _d);
uint32_t Pack_IOS_j1939v8_5(const IOS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DLCD2_j1939v8_5(DLCD2_t* _m, const uint8_t* _d);
uint32_t Pack_DLCD2_j1939v8_5(const DLCD2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DLCD1_j1939v8_5(DLCD1_t* _m, const uint8_t* _d);
uint32_t Pack_DLCD1_j1939v8_5(const DLCD1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DLCC2_j1939v8_5(DLCC2_t* _m, const uint8_t* _d);
uint32_t Pack_DLCC2_j1939v8_5(const DLCC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DLCC1_j1939v8_5(DLCC1_t* _m, const uint8_t* _d);
uint32_t Pack_DLCC1_j1939v8_5(const DLCC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_HRLFC_j1939v8_5(HRLFC_t* _m, const uint8_t* _d);
uint32_t Pack_HRLFC_j1939v8_5(const HRLFC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_MSI1_j1939v8_5(MSI1_t* _m, const uint8_t* _d);
uint32_t Pack_MSI1_j1939v8_5(const MSI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_MSCI_j1939v8_5(MSCI_t* _m, const uint8_t* _d);
uint32_t Pack_MSCI_j1939v8_5(const MSCI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BCH2_j1939v8_5(BCH2_t* _m, const uint8_t* _d);
uint32_t Pack_BCH2_j1939v8_5(const BCH2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BCH1_j1939v8_5(BCH1_t* _m, const uint8_t* _d);
uint32_t Pack_BCH1_j1939v8_5(const BCH1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1WUDOC_j1939v8_5(AT1WUDOC_t* _m, const uint8_t* _d);
uint32_t Pack_AT1WUDOC_j1939v8_5(const AT1WUDOC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DPF2S_j1939v8_5(DPF2S_t* _m, const uint8_t* _d);
uint32_t Pack_DPF2S_j1939v8_5(const DPF2S_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DPF1S_j1939v8_5(DPF1S_t* _m, const uint8_t* _d);
uint32_t Pack_DPF1S_j1939v8_5(const DPF1S_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ATDT2_j1939v8_5(ATDT2_t* _m, const uint8_t* _d);
uint32_t Pack_ATDT2_j1939v8_5(const ATDT2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ATDT1_j1939v8_5(ATDT1_t* _m, const uint8_t* _d);
uint32_t Pack_ATDT1_j1939v8_5(const ATDT1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2DOC_j1939v8_5(A2DOC_t* _m, const uint8_t* _d);
uint32_t Pack_A2DOC_j1939v8_5(const A2DOC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1DOC_j1939v8_5(A1DOC_t* _m, const uint8_t* _d);
uint32_t Pack_A1DOC_j1939v8_5(const A1DOC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2GOC_j1939v8_5(A2GOC_t* _m, const uint8_t* _d);
uint32_t Pack_A2GOC_j1939v8_5(const A2GOC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1GOC_j1939v8_5(A1GOC_t* _m, const uint8_t* _d);
uint32_t Pack_A1GOC_j1939v8_5(const A1GOC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FD2_j1939v8_5(FD2_t* _m, const uint8_t* _d);
uint32_t Pack_FD2_j1939v8_5(const FD2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TBD_j1939v8_5(TBD_t* _m, const uint8_t* _d);
uint32_t Pack_TBD_j1939v8_5(const TBD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2DEFSI_j1939v8_5(A2DEFSI_t* _m, const uint8_t* _d);
uint32_t Pack_A2DEFSI_j1939v8_5(const A2DEFSI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2SCRRT2I_j1939v8_5(A2SCRRT2I_t* _m, const uint8_t* _d);
uint32_t Pack_A2SCRRT2I_j1939v8_5(const A2SCRRT2I_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2DEFT1I1_j1939v8_5(A2DEFT1I1_t* _m, const uint8_t* _d);
uint32_t Pack_A2DEFT1I1_j1939v8_5(const A2DEFT1I1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2DEFI1_j1939v8_5(A2DEFI1_t* _m, const uint8_t* _d);
uint32_t Pack_A2DEFI1_j1939v8_5(const A2DEFI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2SCREGT1_j1939v8_5(A2SCREGT1_t* _m, const uint8_t* _d);
uint32_t Pack_A2SCREGT1_j1939v8_5(const A2SCREGT1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2SCREGP_j1939v8_5(A2SCREGP_t* _m, const uint8_t* _d);
uint32_t Pack_A2SCREGP_j1939v8_5(const A2SCREGP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A2SCRDSI2_j1939v8_5(A2SCRDSI2_t* _m, const uint8_t* _d);
uint32_t Pack_A2SCRDSI2_j1939v8_5(const A2SCRDSI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1DEFSI_j1939v8_5(A1DEFSI_t* _m, const uint8_t* _d);
uint32_t Pack_A1DEFSI_j1939v8_5(const A1DEFSI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1SCRRT2I_j1939v8_5(A1SCRRT2I_t* _m, const uint8_t* _d);
uint32_t Pack_A1SCRRT2I_j1939v8_5(const A1SCRRT2I_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1SCREGP_j1939v8_5(A1SCREGP_t* _m, const uint8_t* _d);
uint32_t Pack_A1SCREGP_j1939v8_5(const A1SCREGP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1SCRDSR2_j1939v8_5(A1SCRDSR2_t* _m, const uint8_t* _d);
uint32_t Pack_A1SCRDSR2_j1939v8_5(const A1SCRDSR2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1SCRDSI2_j1939v8_5(A1SCRDSI2_t* _m, const uint8_t* _d);
uint32_t Pack_A1SCRDSI2_j1939v8_5(const A1SCRDSI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ICC_j1939v8_5(ICC_t* _m, const uint8_t* _d);
uint32_t Pack_ICC_j1939v8_5(const ICC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_MSSC_j1939v8_5(MSSC_t* _m, const uint8_t* _d);
uint32_t Pack_MSSC_j1939v8_5(const MSSC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2FC2_j1939v8_5(AT2FC2_t* _m, const uint8_t* _d);
uint32_t Pack_AT2FC2_j1939v8_5(const AT2FC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2TWC_j1939v8_5(AT2TWC_t* _m, const uint8_t* _d);
uint32_t Pack_AT2TWC_j1939v8_5(const AT2TWC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1TWC_j1939v8_5(AT1TWC_t* _m, const uint8_t* _d);
uint32_t Pack_AT1TWC_j1939v8_5(const AT1TWC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_O2FT2_j1939v8_5(O2FT2_t* _m, const uint8_t* _d);
uint32_t Pack_O2FT2_j1939v8_5(const O2FT2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_O2FT1_j1939v8_5(O2FT1_t* _m, const uint8_t* _d);
uint32_t Pack_O2FT1_j1939v8_5(const O2FT1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM211_j1939v8_5(GPM211_t* _m, const uint8_t* _d);
uint32_t Pack_GPM211_j1939v8_5(const GPM211_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM210_j1939v8_5(GPM210_t* _m, const uint8_t* _d);
uint32_t Pack_GPM210_j1939v8_5(const GPM210_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM29_j1939v8_5(GPM29_t* _m, const uint8_t* _d);
uint32_t Pack_GPM29_j1939v8_5(const GPM29_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM28_j1939v8_5(GPM28_t* _m, const uint8_t* _d);
uint32_t Pack_GPM28_j1939v8_5(const GPM28_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM27_j1939v8_5(GPM27_t* _m, const uint8_t* _d);
uint32_t Pack_GPM27_j1939v8_5(const GPM27_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM26_j1939v8_5(GPM26_t* _m, const uint8_t* _d);
uint32_t Pack_GPM26_j1939v8_5(const GPM26_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM19_j1939v8_5(GPM19_t* _m, const uint8_t* _d);
uint32_t Pack_GPM19_j1939v8_5(const GPM19_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM40_j1939v8_5(DM40_t* _m, const uint8_t* _d);
uint32_t Pack_DM40_j1939v8_5(const DM40_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM39_j1939v8_5(DM39_t* _m, const uint8_t* _d);
uint32_t Pack_DM39_j1939v8_5(const DM39_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM38_j1939v8_5(DM38_t* _m, const uint8_t* _d);
uint32_t Pack_DM38_j1939v8_5(const DM38_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM37_j1939v8_5(DM37_t* _m, const uint8_t* _d);
uint32_t Pack_DM37_j1939v8_5(const DM37_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM36_j1939v8_5(DM36_t* _m, const uint8_t* _d);
uint32_t Pack_DM36_j1939v8_5(const DM36_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1FC2_j1939v8_5(AT1FC2_t* _m, const uint8_t* _d);
uint32_t Pack_AT1FC2_j1939v8_5(const AT1FC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ET4_j1939v8_5(ET4_t* _m, const uint8_t* _d);
uint32_t Pack_ET4_j1939v8_5(const ET4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ZNVW_j1939v8_5(ZNVW_t* _m, const uint8_t* _d);
uint32_t Pack_ZNVW_j1939v8_5(const ZNVW_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AAGW_j1939v8_5(AAGW_t* _m, const uint8_t* _d);
uint32_t Pack_AAGW_j1939v8_5(const AAGW_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2AC2_j1939v8_5(AT2AC2_t* _m, const uint8_t* _d);
uint32_t Pack_AT2AC2_j1939v8_5(const AT2AC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1AC2_j1939v8_5(AT1AC2_t* _m, const uint8_t* _d);
uint32_t Pack_AT1AC2_j1939v8_5(const AT1AC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1SCRSI1_j1939v8_5(A1SCRSI1_t* _m, const uint8_t* _d);
uint32_t Pack_A1SCRSI1_j1939v8_5(const A1SCRSI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC8_j1939v8_5(EEC8_t* _m, const uint8_t* _d);
uint32_t Pack_EEC8_j1939v8_5(const EEC8_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DRC_j1939v8_5(DRC_t* _m, const uint8_t* _d);
uint32_t Pack_DRC_j1939v8_5(const DRC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BSA_j1939v8_5(BSA_t* _m, const uint8_t* _d);
uint32_t Pack_BSA_j1939v8_5(const BSA_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESV6_j1939v8_5(ESV6_t* _m, const uint8_t* _d);
uint32_t Pack_ESV6_j1939v8_5(const ESV6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESV5_j1939v8_5(ESV5_t* _m, const uint8_t* _d);
uint32_t Pack_ESV5_j1939v8_5(const ESV5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESV4_j1939v8_5(ESV4_t* _m, const uint8_t* _d);
uint32_t Pack_ESV4_j1939v8_5(const ESV4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESV3_j1939v8_5(ESV3_t* _m, const uint8_t* _d);
uint32_t Pack_ESV3_j1939v8_5(const ESV3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESV2_j1939v8_5(ESV2_t* _m, const uint8_t* _d);
uint32_t Pack_ESV2_j1939v8_5(const ESV2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESV1_j1939v8_5(ESV1_t* _m, const uint8_t* _d);
uint32_t Pack_ESV1_j1939v8_5(const ESV1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2S1_j1939v8_5(AT2S1_t* _m, const uint8_t* _d);
uint32_t Pack_AT2S1_j1939v8_5(const AT2S1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1S1_j1939v8_5(AT1S1_t* _m, const uint8_t* _d);
uint32_t Pack_AT1S1_j1939v8_5(const AT1S1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DPFC1_j1939v8_5(DPFC1_t* _m, const uint8_t* _d);
uint32_t Pack_DPFC1_j1939v8_5(const DPFC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FMS1_j1939v8_5(FMS1_t* _m, const uint8_t* _d);
uint32_t Pack_FMS1_j1939v8_5(const FMS1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AFSS_j1939v8_5(AFSS_t* _m, const uint8_t* _d);
uint32_t Pack_AFSS_j1939v8_5(const AFSS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EC2_j1939v8_5(EC2_t* _m, const uint8_t* _d);
uint32_t Pack_EC2_j1939v8_5(const EC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TCI_j1939v8_5(TCI_t* _m, const uint8_t* _d);
uint32_t Pack_TCI_j1939v8_5(const TCI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFL_P9_j1939v8_5(EFL_P9_t* _m, const uint8_t* _d);
uint32_t Pack_EFL_P9_j1939v8_5(const EFL_P9_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFL_P8_j1939v8_5(EFL_P8_t* _m, const uint8_t* _d);
uint32_t Pack_EFL_P8_j1939v8_5(const EFL_P8_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFL_P7_j1939v8_5(EFL_P7_t* _m, const uint8_t* _d);
uint32_t Pack_EFL_P7_j1939v8_5(const EFL_P7_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFL_P6_j1939v8_5(EFL_P6_t* _m, const uint8_t* _d);
uint32_t Pack_EFL_P6_j1939v8_5(const EFL_P6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFL_P5_j1939v8_5(EFL_P5_t* _m, const uint8_t* _d);
uint32_t Pack_EFL_P5_j1939v8_5(const EFL_P5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VDS2_j1939v8_5(VDS2_t* _m, const uint8_t* _d);
uint32_t Pack_VDS2_j1939v8_5(const VDS2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2GP_j1939v8_5(AT2GP_t* _m, const uint8_t* _d);
uint32_t Pack_AT2GP_j1939v8_5(const AT2GP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1GP_j1939v8_5(AT1GP_t* _m, const uint8_t* _d);
uint32_t Pack_AT1GP_j1939v8_5(const AT1GP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_UTACER_j1939v8_5(UTACER_t* _m, const uint8_t* _d);
uint32_t Pack_UTACER_j1939v8_5(const UTACER_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GTACER_j1939v8_5(GTACER_t* _m, const uint8_t* _d);
uint32_t Pack_GTACER_j1939v8_5(const GTACER_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GTACPP_j1939v8_5(GTACPP_t* _m, const uint8_t* _d);
uint32_t Pack_GTACPP_j1939v8_5(const GTACPP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ACS_j1939v8_5(ACS_t* _m, const uint8_t* _d);
uint32_t Pack_ACS_j1939v8_5(const ACS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC7_j1939v8_5(EEC7_t* _m, const uint8_t* _d);
uint32_t Pack_EEC7_j1939v8_5(const EEC7_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TRF2_j1939v8_5(TRF2_t* _m, const uint8_t* _d);
uint32_t Pack_TRF2_j1939v8_5(const TRF2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LFI2_j1939v8_5(LFI2_t* _m, const uint8_t* _d);
uint32_t Pack_LFI2_j1939v8_5(const LFI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LFI3_j1939v8_5(LFI3_t* _m, const uint8_t* _d);
uint32_t Pack_LFI3_j1939v8_5(const LFI3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1HI1_j1939v8_5(AT1HI1_t* _m, const uint8_t* _d);
uint32_t Pack_AT1HI1_j1939v8_5(const AT1HI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2HI1_j1939v8_5(AT2HI1_t* _m, const uint8_t* _d);
uint32_t Pack_AT2HI1_j1939v8_5(const AT2HI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EBS24_j1939v8_5(EBS24_t* _m, const uint8_t* _d);
uint32_t Pack_EBS24_j1939v8_5(const EBS24_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_A1DEFI1_j1939v8_5(A1DEFI1_t* _m, const uint8_t* _d);
uint32_t Pack_A1DEFI1_j1939v8_5(const A1DEFI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SEP2_j1939v8_5(SEP2_t* _m, const uint8_t* _d);
uint32_t Pack_SEP2_j1939v8_5(const SEP2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SEP1_j1939v8_5(SEP1_t* _m, const uint8_t* _d);
uint32_t Pack_SEP1_j1939v8_5(const SEP1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2AC1_j1939v8_5(AT2AC1_t* _m, const uint8_t* _d);
uint32_t Pack_AT2AC1_j1939v8_5(const AT2AC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1AC1_j1939v8_5(AT1AC1_t* _m, const uint8_t* _d);
uint32_t Pack_AT1AC1_j1939v8_5(const AT1AC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2FC1_j1939v8_5(AT2FC1_t* _m, const uint8_t* _d);
uint32_t Pack_AT2FC1_j1939v8_5(const AT2FC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1FC1_j1939v8_5(AT1FC1_t* _m, const uint8_t* _d);
uint32_t Pack_AT1FC1_j1939v8_5(const AT1FC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PTODE_j1939v8_5(PTODE_t* _m, const uint8_t* _d);
uint32_t Pack_PTODE_j1939v8_5(const PTODE_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DC2_j1939v8_5(DC2_t* _m, const uint8_t* _d);
uint32_t Pack_DC2_j1939v8_5(const DC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_WCM2_j1939v8_5(WCM2_t* _m, const uint8_t* _d);
uint32_t Pack_WCM2_j1939v8_5(const WCM2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_WCM1_j1939v8_5(WCM1_t* _m, const uint8_t* _d);
uint32_t Pack_WCM1_j1939v8_5(const WCM1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFL_P4_j1939v8_5(EFL_P4_t* _m, const uint8_t* _d);
uint32_t Pack_EFL_P4_j1939v8_5(const EFL_P4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RCMS_j1939v8_5(RCMS_t* _m, const uint8_t* _d);
uint32_t Pack_RCMS_j1939v8_5(const RCMS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFI_j1939v8_5(EFI_t* _m, const uint8_t* _d);
uint32_t Pack_EFI_j1939v8_5(const EFI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FWSS2_j1939v8_5(FWSS2_t* _m, const uint8_t* _d);
uint32_t Pack_FWSS2_j1939v8_5(const FWSS2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2IMG_j1939v8_5(AT2IMG_t* _m, const uint8_t* _d);
uint32_t Pack_AT2IMG_j1939v8_5(const AT2IMG_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2OG2_j1939v8_5(AT2OG2_t* _m, const uint8_t* _d);
uint32_t Pack_AT2OG2_j1939v8_5(const AT2OG2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT2IG2_j1939v8_5(AT2IG2_t* _m, const uint8_t* _d);
uint32_t Pack_AT2IG2_j1939v8_5(const AT2IG2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1IMG_j1939v8_5(AT1IMG_t* _m, const uint8_t* _d);
uint32_t Pack_AT1IMG_j1939v8_5(const AT1IMG_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1OG2_j1939v8_5(AT1OG2_t* _m, const uint8_t* _d);
uint32_t Pack_AT1OG2_j1939v8_5(const AT1OG2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1IG2_j1939v8_5(AT1IG2_t* _m, const uint8_t* _d);
uint32_t Pack_AT1IG2_j1939v8_5(const AT1IG2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM26_j1939v8_5(DM26_t* _m, const uint8_t* _d);
uint32_t Pack_DM26_j1939v8_5(const DM26_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TPRI_j1939v8_5(TPRI_t* _m, const uint8_t* _d);
uint32_t Pack_TPRI_j1939v8_5(const TPRI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TR6_j1939v8_5(TR6_t* _m, const uint8_t* _d);
uint32_t Pack_TR6_j1939v8_5(const TR6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TR5_j1939v8_5(TR5_t* _m, const uint8_t* _d);
uint32_t Pack_TR5_j1939v8_5(const TR5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TR3_j1939v8_5(TR3_t* _m, const uint8_t* _d);
uint32_t Pack_TR3_j1939v8_5(const TR3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TR1_j1939v8_5(TR1_t* _m, const uint8_t* _d);
uint32_t Pack_TR1_j1939v8_5(const TR1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TR2_j1939v8_5(TR2_t* _m, const uint8_t* _d);
uint32_t Pack_TR2_j1939v8_5(const TR2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TR7_j1939v8_5(TR7_t* _m, const uint8_t* _d);
uint32_t Pack_TR7_j1939v8_5(const TR7_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFL_P3_j1939v8_5(EFL_P3_t* _m, const uint8_t* _d);
uint32_t Pack_EFL_P3_j1939v8_5(const EFL_P3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC14_j1939v8_5(EEC14_t* _m, const uint8_t* _d);
uint32_t Pack_EEC14_j1939v8_5(const EEC14_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC15_j1939v8_5(EEC15_t* _m, const uint8_t* _d);
uint32_t Pack_EEC15_j1939v8_5(const EEC15_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EBC5_j1939v8_5(EBC5_t* _m, const uint8_t* _d);
uint32_t Pack_EBC5_j1939v8_5(const EBC5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECUID_j1939v8_5(ECUID_t* _m, const uint8_t* _d);
uint32_t Pack_ECUID_j1939v8_5(const ECUID_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CSA_j1939v8_5(CSA_t* _m, const uint8_t* _d);
uint32_t Pack_CSA_j1939v8_5(const CSA_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_OHCSS_j1939v8_5(OHCSS_t* _m, const uint8_t* _d);
uint32_t Pack_OHCSS_j1939v8_5(const OHCSS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ISCS_j1939v8_5(ISCS_t* _m, const uint8_t* _d);
uint32_t Pack_ISCS_j1939v8_5(const ISCS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ISC_j1939v8_5(ISC_t* _m, const uint8_t* _d);
uint32_t Pack_ISC_j1939v8_5(const ISC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_OHECS_j1939v8_5(OHECS_t* _m, const uint8_t* _d);
uint32_t Pack_OHECS_j1939v8_5(const OHECS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_OWW_j1939v8_5(OWW_t* _m, const uint8_t* _d);
uint32_t Pack_OWW_j1939v8_5(const OWW_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_WSMM_j1939v8_5(WSMM_t* _m, const uint8_t* _d);
uint32_t Pack_WSMM_j1939v8_5(const WSMM_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_WSM_j1939v8_5(WSM_t* _m, const uint8_t* _d);
uint32_t Pack_WSM_j1939v8_5(const WSM_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_IC2_j1939v8_5(IC2_t* _m, const uint8_t* _d);
uint32_t Pack_IC2_j1939v8_5(const IC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EP_j1939v8_5(EP_t* _m, const uint8_t* _d);
uint32_t Pack_EP_j1939v8_5(const EP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TCI6_j1939v8_5(TCI6_t* _m, const uint8_t* _d);
uint32_t Pack_TCI6_j1939v8_5(const TCI6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CM3_j1939v8_5(CM3_t* _m, const uint8_t* _d);
uint32_t Pack_CM3_j1939v8_5(const CM3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC5_j1939v8_5(EEC5_t* _m, const uint8_t* _d);
uint32_t Pack_EEC5_j1939v8_5(const EEC5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_MCI_j1939v8_5(MCI_t* _m, const uint8_t* _d);
uint32_t Pack_MCI_j1939v8_5(const MCI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_MAM11_j1939v8_5(MAM11_t* _m, const uint8_t* _d);
uint32_t Pack_MAM11_j1939v8_5(const MAM11_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_MAM21_j1939v8_5(MAM21_t* _m, const uint8_t* _d);
uint32_t Pack_MAM21_j1939v8_5(const MAM21_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AMB2_j1939v8_5(AMB2_t* _m, const uint8_t* _d);
uint32_t Pack_AMB2_j1939v8_5(const AMB2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CACI_j1939v8_5(CACI_t* _m, const uint8_t* _d);
uint32_t Pack_CACI_j1939v8_5(const CACI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SPR_j1939v8_5(SPR_t* _m, const uint8_t* _d);
uint32_t Pack_SPR_j1939v8_5(const SPR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EOAC_j1939v8_5(EOAC_t* _m, const uint8_t* _d);
uint32_t Pack_EOAC_j1939v8_5(const EOAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EPD_j1939v8_5(EPD_t* _m, const uint8_t* _d);
uint32_t Pack_EPD_j1939v8_5(const EPD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_MVS_j1939v8_5(MVS_t* _m, const uint8_t* _d);
uint32_t Pack_MVS_j1939v8_5(const MVS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ET_j1939v8_5(ET_t* _m, const uint8_t* _d);
uint32_t Pack_ET_j1939v8_5(const ET_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RTF_j1939v8_5(RTF_t* _m, const uint8_t* _d);
uint32_t Pack_RTF_j1939v8_5(const RTF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TFR_j1939v8_5(TFR_t* _m, const uint8_t* _d);
uint32_t Pack_TFR_j1939v8_5(const TFR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_IRCR_j1939v8_5(IRCR_t* _m, const uint8_t* _d);
uint32_t Pack_IRCR_j1939v8_5(const IRCR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_IRC_j1939v8_5(IRC_t* _m, const uint8_t* _d);
uint32_t Pack_IRC_j1939v8_5(const IRC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_WSMEM_j1939v8_5(WSMEM_t* _m, const uint8_t* _d);
uint32_t Pack_WSMEM_j1939v8_5(const WSMEM_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_WSMSTR_j1939v8_5(WSMSTR_t* _m, const uint8_t* _d);
uint32_t Pack_WSMSTR_j1939v8_5(const WSMSTR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RESRR_j1939v8_5(RESRR_t* _m, const uint8_t* _d);
uint32_t Pack_RESRR_j1939v8_5(const RESRR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LC_j1939v8_5(LC_t* _m, const uint8_t* _d);
uint32_t Pack_LC_j1939v8_5(const LC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV00EF_j1939v8_5(AV00EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV00EF_j1939v8_5(const AV00EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV01EF_j1939v8_5(AV01EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV01EF_j1939v8_5(const AV01EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV02EF_j1939v8_5(AV02EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV02EF_j1939v8_5(const AV02EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV03EF_j1939v8_5(AV03EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV03EF_j1939v8_5(const AV03EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV04EF_j1939v8_5(AV04EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV04EF_j1939v8_5(const AV04EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV05EF_j1939v8_5(AV05EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV05EF_j1939v8_5(const AV05EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV06EF_j1939v8_5(AV06EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV06EF_j1939v8_5(const AV06EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV07EF_j1939v8_5(AV07EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV07EF_j1939v8_5(const AV07EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV08EF_j1939v8_5(AV08EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV08EF_j1939v8_5(const AV08EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV09EF_j1939v8_5(AV09EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV09EF_j1939v8_5(const AV09EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV10EF_j1939v8_5(AV10EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV10EF_j1939v8_5(const AV10EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV11EF_j1939v8_5(AV11EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV11EF_j1939v8_5(const AV11EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV12EF_j1939v8_5(AV12EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV12EF_j1939v8_5(const AV12EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV13EF_j1939v8_5(AV13EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV13EF_j1939v8_5(const AV13EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV14EF_j1939v8_5(AV14EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV14EF_j1939v8_5(const AV14EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV15EF_j1939v8_5(AV15EF_t* _m, const uint8_t* _d);
uint32_t Pack_AV15EF_j1939v8_5(const AV15EF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV00MF_j1939v8_5(AV00MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV00MF_j1939v8_5(const AV00MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV01MF_j1939v8_5(AV01MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV01MF_j1939v8_5(const AV01MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV02MF_j1939v8_5(AV02MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV02MF_j1939v8_5(const AV02MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV03MF_j1939v8_5(AV03MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV03MF_j1939v8_5(const AV03MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV04MF_j1939v8_5(AV04MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV04MF_j1939v8_5(const AV04MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV05MF_j1939v8_5(AV05MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV05MF_j1939v8_5(const AV05MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV06MF_j1939v8_5(AV06MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV06MF_j1939v8_5(const AV06MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV07MF_j1939v8_5(AV07MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV07MF_j1939v8_5(const AV07MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV08MF_j1939v8_5(AV08MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV08MF_j1939v8_5(const AV08MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV09MF_j1939v8_5(AV09MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV09MF_j1939v8_5(const AV09MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV10MF_j1939v8_5(AV10MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV10MF_j1939v8_5(const AV10MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV11MF_j1939v8_5(AV11MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV11MF_j1939v8_5(const AV11MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV12MF_j1939v8_5(AV12MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV12MF_j1939v8_5(const AV12MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV13MF_j1939v8_5(AV13MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV13MF_j1939v8_5(const AV13MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV14MF_j1939v8_5(AV14MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV14MF_j1939v8_5(const AV14MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV15MF_j1939v8_5(AV15MF_t* _m, const uint8_t* _d);
uint32_t Pack_AV15MF_j1939v8_5(const AV15MF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV00C_j1939v8_5(AV00C_t* _m, const uint8_t* _d);
uint32_t Pack_AV00C_j1939v8_5(const AV00C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV01C_j1939v8_5(AV01C_t* _m, const uint8_t* _d);
uint32_t Pack_AV01C_j1939v8_5(const AV01C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV02C_j1939v8_5(AV02C_t* _m, const uint8_t* _d);
uint32_t Pack_AV02C_j1939v8_5(const AV02C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV03C_j1939v8_5(AV03C_t* _m, const uint8_t* _d);
uint32_t Pack_AV03C_j1939v8_5(const AV03C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV04C_j1939v8_5(AV04C_t* _m, const uint8_t* _d);
uint32_t Pack_AV04C_j1939v8_5(const AV04C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV05C_j1939v8_5(AV05C_t* _m, const uint8_t* _d);
uint32_t Pack_AV05C_j1939v8_5(const AV05C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV06C_j1939v8_5(AV06C_t* _m, const uint8_t* _d);
uint32_t Pack_AV06C_j1939v8_5(const AV06C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV07C_j1939v8_5(AV07C_t* _m, const uint8_t* _d);
uint32_t Pack_AV07C_j1939v8_5(const AV07C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV08C_j1939v8_5(AV08C_t* _m, const uint8_t* _d);
uint32_t Pack_AV08C_j1939v8_5(const AV08C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV09C_j1939v8_5(AV09C_t* _m, const uint8_t* _d);
uint32_t Pack_AV09C_j1939v8_5(const AV09C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV10C_j1939v8_5(AV10C_t* _m, const uint8_t* _d);
uint32_t Pack_AV10C_j1939v8_5(const AV10C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV11C_j1939v8_5(AV11C_t* _m, const uint8_t* _d);
uint32_t Pack_AV11C_j1939v8_5(const AV11C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV12C_j1939v8_5(AV12C_t* _m, const uint8_t* _d);
uint32_t Pack_AV12C_j1939v8_5(const AV12C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV13C_j1939v8_5(AV13C_t* _m, const uint8_t* _d);
uint32_t Pack_AV13C_j1939v8_5(const AV13C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV14C_j1939v8_5(AV14C_t* _m, const uint8_t* _d);
uint32_t Pack_AV14C_j1939v8_5(const AV14C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AV15C_j1939v8_5(AV15C_t* _m, const uint8_t* _d);
uint32_t Pack_AV15C_j1939v8_5(const AV15C_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LD_j1939v8_5(LD_t* _m, const uint8_t* _d);
uint32_t Pack_LD_j1939v8_5(const LD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_HPTOC_j1939v8_5(HPTOC_t* _m, const uint8_t* _d);
uint32_t Pack_HPTOC_j1939v8_5(const HPTOC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RPTO_j1939v8_5(RPTO_t* _m, const uint8_t* _d);
uint32_t Pack_RPTO_j1939v8_5(const RPTO_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FPTO_j1939v8_5(FPTO_t* _m, const uint8_t* _d);
uint32_t Pack_FPTO_j1939v8_5(const FPTO_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RHS_j1939v8_5(RHS_t* _m, const uint8_t* _d);
uint32_t Pack_RHS_j1939v8_5(const RHS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FHS_j1939v8_5(FHS_t* _m, const uint8_t* _d);
uint32_t Pack_FHS_j1939v8_5(const FHS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_MP_j1939v8_5(MP_t* _m, const uint8_t* _d);
uint32_t Pack_MP_j1939v8_5(const MP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_WBSD_j1939v8_5(WBSD_t* _m, const uint8_t* _d);
uint32_t Pack_WBSD_j1939v8_5(const WBSD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GBSD_j1939v8_5(GBSD_t* _m, const uint8_t* _d);
uint32_t Pack_GBSD_j1939v8_5(const GBSD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETC7_j1939v8_5(ETC7_t* _m, const uint8_t* _d);
uint32_t Pack_ETC7_j1939v8_5(const ETC7_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TCFG2_j1939v8_5(TCFG2_t* _m, const uint8_t* _d);
uint32_t Pack_TCFG2_j1939v8_5(const TCFG2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ML_j1939v8_5(ML_t* _m, const uint8_t* _d);
uint32_t Pack_ML_j1939v8_5(const ML_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DC1_j1939v8_5(DC1_t* _m, const uint8_t* _d);
uint32_t Pack_DC1_j1939v8_5(const DC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VDC1_j1939v8_5(VDC1_t* _m, const uint8_t* _d);
uint32_t Pack_VDC1_j1939v8_5(const VDC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BT1_j1939v8_5(BT1_t* _m, const uint8_t* _d);
uint32_t Pack_BT1_j1939v8_5(const BT1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ACC2_j1939v8_5(ACC2_t* _m, const uint8_t* _d);
uint32_t Pack_ACC2_j1939v8_5(const ACC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RTC1_j1939v8_5(RTC1_t* _m, const uint8_t* _d);
uint32_t Pack_RTC1_j1939v8_5(const RTC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ECT1_j1939v8_5(ECT1_t* _m, const uint8_t* _d);
uint32_t Pack_ECT1_j1939v8_5(const ECT1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GFD_j1939v8_5(GFD_t* _m, const uint8_t* _d);
uint32_t Pack_GFD_j1939v8_5(const GFD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT1T1I1_j1939v8_5(AT1T1I1_t* _m, const uint8_t* _d);
uint32_t Pack_AT1T1I1_j1939v8_5(const AT1T1I1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ASC4_j1939v8_5(ASC4_t* _m, const uint8_t* _d);
uint32_t Pack_ASC4_j1939v8_5(const ASC4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ASC3_j1939v8_5(ASC3_t* _m, const uint8_t* _d);
uint32_t Pack_ASC3_j1939v8_5(const ASC3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FLI2_j1939v8_5(FLI2_t* _m, const uint8_t* _d);
uint32_t Pack_FLI2_j1939v8_5(const FLI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RGE22_j1939v8_5(RGE22_t* _m, const uint8_t* _d);
uint32_t Pack_RGE22_j1939v8_5(const RGE22_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM12_j1939v8_5(GPM12_t* _m, const uint8_t* _d);
uint32_t Pack_GPM12_j1939v8_5(const GPM12_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RGE23_j1939v8_5(RGE23_t* _m, const uint8_t* _d);
uint32_t Pack_RGE23_j1939v8_5(const RGE23_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM13_j1939v8_5(GPM13_t* _m, const uint8_t* _d);
uint32_t Pack_GPM13_j1939v8_5(const GPM13_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM23_j1939v8_5(GPM23_t* _m, const uint8_t* _d);
uint32_t Pack_GPM23_j1939v8_5(const GPM23_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM14_j1939v8_5(GPM14_t* _m, const uint8_t* _d);
uint32_t Pack_GPM14_j1939v8_5(const GPM14_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM24_j1939v8_5(GPM24_t* _m, const uint8_t* _d);
uint32_t Pack_GPM24_j1939v8_5(const GPM24_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM15_j1939v8_5(GPM15_t* _m, const uint8_t* _d);
uint32_t Pack_GPM15_j1939v8_5(const GPM15_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM25_j1939v8_5(GPM25_t* _m, const uint8_t* _d);
uint32_t Pack_GPM25_j1939v8_5(const GPM25_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM16_j1939v8_5(GPM16_t* _m, const uint8_t* _d);
uint32_t Pack_GPM16_j1939v8_5(const GPM16_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BM_j1939v8_5(BM_t* _m, const uint8_t* _d);
uint32_t Pack_BM_j1939v8_5(const BM_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CCC_j1939v8_5(CCC_t* _m, const uint8_t* _d);
uint32_t Pack_CCC_j1939v8_5(const CCC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VF_j1939v8_5(VF_t* _m, const uint8_t* _d);
uint32_t Pack_VF_j1939v8_5(const VF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ET3_j1939v8_5(ET3_t* _m, const uint8_t* _d);
uint32_t Pack_ET3_j1939v8_5(const ET3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFS_j1939v8_5(EFS_t* _m, const uint8_t* _d);
uint32_t Pack_EFS_j1939v8_5(const EFS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DI_j1939v8_5(DI_t* _m, const uint8_t* _d);
uint32_t Pack_DI_j1939v8_5(const DI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_HTR_j1939v8_5(HTR_t* _m, const uint8_t* _d);
uint32_t Pack_HTR_j1939v8_5(const HTR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CVW_j1939v8_5(CVW_t* _m, const uint8_t* _d);
uint32_t Pack_CVW_j1939v8_5(const CVW_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VEP2_j1939v8_5(VEP2_t* _m, const uint8_t* _d);
uint32_t Pack_VEP2_j1939v8_5(const VEP2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SP2_j1939v8_5(SP2_t* _m, const uint8_t* _d);
uint32_t Pack_SP2_j1939v8_5(const SP2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETH_j1939v8_5(ETH_t* _m, const uint8_t* _d);
uint32_t Pack_ETH_j1939v8_5(const ETH_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EAC_j1939v8_5(EAC_t* _m, const uint8_t* _d);
uint32_t Pack_EAC_j1939v8_5(const EAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TCW_j1939v8_5(TCW_t* _m, const uint8_t* _d);
uint32_t Pack_TCW_j1939v8_5(const TCW_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TCI5_j1939v8_5(TCI5_t* _m, const uint8_t* _d);
uint32_t Pack_TCI5_j1939v8_5(const TCI5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TCI4_j1939v8_5(TCI4_t* _m, const uint8_t* _d);
uint32_t Pack_TCI4_j1939v8_5(const TCI4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TCI3_j1939v8_5(TCI3_t* _m, const uint8_t* _d);
uint32_t Pack_TCI3_j1939v8_5(const TCI3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TCI2_j1939v8_5(TCI2_t* _m, const uint8_t* _d);
uint32_t Pack_TCI2_j1939v8_5(const TCI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_MBT3_j1939v8_5(MBT3_t* _m, const uint8_t* _d);
uint32_t Pack_MBT3_j1939v8_5(const MBT3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_MBT2_j1939v8_5(MBT2_t* _m, const uint8_t* _d);
uint32_t Pack_MBT2_j1939v8_5(const MBT2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_MBT1_j1939v8_5(MBT1_t* _m, const uint8_t* _d);
uint32_t Pack_MBT1_j1939v8_5(const MBT1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EPT4_j1939v8_5(EPT4_t* _m, const uint8_t* _d);
uint32_t Pack_EPT4_j1939v8_5(const EPT4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ET2_j1939v8_5(ET2_t* _m, const uint8_t* _d);
uint32_t Pack_ET2_j1939v8_5(const ET2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_IMT1_j1939v8_5(IMT1_t* _m, const uint8_t* _d);
uint32_t Pack_IMT1_j1939v8_5(const IMT1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EBC3_j1939v8_5(EBC3_t* _m, const uint8_t* _d);
uint32_t Pack_EBC3_j1939v8_5(const EBC3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AIR1_j1939v8_5(AIR1_t* _m, const uint8_t* _d);
uint32_t Pack_AIR1_j1939v8_5(const AIR1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FD1_j1939v8_5(FD1_t* _m, const uint8_t* _d);
uint32_t Pack_FD1_j1939v8_5(const FD1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EBC2_j1939v8_5(EBC2_t* _m, const uint8_t* _d);
uint32_t Pack_EBC2_j1939v8_5(const EBC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SERV_j1939v8_5(SERV_t* _m, const uint8_t* _d);
uint32_t Pack_SERV_j1939v8_5(const SERV_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VDHR_j1939v8_5(VDHR_t* _m, const uint8_t* _d);
uint32_t Pack_VDHR_j1939v8_5(const VDHR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EBS22_j1939v8_5(EBS22_t* _m, const uint8_t* _d);
uint32_t Pack_EBS22_j1939v8_5(const EBS22_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EBS23_j1939v8_5(EBS23_t* _m, const uint8_t* _d);
uint32_t Pack_EBS23_j1939v8_5(const EBS23_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GPM22_j1939v8_5(GPM22_t* _m, const uint8_t* _d);
uint32_t Pack_GPM22_j1939v8_5(const GPM22_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EBS12_j1939v8_5(EBS12_t* _m, const uint8_t* _d);
uint32_t Pack_EBS12_j1939v8_5(const EBS12_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM05_j1939v8_5(DM05_t* _m, const uint8_t* _d);
uint32_t Pack_DM05_j1939v8_5(const DM05_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM08_j1939v8_5(DM08_t* _m, const uint8_t* _d);
uint32_t Pack_DM08_j1939v8_5(const DM08_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM09_j1939v8_5(DM09_t* _m, const uint8_t* _d);
uint32_t Pack_DM09_j1939v8_5(const DM09_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DM10_j1939v8_5(DM10_t* _m, const uint8_t* _d);
uint32_t Pack_DM10_j1939v8_5(const DM10_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AS_j1939v8_5(AS_t* _m, const uint8_t* _d);
uint32_t Pack_AS_j1939v8_5(const AS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_HSI1_j1939v8_5(HSI1_t* _m, const uint8_t* _d);
uint32_t Pack_HSI1_j1939v8_5(const HSI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AUXIO1_j1939v8_5(AUXIO1_t* _m, const uint8_t* _d);
uint32_t Pack_AUXIO1_j1939v8_5(const AUXIO1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SOFT_j1939v8_5(SOFT_t* _m, const uint8_t* _d);
uint32_t Pack_SOFT_j1939v8_5(const SOFT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFL_P2_j1939v8_5(EFL_P2_t* _m, const uint8_t* _d);
uint32_t Pack_EFL_P2_j1939v8_5(const EFL_P2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
//uint32_t Unpack_IO_j1939v8_5(IO_t* _m, const uint8_t* _d);
//uint32_t Pack_IO_j1939v8_5(const IO_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TC_j1939v8_5(TC_t* _m, const uint8_t* _d);
uint32_t Pack_TC_j1939v8_5(const TC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AIR2_j1939v8_5(AIR2_t* _m, const uint8_t* _d);
uint32_t Pack_AIR2_j1939v8_5(const AIR2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC3_j1939v8_5(EEC3_t* _m, const uint8_t* _d);
uint32_t Pack_EEC3_j1939v8_5(const EEC3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VD_j1939v8_5(VD_t* _m, const uint8_t* _d);
uint32_t Pack_VD_j1939v8_5(const VD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TCFG_j1939v8_5(TCFG_t* _m, const uint8_t* _d);
uint32_t Pack_TCFG_j1939v8_5(const TCFG_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SHUTDN_j1939v8_5(SHUTDN_t* _m, const uint8_t* _d);
uint32_t Pack_SHUTDN_j1939v8_5(const SHUTDN_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_HOURS_j1939v8_5(HOURS_t* _m, const uint8_t* _d);
uint32_t Pack_HOURS_j1939v8_5(const HOURS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TD_j1939v8_5(TD_t* _m, const uint8_t* _d);
uint32_t Pack_TD_j1939v8_5(const TD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VH_j1939v8_5(VH_t* _m, const uint8_t* _d);
uint32_t Pack_VH_j1939v8_5(const VH_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VDS_j1939v8_5(VDS_t* _m, const uint8_t* _d);
uint32_t Pack_VDS_j1939v8_5(const VDS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LFC1_j1939v8_5(LFC1_t* _m, const uint8_t* _d);
uint32_t Pack_LFC1_j1939v8_5(const LFC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VW_j1939v8_5(VW_t* _m, const uint8_t* _d);
uint32_t Pack_VW_j1939v8_5(const VW_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CI_j1939v8_5(CI_t* _m, const uint8_t* _d);
uint32_t Pack_CI_j1939v8_5(const CI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VI_j1939v8_5(VI_t* _m, const uint8_t* _d);
uint32_t Pack_VI_j1939v8_5(const VI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CCSS_j1939v8_5(CCSS_t* _m, const uint8_t* _d);
uint32_t Pack_CCSS_j1939v8_5(const CCSS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ET1_j1939v8_5(ET1_t* _m, const uint8_t* _d);
uint32_t Pack_ET1_j1939v8_5(const ET1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EFL_P1_j1939v8_5(EFL_P1_t* _m, const uint8_t* _d);
uint32_t Pack_EFL_P1_j1939v8_5(const EFL_P1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PTO_j1939v8_5(PTO_t* _m, const uint8_t* _d);
uint32_t Pack_PTO_j1939v8_5(const PTO_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CCVS1_j1939v8_5(CCVS1_t* _m, const uint8_t* _d);
uint32_t Pack_CCVS1_j1939v8_5(const CCVS1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LFE1_j1939v8_5(LFE1_t* _m, const uint8_t* _d);
uint32_t Pack_LFE1_j1939v8_5(const LFE1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VP_j1939v8_5(VP_t* _m, const uint8_t* _d);
uint32_t Pack_VP_j1939v8_5(const VP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TIRE1_j1939v8_5(TIRE1_t* _m, const uint8_t* _d);
uint32_t Pack_TIRE1_j1939v8_5(const TIRE1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AMB_j1939v8_5(AMB_t* _m, const uint8_t* _d);
uint32_t Pack_AMB_j1939v8_5(const AMB_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_IC1_j1939v8_5(IC1_t* _m, const uint8_t* _d);
uint32_t Pack_IC1_j1939v8_5(const IC1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VEP1_j1939v8_5(VEP1_t* _m, const uint8_t* _d);
uint32_t Pack_VEP1_j1939v8_5(const VEP1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TRF1_j1939v8_5(TRF1_t* _m, const uint8_t* _d);
uint32_t Pack_TRF1_j1939v8_5(const TRF1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AI_j1939v8_5(AI_t* _m, const uint8_t* _d);
uint32_t Pack_AI_j1939v8_5(const AI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_B_j1939v8_5(B_t* _m, const uint8_t* _d);
uint32_t Pack_B_j1939v8_5(const B_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RF_j1939v8_5(RF_t* _m, const uint8_t* _d);
uint32_t Pack_RF_j1939v8_5(const RF_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_DD1_j1939v8_5(DD1_t* _m, const uint8_t* _d);
uint32_t Pack_DD1_j1939v8_5(const DD1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AF1_j1939v8_5(AF1_t* _m, const uint8_t* _d);
uint32_t Pack_AF1_j1939v8_5(const AF1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AWPP_j1939v8_5(AWPP_t* _m, const uint8_t* _d);
uint32_t Pack_AWPP_j1939v8_5(const AWPP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_OI_j1939v8_5(OI_t* _m, const uint8_t* _d);
uint32_t Pack_OI_j1939v8_5(const OI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_Hubner_j1939v8_5(Hubner_t* _m, const uint8_t* _d);
uint32_t Pack_Hubner_j1939v8_5(const Hubner_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_PropA2_j1939v8_5(PropA2_t* _m, const uint8_t* _d);
uint32_t Pack_PropA2_j1939v8_5(const PropA2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ATS_j1939v8_5(ATS_t* _m, const uint8_t* _d);
uint32_t Pack_ATS_j1939v8_5(const ATS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ATR_j1939v8_5(ATR_t* _m, const uint8_t* _d);
uint32_t Pack_ATR_j1939v8_5(const ATR_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RESET_j1939v8_5(RESET_t* _m, const uint8_t* _d);
uint32_t Pack_RESET_j1939v8_5(const RESET_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC19_j1939v8_5(EEC19_t* _m, const uint8_t* _d);
uint32_t Pack_EEC19_j1939v8_5(const EEC19_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FSAS_j1939v8_5(FSAS_t* _m, const uint8_t* _d);
uint32_t Pack_FSAS_j1939v8_5(const FSAS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_SCROII4_j1939v8_5(SCROII4_t* _m, const uint8_t* _d);
uint32_t Pack_SCROII4_j1939v8_5(const SCROII4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_BWLN_j1939v8_5(BWLN_t* _m, const uint8_t* _d);
uint32_t Pack_BWLN_j1939v8_5(const BWLN_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_MFEH_j1939v8_5(MFEH_t* _m, const uint8_t* _d);
uint32_t Pack_MFEH_j1939v8_5(const MFEH_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESMR3_j1939v8_5(ESMR3_t* _m, const uint8_t* _d);
uint32_t Pack_ESMR3_j1939v8_5(const ESMR3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESMR2_j1939v8_5(ESMR2_t* _m, const uint8_t* _d);
uint32_t Pack_ESMR2_j1939v8_5(const ESMR2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESMR1_j1939v8_5(ESMR1_t* _m, const uint8_t* _d);
uint32_t Pack_ESMR1_j1939v8_5(const ESMR1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESVMAX6_j1939v8_5(ESVMAX6_t* _m, const uint8_t* _d);
uint32_t Pack_ESVMAX6_j1939v8_5(const ESVMAX6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESVMAX5_j1939v8_5(ESVMAX5_t* _m, const uint8_t* _d);
uint32_t Pack_ESVMAX5_j1939v8_5(const ESVMAX5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESVMAX4_j1939v8_5(ESVMAX4_t* _m, const uint8_t* _d);
uint32_t Pack_ESVMAX4_j1939v8_5(const ESVMAX4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESVMAX3_j1939v8_5(ESVMAX3_t* _m, const uint8_t* _d);
uint32_t Pack_ESVMAX3_j1939v8_5(const ESVMAX3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESVMAX2_j1939v8_5(ESVMAX2_t* _m, const uint8_t* _d);
uint32_t Pack_ESVMAX2_j1939v8_5(const ESVMAX2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESVMAX1_j1939v8_5(ESVMAX1_t* _m, const uint8_t* _d);
uint32_t Pack_ESVMAX1_j1939v8_5(const ESVMAX1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESVMIN6_j1939v8_5(ESVMIN6_t* _m, const uint8_t* _d);
uint32_t Pack_ESVMIN6_j1939v8_5(const ESVMIN6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESVMIN5_j1939v8_5(ESVMIN5_t* _m, const uint8_t* _d);
uint32_t Pack_ESVMIN5_j1939v8_5(const ESVMIN5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESVMIN4_j1939v8_5(ESVMIN4_t* _m, const uint8_t* _d);
uint32_t Pack_ESVMIN4_j1939v8_5(const ESVMIN4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESVMIN3_j1939v8_5(ESVMIN3_t* _m, const uint8_t* _d);
uint32_t Pack_ESVMIN3_j1939v8_5(const ESVMIN3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESVMIN2_j1939v8_5(ESVMIN2_t* _m, const uint8_t* _d);
uint32_t Pack_ESVMIN2_j1939v8_5(const ESVMIN2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ESVMIN1_j1939v8_5(ESVMIN1_t* _m, const uint8_t* _d);
uint32_t Pack_ESVMIN1_j1939v8_5(const ESVMIN1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EICMH_j1939v8_5(EICMH_t* _m, const uint8_t* _d);
uint32_t Pack_EICMH_j1939v8_5(const EICMH_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC11_j1939v8_5(EEC11_t* _m, const uint8_t* _d);
uint32_t Pack_EEC11_j1939v8_5(const EEC11_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EMAC_j1939v8_5(EMAC_t* _m, const uint8_t* _d);
uint32_t Pack_EMAC_j1939v8_5(const EMAC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC10_j1939v8_5(EEC10_t* _m, const uint8_t* _d);
uint32_t Pack_EEC10_j1939v8_5(const EEC10_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EOM_j1939v8_5(EOM_t* _m, const uint8_t* _d);
uint32_t Pack_EOM_j1939v8_5(const EOM_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CSI_j1939v8_5(CSI_t* _m, const uint8_t* _d);
uint32_t Pack_CSI_j1939v8_5(const CSI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ILI_j1939v8_5(ILI_t* _m, const uint8_t* _d);
uint32_t Pack_ILI_j1939v8_5(const ILI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TML_j1939v8_5(TML_t* _m, const uint8_t* _d);
uint32_t Pack_TML_j1939v8_5(const TML_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AGCW_j1939v8_5(AGCW_t* _m, const uint8_t* _d);
uint32_t Pack_AGCW_j1939v8_5(const AGCW_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_J2012_j1939v8_5(J2012_t* _m, const uint8_t* _d);
uint32_t Pack_J2012_j1939v8_5(const J2012_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_VROM_j1939v8_5(VROM_t* _m, const uint8_t* _d);
uint32_t Pack_VROM_j1939v8_5(const VROM_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CMI_j1939v8_5(CMI_t* _m, const uint8_t* _d);
uint32_t Pack_CMI_j1939v8_5(const CMI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FMS_j1939v8_5(FMS_t* _m, const uint8_t* _d);
uint32_t Pack_FMS_j1939v8_5(const FMS_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FWD_j1939v8_5(FWD_t* _m, const uint8_t* _d);
uint32_t Pack_FWD_j1939v8_5(const FWD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TAVG_j1939v8_5(TAVG_t* _m, const uint8_t* _d);
uint32_t Pack_TAVG_j1939v8_5(const TAVG_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AP_j1939v8_5(AP_t* _m, const uint8_t* _d);
uint32_t Pack_AP_j1939v8_5(const AP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TP1_j1939v8_5(TP1_t* _m, const uint8_t* _d);
uint32_t Pack_TP1_j1939v8_5(const TP1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TP2_j1939v8_5(TP2_t* _m, const uint8_t* _d);
uint32_t Pack_TP2_j1939v8_5(const TP2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TP3_j1939v8_5(TP3_t* _m, const uint8_t* _d);
uint32_t Pack_TP3_j1939v8_5(const TP3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CT1_j1939v8_5(CT1_t* _m, const uint8_t* _d);
uint32_t Pack_CT1_j1939v8_5(const CT1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CT2_j1939v8_5(CT2_t* _m, const uint8_t* _d);
uint32_t Pack_CT2_j1939v8_5(const CT2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CT3_j1939v8_5(CT3_t* _m, const uint8_t* _d);
uint32_t Pack_CT3_j1939v8_5(const CT3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CT4_j1939v8_5(CT4_t* _m, const uint8_t* _d);
uint32_t Pack_CT4_j1939v8_5(const CT4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CT5_j1939v8_5(CT5_t* _m, const uint8_t* _d);
uint32_t Pack_CT5_j1939v8_5(const CT5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_CT6_j1939v8_5(CT6_t* _m, const uint8_t* _d);
uint32_t Pack_CT6_j1939v8_5(const CT6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GFI2_j1939v8_5(GFI2_t* _m, const uint8_t* _d);
uint32_t Pack_GFI2_j1939v8_5(const GFI2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_IT1_j1939v8_5(IT1_t* _m, const uint8_t* _d);
uint32_t Pack_IT1_j1939v8_5(const IT1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_IT2_j1939v8_5(IT2_t* _m, const uint8_t* _d);
uint32_t Pack_IT2_j1939v8_5(const IT2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_IT3_j1939v8_5(IT3_t* _m, const uint8_t* _d);
uint32_t Pack_IT3_j1939v8_5(const IT3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_IT4_j1939v8_5(IT4_t* _m, const uint8_t* _d);
uint32_t Pack_IT4_j1939v8_5(const IT4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_IT5_j1939v8_5(IT5_t* _m, const uint8_t* _d);
uint32_t Pack_IT5_j1939v8_5(const IT5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_IT6_j1939v8_5(IT6_t* _m, const uint8_t* _d);
uint32_t Pack_IT6_j1939v8_5(const IT6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ISO1_j1939v8_5(ISO1_t* _m, const uint8_t* _d);
uint32_t Pack_ISO1_j1939v8_5(const ISO1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ISO2_j1939v8_5(ISO2_t* _m, const uint8_t* _d);
uint32_t Pack_ISO2_j1939v8_5(const ISO2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ISO3_j1939v8_5(ISO3_t* _m, const uint8_t* _d);
uint32_t Pack_ISO3_j1939v8_5(const ISO3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GFP_j1939v8_5(GFP_t* _m, const uint8_t* _d);
uint32_t Pack_GFP_j1939v8_5(const GFP_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AAI_j1939v8_5(AAI_t* _m, const uint8_t* _d);
uint32_t Pack_AAI_j1939v8_5(const AAI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_S2_j1939v8_5(S2_t* _m, const uint8_t* _d);
uint32_t Pack_S2_j1939v8_5(const S2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_FL_j1939v8_5(FL_t* _m, const uint8_t* _d);
uint32_t Pack_FL_j1939v8_5(const FL_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EI1_j1939v8_5(EI1_t* _m, const uint8_t* _d);
uint32_t Pack_EI1_j1939v8_5(const EI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EES_j1939v8_5(EES_t* _m, const uint8_t* _d);
uint32_t Pack_EES_j1939v8_5(const EES_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_RBI_j1939v8_5(RBI_t* _m, const uint8_t* _d);
uint32_t Pack_RBI_j1939v8_5(const RBI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TCI1_j1939v8_5(TCI1_t* _m, const uint8_t* _d);
uint32_t Pack_TCI1_j1939v8_5(const TCI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EPT5_j1939v8_5(EPT5_t* _m, const uint8_t* _d);
uint32_t Pack_EPT5_j1939v8_5(const EPT5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EPT3_j1939v8_5(EPT3_t* _m, const uint8_t* _d);
uint32_t Pack_EPT3_j1939v8_5(const EPT3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EPT2_j1939v8_5(EPT2_t* _m, const uint8_t* _d);
uint32_t Pack_EPT2_j1939v8_5(const EPT2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EPT1_j1939v8_5(EPT1_t* _m, const uint8_t* _d);
uint32_t Pack_EPT1_j1939v8_5(const EPT1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_IMT2_j1939v8_5(IMT2_t* _m, const uint8_t* _d);
uint32_t Pack_IMT2_j1939v8_5(const IMT2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AT_j1939v8_5(AT_t* _m, const uint8_t* _d);
uint32_t Pack_AT_j1939v8_5(const AT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ACTL_j1939v8_5(ACTL_t* _m, const uint8_t* _d);
uint32_t Pack_ACTL_j1939v8_5(const ACTL_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EO1_j1939v8_5(EO1_t* _m, const uint8_t* _d);
uint32_t Pack_EO1_j1939v8_5(const EO1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_AF2_j1939v8_5(AF2_t* _m, const uint8_t* _d);
uint32_t Pack_AF2_j1939v8_5(const AF2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETC6_j1939v8_5(ETC6_t* _m, const uint8_t* _d);
uint32_t Pack_ETC6_j1939v8_5(const ETC6_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EBC4_j1939v8_5(EBC4_t* _m, const uint8_t* _d);
uint32_t Pack_EBC4_j1939v8_5(const EBC4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GFC_j1939v8_5(GFC_t* _m, const uint8_t* _d);
uint32_t Pack_GFC_j1939v8_5(const GFC_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EH_j1939v8_5(EH_t* _m, const uint8_t* _d);
uint32_t Pack_EH_j1939v8_5(const EH_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_GFI1_j1939v8_5(GFI1_t* _m, const uint8_t* _d);
uint32_t Pack_GFI1_j1939v8_5(const GFI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_LFI1_j1939v8_5(LFI1_t* _m, const uint8_t* _d);
uint32_t Pack_LFI1_j1939v8_5(const LFI1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TSI_j1939v8_5(TSI_t* _m, const uint8_t* _d);
uint32_t Pack_TSI_j1939v8_5(const TSI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_TVI_j1939v8_5(TVI_t* _m, const uint8_t* _d);
uint32_t Pack_TVI_j1939v8_5(const TVI_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_EEC4_j1939v8_5(EEC4_t* _m, const uint8_t* _d);
uint32_t Pack_EEC4_j1939v8_5(const EEC4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ERC2_j1939v8_5(ERC2_t* _m, const uint8_t* _d);
uint32_t Pack_ERC2_j1939v8_5(const ERC2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETC5_j1939v8_5(ETC5_t* _m, const uint8_t* _d);
uint32_t Pack_ETC5_j1939v8_5(const ETC5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETC4_j1939v8_5(ETC4_t* _m, const uint8_t* _d);
uint32_t Pack_ETC4_j1939v8_5(const ETC4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
uint32_t Unpack_ETC3_j1939v8_5(ETC3_t* _m, const uint8_t* _d);
uint32_t Pack_ETC3_j1939v8_5(const ETC3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);

#ifdef __cplusplus
}
#endif

